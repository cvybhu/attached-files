<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>managed_bytes::operator= (51 samples, 0.11%; -0.00%)</title><rect x="942.6" y="405" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="945.64" y="415.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1,416 samples, 2.99%; -0.01%)</title><rect x="172.3" y="165" width="35.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="175.34" y="175.5" >cl..</text>
</g>
<g >
<title>schema::position (8 samples, 0.02%; +0.01%)</title><rect x="1124.4" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1127.39" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (10 samples, 0.02%; +0.01%)</title><rect x="169.3" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="172.27" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (401 samples, 0.85%; +0.01%)</title><rect x="445.3" y="309" width="10.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="448.30" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (30 samples, 0.06%; +0.02%)</title><rect x="52.2" y="469" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="55.22" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (135 samples, 0.29%; -0.00%)</title><rect x="1115.6" y="373" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1118.61" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (13 samples, 0.03%; +0.01%)</title><rect x="753.0" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="756.03" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (13 samples, 0.03%; +0.01%)</title><rect x="245.0" y="213" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="247.96" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (484 samples, 1.02%; -0.01%)</title><rect x="754.8" y="389" width="12.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="757.77" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (56 samples, 0.12%; +0.00%)</title><rect x="1030.5" y="197" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1033.53" y="207.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (12 samples, 0.03%; -0.00%)</title><rect x="834.9" y="341" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="837.93" y="351.5" ></text>
</g>
<g >
<title>operator new (65 samples, 0.14%; +0.00%)</title><rect x="449.9" y="245" width="1.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="452.89" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (31 samples, 0.07%; +0.01%)</title><rect x="806.3" y="229" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="809.33" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (7 samples, 0.01%; +0.01%)</title><rect x="1154.4" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1157.41" y="463.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.00%)</title><rect x="423.2" y="261" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="426.19" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,190 samples, 4.63%; -0.01%)</title><rect x="169.6" y="197" width="54.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="172.59" y="207.5" >parti..</text>
</g>
<g >
<title>schema::column_at (53 samples, 0.11%; +0.01%)</title><rect x="340.5" y="181" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="343.49" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (40 samples, 0.08%; +0.03%)</title><rect x="1021.6" y="213" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1024.65" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="338.8" y="165" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="341.81" y="175.5" ></text>
</g>
<g >
<title>database::find_schema (223 samples, 0.47%; -0.00%)</title><rect x="842.4" y="373" width="5.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="845.42" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (6 samples, 0.01%; -0.02%)</title><rect x="515.1" y="197" width="0.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="518.05" y="207.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (192 samples, 0.41%; +0.01%)</title><rect x="458.3" y="293" width="4.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="461.33" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (163 samples, 0.34%; +0.00%)</title><rect x="683.4" y="485" width="4.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="686.38" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; -0.01%)</title><rect x="547.9" y="405" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="550.87" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (90 samples, 0.19%; -0.01%)</title><rect x="390.3" y="149" width="2.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="393.32" y="159.5" ></text>
</g>
<g >
<title>database::has_keyspace (140 samples, 0.30%; -0.00%)</title><rect x="859.0" y="421" width="3.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="862.04" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (32 samples, 0.07%; +0.01%)</title><rect x="622.4" y="437" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="625.44" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (23 samples, 0.05%; 0.00%)</title><rect x="886.0" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.97" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (17 samples, 0.04%; +0.01%)</title><rect x="766.1" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="769.08" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (10 samples, 0.02%; +0.01%)</title><rect x="115.3" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="118.26" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="724.1" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="727.13" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (6 samples, 0.01%; +0.01%)</title><rect x="415.2" y="213" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="418.20" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (242 samples, 0.51%; +0.02%)</title><rect x="224.9" y="229" width="6.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="227.87" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.03%; +0.01%)</title><rect x="717.8" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="720.84" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%; +0.02%)</title><rect x="1044.5" y="245" width="2.1" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1047.51" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume (23 samples, 0.05%; +0.02%)</title><rect x="403.1" y="229" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="406.05" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; +0.01%)</title><rect x="653.2" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="656.16" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="654.8" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="657.83" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (130 samples, 0.27%; +0.03%)</title><rect x="392.6" y="149" width="3.2" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="395.57" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (10 samples, 0.02%; +0.01%)</title><rect x="799.5" y="293" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="802.49" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (18 samples, 0.04%; +0.00%)</title><rect x="61.5" y="421" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="64.46" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (6 samples, 0.01%; +0.01%)</title><rect x="874.3" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="877.26" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (25 samples, 0.05%; -0.01%)</title><rect x="492.8" y="197" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="495.84" y="207.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (48 samples, 0.10%; +0.00%)</title><rect x="908.5" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="911.50" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="911.8" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="914.82" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (11 samples, 0.02%; -0.00%)</title><rect x="131.1" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="134.06" y="271.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (8 samples, 0.02%; +0.01%)</title><rect x="536.7" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="539.74" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (7 samples, 0.01%; 0.00%)</title><rect x="416.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="419.13" y="271.5" ></text>
</g>
<g >
<title>operator delete (50 samples, 0.11%; +0.03%)</title><rect x="289.8" y="293" width="1.3" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="292.83" y="303.5" ></text>
</g>
<g >
<title>reader_permit::signal (5 samples, 0.01%; +0.01%)</title><rect x="162.8" y="229" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="165.80" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (90 samples, 0.19%; -0.00%)</title><rect x="159.2" y="197" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="162.18" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,872 samples, 8.19%; -0.03%)</title><rect x="310.0" y="261" width="96.7" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="313.04" y="271.5" >mutation_fr..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (5 samples, 0.01%; -0.00%)</title><rect x="916.4" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="919.44" y="367.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.07%; +0.00%)</title><rect x="502.3" y="293" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="505.35" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (345 samples, 0.73%; -0.01%)</title><rect x="407.2" y="245" width="8.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="410.24" y="255.5" ></text>
</g>
<g >
<title>operator new (55 samples, 0.12%; 0.00%)</title><rect x="545.5" y="405" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.55" y="415.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (73 samples, 0.15%; -0.01%)</title><rect x="155.7" y="213" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="158.69" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (24 samples, 0.05%; -0.02%)</title><rect x="999.0" y="277" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1001.96" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (7 samples, 0.01%; +0.01%)</title><rect x="101.5" y="405" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="104.46" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; -0.02%)</title><rect x="515.3" y="181" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="518.25" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; -0.01%)</title><rect x="1170.8" y="453" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1173.81" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (83 samples, 0.18%; 0.00%)</title><rect x="810.2" y="181" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.23" y="191.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.01%; +0.00%)</title><rect x="761.4" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.39" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (6 samples, 0.01%; +0.00%)</title><rect x="961.7" y="373" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="964.71" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (14 samples, 0.03%; -0.00%)</title><rect x="590.8" y="357" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="593.79" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.01%; +0.01%)</title><rect x="197.9" y="53" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="200.87" y="63.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.03%; +0.01%)</title><rect x="924.1" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="927.12" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (6 samples, 0.01%; +0.01%)</title><rect x="268.0" y="293" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="270.99" y="303.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.01%; +0.00%)</title><rect x="1097.5" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1100.49" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (7 samples, 0.01%; 0.00%)</title><rect x="715.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.89" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (10 samples, 0.02%; -0.01%)</title><rect x="545.1" y="341" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="548.15" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (34 samples, 0.07%; +0.03%)</title><rect x="513.2" y="181" width="0.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="516.18" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (5 samples, 0.01%; -0.01%)</title><rect x="1016.2" y="277" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1019.16" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (686 samples, 1.45%; -0.03%)</title><rect x="563.3" y="341" width="17.1" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="566.29" y="351.5" ></text>
</g>
<g >
<title>operator delete (35 samples, 0.07%; +0.02%)</title><rect x="427.4" y="373" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="430.41" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (368 samples, 0.78%; -0.01%)</title><rect x="473.6" y="293" width="9.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="476.55" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (7 samples, 0.01%; +0.01%)</title><rect x="1039.7" y="229" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1042.69" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (135 samples, 0.29%; +0.01%)</title><rect x="859.1" y="405" width="3.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="862.06" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="367.5" ></text>
</g>
<g >
<title>posix_memalign (149 samples, 0.32%; +0.01%)</title><rect x="194.1" y="53" width="3.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="197.15" y="63.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (267 samples, 0.56%; +0.00%)</title><rect x="1081.0" y="261" width="6.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1084.04" y="271.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (18 samples, 0.04%; -0.04%)</title><rect x="482.3" y="277" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="485.28" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="102.6" y="421" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="105.59" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (148 samples, 0.31%; -0.00%)</title><rect x="762.9" y="309" width="3.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="765.89" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (12 samples, 0.03%; +0.00%)</title><rect x="323.2" y="165" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="326.22" y="175.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (6 samples, 0.01%; +0.00%)</title><rect x="1133.9" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1136.87" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="973.5" y="373" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="976.51" y="383.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (68 samples, 0.14%; +0.01%)</title><rect x="912.0" y="293" width="1.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="914.97" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (80 samples, 0.17%; -0.05%)</title><rect x="638.4" y="485" width="2.0" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="641.38" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (16 samples, 0.03%; -0.01%)</title><rect x="686.4" y="453" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="689.42" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (110 samples, 0.23%; +0.00%)</title><rect x="989.6" y="325" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="992.56" y="335.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.04%; +0.01%)</title><rect x="428.3" y="373" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="431.28" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (6 samples, 0.01%; +0.01%)</title><rect x="457.4" y="293" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="460.35" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (504 samples, 1.07%; +0.01%)</title><rect x="29.4" y="501" width="12.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="32.39" y="511.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (5 samples, 0.01%; +0.00%)</title><rect x="689.8" y="469" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="692.77" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (26 samples, 0.05%; -0.00%)</title><rect x="886.7" y="453" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="889.74" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (5 samples, 0.01%; 0.00%)</title><rect x="494.7" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.66" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (114 samples, 0.24%; 0.00%)</title><rect x="17.2" y="373" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.19" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; 0.00%)</title><rect x="834.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.28" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (105 samples, 0.22%; -0.02%)</title><rect x="859.7" y="389" width="2.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="862.66" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (17 samples, 0.04%; -0.00%)</title><rect x="702.1" y="469" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="705.14" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (21 samples, 0.04%; +0.01%)</title><rect x="458.8" y="277" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="461.75" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (12 samples, 0.03%; -0.01%)</title><rect x="267.5" y="277" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="270.47" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.01%; +0.00%)</title><rect x="407.7" y="229" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="410.72" y="239.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (17 samples, 0.04%; +0.01%)</title><rect x="441.2" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="444.16" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (10 samples, 0.02%; +0.01%)</title><rect x="1146.8" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1149.75" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (11 samples, 0.02%; 0.00%)</title><rect x="460.5" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="463.52" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.03%; -0.00%)</title><rect x="1104.5" y="357" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1107.48" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (465 samples, 0.98%; -0.00%)</title><rect x="64.1" y="437" width="11.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="67.13" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (53 samples, 0.11%; +0.02%)</title><rect x="1160.5" y="453" width="1.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1163.45" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (24 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="245" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.44" y="255.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (24 samples, 0.05%; +0.03%)</title><rect x="1096.9" y="309" width="0.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="1099.89" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (9 samples, 0.02%; -0.01%)</title><rect x="777.2" y="357" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="780.23" y="367.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (6 samples, 0.01%; +0.01%)</title><rect x="1106.3" y="389" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1109.35" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (57 samples, 0.12%; -0.03%)</title><rect x="154.2" y="197" width="1.4" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="157.22" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (85 samples, 0.18%; +0.01%)</title><rect x="874.4" y="373" width="2.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="877.41" y="383.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (16 samples, 0.03%; -0.01%)</title><rect x="1066.4" y="261" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1069.37" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.05%; 0.00%)</title><rect x="699.1" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.10" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (39 samples, 0.08%; +0.00%)</title><rect x="99.7" y="405" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="102.67" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="213" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (32 samples, 0.07%; -0.01%)</title><rect x="903.4" y="405" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="906.41" y="415.5" ></text>
</g>
<g >
<title>query::digester::digester (18 samples, 0.04%; +0.01%)</title><rect x="607.3" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="610.26" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%; +0.01%)</title><rect x="645.2" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="648.19" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (12 samples, 0.03%; +0.02%)</title><rect x="577.6" y="261" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="580.64" y="271.5" ></text>
</g>
<g >
<title>__tls_init (27 samples, 0.06%; +0.02%)</title><rect x="496.0" y="309" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="499.01" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (479 samples, 1.01%; -0.01%)</title><rect x="858.7" y="437" width="11.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="861.69" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (156 samples, 0.33%; +0.01%)</title><rect x="489.6" y="213" width="3.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="492.62" y="223.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (96 samples, 0.20%; -0.02%)</title><rect x="60.2" y="453" width="2.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="63.24" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (180 samples, 0.38%; -0.01%)</title><rect x="193.5" y="69" width="4.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="196.52" y="79.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (66 samples, 0.14%; 0.00%)</title><rect x="15.5" y="373" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (29 samples, 0.06%; +0.01%)</title><rect x="1159.7" y="405" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1162.70" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (25 samples, 0.05%; 0.00%)</title><rect x="1066.2" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1069.20" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (30 samples, 0.06%; +0.02%)</title><rect x="293.5" y="389" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="296.55" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (6 samples, 0.01%; +0.01%)</title><rect x="98.2" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="101.22" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (7 samples, 0.01%; +0.01%)</title><rect x="807.4" y="261" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="810.36" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (10 samples, 0.02%; -0.01%)</title><rect x="421.2" y="261" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="424.19" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (544 samples, 1.15%; -0.02%)</title><rect x="1108.8" y="421" width="13.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1111.77" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (31 samples, 0.07%; -0.00%)</title><rect x="819.7" y="149" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="822.66" y="159.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (46 samples, 0.10%; -0.00%)</title><rect x="37.4" y="421" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="40.43" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.01%; -0.00%)</title><rect x="1169.7" y="469" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1172.69" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (29 samples, 0.06%; -0.00%)</title><rect x="857.9" y="421" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="860.87" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="566.7" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="569.66" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.01%)</title><rect x="940.5" y="325" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="943.52" y="335.5" ></text>
</g>
<g >
<title>database::query (1,043 samples, 2.21%; -0.04%)</title><rect x="1018.0" y="261" width="26.1" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="1021.03" y="271.5" >d..</text>
</g>
<g >
<title>seastar::reactor::do_run (46,317 samples, 97.95%; +0.00%)</title><rect x="22.2" y="533" width="1155.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="25.15" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (13 samples, 0.03%; +0.01%)</title><rect x="277.5" y="341" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="280.52" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (12 samples, 0.03%; +0.01%)</title><rect x="936.8" y="341" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="939.75" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (10 samples, 0.02%; +0.00%)</title><rect x="422.8" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="425.84" y="287.5" ></text>
</g>
<g >
<title>tombstone::apply (6 samples, 0.01%; +0.01%)</title><rect x="400.6" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="403.60" y="223.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (73 samples, 0.15%; +0.00%)</title><rect x="780.0" y="341" width="1.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="783.03" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (51 samples, 0.11%; +0.03%)</title><rect x="644.4" y="485" width="1.2" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="647.37" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; +0.01%)</title><rect x="1054.0" y="197" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1057.04" y="207.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (6 samples, 0.01%; 0.00%)</title><rect x="821.8" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.83" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.03%; -0.00%)</title><rect x="808.5" y="229" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="811.50" y="239.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.01%; 0.00%)</title><rect x="46.3" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.29" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="723.2" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="726.18" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (58 samples, 0.12%; +0.01%)</title><rect x="1112.3" y="373" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1115.26" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (6 samples, 0.01%; +0.01%)</title><rect x="322.6" y="165" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="325.57" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (55 samples, 0.12%; +0.00%)</title><rect x="632.6" y="421" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="635.62" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (48 samples, 0.10%; +0.01%)</title><rect x="912.4" y="277" width="1.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="915.42" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (585 samples, 1.24%; -0.00%)</title><rect x="1151.9" y="485" width="14.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1154.92" y="495.5" ></text>
</g>
<g >
<title>row::external_memory_usage (239 samples, 0.51%; 0.00%)</title><rect x="208.7" y="149" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="211.72" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (15 samples, 0.03%; -0.01%)</title><rect x="229.4" y="133" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="232.41" y="143.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (77 samples, 0.16%; 0.00%)</title><rect x="550.0" y="389" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.99" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (438 samples, 0.93%; -0.02%)</title><rect x="471.9" y="309" width="10.9" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="474.85" y="319.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (18 samples, 0.04%; +0.01%)</title><rect x="168.8" y="197" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="171.82" y="207.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (15 samples, 0.03%; +0.02%)</title><rect x="454.9" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="457.91" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (176 samples, 0.37%; -0.03%)</title><rect x="245.7" y="213" width="4.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="248.68" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="1121.3" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1124.35" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (11 samples, 0.02%; +0.01%)</title><rect x="320.5" y="165" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="323.52" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (14 samples, 0.03%; +0.01%)</title><rect x="237.5" y="245" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="240.52" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (111 samples, 0.23%; -0.01%)</title><rect x="514.4" y="213" width="2.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="517.43" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (10 samples, 0.02%; +0.02%)</title><rect x="903.1" y="389" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="906.14" y="399.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.00%)</title><rect x="908.1" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="911.08" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (270 samples, 0.57%; -0.01%)</title><rect x="701.7" y="485" width="6.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="704.74" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.04%; 0.00%)</title><rect x="868.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.77" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="947.1" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="950.06" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="434.9" y="373" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="437.89" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (49 samples, 0.10%; +0.00%)</title><rect x="810.9" y="149" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="813.95" y="159.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (25 samples, 0.05%; -0.00%)</title><rect x="192.6" y="53" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="195.65" y="63.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (29 samples, 0.06%; +0.02%)</title><rect x="249.3" y="197" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="252.35" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (22 samples, 0.05%; +0.03%)</title><rect x="966.7" y="389" width="0.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="969.72" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.00%)</title><rect x="158.5" y="181" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="161.49" y="191.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="492.4" y="181" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="495.42" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (15 samples, 0.03%; +0.01%)</title><rect x="455.8" y="293" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="458.81" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (43 samples, 0.09%; -0.00%)</title><rect x="76.3" y="453" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="79.31" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (12 samples, 0.03%; +0.00%)</title><rect x="31.2" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="34.19" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (66 samples, 0.14%; 0.00%)</title><rect x="15.5" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; +0.00%)</title><rect x="528.0" y="309" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="531.03" y="319.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; -0.01%)</title><rect x="522.1" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="525.11" y="287.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; -0.01%)</title><rect x="816.7" y="117" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="819.74" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (10 samples, 0.02%; +0.00%)</title><rect x="320.8" y="165" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="323.80" y="175.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (65 samples, 0.14%; 0.00%)</title><rect x="801.2" y="293" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.24" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (27 samples, 0.06%; +0.03%)</title><rect x="1129.0" y="373" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1131.98" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (30 samples, 0.06%; -0.00%)</title><rect x="951.7" y="357" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="954.75" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (86 samples, 0.18%; +0.01%)</title><rect x="318.9" y="181" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="321.90" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (57 samples, 0.12%; 0.00%)</title><rect x="595.8" y="421" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.81" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (65 samples, 0.14%; +0.13%)</title><rect x="763.4" y="261" width="1.7" height="15.0" fill="rgb(255,29,29)" rx="2" ry="2" />
<text  x="766.43" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (10,042 samples, 21.24%; -0.07%)</title><rect x="887.4" y="485" width="250.6" height="15.0" fill="rgb(110,110,255)" rx="2" ry="2" />
<text  x="890.39" y="495.5" >seastar::concrete_execution_stage..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (8 samples, 0.02%; -0.01%)</title><rect x="716.1" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="719.12" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (76 samples, 0.16%; -0.00%)</title><rect x="817.5" y="149" width="1.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="820.49" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.01%)</title><rect x="1130.7" y="421" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1133.73" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (20 samples, 0.04%; +0.02%)</title><rect x="645.7" y="485" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="648.72" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (30 samples, 0.06%; +0.00%)</title><rect x="699.0" y="501" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.02" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (9 samples, 0.02%; -0.00%)</title><rect x="558.4" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="561.37" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (7 samples, 0.01%; -0.00%)</title><rect x="456.2" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="459.23" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (11 samples, 0.02%; +0.00%)</title><rect x="1120.2" y="373" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1123.22" y="383.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (65 samples, 0.14%; -0.00%)</title><rect x="550.1" y="373" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="553.14" y="383.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (6 samples, 0.01%; -0.01%)</title><rect x="399.7" y="181" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="402.71" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (63 samples, 0.13%; -0.01%)</title><rect x="978.2" y="341" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="981.20" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (12 samples, 0.03%; -0.01%)</title><rect x="680.7" y="469" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="683.71" y="479.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (17 samples, 0.04%; -0.01%)</title><rect x="924.1" y="357" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="927.07" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="239.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (5 samples, 0.01%; -0.00%)</title><rect x="508.8" y="245" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="511.81" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (49 samples, 0.10%; +0.01%)</title><rect x="801.5" y="261" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="804.49" y="271.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (129 samples, 0.27%; -0.01%)</title><rect x="246.0" y="197" width="3.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="248.98" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (24 samples, 0.05%; 0.00%)</title><rect x="699.1" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.15" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.02%; +0.01%)</title><rect x="823.2" y="197" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="826.20" y="207.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (112 samples, 0.24%; +0.01%)</title><rect x="539.6" y="293" width="2.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="542.56" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (335 samples, 0.71%; -0.02%)</title><rect x="906.8" y="325" width="8.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="909.80" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="266.5" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="269.52" y="271.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.01%)</title><rect x="683.5" y="469" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="686.45" y="479.5" ></text>
</g>
<g >
<title>operator new (77 samples, 0.16%; 0.00%)</title><rect x="1070.4" y="325" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.36" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (37 samples, 0.08%; -0.01%)</title><rect x="300.7" y="277" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="303.71" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; -0.01%)</title><rect x="529.1" y="325" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="532.05" y="335.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (199 samples, 0.42%; +0.04%)</title><rect x="363.7" y="165" width="5.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="366.75" y="175.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; -0.00%)</title><rect x="665.2" y="453" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="668.21" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="1036.4" y="165" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1039.42" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.03%; 0.00%)</title><rect x="844.5" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.46" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (24 samples, 0.05%; +0.00%)</title><rect x="39.0" y="453" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="42.05" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (6 samples, 0.01%; +0.01%)</title><rect x="430.1" y="389" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="433.05" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.01%; -0.03%)</title><rect x="551.5" y="341" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="554.54" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (10 samples, 0.02%; -0.01%)</title><rect x="269.4" y="325" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="272.44" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (54 samples, 0.11%; -0.00%)</title><rect x="813.0" y="213" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="816.00" y="223.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (265 samples, 0.56%; 0.00%)</title><rect x="741.6" y="421" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.60" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (11 samples, 0.02%; -0.01%)</title><rect x="653.5" y="485" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="656.50" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.03%; +0.01%)</title><rect x="866.0" y="373" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="869.03" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (5 samples, 0.01%; 0.00%)</title><rect x="21.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.93" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (11 samples, 0.02%; 0.00%)</title><rect x="238.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="240.99" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.01%)</title><rect x="603.5" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="606.49" y="415.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (37 samples, 0.08%; +0.00%)</title><rect x="1094.8" y="293" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1097.79" y="303.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (6 samples, 0.01%; 0.00%)</title><rect x="937.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.13" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (12 samples, 0.03%; +0.01%)</title><rect x="859.3" y="389" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="862.34" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (14 samples, 0.03%; -0.01%)</title><rect x="822.6" y="101" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="825.63" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (30 samples, 0.06%; +0.00%)</title><rect x="1149.7" y="469" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1152.72" y="479.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.01%)</title><rect x="157.9" y="197" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="160.91" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::stats (47 samples, 0.10%; +0.04%)</title><rect x="147.0" y="245" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="149.98" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (26 samples, 0.05%; +0.01%)</title><rect x="880.8" y="437" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="883.83" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (27 samples, 0.06%; -0.00%)</title><rect x="1123.6" y="421" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1126.59" y="431.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.00%)</title><rect x="619.4" y="421" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="622.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (5 samples, 0.01%; +0.01%)</title><rect x="230.5" y="197" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="233.53" y="207.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (19 samples, 0.04%; -0.02%)</title><rect x="847.3" y="293" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="850.28" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (43 samples, 0.09%; +0.04%)</title><rect x="151.4" y="229" width="1.1" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="154.45" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="610.4" y="389" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="613.38" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (13 samples, 0.03%; -0.00%)</title><rect x="21.0" y="405" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.96" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (9 samples, 0.02%; -0.02%)</title><rect x="916.8" y="357" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="919.79" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (8 samples, 0.02%; +0.01%)</title><rect x="402.4" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="405.40" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (12 samples, 0.03%; 0.00%)</title><rect x="818.2" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.21" y="127.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1,054 samples, 2.23%; -0.01%)</title><rect x="497.6" y="325" width="26.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="500.61" y="335.5" >m..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.01%)</title><rect x="823.6" y="197" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="826.58" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (264 samples, 0.56%; 0.00%)</title><rect x="15.1" y="501" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.09" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (5 samples, 0.01%; -0.01%)</title><rect x="229.6" y="117" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="232.61" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (88 samples, 0.19%; -0.00%)</title><rect x="449.3" y="261" width="2.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="452.34" y="271.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (275 samples, 0.58%; 0.00%)</title><rect x="14.9" y="565" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.94" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.02%; +0.00%)</title><rect x="1037.6" y="197" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1040.65" y="207.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (10 samples, 0.02%; +0.00%)</title><rect x="792.5" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="795.48" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (98 samples, 0.21%; -0.01%)</title><rect x="950.1" y="405" width="2.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="953.05" y="415.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (16 samples, 0.03%; +0.03%)</title><rect x="941.3" y="389" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="944.29" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.03%; +0.00%)</title><rect x="428.4" y="357" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="431.38" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (5 samples, 0.01%; -0.01%)</title><rect x="16.6" y="245" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="19.61" y="255.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (23 samples, 0.05%; -0.01%)</title><rect x="1047.2" y="261" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1050.20" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="827.5" y="229" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="830.47" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; 0.00%)</title><rect x="773.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.52" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="583.2" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="586.15" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (21 samples, 0.04%; 0.00%)</title><rect x="235.0" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="238.02" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (5 samples, 0.01%; +0.00%)</title><rect x="728.5" y="501" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="731.55" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (8 samples, 0.02%; +0.00%)</title><rect x="670.0" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="672.98" y="479.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (6 samples, 0.01%; +0.01%)</title><rect x="956.1" y="341" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="959.09" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (8 samples, 0.02%; +0.01%)</title><rect x="424.7" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="427.66" y="367.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; -0.01%)</title><rect x="687.9" y="485" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="690.94" y="495.5" ></text>
</g>
<g >
<title>make_combined_reader (927 samples, 1.96%; -0.06%)</title><rect x="442.3" y="341" width="23.2" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="445.33" y="351.5" >m..</text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (9 samples, 0.02%; -0.01%)</title><rect x="500.5" y="309" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="503.48" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (98 samples, 0.21%; +0.00%)</title><rect x="755.6" y="373" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="758.60" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (12 samples, 0.03%; +0.01%)</title><rect x="255.9" y="245" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="258.86" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (40 samples, 0.08%; +0.00%)</title><rect x="1139.0" y="325" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.04" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (25 samples, 0.05%; -0.01%)</title><rect x="220.5" y="149" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="223.45" y="159.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="464.3" y="325" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="467.27" y="335.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (47 samples, 0.10%; +0.01%)</title><rect x="367.5" y="149" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="370.54" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (102 samples, 0.22%; -0.01%)</title><rect x="201.2" y="117" width="2.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="204.16" y="127.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (61 samples, 0.13%; +0.01%)</title><rect x="230.9" y="229" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="233.91" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (57 samples, 0.12%; -0.00%)</title><rect x="202.3" y="101" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="205.28" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (18 samples, 0.04%; +0.00%)</title><rect x="883.2" y="485" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="886.22" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (10 samples, 0.02%; -0.01%)</title><rect x="463.9" y="325" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="466.94" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (8 samples, 0.02%; +0.00%)</title><rect x="955.1" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="958.14" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="773.3" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="776.34" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.01%; +0.00%)</title><rect x="721.3" y="453" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="724.28" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.03%; 0.00%)</title><rect x="15.5" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="319.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (129 samples, 0.27%; -0.03%)</title><rect x="1185.6" y="613" width="3.2" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="1188.56" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.01%; -0.01%)</title><rect x="202.0" y="101" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="205.03" y="111.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (11 samples, 0.02%; +0.01%)</title><rect x="901.0" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="904.01" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (396 samples, 0.84%; +0.04%)</title><rect x="1028.5" y="213" width="9.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1031.49" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (32 samples, 0.07%; +0.01%)</title><rect x="277.0" y="357" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="280.05" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (20 samples, 0.04%; -0.00%)</title><rect x="1108.1" y="389" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1111.10" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (29 samples, 0.06%; +0.01%)</title><rect x="660.5" y="437" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="663.52" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (49 samples, 0.10%; 0.00%)</title><rect x="775.6" y="357" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.59" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3,627 samples, 7.67%; -0.01%)</title><rect x="148.3" y="261" width="90.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="151.33" y="271.5" >partition_..</text>
</g>
<g >
<title>compound_type&lt; (96 samples, 0.20%; +0.01%)</title><rect x="938.6" y="357" width="2.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="941.57" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (24 samples, 0.05%; +0.02%)</title><rect x="1042.6" y="213" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1045.64" y="223.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (45 samples, 0.10%; +0.01%)</title><rect x="232.4" y="229" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="235.43" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (12 samples, 0.03%; +0.02%)</title><rect x="953.4" y="405" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="956.40" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (9 samples, 0.02%; -0.00%)</title><rect x="331.5" y="197" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="334.48" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (46 samples, 0.10%; -0.03%)</title><rect x="243.8" y="165" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="246.81" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (22 samples, 0.05%; +0.00%)</title><rect x="337.6" y="181" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="340.62" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (13 samples, 0.03%; +0.01%)</title><rect x="726.9" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="729.90" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (37 samples, 0.08%; +0.01%)</title><rect x="1154.6" y="453" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1157.59" y="463.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (7 samples, 0.01%; 0.00%)</title><rect x="1163.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.45" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (25 samples, 0.05%; +0.01%)</title><rect x="141.2" y="261" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="144.22" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (27 samples, 0.06%; +0.03%)</title><rect x="697.8" y="485" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="700.80" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (81 samples, 0.17%; +0.00%)</title><rect x="826.2" y="261" width="2.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="829.22" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (17 samples, 0.04%; +0.01%)</title><rect x="705.1" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="708.14" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,311 samples, 4.89%; -0.00%)</title><rect x="167.2" y="229" width="57.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="170.20" y="239.5" >partit..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (8 samples, 0.02%; 0.00%)</title><rect x="415.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="418.48" y="223.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (12 samples, 0.03%; +0.01%)</title><rect x="926.7" y="341" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="929.72" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (8 samples, 0.02%; +0.00%)</title><rect x="661.0" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="664.04" y="415.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; 0.00%)</title><rect x="528.0" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.00" y="335.5" ></text>
</g>
<g >
<title>operator new (70 samples, 0.15%; 0.00%)</title><rect x="1040.8" y="213" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1043.82" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (17 samples, 0.04%; +0.02%)</title><rect x="231.3" y="213" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="234.28" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (5 samples, 0.01%; -0.01%)</title><rect x="904.0" y="389" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="907.01" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (60 samples, 0.13%; -0.01%)</title><rect x="362.1" y="165" width="1.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="365.10" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (37 samples, 0.08%; +0.05%)</title><rect x="1141.2" y="501" width="0.9" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="1144.21" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (7 samples, 0.01%; 0.00%)</title><rect x="1115.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.03" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.03%)</title><rect x="94.6" y="421" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="97.62" y="431.5" ></text>
</g>
<g >
<title>row::row (5 samples, 0.01%; +0.00%)</title><rect x="216.8" y="165" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="219.78" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; -0.00%)</title><rect x="712.9" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="715.87" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (8 samples, 0.02%; 0.00%)</title><rect x="1133.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.15" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (20 samples, 0.04%; -0.01%)</title><rect x="516.5" y="197" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="519.47" y="207.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (195 samples, 0.41%; -0.00%)</title><rect x="703.3" y="469" width="4.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="706.32" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (41 samples, 0.09%; +0.04%)</title><rect x="601.6" y="389" width="1.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="604.57" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (9 samples, 0.02%; +0.01%)</title><rect x="62.3" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="65.26" y="415.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (9 samples, 0.02%; -0.02%)</title><rect x="340.3" y="181" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="343.26" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (153 samples, 0.32%; -0.00%)</title><rect x="650.0" y="501" width="3.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="653.01" y="511.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (36 samples, 0.08%; +0.01%)</title><rect x="852.4" y="421" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="855.38" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (77 samples, 0.16%; +0.01%)</title><rect x="303.3" y="293" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="306.25" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (31 samples, 0.07%; -0.01%)</title><rect x="726.0" y="501" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="728.98" y="511.5" ></text>
</g>
<g >
<title>free (10 samples, 0.02%; +0.01%)</title><rect x="409.1" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="412.09" y="207.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (910 samples, 1.92%; -0.03%)</title><rect x="500.9" y="309" width="22.7" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="503.85" y="319.5" >s..</text>
</g>
<g >
<title>schema_registry::get_entry (140 samples, 0.30%; -0.01%)</title><rect x="980.1" y="341" width="3.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="983.07" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.01%)</title><rect x="1150.6" y="485" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1153.57" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (10 samples, 0.02%; +0.01%)</title><rect x="98.4" y="405" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="101.42" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (50 samples, 0.11%; +0.05%)</title><rect x="312.8" y="213" width="1.2" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="315.76" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (5 samples, 0.01%; +0.00%)</title><rect x="242.0" y="213" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="244.99" y="223.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (15 samples, 0.03%; +0.00%)</title><rect x="16.4" y="261" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="19.41" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (264 samples, 0.56%; 0.00%)</title><rect x="760.1" y="357" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.12" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (6 samples, 0.01%; +0.01%)</title><rect x="1062.4" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1065.40" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (6 samples, 0.01%; -0.00%)</title><rect x="883.8" y="485" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="886.82" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.01%; -0.00%)</title><rect x="850.7" y="405" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="853.65" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (64 samples, 0.14%; +0.01%)</title><rect x="990.2" y="277" width="1.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="993.18" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (57 samples, 0.12%; +0.00%)</title><rect x="961.4" y="405" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="964.43" y="415.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (7 samples, 0.01%; -0.01%)</title><rect x="524.0" y="325" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="527.01" y="335.5" ></text>
</g>
<g >
<title>__start_context (283 samples, 0.60%; 0.00%)</title><rect x="14.7" y="613" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (3,098 samples, 6.55%; -0.01%)</title><rect x="773.8" y="421" width="77.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="776.84" y="431.5" >cql3::st..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.03%; +0.00%)</title><rect x="694.7" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.66" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1,774 samples, 3.75%; +0.01%)</title><rect x="331.0" y="213" width="44.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="333.95" y="223.5" >quer..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (9 samples, 0.02%; +0.00%)</title><rect x="1039.9" y="229" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1042.87" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (49 samples, 0.10%; -0.00%)</title><rect x="18.0" y="325" width="1.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.04" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (35 samples, 0.07%; +0.01%)</title><rect x="948.4" y="389" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="951.36" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (10 samples, 0.02%; -0.00%)</title><rect x="635.5" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="638.54" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (22 samples, 0.05%; -0.01%)</title><rect x="358.6" y="149" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="361.58" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; -0.01%)</title><rect x="54.3" y="469" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="57.27" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (10 samples, 0.02%; +0.01%)</title><rect x="914.1" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="917.07" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (126 samples, 0.27%; -0.01%)</title><rect x="732.2" y="469" width="3.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="735.16" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="759.3" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="762.32" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (10 samples, 0.02%; +0.01%)</title><rect x="227.0" y="181" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="230.01" y="191.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (10 samples, 0.02%; -0.01%)</title><rect x="570.6" y="293" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="573.60" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (12 samples, 0.03%; -0.00%)</title><rect x="593.8" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="596.81" y="399.5" ></text>
</g>
<g >
<title>operator new (72 samples, 0.15%; 0.00%)</title><rect x="962.9" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="965.85" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (572 samples, 1.21%; -0.03%)</title><rect x="905.5" y="373" width="14.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="908.46" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (31 samples, 0.07%; -0.01%)</title><rect x="124.3" y="309" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="127.32" y="319.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; -0.01%)</title><rect x="1170.4" y="453" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1173.41" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13 samples, 0.03%; +0.00%)</title><rect x="1094.0" y="293" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1097.05" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (89 samples, 0.19%; +0.01%)</title><rect x="1172.4" y="437" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1175.41" y="447.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; -0.00%)</title><rect x="499.2" y="293" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="502.20" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="1124.1" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1127.14" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="18.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.34" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (65 samples, 0.14%; 0.00%)</title><rect x="1014.5" y="245" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1017.49" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (126 samples, 0.27%; -0.00%)</title><rect x="1001.9" y="293" width="3.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1004.91" y="303.5" ></text>
</g>
<g >
<title>[unknown] (487 samples, 1.03%; 0.00%)</title><rect x="10.0" y="629" width="12.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (76 samples, 0.16%; -0.00%)</title><rect x="739.7" y="421" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="742.68" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (315 samples, 0.67%; +0.01%)</title><rect x="260.6" y="309" width="7.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="263.55" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (17 samples, 0.04%; -0.01%)</title><rect x="757.3" y="293" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="760.30" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (19 samples, 0.04%; +0.00%)</title><rect x="787.4" y="357" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="790.37" y="367.5" ></text>
</g>
<g >
<title>query::querier&lt; (18,308 samples, 38.72%; +0.05%)</title><rect x="102.9" y="437" width="456.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="105.88" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (43 samples, 0.09%; +0.01%)</title><rect x="488.5" y="213" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="491.55" y="223.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1,999 samples, 4.23%; -0.02%)</title><rect x="789.3" y="389" width="49.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="792.26" y="399.5" >std::..</text>
</g>
<g >
<title>std::type_info::operator== (9 samples, 0.02%; +0.01%)</title><rect x="1076.2" y="293" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1079.15" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="32.7" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="35.66" y="495.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (11 samples, 0.02%; -0.00%)</title><rect x="954.0" y="389" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="957.04" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (14 samples, 0.03%; +0.01%)</title><rect x="49.1" y="485" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="52.13" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (15 samples, 0.03%; +0.00%)</title><rect x="229.8" y="165" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="232.78" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (26 samples, 0.05%; -0.00%)</title><rect x="215.0" y="149" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="217.96" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (15 samples, 0.03%; -0.00%)</title><rect x="828.4" y="261" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="831.44" y="271.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (42 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.02" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (34 samples, 0.07%; +0.00%)</title><rect x="796.2" y="309" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="799.18" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (26 samples, 0.05%; -0.00%)</title><rect x="1031.3" y="181" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1034.28" y="191.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (615 samples, 1.30%; +0.01%)</title><rect x="128.5" y="293" width="15.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="131.51" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (20 samples, 0.04%; +0.01%)</title><rect x="53.6" y="469" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="56.62" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (141 samples, 0.30%; -0.00%)</title><rect x="1073.2" y="309" width="3.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1076.23" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.01%; -0.00%)</title><rect x="139.3" y="213" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="142.32" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (5 samples, 0.01%; +0.00%)</title><rect x="22.4" y="517" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="25.40" y="527.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (32 samples, 0.07%; +0.02%)</title><rect x="818.5" y="117" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="821.51" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (7 samples, 0.01%; +0.00%)</title><rect x="327.1" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="330.06" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (21 samples, 0.04%; -0.02%)</title><rect x="337.1" y="181" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="340.09" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (33 samples, 0.07%; +0.01%)</title><rect x="786.5" y="341" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="789.54" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (9 samples, 0.02%; +0.01%)</title><rect x="1112.9" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1115.94" y="367.5" ></text>
</g>
<g >
<title>dht::shard_of (23 samples, 0.05%; +0.01%)</title><rect x="1010.6" y="277" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1013.62" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="134.8" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="137.83" y="255.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (351 samples, 0.74%; +0.00%)</title><rect x="739.5" y="437" width="8.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="742.53" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (28 samples, 0.06%; +0.01%)</title><rect x="1049.9" y="261" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1052.90" y="271.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (37 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.02" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (375 samples, 0.79%; +0.00%)</title><rect x="906.6" y="341" width="9.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="909.60" y="351.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (101 samples, 0.21%; -0.04%)</title><rect x="11.9" y="581" width="2.5" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="14.90" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (15 samples, 0.03%; +0.01%)</title><rect x="309.4" y="245" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="312.42" y="255.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (5 samples, 0.01%; -0.01%)</title><rect x="946.6" y="405" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="949.56" y="415.5" ></text>
</g>
<g >
<title>posix_memalign (7 samples, 0.01%; +0.01%)</title><rect x="193.3" y="69" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="196.35" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.01%; -0.01%)</title><rect x="1105.3" y="389" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1108.33" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (20 samples, 0.04%; +0.01%)</title><rect x="419.7" y="229" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="422.67" y="239.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (13 samples, 0.03%; +0.01%)</title><rect x="1007.4" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1010.35" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (6 samples, 0.01%; -0.02%)</title><rect x="1151.1" y="485" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1154.14" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (201 samples, 0.43%; -0.03%)</title><rect x="225.8" y="213" width="5.0" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="228.82" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (5 samples, 0.01%; -0.01%)</title><rect x="145.0" y="277" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="148.01" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (71 samples, 0.15%; 0.00%)</title><rect x="17.6" y="357" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="367.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (52 samples, 0.11%; +0.01%)</title><rect x="784.7" y="357" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="787.75" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (49 samples, 0.10%; +0.02%)</title><rect x="910.5" y="293" width="1.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="913.50" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (90 samples, 0.19%; -0.01%)</title><rect x="653.9" y="501" width="2.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="656.85" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (26 samples, 0.05%; +0.03%)</title><rect x="1087.7" y="277" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1090.73" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (21 samples, 0.04%; +0.01%)</title><rect x="447.9" y="261" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="450.87" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.07%; -0.00%)</title><rect x="816.5" y="149" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="819.46" y="159.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (15 samples, 0.03%; +0.02%)</title><rect x="507.7" y="261" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="510.74" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; +0.00%)</title><rect x="851.5" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="854.45" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (5 samples, 0.01%; +0.01%)</title><rect x="22.9" y="517" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="25.88" y="527.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="18.4" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.39" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="238.5" y="245" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="241.54" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (114 samples, 0.24%; -0.01%)</title><rect x="675.3" y="485" width="2.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="678.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; +0.01%)</title><rect x="917.1" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="920.09" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; -0.01%)</title><rect x="418.3" y="229" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="421.35" y="239.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (10 samples, 0.02%; +0.01%)</title><rect x="661.6" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="664.59" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (33 samples, 0.07%; +0.01%)</title><rect x="923.2" y="357" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="926.25" y="367.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (18 samples, 0.04%; -0.01%)</title><rect x="822.2" y="101" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="825.18" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.01%; +0.01%)</title><rect x="752.8" y="389" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="755.80" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (44 samples, 0.09%; -0.02%)</title><rect x="1025.8" y="213" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1028.77" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (12 samples, 0.03%; -0.02%)</title><rect x="492.5" y="181" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="495.54" y="191.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1,289 samples, 2.73%; -0.03%)</title><rect x="800.0" y="325" width="32.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="803.04" y="335.5" >st..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="949.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.83" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="622.3" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="625.31" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (8 samples, 0.02%; +0.00%)</title><rect x="1038.9" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1041.89" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (8 samples, 0.02%; +0.00%)</title><rect x="432.4" y="405" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="435.37" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,359 samples, 49.40%; -0.11%)</title><rect x="54.5" y="469" width="583.0" height="15.0" fill="rgb(55,55,255)" rx="2" ry="2" />
<text  x="57.52" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (15 samples, 0.03%; +0.00%)</title><rect x="1076.4" y="293" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1079.38" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (35 samples, 0.07%; +0.00%)</title><rect x="696.1" y="453" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="699.05" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; 0.00%)</title><rect x="734.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.64" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="583.9" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="586.93" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (24 samples, 0.05%; +0.03%)</title><rect x="398.5" y="181" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="401.53" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (71 samples, 0.15%; -0.02%)</title><rect x="1051.5" y="229" width="1.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1054.47" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (26 samples, 0.05%; +0.01%)</title><rect x="234.4" y="229" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="237.38" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (28 samples, 0.06%; -0.00%)</title><rect x="413.4" y="197" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="416.41" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (112 samples, 0.24%; -0.01%)</title><rect x="1002.1" y="277" width="2.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1005.11" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (79 samples, 0.17%; +0.03%)</title><rect x="1167.9" y="485" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1170.89" y="495.5" ></text>
</g>
<g >
<title>operator new (34 samples, 0.07%; -0.00%)</title><rect x="513.2" y="197" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="516.18" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (238 samples, 0.50%; -0.00%)</title><rect x="408.2" y="213" width="5.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="411.17" y="223.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; +0.00%)</title><rect x="784.1" y="373" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="787.12" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.03%; +0.01%)</title><rect x="407.3" y="229" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="410.34" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (56 samples, 0.12%; +0.01%)</title><rect x="376.0" y="181" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="379.05" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (12 samples, 0.03%; -0.03%)</title><rect x="140.5" y="245" width="0.3" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="143.49" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (13 samples, 0.03%; +0.01%)</title><rect x="643.9" y="485" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="646.95" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (8 samples, 0.02%; 0.00%)</title><rect x="201.8" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="204.81" y="95.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="304.9" y="229" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="307.88" y="239.5" ></text>
</g>
<g >
<title>database::apply_in_memory (27 samples, 0.06%; 0.00%)</title><rect x="1138.1" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.07" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="673.9" y="485" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="676.92" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (20 samples, 0.04%; +0.00%)</title><rect x="1173.8" y="421" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1176.75" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (140 samples, 0.30%; -0.01%)</title><rect x="835.6" y="357" width="3.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="838.63" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.01%)</title><rect x="510.0" y="261" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="512.99" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (67 samples, 0.14%; +0.02%)</title><rect x="679.4" y="485" width="1.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="682.43" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (39 samples, 0.08%; +0.01%)</title><rect x="67.4" y="405" width="1.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.40" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (14 samples, 0.03%; 0.00%)</title><rect x="779.0" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.03" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (12 samples, 0.03%; +0.01%)</title><rect x="1134.3" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1137.27" y="431.5" ></text>
</g>
<g >
<title>operator delete (22 samples, 0.05%; +0.01%)</title><rect x="34.8" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="37.78" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (15 samples, 0.03%; +0.02%)</title><rect x="80.5" y="453" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="83.47" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (81 samples, 0.17%; +0.08%)</title><rect x="353.4" y="165" width="2.0" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="356.41" y="175.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.00%)</title><rect x="1146.1" y="485" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1149.10" y="495.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1,173 samples, 2.48%; +0.02%)</title><rect x="344.8" y="181" width="29.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="347.80" y="191.5" >wr..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (10 samples, 0.02%; +0.01%)</title><rect x="22.6" y="517" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="25.63" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (7 samples, 0.01%; -0.01%)</title><rect x="1077.7" y="325" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1080.72" y="335.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (7 samples, 0.01%; -0.02%)</title><rect x="1131.2" y="421" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1134.23" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.01%; +0.01%)</title><rect x="523.0" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="525.99" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (41 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="341" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.02" y="351.5" ></text>
</g>
<g >
<title>dht::tri_compare (82 samples, 0.17%; +0.00%)</title><rect x="484.6" y="261" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="487.56" y="271.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (80 samples, 0.17%; +0.00%)</title><rect x="375.4" y="213" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="378.45" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="675.1" y="485" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="678.14" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.04%; -0.01%)</title><rect x="609.7" y="357" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="612.73" y="367.5" ></text>
</g>
<g >
<title>database::has_keyspace (130 samples, 0.27%; +0.00%)</title><rect x="867.0" y="405" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="869.97" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (11 samples, 0.02%; -0.00%)</title><rect x="705.6" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="708.56" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (94 samples, 0.20%; +0.04%)</title><rect x="1115.9" y="341" width="2.4" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="1118.93" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (39 samples, 0.08%; +0.02%)</title><rect x="202.4" y="69" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="205.41" y="79.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (735 samples, 1.55%; +0.05%)</title><rect x="125.5" y="309" width="18.4" height="15.0" fill="rgb(255,142,142)" rx="2" ry="2" />
<text  x="128.52" y="319.5" ></text>
</g>
<g >
<title>[[vdso]] (251 samples, 0.53%; 0.00%)</title><rect x="1179.3" y="613" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.29" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.01%)</title><rect x="808.9" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="811.90" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.00%)</title><rect x="1045.9" y="229" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1048.88" y="239.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; -0.00%)</title><rect x="743.6" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="746.62" y="303.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (21 samples, 0.04%; +0.00%)</title><rect x="216.3" y="165" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="219.26" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (128 samples, 0.27%; -0.01%)</title><rect x="194.7" y="37" width="3.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="197.67" y="47.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.05%)</title><rect x="494.8" y="325" width="0.2" height="15.0" fill="rgb(134,134,255)" rx="2" ry="2" />
<text  x="497.79" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (28 samples, 0.06%; -0.01%)</title><rect x="671.8" y="485" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="674.85" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (40 samples, 0.08%; -0.01%)</title><rect x="98.7" y="405" width="1.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="101.67" y="415.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (225 samples, 0.48%; 0.00%)</title><rect x="15.1" y="453" width="5.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.14" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (38 samples, 0.08%; +0.01%)</title><rect x="130.4" y="277" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="133.39" y="287.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (5 samples, 0.01%; 0.00%)</title><rect x="79.1" y="453" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.05" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (7 samples, 0.01%; -0.01%)</title><rect x="998.8" y="261" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1001.79" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (10 samples, 0.02%; +0.01%)</title><rect x="722.7" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="725.73" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (14 samples, 0.03%; -0.01%)</title><rect x="222.8" y="149" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="225.80" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (6 samples, 0.01%; -0.00%)</title><rect x="916.6" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="919.64" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (74 samples, 0.16%; +0.01%)</title><rect x="251.2" y="197" width="1.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="254.22" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.02%)</title><rect x="805.3" y="229" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="808.28" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; +0.01%)</title><rect x="712.3" y="485" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="715.30" y="495.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; 0.00%)</title><rect x="1125.5" y="405" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.46" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (9 samples, 0.02%; -0.00%)</title><rect x="488.3" y="213" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="491.32" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="279.3" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="282.30" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (28 samples, 0.06%; 0.00%)</title><rect x="670.3" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.27" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; +0.00%)</title><rect x="17.3" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.34" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.01%; -0.02%)</title><rect x="1093.7" y="277" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1096.72" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.02%; +0.01%)</title><rect x="939.9" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="942.90" y="351.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (28 samples, 0.06%; +0.00%)</title><rect x="472.9" y="293" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="475.85" y="303.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (194 samples, 0.41%; +0.01%)</title><rect x="477.3" y="277" width="4.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="480.32" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (10 samples, 0.02%; -0.01%)</title><rect x="1149.5" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1152.47" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="737.1" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="740.13" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (6 samples, 0.01%; +0.01%)</title><rect x="269.3" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="272.29" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (8 samples, 0.02%; -0.00%)</title><rect x="578.6" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="581.64" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="812.6" y="213" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="815.62" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (6 samples, 0.01%; +0.00%)</title><rect x="41.6" y="469" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="44.57" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="936.0" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="938.98" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (6 samples, 0.01%; +0.00%)</title><rect x="989.3" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="992.31" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="856.5" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="859.47" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (24 samples, 0.05%; 0.00%)</title><rect x="827.6" y="229" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.59" y="239.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="761.9" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="764.89" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.01%)</title><rect x="1148.4" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1151.42" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (23 samples, 0.05%; +0.03%)</title><rect x="614.2" y="437" width="0.5" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="617.17" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::stats (40 samples, 0.08%; +0.02%)</title><rect x="508.9" y="245" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="511.94" y="255.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (295 samples, 0.62%; -0.03%)</title><rect x="759.5" y="373" width="7.4" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="762.49" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (24 samples, 0.05%; 0.00%)</title><rect x="19.3" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.33" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.01%)</title><rect x="124.9" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="127.92" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (28 samples, 0.06%; +0.03%)</title><rect x="366.5" y="149" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="369.52" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (112 samples, 0.24%; -0.01%)</title><rect x="211.3" y="117" width="2.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="214.27" y="127.5" ></text>
</g>
<g >
<title>create_partitions (275 samples, 0.58%; 0.00%)</title><rect x="14.9" y="533" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.94" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (6 samples, 0.01%; +0.00%)</title><rect x="214.8" y="165" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="217.76" y="175.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (23 samples, 0.05%; +0.00%)</title><rect x="758.9" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="761.92" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (111 samples, 0.23%; +0.01%)</title><rect x="744.2" y="325" width="2.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="747.19" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (129 samples, 0.27%; -0.01%)</title><rect x="600.3" y="405" width="3.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="603.27" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (7 samples, 0.01%; -0.03%)</title><rect x="446.4" y="293" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="449.45" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (13 samples, 0.03%; +0.01%)</title><rect x="824.4" y="245" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="827.40" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (20 samples, 0.04%; +0.03%)</title><rect x="580.4" y="341" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="583.41" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (197 samples, 0.42%; -0.01%)</title><rect x="742.2" y="389" width="4.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="745.20" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (39 samples, 0.08%; -0.01%)</title><rect x="747.1" y="405" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="750.11" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="268.1" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="271.14" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (89 samples, 0.19%; +0.01%)</title><rect x="848.2" y="341" width="2.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="851.23" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (57 samples, 0.12%; -0.01%)</title><rect x="760.6" y="325" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="763.61" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; -0.01%)</title><rect x="735.4" y="469" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="738.36" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (16 samples, 0.03%; -0.02%)</title><rect x="574.6" y="277" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="577.62" y="287.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.06%; 0.00%)</title><rect x="1138.1" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.07" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (133 samples, 0.28%; +0.02%)</title><rect x="684.1" y="469" width="3.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="687.05" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (99 samples, 0.21%; -0.01%)</title><rect x="836.7" y="341" width="2.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="839.65" y="351.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (42 samples, 0.09%; -0.02%)</title><rect x="609.3" y="389" width="1.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="612.26" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (53 samples, 0.11%; -0.01%)</title><rect x="1159.1" y="453" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1162.13" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.02%; 0.00%)</title><rect x="220.8" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.80" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (35 samples, 0.07%; +0.06%)</title><rect x="623.2" y="437" width="0.9" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="626.23" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (28 samples, 0.06%; 0.00%)</title><rect x="699.1" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.07" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="607.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="691.1" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="694.06" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (17 samples, 0.04%; -0.03%)</title><rect x="1061.5" y="293" width="0.4" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="1064.48" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (26 samples, 0.05%; +0.00%)</title><rect x="1139.4" y="309" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.39" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (5 samples, 0.01%; +0.01%)</title><rect x="590.7" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="593.67" y="367.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (44 samples, 0.09%; +0.00%)</title><rect x="1139.0" y="469" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.97" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (86 samples, 0.18%; -0.08%)</title><rect x="935.0" y="389" width="2.1" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="937.98" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (26 samples, 0.05%; 0.00%)</title><rect x="886.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.74" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (10 samples, 0.02%; +0.01%)</title><rect x="526.5" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="529.51" y="319.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.01%; -0.01%)</title><rect x="249.2" y="197" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="252.20" y="207.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (9 samples, 0.02%; -0.00%)</title><rect x="227.3" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="230.26" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (39 samples, 0.08%; +0.01%)</title><rect x="798.3" y="293" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="801.32" y="303.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (330 samples, 0.70%; -0.03%)</title><rect x="549.3" y="405" width="8.3" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="552.32" y="415.5" ></text>
</g>
<g >
<title>row::compact_and_expire (9 samples, 0.02%; -0.00%)</title><rect x="699.4" y="293" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="702.42" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="578.2" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="581.24" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="558.7" y="421" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="561.67" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (6,222 samples, 13.16%; -0.01%)</title><rect x="728.8" y="501" width="155.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="731.82" y="511.5" >seastar::internal::..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (9 samples, 0.02%; +0.01%)</title><rect x="941.0" y="357" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="943.97" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="833.5" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="836.53" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (16 samples, 0.03%; -0.01%)</title><rect x="395.8" y="165" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="398.81" y="175.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="977.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.83" y="367.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (6 samples, 0.01%; 0.00%)</title><rect x="835.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.41" y="367.5" ></text>
</g>
<g >
<title>__dynamic_cast (38 samples, 0.08%; +0.01%)</title><rect x="898.8" y="421" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="901.79" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (16 samples, 0.03%; +0.02%)</title><rect x="956.6" y="405" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="959.59" y="415.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; -0.00%)</title><rect x="1158.1" y="389" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1161.06" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (31 samples, 0.07%; -0.01%)</title><rect x="577.2" y="293" width="0.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="580.17" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (283 samples, 0.60%; 0.00%)</title><rect x="14.7" y="581" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (13 samples, 0.03%; -0.01%)</title><rect x="943.9" y="405" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="946.91" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (373 samples, 0.79%; -0.00%)</title><rect x="678.1" y="501" width="9.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="681.14" y="511.5" ></text>
</g>
<g >
<title>seastar::schedule (5 samples, 0.01%; -0.00%)</title><rect x="1142.1" y="501" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1145.14" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="671.7" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.72" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (26 samples, 0.05%; -0.01%)</title><rect x="648.4" y="469" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="651.36" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (6 samples, 0.01%; +0.01%)</title><rect x="641.4" y="469" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="644.35" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5 samples, 0.01%; +0.00%)</title><rect x="272.6" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="275.56" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (10 samples, 0.02%; +0.01%)</title><rect x="221.2" y="133" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="224.20" y="143.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (5 samples, 0.01%; +0.00%)</title><rect x="16.9" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="19.86" y="271.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (45 samples, 0.10%; -0.00%)</title><rect x="221.5" y="149" width="1.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="224.47" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (48 samples, 0.10%; 0.00%)</title><rect x="756.5" y="325" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.55" y="335.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (278 samples, 0.59%; -0.01%)</title><rect x="1080.8" y="277" width="6.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1083.79" y="287.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (4,472 samples, 9.46%; +0.00%)</title><rect x="433.9" y="405" width="111.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="436.95" y="415.5" >mutation_sour..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (11 samples, 0.02%; +0.01%)</title><rect x="851.7" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="854.70" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.01%)</title><rect x="442.2" y="341" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="445.21" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (55 samples, 0.12%; +0.00%)</title><rect x="1176.6" y="517" width="1.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1179.60" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (9 samples, 0.02%; +0.01%)</title><rect x="152.6" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="155.60" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%; -0.01%)</title><rect x="206.0" y="101" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="208.98" y="111.5" ></text>
</g>
<g >
<title>operator new (148 samples, 0.31%; 0.00%)</title><rect x="1012.4" y="277" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1015.42" y="287.5" ></text>
</g>
<g >
<title>std::type_info::operator== (10 samples, 0.02%; -0.01%)</title><rect x="1075.2" y="277" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1078.23" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.01%; +0.00%)</title><rect x="250.7" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="253.67" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (9 samples, 0.02%; -0.01%)</title><rect x="1113.7" y="373" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1116.71" y="383.5" ></text>
</g>
<g >
<title>executor&lt;test_read (6,105 samples, 12.91%; +0.02%)</title><rect x="730.8" y="485" width="152.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="733.79" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (958 samples, 2.03%; +0.02%)</title><rect x="470.8" y="325" width="23.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="473.76" y="335.5" >d..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.01%)</title><rect x="561.9" y="357" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="564.92" y="367.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (5 samples, 0.01%; -0.01%)</title><rect x="771.5" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="774.54" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (61 samples, 0.13%; -0.01%)</title><rect x="537.8" y="309" width="1.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="540.81" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; 0.00%)</title><rect x="541.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.18" y="255.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (7 samples, 0.01%; -0.00%)</title><rect x="920.3" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="923.28" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (57 samples, 0.12%; -0.04%)</title><rect x="212.6" y="101" width="1.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="215.56" y="111.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (66 samples, 0.14%; -0.00%)</title><rect x="15.5" y="325" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.52" y="335.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (14 samples, 0.03%; +0.01%)</title><rect x="210.9" y="117" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="213.92" y="127.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (14 samples, 0.03%; +0.02%)</title><rect x="1044.1" y="261" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1047.06" y="271.5" ></text>
</g>
<g >
<title>row::compact_and_expire (856 samples, 1.81%; -0.01%)</title><rect x="377.8" y="213" width="21.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="380.77" y="223.5" >r..</text>
</g>
<g >
<title>cql3_parser::CqlParser::term (22 samples, 0.05%; -0.00%)</title><rect x="18.5" y="309" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.53" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (19 samples, 0.04%; +0.01%)</title><rect x="1042.1" y="181" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1045.09" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (7 samples, 0.01%; +0.01%)</title><rect x="1130.4" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1133.43" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (40 samples, 0.08%; -0.01%)</title><rect x="630.8" y="437" width="1.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="633.82" y="447.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.01%)</title><rect x="846.5" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="849.54" y="287.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (8 samples, 0.02%; +0.01%)</title><rect x="817.0" y="133" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="819.96" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,795 samples, 10.14%; +0.02%)</title><rect x="302.0" y="309" width="119.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="304.96" y="319.5" >std::__invoke_..</text>
</g>
<g >
<title>reader_permit::impl::signal (115 samples, 0.24%; +0.02%)</title><rect x="403.6" y="229" width="2.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="406.62" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (141 samples, 0.30%; +0.03%)</title><rect x="646.4" y="485" width="3.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="649.44" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (59 samples, 0.12%; +0.03%)</title><rect x="733.2" y="405" width="1.4" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="736.16" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.00%)</title><rect x="619.4" y="405" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="622.44" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (29 samples, 0.06%; +0.02%)</title><rect x="949.2" y="405" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="952.23" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.03%; -0.01%)</title><rect x="665.2" y="437" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="668.23" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (23 samples, 0.05%; -0.00%)</title><rect x="1053.9" y="213" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1056.92" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (82 samples, 0.17%; +0.01%)</title><rect x="917.3" y="357" width="2.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="920.34" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (33 samples, 0.07%; 0.00%)</title><rect x="860.6" y="373" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.61" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; +0.00%)</title><rect x="617.4" y="437" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="620.39" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (5,745 samples, 12.15%; -0.01%)</title><rect x="735.6" y="469" width="143.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="738.56" y="479.5" >single_node_cql_en..</text>
</g>
<g >
<title>flat_mutation_reader::close (1,363 samples, 2.88%; -0.01%)</title><rect x="560.7" y="405" width="34.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="563.69" y="415.5" >fl..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (12 samples, 0.03%; +0.02%)</title><rect x="359.1" y="165" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="362.13" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (20 samples, 0.04%; -0.01%)</title><rect x="622.7" y="421" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="625.73" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (41 samples, 0.09%; -0.03%)</title><rect x="875.3" y="341" width="1.0" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="878.26" y="351.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (16 samples, 0.03%; +0.02%)</title><rect x="245.3" y="213" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="248.28" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (9 samples, 0.02%; +0.02%)</title><rect x="517.0" y="197" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="519.97" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; +0.01%)</title><rect x="808.4" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="811.35" y="239.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (14 samples, 0.03%; -0.00%)</title><rect x="710.3" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="713.33" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="319.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (5 samples, 0.01%; -0.00%)</title><rect x="1006.5" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1009.48" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (10 samples, 0.02%; -0.00%)</title><rect x="846.0" y="277" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="848.99" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (396 samples, 0.84%; -0.03%)</title><rect x="281.2" y="325" width="9.9" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="284.22" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (6 samples, 0.01%; 0.00%)</title><rect x="1176.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.95" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; +0.01%)</title><rect x="654.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="657.58" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,319 samples, 97.96%; 0.00%)</title><rect x="22.2" y="581" width="1155.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (19 samples, 0.04%; +0.01%)</title><rect x="637.5" y="469" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="640.46" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (23 samples, 0.05%; -0.01%)</title><rect x="564.2" y="309" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="567.16" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (26 samples, 0.05%; +0.01%)</title><rect x="813.6" y="181" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="816.62" y="191.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (5 samples, 0.01%; -0.01%)</title><rect x="374.8" y="197" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="377.78" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (24 samples, 0.05%; 0.00%)</title><rect x="1154.9" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1157.91" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.00%)</title><rect x="712.2" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="715.18" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (14 samples, 0.03%; +0.00%)</title><rect x="92.3" y="437" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="95.33" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (87 samples, 0.18%; +0.01%)</title><rect x="692.0" y="453" width="2.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="695.01" y="463.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (5 samples, 0.01%; 0.00%)</title><rect x="1000.4" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.36" y="335.5" ></text>
</g>
<g >
<title>database::find_uuid (153 samples, 0.32%; 0.00%)</title><rect x="844.2" y="357" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.17" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (9 samples, 0.02%; -0.01%)</title><rect x="456.2" y="293" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="459.18" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.02%)</title><rect x="493.0" y="181" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="496.02" y="191.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (6 samples, 0.01%; +0.00%)</title><rect x="1108.6" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1111.62" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="727.7" y="501" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="730.67" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (24 samples, 0.05%; +0.00%)</title><rect x="941.9" y="389" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="944.87" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.02%)</title><rect x="425.1" y="373" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="428.06" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (9 samples, 0.02%; -0.01%)</title><rect x="1163.1" y="453" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1166.12" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (5 samples, 0.01%; -0.00%)</title><rect x="883.7" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="886.67" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (28 samples, 0.06%; +0.01%)</title><rect x="1113.9" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1116.94" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (8 samples, 0.02%; +0.00%)</title><rect x="377.2" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="380.25" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="856.0" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="859.04" y="431.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (38 samples, 0.08%; -0.05%)</title><rect x="10.3" y="581" width="1.0" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="13.32" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (94 samples, 0.20%; -0.02%)</title><rect x="989.8" y="309" width="2.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="992.83" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (25 samples, 0.05%; -0.00%)</title><rect x="943.1" y="389" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="946.14" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%; -0.01%)</title><rect x="448.4" y="261" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="451.39" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; -0.01%)</title><rect x="707.9" y="437" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="710.93" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (6 samples, 0.01%; -0.01%)</title><rect x="548.8" y="405" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="551.82" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (29 samples, 0.06%; -0.00%)</title><rect x="796.3" y="293" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="799.30" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (5 samples, 0.01%; -0.01%)</title><rect x="1099.0" y="357" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1101.96" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (29 samples, 0.06%; +0.01%)</title><rect x="778.7" y="325" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="781.66" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (79 samples, 0.17%; -0.00%)</title><rect x="1002.5" y="245" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1005.46" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (8 samples, 0.02%; +0.01%)</title><rect x="914.3" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="917.32" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (10 samples, 0.02%; +0.00%)</title><rect x="254.1" y="229" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="257.14" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (12 samples, 0.03%; +0.00%)</title><rect x="857.1" y="437" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="860.14" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (13 samples, 0.03%; -0.02%)</title><rect x="942.1" y="373" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="945.14" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (20 samples, 0.04%; +0.03%)</title><rect x="537.2" y="309" width="0.5" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="540.19" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (24 samples, 0.05%; -0.00%)</title><rect x="762.3" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="765.26" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="462.3" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="465.30" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (11 samples, 0.02%; +0.02%)</title><rect x="430.3" y="389" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="433.33" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (5 samples, 0.01%; 0.00%)</title><rect x="886.8" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.79" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (36 samples, 0.08%; +0.03%)</title><rect x="339.0" y="165" width="0.9" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="341.96" y="175.5" ></text>
</g>
<g >
<title>schema::column_at (20 samples, 0.04%; -0.01%)</title><rect x="207.2" y="133" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="210.17" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (15 samples, 0.03%; +0.01%)</title><rect x="1123.8" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.77" y="415.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (5 samples, 0.01%; 0.00%)</title><rect x="21.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.93" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (18 samples, 0.04%; +0.02%)</title><rect x="465.0" y="325" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="468.02" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (5 samples, 0.01%; +0.01%)</title><rect x="806.2" y="229" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="809.21" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.03%; +0.01%)</title><rect x="667.9" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="670.85" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="649.0" y="469" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="652.01" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (258 samples, 0.55%; -0.00%)</title><rect x="15.1" y="485" width="6.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.14" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (10 samples, 0.02%; 0.00%)</title><rect x="1175.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (8 samples, 0.02%; +0.00%)</title><rect x="1069.1" y="341" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1072.07" y="351.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (7 samples, 0.01%; +0.01%)</title><rect x="233.2" y="197" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="236.23" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (16 samples, 0.03%; -0.03%)</title><rect x="556.7" y="389" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="559.68" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1,682 samples, 3.56%; -0.06%)</title><rect x="332.1" y="197" width="42.0" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="335.10" y="207.5" >mut..</text>
</g>
<g >
<title>single_node_cql_env::execute_cql (269 samples, 0.57%; 0.00%)</title><rect x="15.1" y="517" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.07" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7 samples, 0.01%; +0.00%)</title><rect x="293.0" y="357" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="296.05" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.01%; -0.01%)</title><rect x="272.7" y="341" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="275.68" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (15 samples, 0.03%; +0.00%)</title><rect x="1035.9" y="133" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1038.87" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="580.3" y="325" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="583.26" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2,763 samples, 5.84%; +0.03%)</title><rect x="987.4" y="357" width="69.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="990.41" y="367.5" >service..</text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (17 samples, 0.04%; -0.01%)</title><rect x="954.9" y="373" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="957.92" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (7 samples, 0.01%; +0.01%)</title><rect x="259.4" y="229" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="262.43" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (66 samples, 0.14%; 0.00%)</title><rect x="15.5" y="341" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (182 samples, 0.38%; +0.03%)</title><rect x="34.1" y="469" width="4.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="37.13" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (47 samples, 0.10%; -0.00%)</title><rect x="662.5" y="469" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="665.46" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (31 samples, 0.07%; +0.01%)</title><rect x="663.9" y="469" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="666.86" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (27 samples, 0.06%; +0.01%)</title><rect x="615.6" y="437" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="618.62" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (52 samples, 0.11%; +0.02%)</title><rect x="545.6" y="389" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="548.62" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (5 samples, 0.01%; +0.01%)</title><rect x="748.1" y="405" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="751.09" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="431.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (438 samples, 0.93%; -0.05%)</title><rect x="483.7" y="293" width="10.9" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="486.66" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (80 samples, 0.17%; -0.00%)</title><rect x="1131.4" y="421" width="2.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1134.40" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (16 samples, 0.03%; 0.00%)</title><rect x="21.0" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.96" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (13 samples, 0.03%; +0.03%)</title><rect x="203.4" y="85" width="0.3" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="206.38" y="95.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (6 samples, 0.01%; -0.00%)</title><rect x="1056.4" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1059.36" y="367.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (177 samples, 0.37%; -0.01%)</title><rect x="716.3" y="453" width="4.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="719.32" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (12 samples, 0.03%; +0.00%)</title><rect x="632.3" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="635.27" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (179 samples, 0.38%; 0.00%)</title><rect x="1170.3" y="469" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.29" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (299 samples, 0.63%; +0.01%)</title><rect x="1111.5" y="405" width="7.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1114.51" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.01%)</title><rect x="529.8" y="325" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="532.77" y="335.5" ></text>
</g>
<g >
<title>operator delete (23 samples, 0.05%; -0.00%)</title><rect x="647.7" y="469" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="650.74" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.01%; 0.00%)</title><rect x="17.9" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.89" y="319.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="761.2" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.24" y="287.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (306 samples, 0.65%; +0.01%)</title><rect x="190.4" y="85" width="7.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="193.38" y="95.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (14 samples, 0.03%; +0.01%)</title><rect x="222.2" y="117" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="225.17" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (41 samples, 0.09%; -0.00%)</title><rect x="1147.6" y="485" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1150.58" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (12 samples, 0.03%; -0.00%)</title><rect x="664.6" y="469" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="667.63" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (17 samples, 0.04%; +0.01%)</title><rect x="822.2" y="85" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="825.20" y="95.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (12,950 samples, 27.39%; +0.04%)</title><rect x="108.4" y="421" width="323.2" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="111.42" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (18 samples, 0.04%; 0.00%)</title><rect x="1048.7" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.68" y="287.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (25 samples, 0.05%; +0.00%)</title><rect x="699.1" y="373" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.12" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (5 samples, 0.01%; 0.00%)</title><rect x="996.9" y="293" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="999.87" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (17 samples, 0.04%; -0.00%)</title><rect x="161.5" y="213" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="164.48" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (7 samples, 0.01%; -0.01%)</title><rect x="660.2" y="437" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="663.24" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (40 samples, 0.08%; 0.00%)</title><rect x="1064.8" y="277" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.82" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (5 samples, 0.01%; -0.01%)</title><rect x="1078.2" y="325" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1081.20" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="942.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.34" y="367.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (24 samples, 0.05%; +0.03%)</title><rect x="986.0" y="357" width="0.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="989.04" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (11 samples, 0.02%; +0.00%)</title><rect x="1137.7" y="469" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1140.72" y="479.5" ></text>
</g>
<g >
<title>operator new (52 samples, 0.11%; +0.00%)</title><rect x="865.0" y="405" width="1.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="868.03" y="415.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (9 samples, 0.02%; +0.01%)</title><rect x="792.3" y="357" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="795.26" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; +0.00%)</title><rect x="1136.2" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1139.20" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%; +0.01%)</title><rect x="694.8" y="437" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="697.83" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (22 samples, 0.05%; +0.04%)</title><rect x="1124.6" y="421" width="0.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1127.59" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (6 samples, 0.01%; +0.01%)</title><rect x="405.9" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="408.90" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (40 samples, 0.08%; +0.01%)</title><rect x="632.9" y="405" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="635.89" y="415.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (7 samples, 0.01%; +0.00%)</title><rect x="621.3" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="624.31" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (96 samples, 0.20%; -0.01%)</title><rect x="839.6" y="389" width="2.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="842.57" y="399.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (10 samples, 0.02%; -0.03%)</title><rect x="612.3" y="405" width="0.2" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="615.28" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (33 samples, 0.07%; +0.06%)</title><rect x="592.6" y="373" width="0.8" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="595.61" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.01%)</title><rect x="418.7" y="245" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="421.70" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (88 samples, 0.19%; +0.01%)</title><rect x="72.6" y="389" width="2.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.64" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (14 samples, 0.03%; -0.02%)</title><rect x="217.1" y="181" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="220.11" y="191.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (17 samples, 0.04%; -0.00%)</title><rect x="419.2" y="229" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="422.25" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (47 samples, 0.10%; +0.00%)</title><rect x="151.3" y="245" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="154.35" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%; +0.01%)</title><rect x="934.6" y="389" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="937.60" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (29 samples, 0.06%; -0.00%)</title><rect x="758.2" y="373" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="761.19" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (7 samples, 0.01%; +0.01%)</title><rect x="420.5" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="423.54" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (49 samples, 0.10%; +0.01%)</title><rect x="787.9" y="373" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="790.94" y="383.5" ></text>
</g>
<g >
<title>dht::shard_of (7 samples, 0.01%; +0.01%)</title><rect x="1006.3" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1009.25" y="303.5" ></text>
</g>
<g >
<title>operator delete (16 samples, 0.03%; -0.00%)</title><rect x="676.3" y="437" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="679.26" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; +0.00%)</title><rect x="523.6" y="309" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="526.56" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; +0.01%)</title><rect x="429.1" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="432.05" y="383.5" ></text>
</g>
<g >
<title>dht::tri_compare (112 samples, 0.24%; -0.00%)</title><rect x="1084.9" y="229" width="2.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1087.91" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5 samples, 0.01%; +0.00%)</title><rect x="1176.5" y="517" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1179.47" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (7 samples, 0.01%; -0.02%)</title><rect x="655.8" y="485" width="0.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="658.75" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (6 samples, 0.01%; -0.00%)</title><rect x="432.2" y="405" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="435.22" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; -0.01%)</title><rect x="526.0" y="261" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="529.01" y="271.5" ></text>
</g>
<g >
<title>do_cql_test (275 samples, 0.58%; 0.00%)</title><rect x="14.9" y="549" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.94" y="559.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (448 samples, 0.95%; +0.02%)</title><rect x="318.4" y="197" width="11.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="321.43" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (6 samples, 0.01%; +0.00%)</title><rect x="817.3" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="820.34" y="159.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (41 samples, 0.09%; +0.01%)</title><rect x="282.7" y="293" width="1.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="285.66" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="634.3" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="637.29" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (46 samples, 0.10%; -0.02%)</title><rect x="948.1" y="405" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="951.08" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (125 samples, 0.26%; +0.01%)</title><rect x="311.4" y="245" width="3.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="314.39" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (5 samples, 0.01%; 0.00%)</title><rect x="54.1" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.12" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (38 samples, 0.08%; +0.01%)</title><rect x="1049.6" y="277" width="1.0" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1052.65" y="287.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (47 samples, 0.10%; +0.00%)</title><rect x="535.6" y="277" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="538.56" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="286.0" y="293" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="289.03" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (63 samples, 0.13%; +0.03%)</title><rect x="666.7" y="453" width="1.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="669.68" y="463.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (526 samples, 1.11%; -0.01%)</title><rect x="1080.7" y="293" width="13.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1083.74" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%; +0.02%)</title><rect x="302.6" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="305.58" y="303.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (10 samples, 0.02%; +0.01%)</title><rect x="341.8" y="181" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="344.81" y="191.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.01%; +0.00%)</title><rect x="564.6" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="567.61" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (27 samples, 0.06%; -0.04%)</title><rect x="134.0" y="245" width="0.7" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="137.00" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (45 samples, 0.10%; 0.00%)</title><rect x="419.0" y="245" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="422.05" y="255.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (282 samples, 0.60%; -0.00%)</title><rect x="487.4" y="245" width="7.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="490.38" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; 0.00%)</title><rect x="679.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.03" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (21 samples, 0.04%; +0.00%)</title><rect x="670.4" y="469" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="673.45" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.99" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (15 samples, 0.03%; -0.01%)</title><rect x="1117.9" y="325" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1120.90" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.05%; 0.00%)</title><rect x="886.8" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.76" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (20 samples, 0.04%; -0.01%)</title><rect x="423.8" y="261" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="426.81" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (12 samples, 0.03%; 0.00%)</title><rect x="718.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.41" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (131 samples, 0.28%; -0.01%)</title><rect x="763.2" y="277" width="3.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="766.23" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (8 samples, 0.02%; 0.00%)</title><rect x="694.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.46" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (8 samples, 0.02%; +0.01%)</title><rect x="1046.9" y="261" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1049.90" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (5 samples, 0.01%; -0.00%)</title><rect x="548.0" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="551.02" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%; -0.00%)</title><rect x="1123.4" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1126.42" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 0.14%; -0.00%)</title><rect x="810.5" y="165" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="813.48" y="175.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (6 samples, 0.01%; +0.01%)</title><rect x="829.3" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="832.34" y="287.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (203 samples, 0.43%; +0.00%)</title><rect x="871.7" y="421" width="5.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="874.69" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (55 samples, 0.12%; 0.00%)</title><rect x="204.9" y="117" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="207.85" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="418.8" y="245" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="421.85" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (12 samples, 0.03%; +0.01%)</title><rect x="1050.7" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1053.72" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (9 samples, 0.02%; +0.00%)</title><rect x="699.4" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.42" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (26 samples, 0.05%; +0.01%)</title><rect x="838.0" y="293" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="840.95" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (103 samples, 0.22%; -0.02%)</title><rect x="853.7" y="437" width="2.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="856.67" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (31 samples, 0.07%; +0.01%)</title><rect x="1134.8" y="421" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1137.82" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (6 samples, 0.01%; -0.00%)</title><rect x="537.0" y="309" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="540.04" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="447.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (11 samples, 0.02%; +0.00%)</title><rect x="426.1" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="429.08" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (6 samples, 0.01%; -0.00%)</title><rect x="557.1" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="560.08" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10 samples, 0.02%; +0.01%)</title><rect x="838.8" y="261" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="841.85" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.02%; +0.00%)</title><rect x="493.5" y="213" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="496.51" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (24 samples, 0.05%; +0.02%)</title><rect x="63.5" y="437" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="66.53" y="447.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="463.1" y="293" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="466.12" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (40 samples, 0.08%; +0.00%)</title><rect x="1074.5" y="293" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1077.48" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (17 samples, 0.04%; +0.01%)</title><rect x="429.6" y="373" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="432.60" y="383.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (100 samples, 0.21%; -0.01%)</title><rect x="371.6" y="165" width="2.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="374.58" y="175.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (51 samples, 0.11%; +0.02%)</title><rect x="1164.0" y="453" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1167.00" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (31 samples, 0.07%; -0.01%)</title><rect x="265.9" y="277" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="268.92" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (26 samples, 0.05%; -0.02%)</title><rect x="1095.1" y="277" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1098.07" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (196 samples, 0.41%; +0.01%)</title><rect x="1062.1" y="325" width="4.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1065.10" y="335.5" ></text>
</g>
<g >
<title>operator delete (59 samples, 0.12%; -0.04%)</title><rect x="571.4" y="293" width="1.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="574.43" y="303.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (16 samples, 0.03%; +0.00%)</title><rect x="821.4" y="117" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="824.43" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (104 samples, 0.22%; +0.00%)</title><rect x="675.5" y="469" width="2.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="678.49" y="479.5" ></text>
</g>
<g >
<title>free (20 samples, 0.04%; -0.01%)</title><rect x="36.1" y="421" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="39.13" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (7 samples, 0.01%; +0.01%)</title><rect x="817.2" y="133" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="820.16" y="143.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (86 samples, 0.18%; 0.00%)</title><rect x="567.4" y="309" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.36" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (657 samples, 1.39%; +0.03%)</title><rect x="904.2" y="405" width="16.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="907.21" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (71 samples, 0.15%; -0.00%)</title><rect x="917.6" y="341" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="920.61" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (14 samples, 0.03%; -0.02%)</title><rect x="221.8" y="117" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="224.82" y="127.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (79 samples, 0.17%; -0.01%)</title><rect x="634.7" y="421" width="2.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="637.74" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.01%; -0.01%)</title><rect x="973.0" y="373" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="976.04" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="946.3" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="949.28" y="399.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (104 samples, 0.22%; -0.00%)</title><rect x="321.1" y="181" width="2.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="324.07" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; +0.00%)</title><rect x="75.8" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="78.76" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (19 samples, 0.04%; +0.02%)</title><rect x="993.0" y="341" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="995.95" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (5 samples, 0.01%; +0.01%)</title><rect x="909.6" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="912.57" y="303.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (9 samples, 0.02%; +0.00%)</title><rect x="1049.2" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1052.15" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (16 samples, 0.03%; +0.01%)</title><rect x="649.5" y="453" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="652.49" y="463.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (8 samples, 0.02%; +0.01%)</title><rect x="342.1" y="181" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="345.06" y="191.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (29 samples, 0.06%; 0.00%)</title><rect x="231.7" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="234.71" y="223.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (156 samples, 0.33%; -0.01%)</title><rect x="402.6" y="245" width="3.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="405.60" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (414 samples, 0.88%; +0.03%)</title><rect x="152.8" y="245" width="10.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="155.82" y="255.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.03%)</title><rect x="915.0" y="309" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="918.01" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (61 samples, 0.13%; -0.00%)</title><rect x="154.1" y="213" width="1.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="157.14" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (32 samples, 0.07%; +0.01%)</title><rect x="613.3" y="437" width="0.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="616.33" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (24 samples, 0.05%; -0.01%)</title><rect x="431.6" y="421" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="434.60" y="431.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.04%; +0.00%)</title><rect x="929.0" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="932.04" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (38 samples, 0.08%; +0.01%)</title><rect x="157.7" y="213" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="160.69" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (13 samples, 0.03%; -0.01%)</title><rect x="759.2" y="357" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="762.17" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (102 samples, 0.22%; +0.00%)</title><rect x="665.8" y="469" width="2.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="668.83" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.01%)</title><rect x="224.5" y="213" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="227.52" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,676 samples, 9.89%; -0.01%)</title><rect x="143.9" y="309" width="116.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="146.86" y="319.5" >partition_snap..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (23 samples, 0.05%; +0.02%)</title><rect x="878.3" y="453" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="881.33" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (5 samples, 0.01%; 0.00%)</title><rect x="886.8" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.79" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (30 samples, 0.06%; -0.01%)</title><rect x="203.7" y="117" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="206.71" y="127.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (414 samples, 0.88%; -0.02%)</title><rect x="1178.4" y="629" width="10.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1181.45" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (47 samples, 0.10%; +0.06%)</title><rect x="608.0" y="405" width="1.1" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="610.96" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="1140.4" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1143.36" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (424 samples, 0.90%; +0.06%)</title><rect x="64.4" y="421" width="10.5" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="67.35" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1,905 samples, 4.03%; -0.09%)</title><rect x="1007.7" y="293" width="47.5" height="15.0" fill="rgb(81,81,255)" rx="2" ry="2" />
<text  x="1010.67" y="303.5" >serv..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.01%; +0.01%)</title><rect x="701.4" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="704.44" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (11 samples, 0.02%; +0.00%)</title><rect x="190.1" y="85" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="193.10" y="95.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (42 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.02" y="399.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; 0.00%)</title><rect x="668.5" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.53" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (11 samples, 0.02%; +0.01%)</title><rect x="1064.5" y="277" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1067.55" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (5 samples, 0.01%; 0.00%)</title><rect x="699.5" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.50" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (57 samples, 0.12%; 0.00%)</title><rect x="1064.4" y="293" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.40" y="303.5" ></text>
</g>
<g >
<title>malloc (18 samples, 0.04%; 0.00%)</title><rect x="609.7" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.73" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (10 samples, 0.02%; 0.00%)</title><rect x="1175.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (173 samples, 0.37%; 0.00%)</title><rect x="10.1" y="613" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.10" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; +0.03%)</title><rect x="556.0" y="309" width="0.7" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="559.03" y="319.5" ></text>
</g>
<g >
<title>operator new (89 samples, 0.19%; -0.00%)</title><rect x="1044.4" y="261" width="2.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1047.41" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.01%; +0.00%)</title><rect x="228.1" y="165" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="231.14" y="175.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; +0.00%)</title><rect x="1139.4" y="277" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.42" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; -0.00%)</title><rect x="139.9" y="229" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="142.87" y="239.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.01%; +0.01%)</title><rect x="62.1" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="65.08" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; +0.00%)</title><rect x="1004.7" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1007.70" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (113 samples, 0.24%; +0.00%)</title><rect x="659.6" y="469" width="2.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="662.64" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (24 samples, 0.05%; -0.01%)</title><rect x="849.2" y="309" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="852.23" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.01%)</title><rect x="1118.3" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1121.33" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (139 samples, 0.29%; 0.00%)</title><rect x="256.2" y="245" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="259.21" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (87 samples, 0.18%; +0.02%)</title><rect x="554.5" y="325" width="2.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="557.48" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (10 samples, 0.02%; -0.01%)</title><rect x="610.6" y="437" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="613.61" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (7 samples, 0.01%; +0.01%)</title><rect x="566.9" y="325" width="0.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="569.86" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (25 samples, 0.05%; 0.00%)</title><rect x="699.1" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.12" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (9 samples, 0.02%; +0.01%)</title><rect x="75.0" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="77.98" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (86 samples, 0.18%; 0.00%)</title><rect x="242.8" y="197" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="245.81" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="523.3" y="293" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="526.34" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (7 samples, 0.01%; +0.00%)</title><rect x="831.9" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="834.94" y="319.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="635.9" y="389" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="638.89" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (19 samples, 0.04%; +0.01%)</title><rect x="599.8" y="405" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="602.78" y="415.5" ></text>
</g>
<g >
<title>auth::resource::resource (58 samples, 0.12%; -0.01%)</title><rect x="786.4" y="373" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="789.39" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7,328 samples, 15.50%; +0.13%)</title><rect x="111.5" y="405" width="182.9" height="15.0" fill="rgb(255,32,32)" rx="2" ry="2" />
<text  x="114.49" y="415.5" >flat_mutation_reader::p..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="670.8" y="453" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="673.77" y="463.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (104 samples, 0.22%; +0.01%)</title><rect x="1172.2" y="453" width="2.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1175.16" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (20 samples, 0.04%; -0.01%)</title><rect x="725.2" y="501" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="728.20" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (73 samples, 0.15%; +0.01%)</title><rect x="508.1" y="261" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="511.11" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (61 samples, 0.13%; -0.00%)</title><rect x="228.3" y="165" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="231.26" y="175.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (26 samples, 0.05%; +0.00%)</title><rect x="400.0" y="213" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="402.96" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (46,168 samples, 97.64%; -0.06%)</title><rect x="24.2" y="517" width="1152.2" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="27.25" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (22 samples, 0.05%; +0.03%)</title><rect x="745.0" y="293" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="748.04" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (7 samples, 0.01%; -0.00%)</title><rect x="1139.1" y="261" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.14" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; -0.00%)</title><rect x="436.4" y="357" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="439.37" y="367.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (54 samples, 0.11%; +0.01%)</title><rect x="1131.8" y="389" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1134.80" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (16 samples, 0.03%; +0.01%)</title><rect x="767.0" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="769.95" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (9 samples, 0.02%; 0.00%)</title><rect x="613.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.90" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (52 samples, 0.11%; +0.01%)</title><rect x="840.6" y="373" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="843.62" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (7 samples, 0.01%; +0.01%)</title><rect x="430.9" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="433.88" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (9 samples, 0.02%; +0.01%)</title><rect x="579.6" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="582.59" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (23 samples, 0.05%; +0.01%)</title><rect x="681.3" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="684.31" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (88 samples, 0.19%; -0.01%)</title><rect x="769.9" y="405" width="2.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="772.92" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.01%; 0.00%)</title><rect x="1167.8" y="485" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.76" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; +0.01%)</title><rect x="285.7" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="288.73" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (18 samples, 0.04%; 0.00%)</title><rect x="1118.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.53" y="367.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (20 samples, 0.04%; -0.02%)</title><rect x="546.9" y="405" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="549.92" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (140 samples, 0.30%; +0.04%)</title><rect x="1012.6" y="261" width="3.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1015.62" y="271.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (7 samples, 0.01%; +0.01%)</title><rect x="792.9" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="795.86" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (15 samples, 0.03%; -0.02%)</title><rect x="174.7" y="133" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="177.71" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (45 samples, 0.10%; +0.00%)</title><rect x="1157.9" y="405" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1160.88" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; -0.01%)</title><rect x="502.4" y="277" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="505.42" y="287.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (41 samples, 0.09%; -0.01%)</title><rect x="765.1" y="261" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="768.06" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (22 samples, 0.05%; -0.00%)</title><rect x="991.2" y="261" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="994.23" y="271.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (5,340 samples, 11.29%; -0.06%)</title><rect x="296.8" y="389" width="133.2" height="15.0" fill="rgb(128,128,255)" rx="2" ry="2" />
<text  x="299.76" y="399.5" >query::consume_p..</text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (18 samples, 0.04%; +0.01%)</title><rect x="343.2" y="181" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="346.23" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (6 samples, 0.01%; -0.02%)</title><rect x="323.5" y="165" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="326.52" y="175.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (241 samples, 0.51%; -0.03%)</title><rect x="927.8" y="373" width="6.0" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="930.79" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (5 samples, 0.01%; +0.00%)</title><rect x="1174.5" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1177.50" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (54 samples, 0.11%; -0.00%)</title><rect x="282.5" y="309" width="1.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="285.49" y="319.5" ></text>
</g>
<g >
<title>operator delete (66 samples, 0.14%; -0.05%)</title><rect x="588.9" y="341" width="1.7" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="591.92" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (14 samples, 0.03%; +0.03%)</title><rect x="1099.1" y="357" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1102.09" y="367.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (17 samples, 0.04%; -0.02%)</title><rect x="139.4" y="229" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="142.44" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="830.0" y="293" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="833.02" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (5 samples, 0.01%; -0.01%)</title><rect x="966.6" y="389" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="969.60" y="399.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (281 samples, 0.59%; -0.01%)</title><rect x="207.7" y="165" width="7.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="210.67" y="175.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (86 samples, 0.18%; +0.01%)</title><rect x="611.2" y="437" width="2.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="614.18" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (11 samples, 0.02%; -0.01%)</title><rect x="961.2" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="964.16" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (19 samples, 0.04%; 0.00%)</title><rect x="548.5" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.49" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (31 samples, 0.07%; -0.00%)</title><rect x="1121.5" y="405" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1124.52" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (70 samples, 0.15%; -0.01%)</title><rect x="495.7" y="325" width="1.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="498.69" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; -0.01%)</title><rect x="1158.1" y="373" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1161.06" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.01%)</title><rect x="634.0" y="437" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="636.99" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (319 samples, 0.67%; 0.00%)</title><rect x="446.9" y="293" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.92" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (20 samples, 0.04%; +0.02%)</title><rect x="630.0" y="421" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="632.97" y="431.5" ></text>
</g>
<g >
<title>__libc_start_main (46,319 samples, 97.96%; 0.00%)</title><rect x="22.2" y="629" width="1155.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="992.4" y="341" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="995.43" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (68 samples, 0.14%; +0.01%)</title><rect x="394.1" y="133" width="1.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="397.12" y="143.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (23 samples, 0.05%; -0.00%)</title><rect x="886.0" y="453" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="888.97" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (13 samples, 0.03%; +0.01%)</title><rect x="1039.1" y="213" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1042.14" y="223.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1032.0" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1035.03" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (15 samples, 0.03%; -0.00%)</title><rect x="221.1" y="149" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="224.07" y="159.5" ></text>
</g>
<g >
<title>operator delete (41 samples, 0.09%; +0.00%)</title><rect x="625.9" y="421" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="628.88" y="431.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (19 samples, 0.04%; +0.01%)</title><rect x="1043.6" y="245" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1046.59" y="255.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (7 samples, 0.01%; +0.01%)</title><rect x="908.3" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="911.33" y="319.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; 0.00%)</title><rect x="650.5" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.49" y="495.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.00%)</title><rect x="489.5" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="492.47" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (38 samples, 0.08%; +0.01%)</title><rect x="767.6" y="389" width="1.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="770.63" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (20 samples, 0.04%; -0.01%)</title><rect x="1120.0" y="389" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1123.00" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (16 samples, 0.03%; +0.01%)</title><rect x="831.3" y="277" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="834.26" y="287.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (12 samples, 0.03%; +0.01%)</title><rect x="685.2" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="688.22" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (6 samples, 0.01%; +0.01%)</title><rect x="864.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.20" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (8 samples, 0.02%; -0.01%)</title><rect x="268.9" y="309" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="271.91" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (7 samples, 0.01%; +0.00%)</title><rect x="900.4" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="903.37" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.01%)</title><rect x="441.6" y="341" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="444.63" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (15 samples, 0.03%; +0.02%)</title><rect x="268.4" y="309" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="271.42" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (5 samples, 0.01%; +0.01%)</title><rect x="900.5" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="903.54" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="828.5" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="831.54" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (89 samples, 0.19%; +0.00%)</title><rect x="993.7" y="309" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="996.67" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (10 samples, 0.02%; -0.00%)</title><rect x="655.5" y="485" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="658.50" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (779 samples, 1.65%; -0.02%)</title><rect x="562.0" y="357" width="19.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="565.04" y="367.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (24 samples, 0.05%; +0.03%)</title><rect x="453.3" y="277" width="0.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="456.26" y="287.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (21 samples, 0.04%; +0.03%)</title><rect x="468.3" y="325" width="0.6" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="471.33" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (53 samples, 0.11%; 0.00%)</title><rect x="932.3" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="935.33" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (213 samples, 0.45%; -0.01%)</title><rect x="1032.2" y="197" width="5.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1035.16" y="207.5" ></text>
</g>
<g >
<title>row::row (24 samples, 0.05%; -0.01%)</title><rect x="258.2" y="197" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="261.21" y="207.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (622 samples, 1.32%; -0.01%)</title><rect x="904.9" y="389" width="15.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="907.93" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (11 samples, 0.02%; +0.01%)</title><rect x="813.1" y="197" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="816.15" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (556 samples, 1.18%; +0.06%)</title><rect x="277.8" y="357" width="13.9" height="15.0" fill="rgb(255,125,125)" rx="2" ry="2" />
<text  x="280.85" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (12 samples, 0.03%; +0.03%)</title><rect x="329.7" y="197" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="332.73" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (10 samples, 0.02%; -0.00%)</title><rect x="40.0" y="437" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="43.02" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="36.5" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="39.48" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="603.3" y="373" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="606.27" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (359 samples, 0.76%; +0.00%)</title><rect x="32.9" y="485" width="9.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="35.93" y="495.5" ></text>
</g>
<g >
<title>operator delete (38 samples, 0.08%; +0.01%)</title><rect x="628.4" y="373" width="0.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="631.37" y="383.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; 0.00%)</title><rect x="805.2" y="245" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.23" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (16 samples, 0.03%; +0.01%)</title><rect x="293.9" y="373" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="296.87" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (17 samples, 0.04%; -0.01%)</title><rect x="779.4" y="325" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="782.43" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (718 samples, 1.52%; -0.04%)</title><rect x="751.1" y="421" width="17.9" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="754.06" y="431.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (27 samples, 0.06%; -0.00%)</title><rect x="1177.2" y="469" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1180.20" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="724.6" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="727.60" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (50 samples, 0.11%; +0.01%)</title><rect x="854.7" y="389" width="1.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="857.70" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (158 samples, 0.33%; +0.01%)</title><rect x="158.6" y="229" width="4.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="161.64" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (79 samples, 0.17%; +0.01%)</title><rect x="146.2" y="261" width="2.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="149.18" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (17 samples, 0.04%; 0.00%)</title><rect x="18.6" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.63" y="303.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (48 samples, 0.10%; +0.02%)</title><rect x="770.6" y="373" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="773.60" y="383.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (8 samples, 0.02%; +0.01%)</title><rect x="869.0" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="872.00" y="335.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (6 samples, 0.01%; 0.00%)</title><rect x="363.6" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="366.60" y="175.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (9 samples, 0.02%; 0.00%)</title><rect x="45.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.89" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (90 samples, 0.19%; -0.01%)</title><rect x="1156.8" y="453" width="2.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1159.78" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (223 samples, 0.47%; -0.01%)</title><rect x="96.1" y="437" width="5.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="99.07" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (53 samples, 0.11%; +0.01%)</title><rect x="778.5" y="341" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="781.53" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (7 samples, 0.01%; +0.00%)</title><rect x="330.1" y="213" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="333.08" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (98 samples, 0.21%; +0.00%)</title><rect x="554.2" y="357" width="2.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="557.23" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (64 samples, 0.14%; -0.01%)</title><rect x="375.8" y="197" width="1.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="378.85" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (32 samples, 0.07%; +0.00%)</title><rect x="665.0" y="469" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="668.03" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (15 samples, 0.03%; -0.00%)</title><rect x="232.1" y="197" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="235.05" y="207.5" ></text>
</g>
<g >
<title>database::find_keyspace (211 samples, 0.45%; +0.00%)</title><rect x="1061.9" y="341" width="5.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1064.90" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (35 samples, 0.07%; +0.04%)</title><rect x="175.1" y="133" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="178.08" y="143.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (15 samples, 0.03%; -0.02%)</title><rect x="432.2" y="421" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="435.20" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (7 samples, 0.01%; +0.00%)</title><rect x="919.6" y="357" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="922.56" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (87 samples, 0.18%; +0.00%)</title><rect x="853.8" y="421" width="2.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="856.82" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (18 samples, 0.04%; +0.00%)</title><rect x="743.5" y="309" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="746.52" y="319.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (5 samples, 0.01%; 0.00%)</title><rect x="19.8" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.76" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (6 samples, 0.01%; 0.00%)</title><rect x="401.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="404.33" y="239.5" ></text>
</g>
<g >
<title>abstract_type::from_string (5 samples, 0.01%; 0.00%)</title><rect x="20.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.83" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (390 samples, 0.82%; +0.00%)</title><rect x="906.2" y="357" width="9.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="909.23" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (80 samples, 0.17%; -0.06%)</title><rect x="404.0" y="213" width="2.0" height="15.0" fill="rgb(125,125,255)" rx="2" ry="2" />
<text  x="407.05" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (17 samples, 0.04%; -0.01%)</title><rect x="140.8" y="261" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="143.79" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (27 samples, 0.06%; -0.00%)</title><rect x="515.7" y="197" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="518.75" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="1143.3" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1146.28" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (20 samples, 0.04%; +0.01%)</title><rect x="461.7" y="261" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="464.72" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (13 samples, 0.03%; 0.00%)</title><rect x="18.2" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.21" y="319.5" ></text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; -0.02%)</title><rect x="1122.6" y="421" width="0.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1125.64" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (25 samples, 0.05%; 0.00%)</title><rect x="762.2" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.24" y="319.5" ></text>
</g>
<g >
<title>operator delete (63 samples, 0.13%; +0.02%)</title><rect x="565.3" y="325" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="568.29" y="335.5" ></text>
</g>
<g >
<title>__tls_init (15 samples, 0.03%; +0.02%)</title><rect x="147.8" y="229" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="150.78" y="239.5" ></text>
</g>
<g >
<title>tombstone::apply (15 samples, 0.03%; +0.00%)</title><rect x="399.5" y="197" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="402.48" y="207.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (7 samples, 0.01%; -0.01%)</title><rect x="829.5" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="832.54" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (48 samples, 0.10%; +0.03%)</title><rect x="876.9" y="421" width="1.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="879.93" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,187 samples, 15.20%; 0.00%)</title><rect x="114.2" y="389" width="179.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="117.19" y="399.5" >merging_reader&lt;mutation..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (35 samples, 0.07%; +0.00%)</title><rect x="1105.5" y="389" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1108.48" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (30 samples, 0.06%; +0.02%)</title><rect x="825.4" y="213" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="828.45" y="223.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (7 samples, 0.01%; -0.04%)</title><rect x="436.1" y="357" width="0.2" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="439.14" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (54 samples, 0.11%; +0.00%)</title><rect x="830.3" y="293" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="833.32" y="303.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (15 samples, 0.03%; +0.02%)</title><rect x="530.3" y="341" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="533.27" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (585 samples, 1.24%; +0.01%)</title><rect x="809.2" y="229" width="14.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="812.23" y="239.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (15 samples, 0.03%; +0.01%)</title><rect x="241.6" y="213" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="244.61" y="223.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; 0.00%)</title><rect x="795.6" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.63" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (7 samples, 0.01%; -0.02%)</title><rect x="619.0" y="421" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="621.97" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (26 samples, 0.05%; 0.00%)</title><rect x="641.6" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.55" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (14 samples, 0.03%; +0.02%)</title><rect x="629.5" y="373" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="632.52" y="383.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (989 samples, 2.09%; -0.00%)</title><rect x="804.1" y="277" width="24.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="807.14" y="287.5" >a..</text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (26 samples, 0.05%; 0.00%)</title><rect x="886.7" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.74" y="447.5" ></text>
</g>
<g >
<title>local_schema_registry (5 samples, 0.01%; -0.02%)</title><rect x="978.1" y="357" width="0.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="981.05" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (8 samples, 0.02%; 0.00%)</title><rect x="886.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.14" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (462 samples, 0.98%; +0.01%)</title><rect x="712.5" y="485" width="11.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="715.50" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (456 samples, 0.96%; -0.01%)</title><rect x="922.4" y="389" width="11.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="925.43" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (33 samples, 0.07%; 0.00%)</title><rect x="885.0" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.97" y="511.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (6 samples, 0.01%; -0.00%)</title><rect x="1047.9" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1050.90" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="412.8" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="415.76" y="191.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (5 samples, 0.01%; +0.01%)</title><rect x="520.9" y="245" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="523.87" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (82 samples, 0.17%; -0.03%)</title><rect x="490.8" y="197" width="2.0" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="493.79" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (10 samples, 0.02%; +0.01%)</title><rect x="1112.6" y="357" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1115.64" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="470.6" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="473.63" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (24 samples, 0.05%; +0.05%)</title><rect x="493.8" y="213" width="0.6" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="496.76" y="223.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (11 samples, 0.02%; -0.00%)</title><rect x="864.4" y="421" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="867.38" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt (5 samples, 0.01%; -0.01%)</title><rect x="482.2" y="277" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="485.16" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (13 samples, 0.03%; +0.02%)</title><rect x="927.1" y="373" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="930.14" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.00%)</title><rect x="1097.8" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1100.81" y="351.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (26 samples, 0.05%; 0.00%)</title><rect x="612.7" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.68" y="415.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (52 samples, 0.11%; -0.01%)</title><rect x="881.8" y="453" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="884.85" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (5 samples, 0.01%; 0.00%)</title><rect x="20.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.83" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (7 samples, 0.01%; +0.01%)</title><rect x="579.8" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="582.81" y="319.5" ></text>
</g>
<g >
<title>make_combined_reader (777 samples, 1.64%; -0.00%)</title><rect x="444.6" y="325" width="19.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="447.55" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; 0.00%)</title><rect x="735.0" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.96" y="447.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; -0.00%)</title><rect x="832.7" y="309" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="835.66" y="319.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (6 samples, 0.01%; 0.00%)</title><rect x="1138.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.14" y="239.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (20 samples, 0.04%; -0.01%)</title><rect x="473.1" y="277" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="476.05" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; +0.02%)</title><rect x="635.9" y="373" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="638.94" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (9 samples, 0.02%; -0.01%)</title><rect x="398.2" y="149" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="401.16" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (33 samples, 0.07%; +0.01%)</title><rect x="708.7" y="485" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="711.71" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.01%; -0.01%)</title><rect x="1103.1" y="373" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1106.08" y="383.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (11 samples, 0.02%; -0.00%)</title><rect x="14.4" y="613" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="17.42" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; +0.00%)</title><rect x="100.5" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="103.46" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="33.9" y="453" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="36.88" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (26 samples, 0.05%; +0.00%)</title><rect x="886.7" y="421" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="889.74" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (33 samples, 0.07%; +0.00%)</title><rect x="955.5" y="373" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="958.52" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (30 samples, 0.06%; +0.01%)</title><rect x="115.5" y="373" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="118.51" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (20 samples, 0.04%; -0.00%)</title><rect x="672.5" y="485" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="675.55" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (58 samples, 0.12%; +0.00%)</title><rect x="1103.4" y="373" width="1.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1106.38" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (5 samples, 0.01%; +0.01%)</title><rect x="630.7" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="633.67" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (45 samples, 0.10%; +0.01%)</title><rect x="228.7" y="149" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="231.66" y="159.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (251 samples, 0.53%; +0.01%)</title><rect x="760.4" y="341" width="6.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="763.36" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (6 samples, 0.01%; +0.00%)</title><rect x="741.9" y="405" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="744.90" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (107 samples, 0.23%; 0.00%)</title><rect x="421.6" y="309" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="424.64" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (19 samples, 0.04%; -0.01%)</title><rect x="142.8" y="277" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="145.84" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (672 samples, 1.42%; +0.03%)</title><rect x="381.8" y="181" width="16.7" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="384.76" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (9 samples, 0.02%; +0.01%)</title><rect x="797.4" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="800.42" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (5 samples, 0.01%; -0.00%)</title><rect x="216.1" y="133" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="219.08" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; -0.01%)</title><rect x="156.7" y="165" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="159.71" y="175.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (7 samples, 0.01%; -0.00%)</title><rect x="1037.3" y="181" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1040.27" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="232.3" y="181" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="235.30" y="191.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (5 samples, 0.01%; +0.01%)</title><rect x="743.8" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="746.84" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.00%)</title><rect x="650.8" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="653.81" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (61 samples, 0.13%; 0.00%)</title><rect x="864.8" y="421" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (8 samples, 0.02%; +0.00%)</title><rect x="578.0" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="580.96" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="1047.8" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.78" y="271.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (9 samples, 0.02%; -0.00%)</title><rect x="541.0" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="543.96" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (7 samples, 0.01%; -0.00%)</title><rect x="141.8" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="144.84" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (9 samples, 0.02%; -0.00%)</title><rect x="1055.2" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1058.21" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (11 samples, 0.02%; +0.01%)</title><rect x="590.9" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="593.87" y="351.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (37 samples, 0.08%; -0.01%)</title><rect x="745.6" y="293" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="748.59" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (13 samples, 0.03%; +0.00%)</title><rect x="18.2" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.21" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (24 samples, 0.05%; +0.02%)</title><rect x="618.2" y="437" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="621.24" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (24 samples, 0.05%; -0.02%)</title><rect x="819.8" y="117" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="822.76" y="127.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (17 samples, 0.04%; -0.02%)</title><rect x="813.8" y="165" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="816.84" y="175.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (31 samples, 0.07%; -0.01%)</title><rect x="31.5" y="485" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="34.51" y="495.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (14 samples, 0.03%; 0.00%)</title><rect x="887.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (95 samples, 0.20%; +0.00%)</title><rect x="691.8" y="469" width="2.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="694.81" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.02%; -0.01%)</title><rect x="1169.5" y="453" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1172.49" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (5 samples, 0.01%; -0.00%)</title><rect x="759.0" y="357" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="762.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (28 samples, 0.06%; +0.03%)</title><rect x="327.7" y="181" width="0.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="330.71" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (228 samples, 0.48%; +0.03%)</title><rect x="135.1" y="261" width="5.7" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="138.10" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1,269 samples, 2.68%; -0.01%)</title><rect x="1016.6" y="277" width="31.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1019.61" y="287.5" >se..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.03%; -0.02%)</title><rect x="79.2" y="453" width="0.3" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="82.23" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="598.3" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="601.33" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (10 samples, 0.02%; -0.01%)</title><rect x="71.7" y="405" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="74.69" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (74 samples, 0.16%; -0.00%)</title><rect x="38.7" y="469" width="1.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="41.67" y="479.5" ></text>
</g>
<g >
<title>row_tombstone::apply (25 samples, 0.05%; +0.00%)</title><rect x="399.3" y="213" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="402.33" y="223.5" ></text>
</g>
<g >
<title>seastar::app_template::run (46,319 samples, 97.96%; 0.00%)</title><rect x="22.2" y="597" width="1155.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (10 samples, 0.02%; +0.00%)</title><rect x="35.7" y="421" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="38.70" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (6 samples, 0.01%; -0.00%)</title><rect x="23.4" y="517" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="26.43" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.01%; +0.01%)</title><rect x="876.8" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="879.81" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; +0.00%)</title><rect x="257.0" y="213" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="259.96" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (7 samples, 0.01%; +0.01%)</title><rect x="617.6" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="620.64" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (35 samples, 0.07%; -0.01%)</title><rect x="221.6" y="133" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="224.65" y="143.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (41 samples, 0.09%; -0.00%)</title><rect x="925.7" y="341" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="928.70" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="645.4" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="648.42" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (14 samples, 0.03%; -0.01%)</title><rect x="903.1" y="405" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="906.06" y="415.5" ></text>
</g>
<g >
<title>query::result::result (39 samples, 0.08%; +0.00%)</title><rect x="604.1" y="421" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="607.07" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (7 samples, 0.01%; +0.00%)</title><rect x="340.3" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="343.31" y="175.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="430.2" y="389" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="433.20" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (159 samples, 0.34%; +0.01%)</title><rect x="219.2" y="165" width="3.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="222.18" y="175.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.01%; +0.01%)</title><rect x="1073.1" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1076.11" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; 0.00%)</title><rect x="947.3" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.28" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (25 samples, 0.05%; -0.00%)</title><rect x="886.0" y="501" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="888.97" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (20 samples, 0.04%; 0.00%)</title><rect x="1177.3" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.35" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (10 samples, 0.02%; -0.01%)</title><rect x="1037.9" y="197" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1040.87" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (35 samples, 0.07%; -0.00%)</title><rect x="521.0" y="277" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="524.02" y="287.5" ></text>
</g>
<g >
<title>database::find_uuid (208 samples, 0.44%; 0.00%)</title><rect x="776.9" y="389" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.86" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (456 samples, 0.96%; -0.04%)</title><rect x="131.4" y="277" width="11.4" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="134.41" y="287.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; -0.00%)</title><rect x="826.4" y="245" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="829.37" y="255.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (5 samples, 0.01%; -0.01%)</title><rect x="128.2" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="131.24" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (26 samples, 0.05%; -0.01%)</title><rect x="173.8" y="133" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="176.76" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (15 samples, 0.03%; +0.01%)</title><rect x="881.1" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="884.07" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (10 samples, 0.02%; +0.00%)</title><rect x="954.3" y="389" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="957.32" y="399.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (16 samples, 0.03%; -0.04%)</title><rect x="320.1" y="165" width="0.4" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="323.12" y="175.5" ></text>
</g>
<g >
<title>operator new (164 samples, 0.35%; +0.01%)</title><rect x="1022.8" y="245" width="4.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1025.80" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (137 samples, 0.29%; -0.00%)</title><rect x="1051.1" y="277" width="3.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1054.07" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (11 samples, 0.02%; -0.00%)</title><rect x="999.6" y="277" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1002.56" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (25 samples, 0.05%; +0.05%)</title><rect x="727.9" y="501" width="0.6" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="730.87" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (115 samples, 0.24%; +0.01%)</title><rect x="368.7" y="165" width="2.9" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="371.71" y="175.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (484 samples, 1.02%; +0.00%)</title><rect x="318.0" y="213" width="12.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="321.00" y="223.5" ></text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%; -0.00%)</title><rect x="538.1" y="293" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="541.14" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="198.1" y="101" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="201.12" y="111.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (5 samples, 0.01%; -0.00%)</title><rect x="985.7" y="357" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="988.69" y="367.5" ></text>
</g>
<g >
<title>auth::resource::parent (109 samples, 0.23%; +0.01%)</title><rect x="797.0" y="325" width="2.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="800.02" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (50 samples, 0.11%; -0.01%)</title><rect x="997.7" y="277" width="1.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1000.72" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (23 samples, 0.05%; +0.01%)</title><rect x="444.0" y="325" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="446.98" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (82 samples, 0.17%; -0.02%)</title><rect x="660.1" y="453" width="2.0" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="663.09" y="463.5" ></text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; +0.01%)</title><rect x="58.3" y="453" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="61.26" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (19 samples, 0.04%; +0.02%)</title><rect x="460.0" y="261" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="463.05" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (42 samples, 0.09%; -0.01%)</title><rect x="951.4" y="373" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="954.45" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (8 samples, 0.02%; -0.01%)</title><rect x="375.6" y="197" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="378.65" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (32 samples, 0.07%; 0.00%)</title><rect x="567.7" y="293" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.71" y="303.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (7 samples, 0.01%; +0.00%)</title><rect x="720.0" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="723.04" y="431.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.01%; 0.00%)</title><rect x="1139.5" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.51" y="159.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (8 samples, 0.02%; -0.00%)</title><rect x="707.9" y="453" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="710.86" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (17 samples, 0.04%; +0.01%)</title><rect x="267.0" y="277" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="270.04" y="287.5" ></text>
</g>
<g >
<title>db::block_for (5 samples, 0.01%; -0.00%)</title><rect x="1067.4" y="341" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1070.42" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (6 samples, 0.01%; -0.01%)</title><rect x="1098.8" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1101.81" y="351.5" ></text>
</g>
<g >
<title>schema::position (7 samples, 0.01%; +0.01%)</title><rect x="946.9" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="949.88" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (10 samples, 0.02%; -0.00%)</title><rect x="1043.0" y="197" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1045.99" y="207.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (5 samples, 0.01%; -0.01%)</title><rect x="517.3" y="213" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="520.35" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (37 samples, 0.08%; +0.02%)</title><rect x="460.8" y="261" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="463.80" y="271.5" ></text>
</g>
<g >
<title>operator new (23 samples, 0.05%; -0.00%)</title><rect x="541.4" y="261" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="544.40" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (54 samples, 0.11%; +0.01%)</title><rect x="842.8" y="341" width="1.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="845.82" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (61 samples, 0.13%; -0.01%)</title><rect x="842.6" y="357" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="845.64" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; -0.00%)</title><rect x="964.7" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="967.65" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (102 samples, 0.22%; -0.01%)</title><rect x="1112.1" y="389" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1115.14" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="15.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (9 samples, 0.02%; -0.00%)</title><rect x="140.3" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="143.27" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (54 samples, 0.11%; +0.01%)</title><rect x="1161.8" y="453" width="1.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1164.78" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (18 samples, 0.04%; +0.03%)</title><rect x="899.9" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="902.89" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (11 samples, 0.02%; +0.01%)</title><rect x="1108.3" y="373" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1111.32" y="383.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (182 samples, 0.38%; +0.01%)</title><rect x="762.0" y="325" width="4.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="765.04" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%; +0.00%)</title><rect x="447.3" y="277" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="450.30" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (90 samples, 0.19%; +0.01%)</title><rect x="250.8" y="213" width="2.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="253.82" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (6,063 samples, 12.82%; +0.05%)</title><rect x="957.3" y="421" width="151.3" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="960.31" y="431.5" >cql3::statements::s..</text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2,220 samples, 4.70%; -0.01%)</title><rect x="1000.8" y="325" width="55.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1003.79" y="335.5" >servi..</text>
</g>
<g >
<title>operator delete (50 samples, 0.11%; -0.01%)</title><rect x="526.8" y="325" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="529.76" y="335.5" ></text>
</g>
<g >
<title>operator delete (45 samples, 0.10%; +0.02%)</title><rect x="587.1" y="357" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="590.10" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="463.7" y="309" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="466.74" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (55 samples, 0.12%; 0.00%)</title><rect x="597.4" y="421" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.43" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.10%; 0.00%)</title><rect x="15.9" y="309" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.89" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (111 samples, 0.23%; +0.00%)</title><rect x="997.1" y="293" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1000.07" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.01%)</title><rect x="890.8" y="437" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="893.76" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="271.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (6 samples, 0.01%; +0.00%)</title><rect x="705.4" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="708.41" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (89 samples, 0.19%; +0.07%)</title><rect x="307.7" y="261" width="2.3" height="15.0" fill="rgb(255,116,116)" rx="2" ry="2" />
<text  x="310.75" y="271.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (9 samples, 0.02%; -0.10%)</title><rect x="1178.1" y="629" width="0.2" height="15.0" fill="rgb(78,78,255)" rx="2" ry="2" />
<text  x="1181.10" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (21 samples, 0.04%; -0.04%)</title><rect x="223.5" y="165" width="0.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="226.50" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (14 samples, 0.03%; +0.03%)</title><rect x="255.1" y="229" width="0.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="258.06" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="564.5" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="567.46" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (7 samples, 0.01%; +0.00%)</title><rect x="841.0" y="357" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="843.97" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (2,034 samples, 4.30%; -0.02%)</title><rect x="1005.3" y="309" width="50.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1008.30" y="319.5" >servi..</text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (518 samples, 1.10%; +0.00%)</title><rect x="62.8" y="453" width="13.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="65.83" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (104 samples, 0.22%; +0.00%)</title><rect x="1033.7" y="165" width="2.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1036.65" y="175.5" ></text>
</g>
<g >
<title>main (46,319 samples, 97.96%; 0.00%)</title><rect x="22.2" y="613" width="1155.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="623.5" >main</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (66 samples, 0.14%; -0.01%)</title><rect x="1157.4" y="421" width="1.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1160.36" y="431.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (33 samples, 0.07%; +0.01%)</title><rect x="499.0" y="309" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="502.00" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (55 samples, 0.12%; -0.03%)</title><rect x="575.8" y="261" width="1.3" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="578.77" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (14 samples, 0.03%; +0.02%)</title><rect x="78.5" y="453" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="81.48" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="680.1" y="469" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="683.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (21 samples, 0.04%; -0.01%)</title><rect x="1158.5" y="357" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1161.48" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.01%; +0.01%)</title><rect x="857.0" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="859.97" y="447.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (5 samples, 0.01%; 0.00%)</title><rect x="532.3" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.32" y="335.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (19 samples, 0.04%; +0.01%)</title><rect x="161.9" y="213" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="164.90" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (36 samples, 0.08%; +0.02%)</title><rect x="127.3" y="277" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="130.34" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="1000.6" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1003.61" y="335.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (119 samples, 0.25%; +0.00%)</title><rect x="744.1" y="341" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="747.09" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (10 samples, 0.02%; +0.00%)</title><rect x="947.5" y="405" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="950.51" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="624.3" y="437" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="627.26" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4,991 samples, 10.56%; +0.01%)</title><rect x="300.0" y="341" width="124.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="303.03" y="351.5" >seastar::futuri..</text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (7 samples, 0.01%; +0.01%)</title><rect x="230.7" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="233.66" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (17 samples, 0.04%; -0.01%)</title><rect x="1126.7" y="373" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1129.71" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (104 samples, 0.22%; +0.00%)</title><rect x="36.0" y="437" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="38.98" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (50 samples, 0.11%; 0.00%)</title><rect x="338.6" y="181" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="341.62" y="191.5" ></text>
</g>
<g >
<title>database::find_schema (295 samples, 0.62%; -0.00%)</title><rect x="774.7" y="405" width="7.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="777.69" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (25 samples, 0.05%; 0.00%)</title><rect x="215.6" y="165" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.63" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (33 samples, 0.07%; +0.05%)</title><rect x="984.8" y="357" width="0.8" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="987.77" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (6 samples, 0.01%; 0.00%)</title><rect x="668.4" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.38" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (148 samples, 0.31%; +0.02%)</title><rect x="996.1" y="309" width="3.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="999.14" y="319.5" ></text>
</g>
<g >
<title>operator new (19 samples, 0.04%; 0.00%)</title><rect x="526.0" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="529.01" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (88 samples, 0.19%; 0.00%)</title><rect x="820.8" y="133" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.78" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (20 samples, 0.04%; +0.01%)</title><rect x="557.6" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="560.63" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (8 samples, 0.02%; -0.00%)</title><rect x="1076.0" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1078.95" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; +0.00%)</title><rect x="569.3" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="572.25" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="124.7" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="127.75" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (17 samples, 0.04%; +0.00%)</title><rect x="603.0" y="389" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="605.97" y="399.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%; +0.01%)</title><rect x="415.7" y="213" width="0.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="418.68" y="223.5" ></text>
</g>
<g >
<title>operator new (28 samples, 0.06%; +0.00%)</title><rect x="214.9" y="165" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="217.91" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (19 samples, 0.04%; +0.01%)</title><rect x="918.9" y="325" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="921.91" y="335.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.04%; +0.00%)</title><rect x="855.2" y="373" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="858.22" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (5 samples, 0.01%; +0.00%)</title><rect x="630.5" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="633.55" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; +0.00%)</title><rect x="309.8" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="312.79" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (41 samples, 0.09%; +0.00%)</title><rect x="1053.5" y="245" width="1.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1056.47" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (191 samples, 0.40%; +0.01%)</title><rect x="742.3" y="373" width="4.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="745.35" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%; -0.00%)</title><rect x="776.5" y="325" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="779.46" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (9 samples, 0.02%; -0.02%)</title><rect x="618.9" y="437" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="621.92" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (28 samples, 0.06%; +0.00%)</title><rect x="343.9" y="181" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="346.93" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (10 samples, 0.02%; +0.00%)</title><rect x="436.5" y="357" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="439.52" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (5 samples, 0.01%; -0.00%)</title><rect x="792.7" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="795.73" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (13 samples, 0.03%; +0.00%)</title><rect x="292.7" y="357" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="295.72" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (9 samples, 0.02%; +0.00%)</title><rect x="1049.4" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1052.38" y="287.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; +0.01%)</title><rect x="654.1" y="485" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="657.05" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (23 samples, 0.05%; -0.01%)</title><rect x="138.0" y="245" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="141.02" y="255.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (99 samples, 0.21%; -0.01%)</title><rect x="848.0" y="373" width="2.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="851.03" y="383.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.09%; 0.00%)</title><rect x="1188.8" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.80" y="639.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="15.5" y="229" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.52" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (15 samples, 0.03%; -0.01%)</title><rect x="1102.1" y="357" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1105.13" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="787.7" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.72" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (48 samples, 0.10%; -0.01%)</title><rect x="685.1" y="453" width="1.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="688.15" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (6 samples, 0.01%; 0.00%)</title><rect x="276.8" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="279.80" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (41 samples, 0.09%; +0.01%)</title><rect x="674.1" y="485" width="1.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="677.12" y="495.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (30 samples, 0.06%; +0.00%)</title><rect x="940.2" y="341" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="943.22" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (7 samples, 0.01%; -0.01%)</title><rect x="998.8" y="245" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1001.79" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (48 samples, 0.10%; -0.01%)</title><rect x="775.6" y="341" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="778.61" y="351.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (6 samples, 0.01%; +0.01%)</title><rect x="325.5" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="328.51" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (47 samples, 0.10%; 0.00%)</title><rect x="845.6" y="309" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.61" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (11 samples, 0.02%; +0.00%)</title><rect x="559.0" y="405" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="562.05" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (16 samples, 0.03%; -0.01%)</title><rect x="125.1" y="309" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="128.10" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (94 samples, 0.20%; +0.01%)</title><rect x="688.8" y="485" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="691.84" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (21 samples, 0.04%; -0.02%)</title><rect x="543.5" y="341" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="546.50" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.01%; +0.00%)</title><rect x="983.8" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="986.79" y="351.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; +0.01%)</title><rect x="711.4" y="485" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="714.40" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%; +0.01%)</title><rect x="1062.6" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1065.55" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (5 samples, 0.01%; -0.00%)</title><rect x="973.2" y="373" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="976.16" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (66 samples, 0.14%; +0.07%)</title><rect x="518.6" y="229" width="1.7" height="15.0" fill="rgb(255,110,110)" rx="2" ry="2" />
<text  x="521.64" y="239.5" ></text>
</g>
<g >
<title>operator delete (76 samples, 0.16%; +0.03%)</title><rect x="944.7" y="405" width="1.9" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="947.66" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (6 samples, 0.01%; +0.01%)</title><rect x="636.9" y="421" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="639.86" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (10 samples, 0.02%; +0.01%)</title><rect x="592.4" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="595.36" y="383.5" ></text>
</g>
<g >
<title>__dynamic_cast (24 samples, 0.05%; +0.03%)</title><rect x="658.8" y="469" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="661.77" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (37 samples, 0.08%; 0.00%)</title><rect x="1177.0" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1180.02" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (7 samples, 0.01%; +0.01%)</title><rect x="295.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="298.89" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (6 samples, 0.01%; 0.00%)</title><rect x="1138.1" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.14" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (7 samples, 0.01%; 0.00%)</title><rect x="699.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.82" y="511.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (50 samples, 0.11%; +0.01%)</title><rect x="689.9" y="469" width="1.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="692.94" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (155 samples, 0.33%; +0.01%)</title><rect x="416.3" y="261" width="3.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="419.30" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (11 samples, 0.02%; +0.01%)</title><rect x="222.9" y="133" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="225.87" y="143.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (17 samples, 0.04%; +0.01%)</title><rect x="640.5" y="485" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="643.45" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (474 samples, 1.00%; +0.01%)</title><rect x="279.8" y="341" width="11.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="282.82" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1,810 samples, 3.83%; +0.01%)</title><rect x="171.8" y="181" width="45.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="174.81" y="191.5" >muta..</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (187 samples, 0.40%; +0.01%)</title><rect x="952.5" y="421" width="4.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="955.55" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (40 samples, 0.08%; -0.01%)</title><rect x="414.1" y="213" width="1.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="417.11" y="223.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (17 samples, 0.04%; 0.00%)</title><rect x="1107.7" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.67" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2,289 samples, 4.84%; +0.03%)</title><rect x="167.4" y="213" width="57.1" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="170.39" y="223.5" >logall..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="329.6" y="197" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="332.61" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (50 samples, 0.11%; 0.00%)</title><rect x="1166.5" y="485" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.52" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="679.3" y="485" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="682.26" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (20 samples, 0.04%; -0.01%)</title><rect x="232.9" y="213" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="235.90" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (59 samples, 0.12%; -0.02%)</title><rect x="1107.1" y="405" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1110.15" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (36 samples, 0.08%; -0.01%)</title><rect x="166.2" y="229" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="169.25" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (535 samples, 1.13%; +0.01%)</title><rect x="239.7" y="229" width="13.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="242.72" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1,234 samples, 2.61%; +0.02%)</title><rect x="176.0" y="133" width="30.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="178.95" y="143.5" >co..</text>
</g>
<g >
<title>operator delete (37 samples, 0.08%; +0.02%)</title><rect x="29.8" y="485" width="0.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="32.79" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (4,426 samples, 9.36%; +0.01%)</title><rect x="435.0" y="373" width="110.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="438.04" y="383.5" >std::_Functio..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (149 samples, 0.32%; +0.01%)</title><rect x="815.8" y="165" width="3.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="818.77" y="175.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (10 samples, 0.02%; +0.02%)</title><rect x="1177.5" y="437" width="0.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1180.47" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (5,662 samples, 11.97%; 0.00%)</title><rect x="965.2" y="405" width="141.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="968.20" y="415.5" >service::storage_..</text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (8 samples, 0.02%; +0.02%)</title><rect x="756.0" y="341" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="759.02" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (16 samples, 0.03%; +0.02%)</title><rect x="1031.5" y="165" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1034.53" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (45 samples, 0.10%; +0.00%)</title><rect x="806.0" y="245" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="808.98" y="255.5" ></text>
</g>
<g >
<title>compound_type&lt; (82 samples, 0.17%; -0.01%)</title><rect x="922.5" y="373" width="2.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="925.48" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (5 samples, 0.01%; +0.01%)</title><rect x="60.8" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="63.76" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (13 samples, 0.03%; +0.00%)</title><rect x="991.8" y="293" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="994.83" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (59 samples, 0.12%; -0.01%)</title><rect x="396.9" y="165" width="1.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="399.91" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="420.3" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="423.34" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (14 samples, 0.03%; +0.01%)</title><rect x="1101.8" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1104.76" y="351.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (120 samples, 0.25%; +0.01%)</title><rect x="286.4" y="293" width="3.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="289.43" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; 0.00%)</title><rect x="752.7" y="389" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.68" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (19 samples, 0.04%; -0.03%)</title><rect x="69.9" y="373" width="0.4" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="72.87" y="383.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (6 samples, 0.01%; -0.01%)</title><rect x="837.6" y="309" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="840.58" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (5 samples, 0.01%; 0.00%)</title><rect x="891.2" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.21" y="479.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (6 samples, 0.01%; +0.00%)</title><rect x="413.0" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="415.96" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (97 samples, 0.21%; +0.01%)</title><rect x="675.7" y="453" width="2.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="678.67" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (17 samples, 0.04%; +0.01%)</title><rect x="127.8" y="261" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="130.82" y="271.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (49 samples, 0.10%; 0.00%)</title><rect x="837.9" y="309" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.90" y="319.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (17 samples, 0.04%; +0.02%)</title><rect x="944.2" y="405" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="947.24" y="415.5" ></text>
</g>
<g >
<title>operator delete (42 samples, 0.09%; +0.04%)</title><rect x="452.2" y="277" width="1.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="455.21" y="287.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (5 samples, 0.01%; +0.01%)</title><rect x="579.4" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="582.44" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (7 samples, 0.01%; 0.00%)</title><rect x="919.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.38" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (160 samples, 0.34%; +0.03%)</title><rect x="1062.8" y="309" width="4.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1065.83" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (28 samples, 0.06%; +0.00%)</title><rect x="868.5" y="357" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="871.50" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (15 samples, 0.03%; 0.00%)</title><rect x="887.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::stats (36 samples, 0.08%; +0.01%)</title><rect x="538.4" y="293" width="0.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="541.43" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (18 samples, 0.04%; +0.01%)</title><rect x="660.8" y="421" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="663.79" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (109 samples, 0.23%; +0.01%)</title><rect x="809.7" y="213" width="2.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="812.65" y="223.5" ></text>
</g>
<g >
<title>operator new (42 samples, 0.09%; +0.00%)</title><rect x="879.7" y="437" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="882.73" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (88 samples, 0.19%; -0.03%)</title><rect x="455.3" y="309" width="2.2" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="458.31" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (74 samples, 0.16%; +0.01%)</title><rect x="848.6" y="325" width="1.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="851.56" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (13 samples, 0.03%; +0.00%)</title><rect x="598.5" y="405" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="601.48" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="914.6" y="309" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="917.62" y="319.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (148 samples, 0.31%; -0.02%)</title><rect x="355.4" y="165" width="3.7" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="358.44" y="175.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="841.4" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="844.45" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (47 samples, 0.10%; 0.00%)</title><rect x="1128.5" y="389" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.48" y="399.5" ></text>
</g>
<g >
<title>db::validate_for_read (6 samples, 0.01%; +0.01%)</title><rect x="1122.5" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1125.47" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (59 samples, 0.12%; +0.02%)</title><rect x="191.8" y="69" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="194.80" y="79.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (18 samples, 0.04%; -0.00%)</title><rect x="734.2" y="389" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="737.19" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (5 samples, 0.01%; +0.01%)</title><rect x="832.2" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="835.24" y="335.5" ></text>
</g>
<g >
<title>TLS init function for seastar::testing::local_random_engine (5 samples, 0.01%; +0.01%)</title><rect x="732.0" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="735.02" y="479.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (17 samples, 0.04%; +0.01%)</title><rect x="237.0" y="245" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="240.00" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (5 samples, 0.01%; +0.00%)</title><rect x="663.7" y="469" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="666.74" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (9 samples, 0.02%; +0.01%)</title><rect x="643.7" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="646.72" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3,433 samples, 7.26%; +0.02%)</title><rect x="315.1" y="229" width="85.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="318.08" y="239.5" >compact_mu..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (18 samples, 0.04%; +0.00%)</title><rect x="543.0" y="341" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="545.98" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (9 samples, 0.02%; 0.00%)</title><rect x="453.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="456.91" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="1131.1" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1134.05" y="431.5" ></text>
</g>
<g >
<title>operator new (48 samples, 0.10%; 0.00%)</title><rect x="876.9" y="437" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.93" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.03%; +0.00%)</title><rect x="214.1" y="117" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="217.14" y="127.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (14 samples, 0.03%; +0.01%)</title><rect x="1054.9" y="277" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1057.87" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.02%; +0.00%)</title><rect x="341.6" y="165" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="344.56" y="175.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (22 samples, 0.05%; +0.00%)</title><rect x="1113.2" y="357" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1116.16" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (9 samples, 0.02%; +0.01%)</title><rect x="923.8" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="926.85" y="351.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; +0.01%)</title><rect x="950.7" y="373" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="953.73" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (9 samples, 0.02%; +0.01%)</title><rect x="259.2" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="262.18" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (9 samples, 0.02%; 0.00%)</title><rect x="23.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.83" y="527.5" ></text>
</g>
<g >
<title>operator delete (40 samples, 0.08%; -0.01%)</title><rect x="700.4" y="485" width="1.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="703.45" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; 0.00%)</title><rect x="30.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.49" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (25 samples, 0.05%; 0.00%)</title><rect x="20.8" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.81" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.00%)</title><rect x="807.7" y="245" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="810.73" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (8 samples, 0.02%; -0.02%)</title><rect x="1006.9" y="293" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1009.90" y="303.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; -0.00%)</title><rect x="156.7" y="181" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="159.71" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (28 samples, 0.06%; +0.00%)</title><rect x="504.2" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="507.20" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (25 samples, 0.05%; -0.03%)</title><rect x="621.6" y="437" width="0.6" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="624.59" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (49 samples, 0.10%; 0.00%)</title><rect x="423.1" y="277" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="426.09" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (8 samples, 0.02%; +0.01%)</title><rect x="973.3" y="373" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="976.29" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6 samples, 0.01%; -0.00%)</title><rect x="115.1" y="373" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="118.11" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (47 samples, 0.10%; +0.01%)</title><rect x="705.9" y="453" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="708.94" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (140 samples, 0.30%; -0.00%)</title><rect x="763.0" y="293" width="3.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="766.01" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.01%; 0.00%)</title><rect x="17.9" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.89" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (26 samples, 0.05%; +0.02%)</title><rect x="454.1" y="277" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="457.13" y="287.5" ></text>
</g>
<g >
<title>service::client_state::has_access (1,930 samples, 4.08%; -0.00%)</title><rect x="791.0" y="373" width="48.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="793.96" y="383.5" >serv..</text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (475 samples, 1.00%; +0.04%)</title><rect x="482.8" y="309" width="11.9" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="485.81" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (28 samples, 0.06%; -0.03%)</title><rect x="396.2" y="165" width="0.7" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="399.21" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (81 samples, 0.17%; -0.02%)</title><rect x="981.5" y="325" width="2.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="984.55" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (5 samples, 0.01%; +0.00%)</title><rect x="632.0" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="635.04" y="447.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (26 samples, 0.05%; 0.00%)</title><rect x="586.4" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="589.45" y="367.5" ></text>
</g>
<g >
<title>row::row (7 samples, 0.01%; +0.01%)</title><rect x="259.0" y="213" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="261.96" y="223.5" ></text>
</g>
<g >
<title>all (47,284 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; +0.01%)</title><rect x="1077.9" y="325" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1080.90" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (10 samples, 0.02%; 0.00%)</title><rect x="637.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.08" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (22 samples, 0.05%; +0.02%)</title><rect x="747.5" y="389" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="750.54" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (8 samples, 0.02%; +0.01%)</title><rect x="314.3" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="317.31" y="207.5" ></text>
</g>
<g >
<title>tracing::add_table_name (6 samples, 0.01%; +0.01%)</title><rect x="1137.6" y="437" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1140.57" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (41 samples, 0.09%; 0.00%)</title><rect x="677.1" y="437" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.06" y="447.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (6 samples, 0.01%; +0.00%)</title><rect x="1022.6" y="245" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1025.65" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (91 samples, 0.19%; -0.01%)</title><rect x="867.7" y="373" width="2.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="870.72" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (212 samples, 0.45%; 0.00%)</title><rect x="15.4" y="421" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.42" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (20 samples, 0.04%; -0.00%)</title><rect x="212.1" y="101" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="215.07" y="111.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; +0.00%)</title><rect x="704.7" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="707.74" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (5,337 samples, 11.29%; +0.03%)</title><rect x="737.7" y="453" width="133.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="740.73" y="463.5" >single_node_cql_..</text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (4,208 samples, 8.90%; -0.05%)</title><rect x="748.4" y="437" width="105.0" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="751.41" y="447.5" >cql3::query_..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (110 samples, 0.23%; +0.00%)</title><rect x="68.4" y="405" width="2.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="71.37" y="415.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (8 samples, 0.02%; +0.01%)</title><rect x="683.1" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="686.10" y="463.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (2,594 samples, 5.49%; +0.03%)</title><rect x="465.5" y="341" width="64.8" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="468.54" y="351.5" >memtabl..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (12 samples, 0.03%; 0.00%)</title><rect x="331.2" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="334.18" y="207.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (9 samples, 0.02%; 0.00%)</title><rect x="983.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.57" y="351.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (351 samples, 0.74%; -0.02%)</title><rect x="594.9" y="437" width="8.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="597.91" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (6 samples, 0.01%; 0.00%)</title><rect x="593.5" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.49" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (14 samples, 0.03%; -0.01%)</title><rect x="884.3" y="501" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="887.32" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (6 samples, 0.01%; 0.00%)</title><rect x="17.7" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.66" y="351.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (103 samples, 0.22%; +0.00%)</title><rect x="524.2" y="325" width="2.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="527.18" y="335.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (5 samples, 0.01%; 0.00%)</title><rect x="927.7" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.67" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (38 samples, 0.08%; +0.00%)</title><rect x="662.7" y="453" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="665.69" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (15 samples, 0.03%; +0.00%)</title><rect x="451.8" y="261" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="454.84" y="271.5" ></text>
</g>
<g >
<title>operator new (87 samples, 0.18%; 0.00%)</title><rect x="970.7" y="373" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="973.67" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (18 samples, 0.04%; -0.01%)</title><rect x="522.3" y="277" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="525.29" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (19 samples, 0.04%; +0.01%)</title><rect x="635.0" y="373" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="638.04" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (21 samples, 0.04%; -0.02%)</title><rect x="558.8" y="421" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="561.80" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (6 samples, 0.01%; +0.01%)</title><rect x="651.9" y="485" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="654.93" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (19 samples, 0.04%; -0.00%)</title><rect x="849.4" y="293" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="852.36" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (34 samples, 0.07%; 0.00%)</title><rect x="81.0" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.00" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (60 samples, 0.13%; -0.02%)</title><rect x="817.8" y="133" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="820.81" y="143.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (9 samples, 0.02%; +0.00%)</title><rect x="330.7" y="213" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="333.73" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,615 samples, 9.76%; 0.00%)</title><rect x="145.2" y="277" width="115.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.16" y="287.5" >logalloc::allo..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (7 samples, 0.01%; -0.00%)</title><rect x="842.0" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="845.02" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (5 samples, 0.01%; -0.06%)</title><rect x="998.7" y="261" width="0.1" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1001.67" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (23 samples, 0.05%; -0.03%)</title><rect x="488.9" y="197" width="0.6" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="491.90" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (11 samples, 0.02%; +0.02%)</title><rect x="1048.3" y="277" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1051.28" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (7 samples, 0.01%; -0.02%)</title><rect x="890.9" y="469" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="893.93" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1,051 samples, 2.22%; -0.00%)</title><rect x="803.8" y="293" width="26.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="806.79" y="303.5" >s..</text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (5 samples, 0.01%; +0.01%)</title><rect x="731.9" y="469" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="734.89" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::builder (157 samples, 0.33%; +0.02%)</title><rect x="606.6" y="421" width="4.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="609.64" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (26 samples, 0.05%; 0.00%)</title><rect x="886.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.74" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (18 samples, 0.04%; -0.01%)</title><rect x="746.5" y="293" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="749.51" y="303.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (10 samples, 0.02%; -0.00%)</title><rect x="720.2" y="421" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="723.21" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (64 samples, 0.14%; -0.05%)</title><rect x="60.9" y="437" width="1.6" height="15.0" fill="rgb(137,137,255)" rx="2" ry="2" />
<text  x="63.91" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (111 samples, 0.23%; +0.01%)</title><rect x="1040.5" y="229" width="2.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1043.47" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (643 samples, 1.36%; +0.02%)</title><rect x="807.9" y="245" width="16.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="810.86" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (5 samples, 0.01%; +0.01%)</title><rect x="617.9" y="437" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="620.89" y="447.5" ></text>
</g>
<g >
<title>database::query (159 samples, 0.34%; -0.01%)</title><rect x="42.1" y="501" width="4.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="45.14" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (11 samples, 0.02%; -0.00%)</title><rect x="1139.5" y="181" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1142.46" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (75 samples, 0.16%; +0.00%)</title><rect x="1095.8" y="325" width="1.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1098.77" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (258 samples, 0.55%; -0.01%)</title><rect x="993.4" y="341" width="6.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="996.42" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (5 samples, 0.01%; +0.00%)</title><rect x="258.0" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="260.96" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (12 samples, 0.03%; +0.00%)</title><rect x="572.6" y="277" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="575.60" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%; +0.03%)</title><rect x="296.1" y="389" width="0.5" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="299.07" y="399.5" ></text>
</g>
<g >
<title>operator new (27 samples, 0.06%; +0.01%)</title><rect x="544.4" y="325" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="547.37" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (48 samples, 0.10%; 0.00%)</title><rect x="843.0" y="325" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.97" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (6 samples, 0.01%; +0.00%)</title><rect x="823.0" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="826.03" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (170 samples, 0.36%; +0.03%)</title><rect x="572.9" y="293" width="4.3" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="575.92" y="303.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (416 samples, 0.88%; -0.01%)</title><rect x="484.2" y="277" width="10.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="487.18" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; +0.01%)</title><rect x="529.4" y="325" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="532.35" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (281 samples, 0.59%; +0.02%)</title><rect x="585.2" y="373" width="7.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="588.23" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (20 samples, 0.04%; -0.01%)</title><rect x="643.2" y="485" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="646.17" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (8 samples, 0.02%; -0.00%)</title><rect x="18.3" y="245" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.34" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (314 samples, 0.66%; -0.01%)</title><rect x="1155.5" y="469" width="7.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1158.51" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.01%; -0.00%)</title><rect x="802.7" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="805.71" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (12 samples, 0.03%; +0.01%)</title><rect x="1135.2" y="405" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1138.22" y="415.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="684.4" y="453" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="687.40" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (7 samples, 0.01%; +0.01%)</title><rect x="214.5" y="133" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="217.51" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (10 samples, 0.02%; -0.01%)</title><rect x="720.5" y="437" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="723.49" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.01%; +0.00%)</title><rect x="427.3" y="357" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="430.26" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::run (46,318 samples, 97.96%; 0.00%)</title><rect x="22.2" y="549" width="1155.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (6 samples, 0.01%; +0.01%)</title><rect x="972.9" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="975.89" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="849.4" y="277" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="852.41" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.01%; +0.01%)</title><rect x="899.8" y="421" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="902.77" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; +0.03%)</title><rect x="95.0" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="97.97" y="431.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (11 samples, 0.02%; +0.02%)</title><rect x="721.0" y="437" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="724.01" y="447.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (6 samples, 0.01%; +0.01%)</title><rect x="850.5" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="853.50" y="399.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.01%)</title><rect x="594.1" y="389" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="597.11" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.01%; +0.00%)</title><rect x="78.9" y="453" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="81.93" y="463.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (11 samples, 0.02%; 0.00%)</title><rect x="1139.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.46" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (13 samples, 0.03%; +0.01%)</title><rect x="591.7" y="341" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="594.74" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (16 samples, 0.03%; +0.03%)</title><rect x="339.9" y="181" width="0.4" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="342.86" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (55 samples, 0.12%; -0.00%)</title><rect x="709.7" y="485" width="1.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="712.70" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (35 samples, 0.07%; +0.03%)</title><rect x="652.2" y="485" width="0.9" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="655.21" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.03%)</title><rect x="422.7" y="277" width="0.1" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="425.67" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="383.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (68 samples, 0.14%; +0.07%)</title><rect x="246.2" y="181" width="1.7" height="15.0" fill="rgb(255,119,119)" rx="2" ry="2" />
<text  x="249.20" y="191.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (10 samples, 0.02%; -0.01%)</title><rect x="223.8" y="149" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="226.77" y="159.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (74 samples, 0.16%; -0.00%)</title><rect x="312.7" y="229" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="315.66" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (157 samples, 0.33%; +0.03%)</title><rect x="1022.9" y="229" width="4.0" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1025.95" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (18 samples, 0.04%; -0.01%)</title><rect x="338.2" y="181" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="341.17" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (45 samples, 0.10%; +0.00%)</title><rect x="544.0" y="341" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="547.02" y="351.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (10,181 samples, 21.53%; +0.00%)</title><rect x="886.6" y="501" width="254.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="889.59" y="511.5" >seastar::lambda_task&lt;seastar::exe..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.03%; -0.01%)</title><rect x="413.1" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="416.11" y="207.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (6 samples, 0.01%; +0.00%)</title><rect x="771.8" y="373" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="774.79" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (50 samples, 0.11%; +0.03%)</title><rect x="740.0" y="389" width="1.3" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="743.03" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (488 samples, 1.03%; +0.01%)</title><rect x="581.6" y="389" width="12.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="584.63" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (19 samples, 0.04%; -0.02%)</title><rect x="139.0" y="229" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="141.97" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (47 samples, 0.10%; -0.00%)</title><rect x="961.7" y="389" width="1.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="964.68" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (83 samples, 0.18%; +0.01%)</title><rect x="824.2" y="261" width="2.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="827.15" y="271.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (12 samples, 0.03%; -0.01%)</title><rect x="604.7" y="405" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="607.72" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="285.9" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="288.86" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (33 samples, 0.07%; +0.02%)</title><rect x="620.5" y="437" width="0.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="623.49" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.01%; +0.01%)</title><rect x="156.1" y="197" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="159.11" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::close (1,407 samples, 2.98%; -0.00%)</title><rect x="559.8" y="437" width="35.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="562.77" y="447.5" >qu..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (23 samples, 0.05%; +0.01%)</title><rect x="834.0" y="293" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="836.98" y="303.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (269 samples, 0.57%; +0.02%)</title><rect x="487.7" y="229" width="6.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="490.70" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (435 samples, 0.92%; -0.02%)</title><rect x="510.2" y="261" width="10.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="513.16" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (12 samples, 0.03%; +0.01%)</title><rect x="768.7" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="771.67" y="415.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (8 samples, 0.02%; +0.01%)</title><rect x="839.3" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="842.32" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (10 samples, 0.02%; +0.00%)</title><rect x="607.7" y="405" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="610.71" y="415.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (608 samples, 1.29%; +0.02%)</title><rect x="751.7" y="405" width="15.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="754.71" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; +0.00%)</title><rect x="943.8" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="946.76" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (42 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.02" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="626.7" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="629.68" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (59 samples, 0.12%; +0.02%)</title><rect x="450.0" y="229" width="1.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="453.04" y="239.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (69 samples, 0.15%; +0.04%)</title><rect x="611.6" y="421" width="1.7" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="614.60" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (11 samples, 0.02%; +0.01%)</title><rect x="849.6" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="852.56" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (5 samples, 0.01%; +0.01%)</title><rect x="767.4" y="405" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="770.35" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (24 samples, 0.05%; +0.00%)</title><rect x="713.0" y="469" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="716.00" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (15 samples, 0.03%; +0.00%)</title><rect x="39.9" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="42.90" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (21 samples, 0.04%; +0.00%)</title><rect x="838.6" y="293" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="841.60" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (30 samples, 0.06%; +0.00%)</title><rect x="1168.9" y="469" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1171.94" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (116 samples, 0.25%; +0.02%)</title><rect x="198.3" y="117" width="2.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="201.26" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (31 samples, 0.07%; +0.03%)</title><rect x="696.2" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="699.15" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.01%; 0.00%)</title><rect x="15.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (18 samples, 0.04%; +0.02%)</title><rect x="406.0" y="213" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="409.05" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (13 samples, 0.03%; +0.01%)</title><rect x="1140.8" y="501" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1143.76" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (17 samples, 0.04%; +0.01%)</title><rect x="799.3" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="802.32" y="319.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="591.5" ></text>
</g>
<g >
<title>query_result_builder::consume (5 samples, 0.01%; 0.00%)</title><rect x="699.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.25" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (69 samples, 0.15%; +0.14%)</title><rect x="149.6" y="245" width="1.7" height="15.0" fill="rgb(255,14,14)" rx="2" ry="2" />
<text  x="152.63" y="255.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="698.8" y="485" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="701.80" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (6,347 samples, 13.42%; +0.01%)</title><rect x="118.7" y="357" width="158.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="121.66" y="367.5" >mutation_fragment_me..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (23 samples, 0.05%; -0.00%)</title><rect x="743.4" y="325" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="746.42" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (5 samples, 0.01%; +0.00%)</title><rect x="441.9" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="444.91" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.04%; +0.01%)</title><rect x="1153.7" y="421" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1156.66" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (6 samples, 0.01%; +0.00%)</title><rect x="1118.8" y="341" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1121.83" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (24 samples, 0.05%; +0.02%)</title><rect x="760.9" y="293" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="763.91" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.01%; +0.01%)</title><rect x="314.0" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="317.01" y="223.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.02%; -0.00%)</title><rect x="682.8" y="469" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="685.80" y="479.5" ></text>
</g>
<g >
<title>operator delete (26 samples, 0.05%; +0.02%)</title><rect x="568.8" y="277" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="571.76" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (12 samples, 0.03%; +0.00%)</title><rect x="271.2" y="309" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="274.19" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (23 samples, 0.05%; -0.02%)</title><rect x="540.4" y="245" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="543.38" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (22 samples, 0.05%; -0.01%)</title><rect x="575.0" y="277" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="578.02" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (8 samples, 0.02%; +0.01%)</title><rect x="597.2" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="600.23" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; 0.00%)</title><rect x="622.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.78" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; 0.00%)</title><rect x="984.4" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.39" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (14 samples, 0.03%; +0.00%)</title><rect x="517.8" y="245" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="520.85" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (6 samples, 0.01%; +0.00%)</title><rect x="1043.3" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1046.29" y="255.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (211 samples, 0.45%; 0.00%)</title><rect x="15.4" y="405" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.42" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.01%; 0.00%)</title><rect x="18.8" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.78" y="287.5" ></text>
</g>
<g >
<title>freeze (11 samples, 0.02%; 0.00%)</title><rect x="1139.5" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.46" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (37 samples, 0.08%; +0.00%)</title><rect x="961.9" y="373" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="964.86" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (28 samples, 0.06%; +0.00%)</title><rect x="553.5" y="341" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="556.51" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (5 samples, 0.01%; -0.01%)</title><rect x="665.7" y="453" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="668.71" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="881.3" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.27" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (22 samples, 0.05%; -0.03%)</title><rect x="686.8" y="453" width="0.6" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="689.82" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; +0.02%)</title><rect x="1003.7" y="229" width="0.7" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1006.68" y="239.5" ></text>
</g>
<g >
<title>validation::validate_column_family (333 samples, 0.70%; +0.00%)</title><rect x="842.2" y="389" width="8.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="845.19" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (26 samples, 0.05%; -0.00%)</title><rect x="1035.6" y="149" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1038.60" y="159.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (48 samples, 0.10%; -0.01%)</title><rect x="619.2" y="437" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="622.19" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (18 samples, 0.04%; +0.03%)</title><rect x="913.2" y="261" width="0.4" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="916.17" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="343.7" y="181" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="346.68" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (5 samples, 0.01%; -0.00%)</title><rect x="947.6" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="950.63" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (48 samples, 0.10%; +0.00%)</title><rect x="1165.3" y="469" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1168.32" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (41 samples, 0.09%; -0.00%)</title><rect x="156.5" y="197" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="159.49" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (13 samples, 0.03%; 0.00%)</title><rect x="962.5" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="965.45" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (7 samples, 0.01%; 0.00%)</title><rect x="507.6" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="510.56" y="271.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (12 samples, 0.03%; 0.00%)</title><rect x="1138.3" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.32" y="255.5" ></text>
</g>
<g >
<title>__tls_init (10 samples, 0.02%; +0.00%)</title><rect x="497.2" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="500.18" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (12 samples, 0.03%; +0.01%)</title><rect x="1106.0" y="373" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1109.05" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (140 samples, 0.30%; +0.04%)</title><rect x="1127.2" y="405" width="3.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1130.21" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (36 samples, 0.08%; +0.02%)</title><rect x="253.1" y="229" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="256.07" y="239.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (38 samples, 0.08%; +0.00%)</title><rect x="1142.3" y="501" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1145.26" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="1139.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.07" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.01%)</title><rect x="516.6" y="181" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="519.65" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (33 samples, 0.07%; 0.00%)</title><rect x="847.0" y="309" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.99" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.03%; -0.01%)</title><rect x="722.6" y="421" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="725.61" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.03%; +0.02%)</title><rect x="810.6" y="149" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="813.58" y="159.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (239 samples, 0.51%; +0.02%)</title><rect x="457.8" y="309" width="5.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="460.78" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (8 samples, 0.02%; +0.00%)</title><rect x="547.6" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="550.57" y="415.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (107 samples, 0.23%; -0.01%)</title><rect x="359.4" y="165" width="2.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="362.43" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="40.6" y="469" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="43.60" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (6 samples, 0.01%; -0.00%)</title><rect x="143.3" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="146.31" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (19 samples, 0.04%; +0.01%)</title><rect x="955.8" y="357" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="958.77" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (5,524 samples, 11.68%; +0.00%)</title><rect x="967.4" y="389" width="137.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="970.42" y="399.5" >service::storage_..</text>
</g>
<g >
<title>cql3::operation::set_value::prepare (5 samples, 0.01%; -0.00%)</title><rect x="20.8" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.83" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (222 samples, 0.47%; -0.01%)</title><rect x="1125.2" y="421" width="5.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1128.19" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (20 samples, 0.04%; +0.00%)</title><rect x="979.3" y="325" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="982.28" y="335.5" ></text>
</g>
<g >
<title>memtable::apply (24 samples, 0.05%; 0.00%)</title><rect x="1138.1" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.09" y="271.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (48 samples, 0.10%; -0.01%)</title><rect x="1094.6" y="309" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1097.57" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (638 samples, 1.35%; -0.02%)</title><rect x="505.1" y="277" width="15.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="508.09" y="287.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (16 samples, 0.03%; +0.01%)</title><rect x="1095.2" y="261" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1098.24" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (12 samples, 0.03%; -0.00%)</title><rect x="724.3" y="485" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="727.30" y="495.5" ></text>
</g>
<g >
<title>local_schema_registry (6 samples, 0.01%; -0.00%)</title><rect x="970.5" y="373" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="973.47" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.01%; 0.00%)</title><rect x="15.7" y="261" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.66" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (144 samples, 0.30%; +0.01%)</title><rect x="448.6" y="277" width="3.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="451.62" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (5 samples, 0.01%; +0.01%)</title><rect x="42.0" y="501" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="44.99" y="511.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (8 samples, 0.02%; -0.01%)</title><rect x="318.2" y="197" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="321.15" y="207.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (15 samples, 0.03%; +0.01%)</title><rect x="63.2" y="437" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="66.16" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.02%; -0.00%)</title><rect x="697.1" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="700.13" y="447.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (10 samples, 0.02%; -0.01%)</title><rect x="1067.2" y="341" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1070.17" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (85 samples, 0.18%; +0.02%)</title><rect x="970.7" y="357" width="2.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="973.72" y="367.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (61 samples, 0.13%; -0.00%)</title><rect x="795.5" y="325" width="1.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="798.50" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (14 samples, 0.03%; 0.00%)</title><rect x="887.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (48 samples, 0.10%; +0.00%)</title><rect x="328.4" y="181" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="331.41" y="191.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (7 samples, 0.01%; -0.00%)</title><rect x="864.7" y="421" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="867.65" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (438 samples, 0.93%; -0.01%)</title><rect x="700.2" y="501" width="10.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="703.20" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="255.4" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="258.41" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (33 samples, 0.07%; +0.05%)</title><rect x="673.1" y="485" width="0.8" height="15.0" fill="rgb(255,134,134)" rx="2" ry="2" />
<text  x="676.09" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (174 samples, 0.37%; +0.03%)</title><rect x="552.3" y="373" width="4.4" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="555.33" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (22 samples, 0.05%; +0.00%)</title><rect x="499.2" y="277" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="502.20" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (16 samples, 0.03%; -0.02%)</title><rect x="495.0" y="325" width="0.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="498.01" y="335.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (71 samples, 0.15%; +0.01%)</title><rect x="854.2" y="405" width="1.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="857.17" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (11 samples, 0.02%; +0.00%)</title><rect x="213.7" y="85" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="216.71" y="95.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (12 samples, 0.03%; -0.03%)</title><rect x="142.0" y="261" width="0.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="145.04" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (112 samples, 0.24%; +0.00%)</title><rect x="953.8" y="405" width="2.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="956.77" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="623.1" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="626.11" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; -0.00%)</title><rect x="293.2" y="357" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="296.22" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (641 samples, 1.36%; +0.01%)</title><rect x="239.4" y="245" width="16.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="242.42" y="255.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (384 samples, 0.81%; -0.01%)</title><rect x="386.2" y="165" width="9.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="389.23" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (72 samples, 0.15%; +0.02%)</title><rect x="269.7" y="325" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="272.69" y="335.5" ></text>
</g>
<g >
<title>database::find_column_family (54 samples, 0.11%; 0.00%)</title><rect x="775.5" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.46" y="383.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%; +0.00%)</title><rect x="530.7" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="533.72" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (11 samples, 0.02%; +0.01%)</title><rect x="856.7" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="859.69" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (14 samples, 0.03%; -0.03%)</title><rect x="248.8" y="181" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="251.85" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (136 samples, 0.29%; +0.02%)</title><rect x="97.2" y="421" width="3.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="100.24" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (10 samples, 0.02%; -0.01%)</title><rect x="456.4" y="293" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="459.41" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; +0.00%)</title><rect x="834.4" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="837.43" y="271.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (39 samples, 0.08%; -0.01%)</title><rect x="69.4" y="389" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="72.37" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%; +0.01%)</title><rect x="787.0" y="325" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="790.02" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="795.7" y="293" width="0.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="798.65" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (22 samples, 0.05%; +0.02%)</title><rect x="79.5" y="453" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="82.53" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="1154.2" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1157.19" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.01%; 0.00%)</title><rect x="46.3" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.29" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="304.1" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="307.10" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (7 samples, 0.01%; +0.01%)</title><rect x="44.1" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="47.09" y="495.5" ></text>
</g>
<g >
<title>operator new (31 samples, 0.07%; 0.00%)</title><rect x="98.9" y="389" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.89" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (32 samples, 0.07%; +0.00%)</title><rect x="583.3" y="357" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="586.28" y="367.5" ></text>
</g>
<g >
<title>operator new (37 samples, 0.08%; -0.00%)</title><rect x="300.7" y="293" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="303.71" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (6 samples, 0.01%; +0.00%)</title><rect x="1149.0" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1151.97" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (190 samples, 0.40%; -0.02%)</title><rect x="551.9" y="389" width="4.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="554.94" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (9 samples, 0.02%; -0.01%)</title><rect x="454.6" y="261" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="457.56" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (195 samples, 0.41%; +0.00%)</title><rect x="598.8" y="421" width="4.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="601.80" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (11 samples, 0.02%; -0.01%)</title><rect x="1040.1" y="229" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1043.09" y="239.5" ></text>
</g>
<g >
<title>database::has_keyspace (95 samples, 0.20%; -0.01%)</title><rect x="848.1" y="357" width="2.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="851.13" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (5 samples, 0.01%; +0.01%)</title><rect x="876.6" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="879.63" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (33 samples, 0.07%; +0.04%)</title><rect x="96.3" y="421" width="0.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="99.32" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (141 samples, 0.30%; +0.01%)</title><rect x="691.5" y="485" width="3.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="694.46" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (19 samples, 0.04%; -0.01%)</title><rect x="412.3" y="165" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="415.28" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (306 samples, 0.65%; +0.01%)</title><rect x="642.4" y="501" width="7.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="645.37" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (6 samples, 0.01%; -0.01%)</title><rect x="398.4" y="165" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="401.38" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (24 samples, 0.05%; +0.01%)</title><rect x="671.1" y="485" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="674.10" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (10 samples, 0.02%; -0.01%)</title><rect x="719.8" y="421" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="722.79" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (14 samples, 0.03%; -0.00%)</title><rect x="266.7" y="277" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="269.69" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (7 samples, 0.01%; 0.00%)</title><rect x="884.7" y="501" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.67" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (119 samples, 0.25%; +0.00%)</title><rect x="844.8" y="325" width="3.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="847.84" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (368 samples, 0.78%; -0.00%)</title><rect x="549.0" y="421" width="9.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="552.04" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (6 samples, 0.01%; +0.01%)</title><rect x="868.6" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="871.62" y="351.5" ></text>
</g>
<g >
<title>__tls_init (13 samples, 0.03%; +0.01%)</title><rect x="508.5" y="245" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="511.49" y="255.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; -0.00%)</title><rect x="861.2" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="864.21" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (25 samples, 0.05%; -0.00%)</title><rect x="1106.5" y="405" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1109.50" y="415.5" ></text>
</g>
<g >
<title>schema::partition_key_size (5 samples, 0.01%; +0.00%)</title><rect x="1124.3" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1127.27" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (9 samples, 0.02%; +0.01%)</title><rect x="250.9" y="197" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="253.95" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (27 samples, 0.06%; +0.05%)</title><rect x="77.4" y="453" width="0.7" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="80.41" y="463.5" ></text>
</g>
<g >
<title>query::querier&lt; (9 samples, 0.02%; -0.01%)</title><rect x="59.3" y="453" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="62.31" y="463.5" ></text>
</g>
<g >
<title>operator delete (21 samples, 0.04%; +0.00%)</title><rect x="43.6" y="485" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="46.57" y="495.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (826 samples, 1.75%; +0.01%)</title><rect x="561.0" y="389" width="20.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="564.02" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (9 samples, 0.02%; -0.01%)</title><rect x="683.1" y="469" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="686.08" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (21 samples, 0.04%; 0.00%)</title><rect x="616.3" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.30" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (8 samples, 0.02%; +0.00%)</title><rect x="1068.2" y="325" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1071.24" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.05%; -0.01%)</title><rect x="470.0" y="309" width="0.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="473.03" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (9 samples, 0.02%; +0.01%)</title><rect x="586.9" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="589.87" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (10 samples, 0.02%; -0.01%)</title><rect x="1036.0" y="117" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1039.00" y="127.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (33 samples, 0.07%; -0.01%)</title><rect x="304.2" y="261" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="307.23" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%; 0.00%)</title><rect x="500.3" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.25" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (15 samples, 0.03%; -0.01%)</title><rect x="457.0" y="277" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="459.98" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (54 samples, 0.11%; +0.00%)</title><rect x="739.9" y="405" width="1.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="742.93" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (12 samples, 0.03%; +0.00%)</title><rect x="331.8" y="197" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="334.80" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (370 samples, 0.78%; -0.00%)</title><rect x="406.7" y="261" width="9.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="409.67" y="271.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (7 samples, 0.01%; +0.00%)</title><rect x="18.4" y="213" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.36" y="223.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (5 samples, 0.01%; +0.01%)</title><rect x="902.9" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="905.94" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (59 samples, 0.12%; +0.04%)</title><rect x="780.3" y="325" width="1.5" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="783.33" y="335.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.05%; -0.00%)</title><rect x="1154.9" y="437" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1157.91" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (9 samples, 0.02%; -0.00%)</title><rect x="992.7" y="341" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="995.73" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.01%; 0.00%)</title><rect x="1137.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.82" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (17 samples, 0.04%; -0.01%)</title><rect x="1076.8" y="309" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1079.80" y="319.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (7 samples, 0.01%; -0.00%)</title><rect x="822.8" y="85" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="825.78" y="95.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; +0.01%)</title><rect x="824.6" y="229" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="827.55" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (188 samples, 0.40%; +0.00%)</title><rect x="1170.1" y="485" width="4.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1173.06" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (27 samples, 0.06%; 0.00%)</title><rect x="699.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.10" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (8 samples, 0.02%; +0.00%)</title><rect x="377.6" y="197" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="380.57" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (7 samples, 0.01%; 0.00%)</title><rect x="593.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.64" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.02%)</title><rect x="291.0" y="277" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="293.95" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (8 samples, 0.02%; +0.01%)</title><rect x="521.9" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="524.91" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (5 samples, 0.01%; +0.01%)</title><rect x="867.6" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="870.60" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (25 samples, 0.05%; -0.01%)</title><rect x="1149.8" y="453" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1152.85" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (11 samples, 0.02%; +0.01%)</title><rect x="291.3" y="325" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="294.30" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (172 samples, 0.36%; +0.00%)</title><rect x="477.9" y="261" width="4.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="480.87" y="271.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (86 samples, 0.18%; -0.00%)</title><rect x="783.9" y="389" width="2.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="786.95" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (174 samples, 0.37%; +0.01%)</title><rect x="777.5" y="357" width="4.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="780.51" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="857.4" y="437" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="860.44" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (126 samples, 0.27%; -0.00%)</title><rect x="930.5" y="341" width="3.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="933.51" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (6 samples, 0.01%; -0.00%)</title><rect x="102.7" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="105.73" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (21 samples, 0.04%; -0.00%)</title><rect x="515.8" y="181" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="518.82" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (26 samples, 0.05%; -0.00%)</title><rect x="694.3" y="469" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="697.33" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (9 samples, 0.02%; 0.00%)</title><rect x="663.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.34" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (41 samples, 0.09%; +0.01%)</title><rect x="772.2" y="389" width="1.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="775.17" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.01%; +0.00%)</title><rect x="547.4" y="405" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="550.44" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (203 samples, 0.43%; -0.00%)</title><rect x="742.0" y="405" width="5.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="745.05" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (28 samples, 0.06%; -0.01%)</title><rect x="456.7" y="293" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="459.66" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="500.7" y="309" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="503.73" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (48 samples, 0.10%; +0.04%)</title><rect x="865.1" y="389" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="868.13" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (8 samples, 0.02%; 0.00%)</title><rect x="21.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.93" y="479.5" ></text>
</g>
<g >
<title>operator new (67 samples, 0.14%; +0.00%)</title><rect x="990.2" y="293" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="993.16" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (104 samples, 0.22%; +0.01%)</title><rect x="820.4" y="149" width="2.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="823.43" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (9 samples, 0.02%; +0.01%)</title><rect x="76.1" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="79.08" y="463.5" ></text>
</g>
<g >
<title>__strlen_avx2 (69 samples, 0.15%; -0.01%)</title><rect x="1019.7" y="245" width="1.7" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1022.70" y="255.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (21 samples, 0.04%; +0.03%)</title><rect x="71.2" y="405" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="74.17" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (6 samples, 0.01%; -0.00%)</title><rect x="1006.6" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1009.60" y="303.5" ></text>
</g>
<g >
<title>operator new (51 samples, 0.11%; +0.00%)</title><rect x="801.4" y="277" width="1.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="804.44" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (5 samples, 0.01%; +0.01%)</title><rect x="1062.0" y="325" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1064.98" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5 samples, 0.01%; +0.01%)</title><rect x="118.5" y="357" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="121.53" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.01%; +0.00%)</title><rect x="846.0" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="849.01" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (12 samples, 0.03%; 0.00%)</title><rect x="1175.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (15 samples, 0.03%; +0.01%)</title><rect x="761.5" y="293" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="764.51" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (17 samples, 0.04%; -0.01%)</title><rect x="890.5" y="453" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="893.51" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (26 samples, 0.05%; 0.00%)</title><rect x="1171.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1174.41" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (15 samples, 0.03%; 0.00%)</title><rect x="1148.6" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.60" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; 0.00%)</title><rect x="699.1" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.10" y="463.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (6 samples, 0.01%; -0.04%)</title><rect x="322.7" y="165" width="0.2" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="325.72" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (8 samples, 0.02%; 0.00%)</title><rect x="23.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.00" y="527.5" ></text>
</g>
<g >
<title>operator new (66 samples, 0.14%; -0.01%)</title><rect x="862.5" y="421" width="1.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="865.53" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (464 samples, 0.98%; 0.00%)</title><rect x="687.4" y="501" width="11.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.44" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (10 samples, 0.02%; +0.01%)</title><rect x="934.4" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="937.35" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (36 samples, 0.08%; +0.04%)</title><rect x="1103.6" y="357" width="0.9" height="15.0" fill="rgb(255,148,148)" rx="2" ry="2" />
<text  x="1106.58" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (6 samples, 0.01%; -0.01%)</title><rect x="230.3" y="181" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="233.28" y="191.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (13 samples, 0.03%; +0.00%)</title><rect x="908.0" y="309" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="911.00" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; +0.00%)</title><rect x="951.9" y="325" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="954.95" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (18 samples, 0.04%; -0.04%)</title><rect x="1096.4" y="309" width="0.5" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="1099.44" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (10 samples, 0.02%; +0.01%)</title><rect x="429.4" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="432.35" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (22 samples, 0.05%; -0.00%)</title><rect x="149.0" y="245" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="151.98" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (10 samples, 0.02%; +0.00%)</title><rect x="848.3" y="325" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="851.31" y="335.5" ></text>
</g>
<g >
<title>operator delete (20 samples, 0.04%; -0.00%)</title><rect x="421.8" y="293" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="424.79" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (653 samples, 1.38%; 0.00%)</title><rect x="1026.9" y="245" width="16.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.94" y="255.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (18 samples, 0.04%; 0.00%)</title><rect x="699.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.20" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (6 samples, 0.01%; +0.00%)</title><rect x="702.9" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="705.94" y="479.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (46 samples, 0.10%; +0.00%)</title><rect x="1011.3" y="277" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1014.27" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (26 samples, 0.05%; +0.02%)</title><rect x="1029.9" y="197" width="0.6" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1032.88" y="207.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (12 samples, 0.03%; +0.00%)</title><rect x="1139.1" y="277" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1142.07" y="287.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (13 samples, 0.03%; -0.01%)</title><rect x="838.8" y="277" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="841.78" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (17 samples, 0.04%; -0.01%)</title><rect x="1077.3" y="309" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1080.28" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (6 samples, 0.01%; -0.00%)</title><rect x="878.2" y="437" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="881.18" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (24 samples, 0.05%; -0.02%)</title><rect x="40.8" y="469" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="43.82" y="479.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (17 samples, 0.04%; +0.02%)</title><rect x="872.6" y="389" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="875.59" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (11 samples, 0.02%; +0.01%)</title><rect x="684.8" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.85" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (17 samples, 0.04%; +0.01%)</title><rect x="206.7" y="133" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="209.75" y="143.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (6 samples, 0.01%; -0.01%)</title><rect x="233.4" y="213" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="236.40" y="223.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (5 samples, 0.01%; -0.00%)</title><rect x="607.6" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="610.59" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (14 samples, 0.03%; -0.04%)</title><rect x="528.6" y="325" width="0.4" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="531.60" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (31 samples, 0.07%; +0.01%)</title><rect x="98.9" y="373" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="101.89" y="383.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (43 samples, 0.09%; +0.05%)</title><rect x="535.7" y="261" width="1.0" height="15.0" fill="rgb(255,142,142)" rx="2" ry="2" />
<text  x="538.66" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (6 samples, 0.01%; +0.01%)</title><rect x="996.7" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="999.72" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (95 samples, 0.20%; +0.01%)</title><rect x="588.2" y="357" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="591.25" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (247 samples, 0.52%; -0.04%)</title><rect x="261.7" y="293" width="6.2" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="264.70" y="303.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (15 samples, 0.03%; -0.01%)</title><rect x="35.6" y="437" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="38.58" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (7 samples, 0.01%; -0.01%)</title><rect x="947.8" y="405" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="950.76" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (9 samples, 0.02%; +0.01%)</title><rect x="265.3" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="268.30" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (16 samples, 0.03%; +0.00%)</title><rect x="218.6" y="149" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="221.58" y="159.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; -0.01%)</title><rect x="599.1" y="405" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="602.05" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (97 samples, 0.21%; -0.01%)</title><rect x="627.5" y="405" width="2.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="630.50" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (48 samples, 0.10%; -0.00%)</title><rect x="628.1" y="389" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="631.15" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.01%; +0.01%)</title><rect x="829.8" y="277" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="832.84" y="287.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (56 samples, 0.12%; +0.01%)</title><rect x="300.5" y="309" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="303.46" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (11 samples, 0.02%; +0.00%)</title><rect x="679.8" y="469" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="682.76" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="191.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.04%; 0.00%)</title><rect x="635.0" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.01" y="399.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (5 samples, 0.01%; +0.00%)</title><rect x="940.8" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="943.84" y="335.5" ></text>
</g>
<g >
<title>table::as_mutation_source (97 samples, 0.21%; +0.00%)</title><rect x="634.6" y="437" width="2.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="637.59" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (65 samples, 0.14%; +0.02%)</title><rect x="721.6" y="437" width="1.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="724.56" y="447.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (5 samples, 0.01%; -0.01%)</title><rect x="80.1" y="453" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="83.08" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (103 samples, 0.22%; -0.12%)</title><rect x="182.6" y="101" width="2.6" height="15.0" fill="rgb(49,49,255)" rx="2" ry="2" />
<text  x="185.62" y="111.5" ></text>
</g>
<g >
<title>operator delete (36 samples, 0.08%; -0.00%)</title><rect x="33.2" y="469" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="36.21" y="479.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (49 samples, 0.10%; -0.01%)</title><rect x="540.2" y="261" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="543.18" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3,514 samples, 7.43%; -0.01%)</title><rect x="314.5" y="245" width="87.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="317.51" y="255.5" >flat_mutat..</text>
</g>
<g >
<title>operator new (33 samples, 0.07%; +0.00%)</title><rect x="426.4" y="341" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="429.36" y="351.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (13 samples, 0.03%; 0.00%)</title><rect x="342.3" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="345.26" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (9 samples, 0.02%; +0.02%)</title><rect x="1143.7" y="501" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1146.68" y="511.5" ></text>
</g>
<g >
<title>partition_entry::read (72 samples, 0.15%; -0.03%)</title><rect x="524.7" y="309" width="1.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="527.71" y="319.5" ></text>
</g>
<g >
<title>operator new (38 samples, 0.08%; -0.00%)</title><rect x="251.8" y="181" width="0.9" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="254.79" y="191.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.03%; -0.00%)</title><rect x="38.7" y="453" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="41.72" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; -0.00%)</title><rect x="1048.6" y="277" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1051.55" y="287.5" ></text>
</g>
<g >
<title>seastar::gate::enter (10 samples, 0.02%; +0.01%)</title><rect x="1043.8" y="229" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1046.81" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (14 samples, 0.03%; -0.01%)</title><rect x="841.6" y="341" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="844.57" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (88 samples, 0.19%; +0.08%)</title><rect x="1059.7" y="309" width="2.2" height="15.0" fill="rgb(255,102,102)" rx="2" ry="2" />
<text  x="1062.71" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (15 samples, 0.03%; +0.01%)</title><rect x="867.2" y="373" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.22" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (20 samples, 0.04%; +0.01%)</title><rect x="723.3" y="453" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="726.31" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (74 samples, 0.16%; +0.01%)</title><rect x="925.2" y="357" width="1.8" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="928.17" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="1054.4" y="181" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1057.37" y="191.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (13 samples, 0.03%; -0.01%)</title><rect x="161.6" y="197" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="164.56" y="207.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (18 samples, 0.04%; +0.01%)</title><rect x="689.3" y="469" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="692.32" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (49 samples, 0.10%; +0.02%)</title><rect x="298.0" y="373" width="1.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="300.99" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (7 samples, 0.01%; -0.02%)</title><rect x="633.7" y="389" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="636.71" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (524 samples, 1.11%; -0.01%)</title><rect x="567.0" y="325" width="13.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="570.03" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="648.2" y="453" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="651.16" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (175 samples, 0.37%; +0.01%)</title><rect x="872.2" y="405" width="4.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.17" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (17 samples, 0.04%; 0.00%)</title><rect x="886.1" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.07" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (58 samples, 0.12%; -0.02%)</title><rect x="289.7" y="309" width="1.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="292.65" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1,700 samples, 3.60%; -0.00%)</title><rect x="1056.5" y="357" width="42.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1059.54" y="367.5" >ser..</text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.01%; +0.00%)</title><rect x="19.6" y="325" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="22.61" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (5 samples, 0.01%; -0.01%)</title><rect x="62.5" y="437" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="65.51" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.01%; 0.00%)</title><rect x="17.2" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.19" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (12 samples, 0.03%; +0.01%)</title><rect x="833.7" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="836.68" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (20 samples, 0.04%; +0.00%)</title><rect x="62.0" y="421" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="64.98" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.01%)</title><rect x="784.2" y="357" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="787.17" y="367.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (47 samples, 0.10%; -0.00%)</title><rect x="447.4" y="277" width="1.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="450.45" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (7 samples, 0.01%; +0.00%)</title><rect x="156.3" y="197" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="159.26" y="207.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (8 samples, 0.02%; -0.01%)</title><rect x="520.3" y="229" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="523.29" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (15 samples, 0.03%; -0.00%)</title><rect x="401.8" y="229" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="404.83" y="239.5" ></text>
</g>
<g >
<title>sstring_hash::operator (20 samples, 0.04%; +0.00%)</title><rect x="869.5" y="357" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="872.47" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (11 samples, 0.02%; -0.04%)</title><rect x="305.2" y="293" width="0.2" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="308.17" y="303.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (135 samples, 0.29%; -0.00%)</title><rect x="514.2" y="229" width="3.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="517.20" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (12 samples, 0.03%; +0.02%)</title><rect x="500.0" y="309" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="502.95" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (48 samples, 0.10%; -0.01%)</title><rect x="760.8" y="309" width="1.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="763.81" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (8 samples, 0.02%; 0.00%)</title><rect x="18.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.34" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.01%; 0.00%)</title><rect x="652.9" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.86" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.01%; +0.00%)</title><rect x="1138.8" y="293" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.77" y="303.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (7 samples, 0.01%; 0.00%)</title><rect x="1138.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.12" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (13 samples, 0.03%; 0.00%)</title><rect x="610.9" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="613.86" y="447.5" ></text>
</g>
<g >
<title>operator new (22 samples, 0.05%; -0.00%)</title><rect x="515.2" y="197" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="518.20" y="207.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (19 samples, 0.04%; +0.04%)</title><rect x="578.9" y="309" width="0.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="581.86" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (17 samples, 0.04%; 0.00%)</title><rect x="215.8" y="149" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.81" y="159.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (17 samples, 0.04%; +0.00%)</title><rect x="1080.0" y="309" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1083.00" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (13 samples, 0.03%; +0.01%)</title><rect x="70.6" y="373" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="73.64" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (33 samples, 0.07%; -0.00%)</title><rect x="685.5" y="437" width="0.8" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="688.52" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,970 samples, 10.51%; -0.04%)</title><rect x="300.3" y="325" width="124.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="303.28" y="335.5" >seastar::intern..</text>
</g>
<g >
<title>seastar::memory::allocate (67 samples, 0.14%; -0.02%)</title><rect x="1125.5" y="389" width="1.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1128.46" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (6 samples, 0.01%; 0.00%)</title><rect x="1105.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.13" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (2,262 samples, 4.78%; -0.02%)</title><rect x="999.9" y="341" width="56.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1002.91" y="351.5" >servi..</text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.01%; 0.00%)</title><rect x="1139.5" y="165" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.49" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (168 samples, 0.36%; +0.01%)</title><rect x="1089.5" y="261" width="4.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1092.45" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (95 samples, 0.20%; +0.01%)</title><rect x="809.9" y="197" width="2.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="812.93" y="207.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (408 samples, 0.86%; +0.03%)</title><rect x="532.5" y="325" width="10.2" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="535.50" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (5 samples, 0.01%; +0.00%)</title><rect x="49.5" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="52.48" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (5 samples, 0.01%; +0.01%)</title><rect x="552.2" y="373" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="555.21" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.01%; -0.00%)</title><rect x="1133.5" y="421" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1136.53" y="431.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (560 samples, 1.18%; -0.01%)</title><rect x="1080.4" y="309" width="14.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1083.42" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (11 samples, 0.02%; -0.01%)</title><rect x="823.6" y="213" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="826.55" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (6 samples, 0.01%; -0.00%)</title><rect x="926.6" y="325" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="929.57" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="1139.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.07" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (6 samples, 0.01%; +0.01%)</title><rect x="283.7" y="293" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="286.69" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; +0.00%)</title><rect x="218.8" y="133" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="221.80" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (9 samples, 0.02%; -0.01%)</title><rect x="876.3" y="357" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="879.31" y="367.5" ></text>
</g>
<g >
<title>schema::get_partitioner (5 samples, 0.01%; 0.00%)</title><rect x="946.7" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.68" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (58 samples, 0.12%; +0.02%)</title><rect x="1152.9" y="437" width="1.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1155.87" y="447.5" ></text>
</g>
<g >
<title>operator delete (18 samples, 0.04%; -0.01%)</title><rect x="627.7" y="389" width="0.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="630.68" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (10 samples, 0.02%; -0.00%)</title><rect x="590.3" y="325" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="593.32" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (41 samples, 0.09%; +0.00%)</title><rect x="955.3" y="389" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="958.34" y="399.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (55 samples, 0.12%; -0.01%)</title><rect x="303.7" y="277" width="1.4" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="306.73" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (6 samples, 0.01%; +0.01%)</title><rect x="973.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="976.73" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (17 samples, 0.04%; -0.00%)</title><rect x="661.4" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="664.42" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (103 samples, 0.22%; +0.00%)</title><rect x="874.0" y="389" width="2.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="876.96" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (23 samples, 0.05%; +0.03%)</title><rect x="651.1" y="485" width="0.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="654.08" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; 0.00%)</title><rect x="1036.7" y="149" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.67" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (22 samples, 0.05%; +0.01%)</title><rect x="1129.7" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1132.66" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (19 samples, 0.04%; -0.01%)</title><rect x="206.3" y="117" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="209.28" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="260.1" y="261" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="263.08" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (123 samples, 0.26%; -0.01%)</title><rect x="256.3" y="229" width="3.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="259.34" y="239.5" ></text>
</g>
<g >
<title>free (108 samples, 0.23%; +0.00%)</title><rect x="410.1" y="181" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="413.06" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (6 samples, 0.01%; +0.01%)</title><rect x="503.1" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="506.12" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (79 samples, 0.17%; +0.01%)</title><rect x="1119.1" y="405" width="2.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1122.13" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="952.4" y="309" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="955.37" y="319.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (15 samples, 0.03%; +0.02%)</title><rect x="294.7" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="297.74" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (14 samples, 0.03%; -0.01%)</title><rect x="330.3" y="213" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="333.26" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (35 samples, 0.07%; +0.01%)</title><rect x="614.7" y="437" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="617.75" y="447.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (6 samples, 0.01%; +0.01%)</title><rect x="611.4" y="421" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="614.40" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (5 samples, 0.01%; 0.00%)</title><rect x="748.3" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.29" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (7 samples, 0.01%; +0.01%)</title><rect x="1113.5" y="341" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1116.54" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%; -0.00%)</title><rect x="788.4" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="791.41" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; -0.01%)</title><rect x="686.6" y="437" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="689.62" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (24 samples, 0.05%; +0.01%)</title><rect x="962.2" y="357" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="965.18" y="367.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (1,644 samples, 3.48%; +0.01%)</title><rect x="793.9" y="341" width="41.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="796.90" y="351.5" >ser..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (12 samples, 0.03%; 0.00%)</title><rect x="1140.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.06" y="495.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (88 samples, 0.19%; +0.00%)</title><rect x="425.2" y="373" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="428.19" y="383.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.01%)</title><rect x="779.1" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="782.13" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (23 samples, 0.05%; -0.00%)</title><rect x="1147.0" y="485" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1150.00" y="495.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (28 samples, 0.06%; +0.00%)</title><rect x="861.6" y="373" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="864.56" y="383.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (161 samples, 0.34%; 0.00%)</title><rect x="937.3" y="389" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.27" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (9 samples, 0.02%; +0.00%)</title><rect x="1175.9" y="389" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1178.88" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (29 samples, 0.06%; +0.00%)</title><rect x="420.7" y="277" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="423.72" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (22 samples, 0.05%; +0.00%)</title><rect x="201.5" y="101" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="204.46" y="111.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (122 samples, 0.26%; 0.00%)</title><rect x="539.5" y="309" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.48" y="319.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (63 samples, 0.13%; -0.02%)</title><rect x="1131.6" y="405" width="1.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1134.58" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,554 samples, 9.63%; -0.01%)</title><rect x="306.5" y="277" width="113.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="309.52" y="287.5" >flat_mutation_..</text>
</g>
<g >
<title>service::client_state::has_column_family_access (2,737 samples, 5.79%; -0.05%)</title><rect x="782.4" y="405" width="68.3" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="785.35" y="415.5" >service..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (76 samples, 0.16%; +0.01%)</title><rect x="770.2" y="389" width="1.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="773.22" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (15 samples, 0.03%; +0.03%)</title><rect x="462.4" y="277" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="465.44" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; +0.01%)</title><rect x="226.0" y="197" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="228.99" y="207.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (14 samples, 0.03%; -0.01%)</title><rect x="32.3" y="485" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="35.29" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; +0.00%)</title><rect x="1105.9" y="373" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1108.90" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::stats (27 samples, 0.06%; -0.01%)</title><rect x="496.8" y="309" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="499.76" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (157 samples, 0.33%; +0.00%)</title><rect x="995.9" y="325" width="3.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="998.92" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.02%; -0.00%)</title><rect x="1093.4" y="245" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1096.45" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (518 samples, 1.10%; +0.06%)</title><rect x="185.2" y="101" width="12.9" height="15.0" fill="rgb(255,128,128)" rx="2" ry="2" />
<text  x="188.19" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%; -0.00%)</title><rect x="1101.6" y="341" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1104.61" y="351.5" ></text>
</g>
<g >
<title>perf_simple_que (47,283 samples, 100.00%; 0.00%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (13 samples, 0.03%; -0.02%)</title><rect x="697.5" y="485" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="700.48" y="495.5" ></text>
</g>
<g >
<title>sstring_hash::operator (12 samples, 0.03%; -0.00%)</title><rect x="850.0" y="309" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="853.01" y="319.5" ></text>
</g>
<g >
<title>db::validate_for_read (6 samples, 0.01%; +0.01%)</title><rect x="1136.6" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1139.64" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (10 samples, 0.02%; 0.00%)</title><rect x="1139.7" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.74" y="223.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (83 samples, 0.18%; -0.01%)</title><rect x="732.7" y="437" width="2.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="735.74" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (10 samples, 0.02%; -0.02%)</title><rect x="11.3" y="581" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="14.27" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (98 samples, 0.21%; -0.00%)</title><rect x="744.5" y="309" width="2.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="747.52" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (20 samples, 0.04%; +0.00%)</title><rect x="560.0" y="421" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="562.97" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (31 samples, 0.07%; +0.01%)</title><rect x="890.2" y="469" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="893.16" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (42 samples, 0.09%; +0.01%)</title><rect x="328.5" y="165" width="1.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="331.51" y="175.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (7 samples, 0.01%; -0.00%)</title><rect x="664.5" y="453" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="667.46" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (14 samples, 0.03%; +0.03%)</title><rect x="919.9" y="373" width="0.4" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="922.93" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (9 samples, 0.02%; +0.00%)</title><rect x="44.8" y="485" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="47.76" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.01%; -0.00%)</title><rect x="448.2" y="245" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="451.22" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (8 samples, 0.02%; -0.02%)</title><rect x="595.6" y="405" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="598.61" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (85 samples, 0.18%; -0.00%)</title><rect x="837.0" y="325" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="840.00" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (824 samples, 1.74%; -0.05%)</title><rect x="378.6" y="197" width="20.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="381.57" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="723.0" y="421" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="725.98" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (10 samples, 0.02%; +0.01%)</title><rect x="248.6" y="165" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="251.60" y="175.5" ></text>
</g>
<g >
<title>operator delete (34 samples, 0.07%; -0.01%)</title><rect x="677.2" y="421" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="680.19" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; +0.02%)</title><rect x="40.3" y="453" width="0.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="43.27" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (46 samples, 0.10%; -0.01%)</title><rect x="843.0" y="309" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="846.02" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.02%; -0.00%)</title><rect x="646.2" y="485" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="649.22" y="495.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.01%; +0.01%)</title><rect x="505.5" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="508.49" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (72 samples, 0.15%; -0.00%)</title><rect x="243.2" y="181" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="246.16" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (6 samples, 0.01%; -0.00%)</title><rect x="424.9" y="357" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="427.91" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%; +0.01%)</title><rect x="916.0" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="918.96" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (14 samples, 0.03%; +0.01%)</title><rect x="880.4" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="883.43" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (11 samples, 0.02%; +0.01%)</title><rect x="271.8" y="325" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="274.83" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (13 samples, 0.03%; -0.01%)</title><rect x="547.1" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="550.09" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (11 samples, 0.02%; -0.02%)</title><rect x="377.0" y="149" width="0.2" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="379.97" y="159.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="197" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.00%)</title><rect x="1170.6" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1173.63" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (41 samples, 0.09%; -0.01%)</title><rect x="682.3" y="485" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="685.33" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (10 samples, 0.02%; -0.00%)</title><rect x="869.7" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="872.70" y="335.5" ></text>
</g>
<g >
<title>row::row (1,382 samples, 2.92%; -0.01%)</title><rect x="173.2" y="149" width="34.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="176.18" y="159.5" >ro..</text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (24 samples, 0.05%; -0.01%)</title><rect x="1035.0" y="149" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1038.00" y="159.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.04%; 0.00%)</title><rect x="699.2" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.17" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (87 samples, 0.18%; +0.00%)</title><rect x="950.3" y="389" width="2.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="953.33" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.01%; 0.00%)</title><rect x="1067.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1069.99" y="335.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.02%; +0.01%)</title><rect x="922.2" y="389" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="925.20" y="399.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; 0.00%)</title><rect x="1051.5" y="245" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.47" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (9,813 samples, 20.75%; -0.04%)</title><rect x="892.8" y="453" width="244.9" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="895.83" y="463.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (35 samples, 0.07%; +0.04%)</title><rect x="207.7" y="149" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="210.75" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="559.5" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="562.55" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (59 samples, 0.12%; +0.01%)</title><rect x="695.9" y="469" width="1.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="698.85" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (5 samples, 0.01%; -0.00%)</title><rect x="23.3" y="517" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="26.25" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (15 samples, 0.03%; +0.01%)</title><rect x="1136.9" y="437" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1139.89" y="447.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (34 samples, 0.07%; -0.01%)</title><rect x="564.1" y="325" width="0.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="567.06" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (45 samples, 0.10%; 0.00%)</title><rect x="1138.9" y="485" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.94" y="495.5" ></text>
</g>
<g >
<title>operator delete (84 samples, 0.18%; -0.00%)</title><rect x="92.8" y="437" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="95.78" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (9 samples, 0.02%; -0.00%)</title><rect x="986.7" y="357" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="989.74" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (30 samples, 0.06%; -0.04%)</title><rect x="264.8" y="277" width="0.8" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="267.85" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (53 samples, 0.11%; +0.03%)</title><rect x="753.4" y="373" width="1.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="756.40" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1,379 samples, 2.92%; +0.01%)</title><rect x="560.5" y="421" width="34.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="563.47" y="431.5" >st..</text>
</g>
<g >
<title>mutation_reader_merger::add_readers (12 samples, 0.03%; +0.02%)</title><rect x="446.6" y="293" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="449.62" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (660 samples, 1.40%; +0.00%)</title><rect x="239.1" y="261" width="16.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="242.09" y="271.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (8 samples, 0.02%; +0.01%)</title><rect x="75.4" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.38" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (18 samples, 0.04%; 0.00%)</title><rect x="400.2" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="403.16" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (150 samples, 0.32%; -0.01%)</title><rect x="1115.2" y="389" width="3.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1118.23" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (15 samples, 0.03%; -0.00%)</title><rect x="676.7" y="437" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="679.69" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (6 samples, 0.01%; +0.01%)</title><rect x="1148.8" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1151.82" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (8 samples, 0.02%; +0.01%)</title><rect x="511.8" y="229" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="514.81" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (9 samples, 0.02%; +0.01%)</title><rect x="964.9" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="967.90" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.00%)</title><rect x="916.3" y="357" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="919.31" y="367.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (81 samples, 0.17%; +0.01%)</title><rect x="512.1" y="229" width="2.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="515.13" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (5 samples, 0.01%; +0.01%)</title><rect x="1055.4" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1058.44" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (29 samples, 0.06%; -0.00%)</title><rect x="798.6" y="277" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="801.57" y="287.5" ></text>
</g>
<g >
<title>row::~row (10 samples, 0.02%; +0.01%)</title><rect x="259.7" y="261" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="262.71" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (14 samples, 0.03%; -0.00%)</title><rect x="827.8" y="213" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="830.84" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="588.0" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="591.02" y="351.5" ></text>
</g>
<g >
<title>operator new (94 samples, 0.20%; +0.01%)</title><rect x="159.1" y="213" width="2.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="162.08" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (8 samples, 0.02%; -0.01%)</title><rect x="716.9" y="437" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="719.89" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="948.7" y="357" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="951.65" y="367.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (7 samples, 0.01%; +0.01%)</title><rect x="336.9" y="181" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="339.87" y="191.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (11 samples, 0.02%; -0.05%)</title><rect x="238.3" y="245" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="241.27" y="255.5" ></text>
</g>
<g >
<title>posix_memalign (42 samples, 0.09%; +0.00%)</title><rect x="202.3" y="85" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="205.33" y="95.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (5 samples, 0.01%; -0.00%)</title><rect x="807.6" y="261" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="810.56" y="271.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (4,445 samples, 9.40%; +0.00%)</title><rect x="434.6" y="389" width="110.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="437.62" y="399.5" >std::function..</text>
</g>
<g >
<title>__tls_init (8 samples, 0.02%; +0.01%)</title><rect x="539.1" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="542.13" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (26 samples, 0.05%; +0.01%)</title><rect x="1071.6" y="293" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1074.64" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (7 samples, 0.01%; -0.00%)</title><rect x="245.1" y="197" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="248.11" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="143.5" y="277" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="146.46" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (8 samples, 0.02%; -0.00%)</title><rect x="1036.6" y="165" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1039.62" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.01%; +0.01%)</title><rect x="1050.4" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1053.42" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.04%; +0.01%)</title><rect x="934.1" y="389" width="0.5" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="937.11" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (70 samples, 0.15%; +0.01%)</title><rect x="775.1" y="389" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="778.11" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.02%; -0.01%)</title><rect x="752.4" y="389" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="755.38" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (12 samples, 0.03%; -0.01%)</title><rect x="1135.9" y="421" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1138.90" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.00%)</title><rect x="870.6" y="437" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="873.64" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (11 samples, 0.02%; 0.00%)</title><rect x="1102.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1105.76" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (15 samples, 0.03%; -0.02%)</title><rect x="299.2" y="373" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="302.21" y="383.5" ></text>
</g>
<g >
<title>table::query (22,257 samples, 47.07%; -0.05%)</title><rect x="82.0" y="453" width="555.4" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="84.97" y="463.5" >table::query</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (15 samples, 0.03%; -0.00%)</title><rect x="204.5" y="117" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="207.48" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="831.5" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="834.54" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (94 samples, 0.20%; +0.00%)</title><rect x="1059.6" y="325" width="2.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1062.56" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (5 samples, 0.01%; +0.01%)</title><rect x="571.1" y="277" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="574.05" y="287.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (73 samples, 0.15%; -0.01%)</title><rect x="632.2" y="437" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="635.17" y="447.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (15 samples, 0.03%; -0.06%)</title><rect x="520.5" y="229" width="0.4" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="523.49" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (6 samples, 0.01%; +0.01%)</title><rect x="702.8" y="469" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="705.77" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (43 samples, 0.09%; -0.00%)</title><rect x="16.0" y="277" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="18.96" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.03%; -0.02%)</title><rect x="1022.2" y="197" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1025.25" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.01%; -0.00%)</title><rect x="301.6" y="293" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="304.63" y="303.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (11 samples, 0.02%; +0.02%)</title><rect x="374.5" y="197" width="0.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="377.50" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (70 samples, 0.15%; -0.01%)</title><rect x="1040.8" y="197" width="1.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="1043.82" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (5 samples, 0.01%; 0.00%)</title><rect x="973.9" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="976.88" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (6 samples, 0.01%; -0.00%)</title><rect x="1137.4" y="437" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1140.42" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; +0.01%)</title><rect x="926.9" y="325" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="929.87" y="335.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (313 samples, 0.66%; +0.01%)</title><rect x="486.6" y="261" width="7.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="489.60" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (32 samples, 0.07%; -0.01%)</title><rect x="223.2" y="181" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="226.22" y="191.5" ></text>
</g>
<g >
<title>table::set_hit_rate (74 samples, 0.16%; +0.00%)</title><rect x="721.5" y="453" width="1.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="724.46" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (210 samples, 0.44%; -0.00%)</title><rect x="1088.4" y="277" width="5.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1091.41" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (75 samples, 0.16%; 0.00%)</title><rect x="1070.4" y="309" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.41" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (7 samples, 0.01%; 0.00%)</title><rect x="787.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.54" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (31 samples, 0.07%; -0.00%)</title><rect x="1177.2" y="485" width="0.7" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1180.17" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (319 samples, 0.67%; -0.00%)</title><rect x="407.9" y="229" width="7.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="410.87" y="239.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (5 samples, 0.01%; +0.00%)</title><rect x="29.7" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="32.67" y="495.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (6 samples, 0.01%; +0.00%)</title><rect x="736.7" y="453" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="739.68" y="463.5" ></text>
</g>
<g >
<title>auth::resource::resource (123 samples, 0.26%; +0.01%)</title><rect x="786.1" y="389" width="3.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="789.09" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.02%; +0.01%)</title><rect x="424.4" y="325" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="427.39" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (48 samples, 0.10%; +0.01%)</title><rect x="982.4" y="309" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="985.37" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (5 samples, 0.01%; +0.00%)</title><rect x="720.9" y="437" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="723.88" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (66 samples, 0.14%; +0.00%)</title><rect x="1152.7" y="453" width="1.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1155.69" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (8 samples, 0.02%; -0.03%)</title><rect x="469.0" y="325" width="0.2" height="15.0" fill="rgb(166,166,255)" rx="2" ry="2" />
<text  x="472.03" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (14 samples, 0.03%; -0.03%)</title><rect x="431.8" y="405" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="434.85" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (7 samples, 0.01%; 0.00%)</title><rect x="860.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.69" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; -0.01%)</title><rect x="802.4" y="245" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="805.44" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (89 samples, 0.19%; +0.00%)</title><rect x="695.1" y="485" width="2.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="698.13" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (14 samples, 0.03%; -0.04%)</title><rect x="531.0" y="341" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="534.02" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (21 samples, 0.04%; +0.01%)</title><rect x="788.6" y="357" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="791.64" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (25 samples, 0.05%; +0.01%)</title><rect x="661.2" y="437" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="664.24" y="447.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (8 samples, 0.02%; +0.01%)</title><rect x="399.1" y="213" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="402.13" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (21 samples, 0.04%; +0.02%)</title><rect x="811.6" y="133" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="814.65" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (10 samples, 0.02%; +0.01%)</title><rect x="670.5" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="673.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (17 samples, 0.04%; -0.00%)</title><rect x="595.4" y="421" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="598.38" y="431.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (130 samples, 0.27%; +0.00%)</title><rect x="1152.3" y="469" width="3.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1155.27" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (9 samples, 0.02%; +0.02%)</title><rect x="428.7" y="373" width="0.3" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="431.73" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (34 samples, 0.07%; -0.01%)</title><rect x="568.7" y="293" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="571.66" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (283 samples, 0.60%; 0.00%)</title><rect x="14.7" y="597" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.74" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (321 samples, 0.68%; -0.00%)</title><rect x="815.2" y="197" width="8.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="818.19" y="207.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.08%; -0.01%)</title><rect x="827.2" y="245" width="1.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="830.25" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; +0.01%)</title><rect x="108.0" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="111.00" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (38 samples, 0.08%; +0.01%)</title><rect x="247.9" y="181" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="250.90" y="191.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (50 samples, 0.11%; +0.03%)</title><rect x="101.6" y="437" width="1.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="104.64" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5,902 samples, 12.48%; -0.03%)</title><rect x="122.0" y="325" width="147.3" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="125.00" y="335.5" >mutation_reader_me..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (35 samples, 0.07%; 0.00%)</title><rect x="786.5" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.49" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (18 samples, 0.04%; +0.01%)</title><rect x="869.5" y="341" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="872.50" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (5 samples, 0.01%; -0.02%)</title><rect x="499.8" y="309" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="502.83" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (313 samples, 0.66%; +0.02%)</title><rect x="815.4" y="181" width="7.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="818.37" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="1066.0" y="293" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1069.00" y="303.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (216 samples, 0.46%; -0.02%)</title><rect x="1072.3" y="325" width="5.4" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1075.31" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (13 samples, 0.03%; -0.01%)</title><rect x="816.6" y="133" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="819.64" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (36 samples, 0.08%; +0.01%)</title><rect x="918.0" y="309" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="921.01" y="319.5" ></text>
</g>
<g >
<title>operator new (43 samples, 0.09%; +0.00%)</title><rect x="772.1" y="405" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="775.12" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (14 samples, 0.03%; +0.02%)</title><rect x="1114.7" y="389" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1117.68" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.01%; 0.00%)</title><rect x="784.6" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.60" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (5 samples, 0.01%; 0.00%)</title><rect x="887.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.14" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (15 samples, 0.03%; 0.00%)</title><rect x="887.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (15 samples, 0.03%; 0.00%)</title><rect x="887.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="383.5" ></text>
</g>
<g >
<title>operator new (64 samples, 0.14%; -0.00%)</title><rect x="978.2" y="357" width="1.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="981.18" y="367.5" ></text>
</g>
<g >
<title>operator new (47 samples, 0.10%; +0.00%)</title><rect x="1159.3" y="437" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1162.25" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (8 samples, 0.02%; +0.01%)</title><rect x="900.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="903.81" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (13 samples, 0.03%; -0.01%)</title><rect x="49.6" y="485" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="52.60" y="495.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (8 samples, 0.02%; +0.01%)</title><rect x="927.5" y="373" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="930.47" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (23 samples, 0.05%; +0.02%)</title><rect x="325.7" y="181" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="328.71" y="191.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (85 samples, 0.18%; -0.00%)</title><rect x="534.9" y="309" width="2.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="537.92" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.03%; 0.00%)</title><rect x="142.3" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="145.34" y="271.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (46,319 samples, 97.96%; 0.00%)</title><rect x="22.2" y="565" width="1155.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (33 samples, 0.07%; +0.00%)</title><rect x="857.8" y="437" width="0.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="860.77" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (22 samples, 0.05%; -0.00%)</title><rect x="1050.0" y="245" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1053.05" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (9 samples, 0.02%; +0.01%)</title><rect x="35.1" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="38.11" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (59 samples, 0.12%; +0.04%)</title><rect x="65.9" y="405" width="1.5" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="68.93" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; 0.00%)</title><rect x="935.9" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.85" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (883 samples, 1.87%; +0.01%)</title><rect x="656.1" y="501" width="22.0" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="659.10" y="511.5" >s..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.99" y="447.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (32 samples, 0.07%; +0.01%)</title><rect x="319.3" y="165" width="0.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="322.32" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1,222 samples, 2.58%; +0.03%)</title><rect x="1144.3" y="501" width="30.5" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="1147.26" y="511.5" >se..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (27 samples, 0.06%; +0.05%)</title><rect x="803.1" y="293" width="0.7" height="15.0" fill="rgb(255,137,137)" rx="2" ry="2" />
<text  x="806.09" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (7 samples, 0.01%; -0.00%)</title><rect x="462.8" y="277" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="465.84" y="287.5" ></text>
</g>
<g >
<title>schema_registry::get (166 samples, 0.35%; -0.00%)</title><rect x="979.8" y="357" width="4.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="982.77" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (10 samples, 0.02%; +0.01%)</title><rect x="662.7" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="665.74" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (23,856 samples, 50.45%; +0.03%)</title><rect x="46.9" y="501" width="595.3" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="49.86" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (61 samples, 0.13%; -0.01%)</title><rect x="784.5" y="373" width="1.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="787.55" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (9 samples, 0.02%; +0.01%)</title><rect x="254.8" y="229" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="257.84" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.01%)</title><rect x="1065.6" y="261" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1068.60" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (10 samples, 0.02%; -0.01%)</title><rect x="588.7" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="591.67" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (13 samples, 0.03%; +0.00%)</title><rect x="1157.5" y="405" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1160.53" y="415.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (17 samples, 0.04%; 0.00%)</title><rect x="886.1" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.07" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (27 samples, 0.06%; +0.00%)</title><rect x="464.3" y="309" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="467.29" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (194 samples, 0.41%; -0.01%)</title><rect x="153.8" y="229" width="4.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="156.79" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (5 samples, 0.01%; +0.01%)</title><rect x="839.1" y="389" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="842.15" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (7 samples, 0.01%; +0.01%)</title><rect x="592.1" y="357" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="595.06" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (7 samples, 0.01%; +0.00%)</title><rect x="522.8" y="293" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="525.81" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2,052 samples, 4.34%; +0.01%)</title><rect x="901.3" y="421" width="51.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="904.34" y="431.5" >cql3:..</text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (19 samples, 0.04%; +0.02%)</title><rect x="431.1" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="434.05" y="415.5" ></text>
</g>
<g >
<title>seastar::gate::enter (6 samples, 0.01%; 0.00%)</title><rect x="1043.1" y="181" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.09" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (26 samples, 0.05%; +0.02%)</title><rect x="1052.6" y="213" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1055.59" y="223.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (61 samples, 0.13%; -0.01%)</title><rect x="1163.8" y="469" width="1.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1166.77" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (152 samples, 0.32%; -0.02%)</title><rect x="937.5" y="373" width="3.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="940.47" y="383.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (226 samples, 0.48%; +0.00%)</title><rect x="871.3" y="437" width="5.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="874.29" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (16 samples, 0.03%; -0.00%)</title><rect x="851.6" y="421" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="854.60" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (146 samples, 0.31%; -0.02%)</title><rect x="819.5" y="165" width="3.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="822.53" y="175.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (20 samples, 0.04%; +0.02%)</title><rect x="667.3" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="670.33" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (31 samples, 0.07%; -0.01%)</title><rect x="995.1" y="293" width="0.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="998.12" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (12 samples, 0.03%; +0.01%)</title><rect x="234.7" y="213" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="237.73" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (6 samples, 0.01%; +0.00%)</title><rect x="219.0" y="149" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="221.98" y="159.5" ></text>
</g>
<g >
<title>schema::column_at (12 samples, 0.03%; -0.01%)</title><rect x="374.2" y="197" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="377.15" y="207.5" ></text>
</g>
<g >
<title>__tls_init (14 samples, 0.03%; -0.01%)</title><rect x="146.6" y="245" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="149.58" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (20 samples, 0.04%; +0.02%)</title><rect x="292.2" y="357" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="295.22" y="367.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (58 samples, 0.12%; +0.08%)</title><rect x="235.5" y="245" width="1.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="238.55" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (47 samples, 0.10%; -0.01%)</title><rect x="218.0" y="165" width="1.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="220.95" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (16 samples, 0.03%; -0.00%)</title><rect x="53.2" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="56.17" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (89 samples, 0.19%; +0.01%)</title><rect x="581.9" y="373" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="584.86" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (12 samples, 0.03%; +0.02%)</title><rect x="772.9" y="373" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="775.89" y="383.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (8 samples, 0.02%; -0.00%)</title><rect x="1078.7" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1081.70" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.03%; +0.01%)</title><rect x="666.3" y="437" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="669.26" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (6 samples, 0.01%; -0.03%)</title><rect x="134.7" y="245" width="0.1" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="137.68" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (6 samples, 0.01%; +0.00%)</title><rect x="457.6" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="460.63" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (6 samples, 0.01%; -0.01%)</title><rect x="766.7" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="769.70" y="367.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (26 samples, 0.05%; 0.00%)</title><rect x="1138.1" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.07" y="287.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (16 samples, 0.03%; +0.00%)</title><rect x="562.8" y="341" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="565.82" y="351.5" ></text>
</g>
<g >
<title>operator new (81 samples, 0.17%; +0.00%)</title><rect x="1002.4" y="261" width="2.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1005.41" y="271.5" ></text>
</g>
<g >
<title>tracing::add_table_name (12 samples, 0.03%; -0.01%)</title><rect x="1135.6" y="421" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1138.60" y="431.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (5 samples, 0.01%; 0.00%)</title><rect x="20.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.83" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (15 samples, 0.03%; +0.01%)</title><rect x="291.8" y="357" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="294.85" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; 0.00%)</title><rect x="886.2" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.17" y="335.5" ></text>
</g>
<g >
<title>operator new (39 samples, 0.08%; +0.00%)</title><rect x="917.9" y="325" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="920.93" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (66 samples, 0.14%; +0.03%)</title><rect x="257.2" y="213" width="1.6" height="15.0" fill="rgb(255,172,172)" rx="2" ry="2" />
<text  x="260.19" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="574.4" y="261" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="577.42" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (5 samples, 0.01%; +0.01%)</title><rect x="726.7" y="501" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="729.75" y="511.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (52 samples, 0.11%; 0.00%)</title><rect x="640.9" y="485" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.90" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (19 samples, 0.04%; +0.01%)</title><rect x="718.2" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="721.24" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (38 samples, 0.08%; -0.00%)</title><rect x="634.8" y="405" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="637.84" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.01%; -0.01%)</title><rect x="39.6" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="42.65" y="463.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (23 samples, 0.05%; -0.01%)</title><rect x="95.5" y="437" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="98.50" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (18 samples, 0.04%; +0.01%)</title><rect x="1012.0" y="261" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1014.97" y="271.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (7,096 samples, 15.01%; -0.02%)</title><rect x="116.4" y="373" width="177.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="119.41" y="383.5" >seastar::repeat&lt;merging..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (8 samples, 0.02%; +0.01%)</title><rect x="737.5" y="453" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="740.53" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (11 samples, 0.02%; +0.00%)</title><rect x="60.0" y="453" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="62.96" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (7 samples, 0.01%; 0.00%)</title><rect x="591.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.14" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (14 samples, 0.03%; +0.00%)</title><rect x="137.7" y="245" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="140.67" y="255.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (7 samples, 0.01%; 0.00%)</title><rect x="698.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.62" y="495.5" ></text>
</g>
<g >
<title>database::do_apply (38 samples, 0.08%; +0.00%)</title><rect x="1138.0" y="341" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1140.99" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (6 samples, 0.01%; +0.01%)</title><rect x="1133.7" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1136.65" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (24 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.44" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (6 samples, 0.01%; -0.00%)</title><rect x="168.7" y="197" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="171.67" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (6 samples, 0.01%; -0.01%)</title><rect x="378.4" y="197" width="0.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="381.42" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="558.2" y="421" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="561.22" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (36 samples, 0.08%; +0.00%)</title><rect x="822.1" y="117" width="0.9" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="825.08" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (5 samples, 0.01%; +0.01%)</title><rect x="303.1" y="293" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="306.13" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (18 samples, 0.04%; -0.01%)</title><rect x="254.4" y="229" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="257.39" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (22 samples, 0.05%; -0.01%)</title><rect x="276.3" y="325" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="279.25" y="335.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (6 samples, 0.01%; +0.01%)</title><rect x="494.4" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="497.41" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (23 samples, 0.05%; +0.02%)</title><rect x="567.9" y="277" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="570.91" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (230 samples, 0.49%; -0.01%)</title><rect x="217.5" y="181" width="5.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="220.48" y="191.5" ></text>
</g>
<g >
<title>operator new (41 samples, 0.09%; -0.00%)</title><rect x="875.3" y="357" width="1.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="878.26" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,006 samples, 10.59%; -0.01%)</title><rect x="299.7" y="357" width="125.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="302.73" y="367.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; +0.02%)</title><rect x="463.1" y="277" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="466.14" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.02%; +0.01%)</title><rect x="850.9" y="405" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="853.85" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (11 samples, 0.02%; +0.01%)</title><rect x="829.0" y="277" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="832.04" y="287.5" ></text>
</g>
<g >
<title>row_cache::make_reader (462 samples, 0.98%; -0.02%)</title><rect x="531.4" y="341" width="11.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="534.42" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (13 samples, 0.03%; 0.00%)</title><rect x="1175.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (12 samples, 0.03%; +0.01%)</title><rect x="719.5" y="405" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="722.49" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (483 samples, 1.02%; +0.00%)</title><rect x="1027.6" y="229" width="12.0" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1030.56" y="239.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (6 samples, 0.01%; 0.00%)</title><rect x="1138.8" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.77" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (5,440 samples, 11.50%; +0.03%)</title><rect x="295.1" y="405" width="135.8" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="298.12" y="415.5" >seastar::future&lt;m..</text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (22 samples, 0.05%; 0.00%)</title><rect x="19.4" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.36" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (30 samples, 0.06%; -0.01%)</title><rect x="1053.7" y="229" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1056.74" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (10 samples, 0.02%; 0.00%)</title><rect x="1130.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.96" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (72 samples, 0.15%; -0.04%)</title><rect x="962.9" y="389" width="1.8" height="15.0" fill="rgb(148,148,255)" rx="2" ry="2" />
<text  x="965.85" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (49 samples, 0.10%; +0.03%)</title><rect x="525.3" y="293" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="528.28" y="303.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (22 samples, 0.05%; +0.00%)</title><rect x="1168.4" y="469" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1171.39" y="479.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (222 samples, 0.47%; 0.00%)</title><rect x="283.9" y="309" width="5.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="286.89" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (8 samples, 0.02%; +0.01%)</title><rect x="1104.9" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1107.90" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (7 samples, 0.01%; -0.00%)</title><rect x="827.7" y="213" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="830.67" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.01%; -0.01%)</title><rect x="701.3" y="469" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="704.32" y="479.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.02%; +0.01%)</title><rect x="108.2" y="421" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="111.23" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (5 samples, 0.01%; +0.01%)</title><rect x="1048.1" y="261" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1051.05" y="271.5" ></text>
</g>
<g >
<title>query::result::result (15 samples, 0.03%; +0.00%)</title><rect x="620.0" y="421" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="623.01" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.03%; +0.01%)</title><rect x="174.4" y="133" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="177.41" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.01%; -0.01%)</title><rect x="1054.5" y="277" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1057.49" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (13 samples, 0.03%; +0.02%)</title><rect x="68.9" y="389" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="71.95" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (9 samples, 0.02%; -0.00%)</title><rect x="495.4" y="325" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="498.41" y="335.5" ></text>
</g>
<g >
<title>utils::array_search_gt (5 samples, 0.01%; +0.00%)</title><rect x="477.7" y="261" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="480.74" y="271.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (9 samples, 0.02%; +0.01%)</title><rect x="779.6" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="782.63" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (14 samples, 0.03%; 0.00%)</title><rect x="314.2" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="317.16" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (5 samples, 0.01%; +0.01%)</title><rect x="869.3" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="872.32" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (6 samples, 0.01%; +0.01%)</title><rect x="172.7" y="149" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="175.69" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (17 samples, 0.04%; 0.00%)</title><rect x="886.1" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.07" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (37 samples, 0.08%; 0.00%)</title><rect x="813.4" y="197" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.42" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="542.4" y="293" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="545.40" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (59 samples, 0.12%; +0.00%)</title><rect x="17.8" y="341" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="20.81" y="351.5" ></text>
</g>
<g >
<title>operator new (95 samples, 0.20%; -0.00%)</title><rect x="1115.9" y="357" width="2.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1118.91" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (6 samples, 0.01%; +0.00%)</title><rect x="1046.7" y="261" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1049.66" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (5 samples, 0.01%; +0.00%)</title><rect x="166.1" y="229" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="169.12" y="239.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.01%; 0.00%)</title><rect x="887.0" y="309" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.96" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (8 samples, 0.02%; -0.02%)</title><rect x="691.3" y="485" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="694.26" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (9 samples, 0.02%; +0.01%)</title><rect x="10.1" y="581" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="13.10" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (23 samples, 0.05%; -0.01%)</title><rect x="663.0" y="437" width="0.6" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="665.99" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (8 samples, 0.02%; 0.00%)</title><rect x="145.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.86" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (23 samples, 0.05%; -0.00%)</title><rect x="796.5" y="277" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="799.45" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; -0.00%)</title><rect x="598.6" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="601.63" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (19 samples, 0.04%; +0.01%)</title><rect x="730.3" y="485" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="733.32" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; -0.01%)</title><rect x="540.8" y="229" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="543.83" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (106 samples, 0.22%; +0.02%)</title><rect x="1099.5" y="357" width="2.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1102.46" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (58 samples, 0.12%; +0.01%)</title><rect x="824.8" y="245" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="827.77" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (10 samples, 0.02%; 0.00%)</title><rect x="1175.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (552 samples, 1.17%; +0.00%)</title><rect x="711.1" y="501" width="13.8" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="714.13" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (45 samples, 0.10%; +0.00%)</title><rect x="825.1" y="229" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="828.07" y="239.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (12 samples, 0.03%; +0.00%)</title><rect x="688.5" y="485" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="691.54" y="495.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (14 samples, 0.03%; -0.00%)</title><rect x="250.3" y="213" width="0.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="253.32" y="223.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.01%; 0.00%)</title><rect x="618.1" y="437" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.12" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4,646 samples, 9.83%; -0.01%)</title><rect x="144.6" y="293" width="116.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="147.61" y="303.5" >seastar::do_un..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (29 samples, 0.06%; +0.01%)</title><rect x="841.2" y="357" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="844.20" y="367.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (110 samples, 0.23%; +0.00%)</title><rect x="732.4" y="453" width="2.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="735.41" y="463.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (5 samples, 0.01%; 0.00%)</title><rect x="21.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.93" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (69 samples, 0.15%; -0.02%)</title><rect x="287.1" y="261" width="1.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="290.08" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; -0.00%)</title><rect x="919.1" y="309" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="922.08" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.01%; +0.00%)</title><rect x="433.8" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="436.80" y="415.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (9 samples, 0.02%; +0.02%)</title><rect x="375.2" y="213" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="378.23" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (8 samples, 0.02%; +0.01%)</title><rect x="962.6" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="965.58" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (23 samples, 0.05%; 0.00%)</title><rect x="886.0" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.97" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (34 samples, 0.07%; -0.01%)</title><rect x="706.3" y="437" width="0.8" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="709.26" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (62 samples, 0.13%; -0.04%)</title><rect x="797.8" y="309" width="1.5" height="15.0" fill="rgb(151,151,255)" rx="2" ry="2" />
<text  x="800.77" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.01%; -0.01%)</title><rect x="636.6" y="389" width="0.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="639.56" y="399.5" ></text>
</g>
<g >
<title>std::type_info::operator== (5 samples, 0.01%; -0.01%)</title><rect x="1174.1" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1177.13" y="415.5" ></text>
</g>
<g >
<title>query_state::query_state (211 samples, 0.45%; -0.00%)</title><rect x="605.3" y="437" width="5.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="608.34" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (37 samples, 0.08%; -0.01%)</title><rect x="100.7" y="421" width="0.9" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="103.71" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; -0.00%)</title><rect x="708.5" y="485" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="711.48" y="495.5" ></text>
</g>
<g >
<title>operator new (61 samples, 0.13%; 0.00%)</title><rect x="733.1" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.11" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (6 samples, 0.01%; +0.01%)</title><rect x="23.7" y="517" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="26.68" y="527.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (5 samples, 0.01%; -0.01%)</title><rect x="291.2" y="325" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="294.17" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (5 samples, 0.01%; -0.03%)</title><rect x="823.7" y="197" width="0.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="826.70" y="207.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.01%; -0.02%)</title><rect x="631.8" y="437" width="0.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="634.82" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (8 samples, 0.02%; +0.01%)</title><rect x="1053.3" y="245" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1056.27" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (5 samples, 0.01%; +0.01%)</title><rect x="668.3" y="453" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="671.25" y="463.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (7 samples, 0.01%; +0.00%)</title><rect x="836.8" y="325" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="839.75" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (814 samples, 1.72%; -0.03%)</title><rect x="561.2" y="373" width="20.3" height="15.0" fill="rgb(172,172,255)" rx="2" ry="2" />
<text  x="564.17" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (5 samples, 0.01%; 0.00%)</title><rect x="1147.5" y="469" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.45" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (37 samples, 0.08%; +0.07%)</title><rect x="873.0" y="389" width="0.9" height="15.0" fill="rgb(255,110,110)" rx="2" ry="2" />
<text  x="876.01" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (46 samples, 0.10%; +0.00%)</title><rect x="833.4" y="309" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="836.41" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.01%; +0.01%)</title><rect x="517.6" y="229" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="520.62" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (12 samples, 0.03%; 0.00%)</title><rect x="18.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.24" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (7 samples, 0.01%; +0.01%)</title><rect x="987.0" y="357" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="989.96" y="367.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (61 samples, 0.13%; +0.01%)</title><rect x="469.2" y="325" width="1.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="472.23" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (28 samples, 0.06%; +0.00%)</title><rect x="36.7" y="421" width="0.7" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="39.73" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.03%; -0.01%)</title><rect x="265.6" y="277" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="268.62" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (11 samples, 0.02%; +0.01%)</title><rect x="1153.9" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1156.91" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (14 samples, 0.03%; -0.01%)</title><rect x="680.4" y="469" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="683.36" y="479.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (224 samples, 0.47%; 0.00%)</title><rect x="15.1" y="437" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.14" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (12 samples, 0.03%; +0.02%)</title><rect x="107.7" y="421" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="110.70" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (226 samples, 0.48%; -0.00%)</title><rect x="15.1" y="469" width="5.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="18.14" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (90 samples, 0.19%; -0.01%)</title><rect x="539.8" y="277" width="2.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="542.81" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.01%)</title><rect x="643.5" y="469" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="646.52" y="479.5" ></text>
</g>
<g >
<title>dht::tri_compare (26 samples, 0.05%; +0.01%)</title><rect x="1081.6" y="245" width="0.6" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="1084.57" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (17 samples, 0.04%; -0.01%)</title><rect x="718.8" y="421" width="0.4" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="721.81" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (47 samples, 0.10%; +0.00%)</title><rect x="15.9" y="293" width="1.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="18.89" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (13 samples, 0.03%; +0.00%)</title><rect x="377.4" y="213" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="380.45" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (27 samples, 0.06%; +0.01%)</title><rect x="70.3" y="389" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="73.34" y="399.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (43 samples, 0.09%; +0.04%)</title><rect x="37.5" y="405" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="40.48" y="415.5" ></text>
</g>
<g >
<title>[unknown] (173 samples, 0.37%; 0.00%)</title><rect x="10.1" y="597" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.10" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (118 samples, 0.25%; +0.01%)</title><rect x="459.3" y="277" width="2.9" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="462.28" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="568.5" y="293" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="571.51" y="303.5" ></text>
</g>
<g >
<title>database::find_column_family (49 samples, 0.10%; +0.00%)</title><rect x="1021.4" y="245" width="1.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1024.43" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (12 samples, 0.03%; -0.00%)</title><rect x="470.3" y="293" width="0.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="473.33" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (650 samples, 1.37%; +0.00%)</title><rect x="807.7" y="261" width="16.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="810.68" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (6 samples, 0.01%; -0.01%)</title><rect x="1123.3" y="405" width="0.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1126.27" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (8 samples, 0.02%; 0.00%)</title><rect x="126.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="129.62" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (43 samples, 0.09%; +0.00%)</title><rect x="1139.0" y="421" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1141.99" y="431.5" ></text>
</g>
<g >
<title>db::filter_for_query (36 samples, 0.08%; +0.00%)</title><rect x="1067.5" y="341" width="0.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1070.54" y="351.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4,655 samples, 9.84%; +0.01%)</title><rect x="305.4" y="293" width="116.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="308.45" y="303.5" >seastar::repea..</text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (5 samples, 0.01%; +0.00%)</title><rect x="539.3" y="309" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="542.33" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (22 samples, 0.05%; -0.01%)</title><rect x="400.8" y="229" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="403.78" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (12 samples, 0.03%; +0.01%)</title><rect x="613.6" y="421" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="616.60" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (5 samples, 0.01%; -0.01%)</title><rect x="878.9" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="881.93" y="479.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; -0.01%)</title><rect x="948.7" y="373" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="951.65" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (8 samples, 0.02%; -0.02%)</title><rect x="548.3" y="421" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="551.29" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (7 samples, 0.01%; -0.00%)</title><rect x="768.8" y="389" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="771.80" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; -0.01%)</title><rect x="662.3" y="453" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="665.29" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (5,170 samples, 10.93%; +0.01%)</title><rect x="974.1" y="373" width="129.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="977.06" y="383.5" >service::storage..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (15 samples, 0.03%; +0.00%)</title><rect x="715.5" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="718.52" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (10 samples, 0.02%; +0.00%)</title><rect x="602.2" y="373" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="605.22" y="383.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (7 samples, 0.01%; 0.00%)</title><rect x="75.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.21" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (13 samples, 0.03%; +0.02%)</title><rect x="162.1" y="197" width="0.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="165.05" y="207.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (6 samples, 0.01%; +0.00%)</title><rect x="761.6" y="277" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="764.64" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (30 samples, 0.06%; +0.02%)</title><rect x="326.3" y="181" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="329.31" y="191.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (36 samples, 0.08%; -0.00%)</title><rect x="635.8" y="405" width="0.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="638.79" y="415.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (71 samples, 0.15%; +0.09%)</title><rect x="323.7" y="181" width="1.7" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="326.67" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (65 samples, 0.14%; +0.03%)</title><rect x="862.6" y="405" width="1.6" height="15.0" fill="rgb(255,169,169)" rx="2" ry="2" />
<text  x="865.56" y="415.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.02%; -0.01%)</title><rect x="642.9" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="645.87" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (11 samples, 0.02%; 0.00%)</title><rect x="704.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.86" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (25 samples, 0.05%; -0.00%)</title><rect x="951.9" y="341" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="954.87" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (14 samples, 0.03%; +0.02%)</title><rect x="45.0" y="485" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="48.01" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (7 samples, 0.01%; 0.00%)</title><rect x="861.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.04" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (5 samples, 0.01%; -0.00%)</title><rect x="415.4" y="213" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="418.35" y="223.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (144 samples, 0.30%; -0.02%)</title><rect x="844.3" y="341" width="3.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="847.34" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (6 samples, 0.01%; +0.00%)</title><rect x="702.0" y="469" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="704.99" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.03%; 0.00%)</title><rect x="15.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="303.5" ></text>
</g>
<g >
<title>__dynamic_cast (15 samples, 0.03%; +0.01%)</title><rect x="11.5" y="581" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="14.52" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (70 samples, 0.15%; -0.00%)</title><rect x="756.2" y="341" width="1.8" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="759.22" y="351.5" ></text>
</g>
<g >
<title>operator delete (29 samples, 0.06%; +0.01%)</title><rect x="839.7" y="373" width="0.7" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="842.70" y="383.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%; +0.00%)</title><rect x="666.2" y="453" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="669.21" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (27 samples, 0.06%; +0.02%)</title><rect x="1075.5" y="293" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1078.48" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (6 samples, 0.01%; +0.01%)</title><rect x="116.3" y="373" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="119.26" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (120 samples, 0.25%; -0.01%)</title><rect x="867.1" y="389" width="3.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="870.07" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (29 samples, 0.06%; +0.01%)</title><rect x="852.6" y="405" width="0.7" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="855.55" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (21 samples, 0.04%; +0.03%)</title><rect x="1151.3" y="485" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1154.34" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (399 samples, 0.84%; +0.02%)</title><rect x="713.9" y="469" width="9.9" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="716.87" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (9 samples, 0.02%; +0.01%)</title><rect x="1007.1" y="293" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1010.13" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (12 samples, 0.03%; +0.01%)</title><rect x="785.0" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="787.97" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (12 samples, 0.03%; -0.01%)</title><rect x="843.9" y="293" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="846.87" y="303.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (5 samples, 0.01%; 0.00%)</title><rect x="20.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.83" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (11 samples, 0.02%; +0.00%)</title><rect x="1035.3" y="133" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1038.33" y="143.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (14 samples, 0.03%; +0.01%)</title><rect x="322.9" y="165" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="325.87" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (15 samples, 0.03%; 0.00%)</title><rect x="31.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.11" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (7 samples, 0.01%; -0.00%)</title><rect x="59.0" y="437" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="62.01" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (12 samples, 0.03%; -0.01%)</title><rect x="542.1" y="277" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="545.05" y="287.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (19 samples, 0.04%; -0.02%)</title><rect x="381.3" y="181" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="384.29" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (19 samples, 0.04%; +0.03%)</title><rect x="915.3" y="325" width="0.5" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="918.31" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (6 samples, 0.01%; +0.00%)</title><rect x="709.6" y="485" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="712.56" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="255.5" ></text>
</g>
<g >
<title>table::make_reader (4,357 samples, 9.21%; -0.04%)</title><rect x="436.8" y="357" width="108.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="439.77" y="367.5" >table::make_r..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (5 samples, 0.01%; 0.00%)</title><rect x="917.2" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="920.21" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (14 samples, 0.03%; +0.03%)</title><rect x="1028.1" y="213" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1031.14" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (8 samples, 0.02%; +0.01%)</title><rect x="252.9" y="181" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="255.87" y="191.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (110 samples, 0.23%; +0.01%)</title><rect x="72.1" y="405" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.09" y="415.5" ></text>
</g>
<g >
<title>operator delete (73 samples, 0.15%; -0.01%)</title><rect x="416.8" y="245" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="419.75" y="255.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.06%; 0.00%)</title><rect x="553.5" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="556.46" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (195 samples, 0.41%; -0.02%)</title><rect x="769.0" y="421" width="4.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="771.97" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (5 samples, 0.01%; +0.01%)</title><rect x="851.2" y="421" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="854.18" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (135 samples, 0.29%; +0.00%)</title><rect x="1001.7" y="309" width="3.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1004.74" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (17 samples, 0.04%; 0.00%)</title><rect x="220.7" y="133" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.65" y="143.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (17 samples, 0.04%; 0.00%)</title><rect x="1004.4" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.43" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (15 samples, 0.03%; +0.01%)</title><rect x="527.6" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="530.63" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (8 samples, 0.02%; -0.00%)</title><rect x="943.6" y="373" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="946.56" y="383.5" ></text>
</g>
<g >
<title>operator new (25 samples, 0.05%; +0.00%)</title><rect x="94.9" y="437" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="97.87" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; -0.01%)</title><rect x="541.5" y="245" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="544.45" y="255.5" ></text>
</g>
<g >
<title>operator delete (32 samples, 0.07%; +0.04%)</title><rect x="830.4" y="277" width="0.8" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="833.37" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6,080 samples, 12.86%; -0.02%)</title><rect x="120.5" y="341" width="151.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="123.48" y="351.5" >mutation_fragment_m..</text>
</g>
<g >
<title>operator delete (31 samples, 0.07%; +0.02%)</title><rect x="678.4" y="485" width="0.8" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="681.39" y="495.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (26 samples, 0.05%; -0.00%)</title><rect x="342.6" y="181" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="345.58" y="191.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.01%; 0.00%)</title><rect x="18.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.04" y="287.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (6 samples, 0.01%; 0.00%)</title><rect x="1138.1" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.14" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (7 samples, 0.01%; -0.07%)</title><rect x="902.8" y="405" width="0.1" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="905.76" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (5 samples, 0.01%; -0.01%)</title><rect x="708.1" y="453" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="711.06" y="463.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (17 samples, 0.04%; -0.00%)</title><rect x="638.0" y="485" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="640.96" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (675 samples, 1.43%; -0.01%)</title><rect x="1078.9" y="325" width="16.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1081.92" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (14 samples, 0.03%; 0.00%)</title><rect x="15.5" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.52" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (9,872 samples, 20.88%; -0.03%)</title><rect x="891.4" y="469" width="246.3" height="15.0" fill="rgb(163,163,255)" rx="2" ry="2" />
<text  x="894.36" y="479.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (277 samples, 0.59%; +0.02%)</title><rect x="510.9" y="245" width="6.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="513.88" y="255.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (87 samples, 0.18%; +0.00%)</title><rect x="805.1" y="261" width="2.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="808.06" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (165 samples, 0.35%; -0.00%)</title><rect x="255.6" y="261" width="4.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="258.56" y="271.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.01%; 0.00%)</title><rect x="1139.2" y="245" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.19" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::stats (8 samples, 0.02%; +0.01%)</title><rect x="529.6" y="325" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="532.58" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (13 samples, 0.03%; +0.01%)</title><rect x="682.0" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="685.00" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20 samples, 0.04%; +0.01%)</title><rect x="762.3" y="277" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="765.34" y="287.5" ></text>
</g>
<g >
<title>database::find_column_family (103 samples, 0.22%; +0.00%)</title><rect x="1059.3" y="341" width="2.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1062.33" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.03%; +0.01%)</title><rect x="933.8" y="389" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="936.81" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (6 samples, 0.01%; 0.00%)</title><rect x="18.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.91" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.02%; -0.00%)</title><rect x="855.6" y="373" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="858.65" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (80 samples, 0.17%; -0.00%)</title><rect x="879.5" y="453" width="2.0" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="882.48" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (17 samples, 0.04%; 0.00%)</title><rect x="719.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.36" y="431.5" ></text>
</g>
<g >
<title>operator delete (15 samples, 0.03%; +0.00%)</title><rect x="46.5" y="501" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="49.49" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (21 samples, 0.04%; +0.01%)</title><rect x="629.3" y="389" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="632.35" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (5 samples, 0.01%; +0.01%)</title><rect x="902.5" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="905.54" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (19 samples, 0.04%; +0.02%)</title><rect x="327.2" y="181" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="330.24" y="191.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (29 samples, 0.06%; +0.01%)</title><rect x="1098.1" y="341" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1101.06" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (6 samples, 0.01%; +0.01%)</title><rect x="915.8" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="918.81" y="335.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.01%; +0.01%)</title><rect x="812.2" y="165" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="815.17" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (11 samples, 0.02%; +0.01%)</title><rect x="430.6" y="389" width="0.3" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="433.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (11 samples, 0.02%; +0.01%)</title><rect x="877.9" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="880.86" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (46 samples, 0.10%; +0.04%)</title><rect x="584.1" y="373" width="1.1" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="587.08" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.00%)</title><rect x="695.0" y="485" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="697.98" y="495.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (67 samples, 0.14%; +0.00%)</title><rect x="138.6" y="245" width="1.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="141.60" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%; -0.00%)</title><rect x="172.8" y="149" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="175.84" y="159.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (5 samples, 0.01%; +0.00%)</title><rect x="852.2" y="421" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="855.18" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (370 samples, 0.78%; 0.00%)</title><rect x="569.6" y="309" width="9.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.60" y="319.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (10 samples, 0.02%; +0.02%)</title><rect x="1054.6" y="277" width="0.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1057.62" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (13 samples, 0.03%; -0.00%)</title><rect x="570.9" y="293" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="573.85" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (5 samples, 0.01%; +0.00%)</title><rect x="537.7" y="309" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="540.69" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (29 samples, 0.06%; +0.03%)</title><rect x="707.1" y="453" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="710.11" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.01%; -0.00%)</title><rect x="267.9" y="293" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="270.87" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (30 samples, 0.06%; -0.01%)</title><rect x="972.1" y="341" width="0.7" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="975.09" y="351.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (26 samples, 0.05%; -0.00%)</title><rect x="861.6" y="357" width="0.6" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="864.58" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (12 samples, 0.03%; -0.11%)</title><rect x="451.5" y="261" width="0.3" height="15.0" fill="rgb(55,55,255)" rx="2" ry="2" />
<text  x="454.54" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (25 samples, 0.05%; +0.00%)</title><rect x="160.8" y="181" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="163.81" y="191.5" ></text>
</g>
<g >
<title>operator delete (27 samples, 0.06%; +0.01%)</title><rect x="597.7" y="405" width="0.6" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="600.65" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (22 samples, 0.05%; +0.03%)</title><rect x="1030.7" y="181" width="0.6" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1033.73" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (5 samples, 0.01%; +0.01%)</title><rect x="237.9" y="245" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="240.87" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (60 samples, 0.13%; -0.01%)</title><rect x="575.6" y="277" width="1.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="578.64" y="287.5" ></text>
</g>
<g >
<title>free (31 samples, 0.07%; +0.02%)</title><rect x="414.3" y="197" width="0.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="417.33" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (14 samples, 0.03%; +0.02%)</title><rect x="870.2" y="405" width="0.4" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="873.22" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (158 samples, 0.33%; 0.00%)</title><rect x="272.9" y="341" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.86" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (7 samples, 0.01%; +0.00%)</title><rect x="913.9" y="309" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="916.89" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (9,676 samples, 20.46%; +0.04%)</title><rect x="895.0" y="437" width="241.4" height="15.0" fill="rgb(255,160,160)" rx="2" ry="2" />
<text  x="897.98" y="447.5" >cql3::statements::select_stateme..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (30 samples, 0.06%; 0.00%)</title><rect x="591.3" y="357" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.32" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (8 samples, 0.02%; +0.01%)</title><rect x="242.1" y="213" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="245.11" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="276.0" y="309" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="279.00" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (114 samples, 0.24%; 0.00%)</title><rect x="989.5" y="341" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="992.46" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.01%; -0.00%)</title><rect x="710.0" y="469" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="713.00" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (9 samples, 0.02%; +0.01%)</title><rect x="708.2" y="469" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="711.18" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (105 samples, 0.22%; -0.02%)</title><rect x="227.5" y="181" width="2.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="230.54" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (13 samples, 0.03%; -0.01%)</title><rect x="367.2" y="149" width="0.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="370.21" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.99" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (16 samples, 0.03%; +0.00%)</title><rect x="1068.6" y="341" width="0.4" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1071.64" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (6 samples, 0.01%; +0.00%)</title><rect x="773.2" y="405" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="776.19" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (11 samples, 0.02%; -0.03%)</title><rect x="602.7" y="389" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="605.70" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (18 samples, 0.04%; +0.01%)</title><rect x="376.8" y="165" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="379.80" y="175.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (58 samples, 0.12%; -0.02%)</title><rect x="935.6" y="373" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="938.60" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (5 samples, 0.01%; -0.00%)</title><rect x="344.7" y="181" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="347.68" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (43 samples, 0.09%; -0.00%)</title><rect x="1149.4" y="485" width="1.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1152.40" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (30 samples, 0.06%; -0.05%)</title><rect x="426.4" y="325" width="0.8" height="15.0" fill="rgb(142,142,255)" rx="2" ry="2" />
<text  x="429.43" y="335.5" ></text>
</g>
<g >
<title>operator delete (25 samples, 0.05%; +0.01%)</title><rect x="51.6" y="469" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="54.58" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (14 samples, 0.03%; -0.00%)</title><rect x="304.7" y="245" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="307.65" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (5 samples, 0.01%; 0.00%)</title><rect x="15.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.54" y="223.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%; -0.00%)</title><rect x="939.7" y="341" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="942.75" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2,901 samples, 6.14%; -0.01%)</title><rect x="163.2" y="245" width="72.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="166.15" y="255.5" >partitio..</text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (9 samples, 0.02%; -0.01%)</title><rect x="329.3" y="149" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="332.31" y="159.5" ></text>
</g>
<g >
<title>reader_permit::consume (11 samples, 0.02%; -0.01%)</title><rect x="516.0" y="165" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="519.02" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (25 samples, 0.05%; -0.01%)</title><rect x="577.3" y="277" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="580.32" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (673 samples, 1.42%; -0.03%)</title><rect x="181.5" y="117" width="16.8" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="184.47" y="127.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (13 samples, 0.03%; +0.01%)</title><rect x="242.5" y="197" width="0.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="245.49" y="207.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (20 samples, 0.04%; -0.01%)</title><rect x="1175.0" y="501" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1178.00" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (172 samples, 0.36%; -0.01%)</title><rect x="226.1" y="197" width="4.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="229.14" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (21 samples, 0.04%; -0.01%)</title><rect x="720.8" y="453" width="0.5" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="723.76" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (5 samples, 0.01%; +0.00%)</title><rect x="418.6" y="245" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="421.57" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.03%; -0.01%)</title><rect x="855.3" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="858.27" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (15 samples, 0.03%; +0.00%)</title><rect x="294.4" y="405" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="297.37" y="415.5" ></text>
</g>
<g >
<title>operator new (90 samples, 0.19%; +0.00%)</title><rect x="554.4" y="341" width="2.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="557.43" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (6 samples, 0.01%; -0.00%)</title><rect x="855.7" y="357" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="858.74" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.01%; -0.01%)</title><rect x="942.5" y="405" width="0.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="945.52" y="415.5" ></text>
</g>
<g >
<title>database::query (6 samples, 0.01%; +0.00%)</title><rect x="1010.5" y="277" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1013.47" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (6 samples, 0.01%; -0.01%)</title><rect x="307.5" y="261" width="0.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="310.52" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (10 samples, 0.02%; +0.02%)</title><rect x="571.2" y="293" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="574.18" y="303.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (174 samples, 0.37%; +0.01%)</title><rect x="929.5" y="357" width="4.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="932.46" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (5 samples, 0.01%; -0.02%)</title><rect x="146.1" y="261" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="149.06" y="271.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (64 samples, 0.14%; +0.01%)</title><rect x="881.5" y="469" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="884.55" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (5 samples, 0.01%; 0.00%)</title><rect x="21.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.93" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.01%; -0.00%)</title><rect x="18.0" y="149" width="0.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="21.04" y="159.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (185 samples, 0.39%; +0.02%)</title><rect x="1032.4" y="181" width="4.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1035.36" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (7 samples, 0.01%; -0.00%)</title><rect x="38.4" y="389" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="41.37" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (61 samples, 0.13%; -0.06%)</title><rect x="133.5" y="261" width="1.5" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="136.51" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (6 samples, 0.01%; +0.01%)</title><rect x="900.7" y="421" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="903.66" y="431.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (7 samples, 0.01%; -0.02%)</title><rect x="468.9" y="325" width="0.1" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="471.86" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (12 samples, 0.03%; 0.00%)</title><rect x="886.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.07" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (8 samples, 0.02%; +0.01%)</title><rect x="677.8" y="405" width="0.2" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="680.84" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (6 samples, 0.01%; +0.01%)</title><rect x="710.2" y="469" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="713.18" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (17 samples, 0.04%; +0.01%)</title><rect x="1120.7" y="389" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.67" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (878 samples, 1.86%; -0.01%)</title><rect x="920.6" y="405" width="21.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="923.60" y="415.5" >c..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (67 samples, 0.14%; -0.00%)</title><rect x="1157.3" y="437" width="1.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1160.33" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (455 samples, 0.96%; +0.02%)</title><rect x="657.2" y="485" width="11.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="660.17" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; 0.00%)</title><rect x="886.2" y="341" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.17" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (24 samples, 0.05%; +0.00%)</title><rect x="288.8" y="277" width="0.6" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="291.80" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (21 samples, 0.04%; +0.02%)</title><rect x="950.8" y="357" width="0.5" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="953.80" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (29 samples, 0.06%; 0.00%)</title><rect x="20.8" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.78" y="463.5" ></text>
</g>
<g >
<title>operator delete (45 samples, 0.10%; +0.03%)</title><rect x="600.4" y="389" width="1.2" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="603.45" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (6 samples, 0.01%; -0.00%)</title><rect x="741.4" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="744.42" y="399.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (11 samples, 0.02%; +0.01%)</title><rect x="586.6" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="589.60" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (26 samples, 0.05%; -0.02%)</title><rect x="1034.2" y="149" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="1037.15" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (151 samples, 0.32%; -0.01%)</title><rect x="409.3" y="197" width="3.8" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="412.34" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (128 samples, 0.27%; -0.01%)</title><rect x="1051.3" y="261" width="3.2" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="1054.30" y="271.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (9 samples, 0.02%; +0.01%)</title><rect x="222.3" y="101" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="225.30" y="111.5" ></text>
</g>
<g >
<title>query::querier_base::close (13 samples, 0.03%; 0.00%)</title><rect x="1175.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1178.88" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.03%; 0.00%)</title><rect x="21.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.83" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (45 samples, 0.10%; +0.00%)</title><rect x="1159.3" y="421" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1162.30" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (4,634 samples, 9.80%; -0.04%)</title><rect x="432.6" y="421" width="115.6" height="15.0" fill="rgb(160,160,255)" rx="2" ry="2" />
<text  x="435.57" y="431.5" >query::querier..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (14 samples, 0.03%; +0.00%)</title><rect x="279.5" y="341" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="282.47" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (90 samples, 0.19%; -0.00%)</title><rect x="879.2" y="469" width="2.3" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="882.23" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (106 samples, 0.22%; +0.00%)</title><rect x="242.3" y="213" width="2.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="245.31" y="223.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (17 samples, 0.04%; +0.01%)</title><rect x="838.1" y="277" width="0.4" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="841.10" y="287.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1,698 samples, 3.59%; -0.00%)</title><rect x="793.0" y="357" width="42.4" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="796.03" y="367.5" >ser..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (25 samples, 0.05%; -0.00%)</title><rect x="582.5" y="341" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="585.46" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (366 samples, 0.77%; +0.00%)</title><rect x="1069.3" y="341" width="9.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1072.26" y="351.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.01%; -0.00%)</title><rect x="145.6" y="261" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="148.63" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%; -0.00%)</title><rect x="866.8" y="405" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="869.80" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (21 samples, 0.04%; -0.00%)</title><rect x="585.9" y="357" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="588.93" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (27 samples, 0.06%; 0.00%)</title><rect x="699.1" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.10" y="447.5" ></text>
</g>
<g >
<title>db::block_for (6 samples, 0.01%; -0.00%)</title><rect x="1068.1" y="325" width="0.1" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="1071.09" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (7 samples, 0.01%; 0.00%)</title><rect x="886.2" y="357" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.17" y="367.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (366 samples, 0.77%; 0.00%)</title><rect x="814.3" y="213" width="9.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.34" y="223.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (28 samples, 0.06%; +0.00%)</title><rect x="699.1" y="469" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="702.07" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (127 samples, 0.27%; -0.01%)</title><rect x="35.4" y="453" width="3.2" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="38.40" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (121 samples, 0.26%; -0.00%)</title><rect x="626.9" y="421" width="3.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="629.90" y="431.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (12 samples, 0.03%; +0.00%)</title><rect x="741.3" y="405" width="0.3" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="744.27" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (76 samples, 0.16%; +0.15%)</title><rect x="505.7" y="261" width="1.9" height="15.0" fill="rgb(255,5,5)" rx="2" ry="2" />
<text  x="508.67" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.02%; +0.01%)</title><rect x="489.2" y="181" width="0.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="492.25" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.01%; +0.01%)</title><rect x="856.2" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="859.24" y="447.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (42 samples, 0.09%; 0.00%)</title><rect x="1139.0" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.02" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (28 samples, 0.06%; 0.00%)</title><rect x="954.6" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="957.64" y="399.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (11 samples, 0.02%; +0.01%)</title><rect x="375.0" y="197" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="377.95" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (18 samples, 0.04%; -0.02%)</title><rect x="655.0" y="485" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="658.00" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (23 samples, 0.05%; -0.02%)</title><rect x="544.5" y="309" width="0.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="547.47" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (6 samples, 0.01%; +0.01%)</title><rect x="551.8" y="373" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="554.76" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (6 samples, 0.01%; +0.00%)</title><rect x="1174.3" y="421" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1177.30" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (26 samples, 0.05%; -0.02%)</title><rect x="758.3" y="357" width="0.6" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="761.27" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%; -0.01%)</title><rect x="836.5" y="341" width="0.1" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="839.48" y="351.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (79 samples, 0.17%; +0.00%)</title><rect x="535.1" y="293" width="1.9" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="538.07" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (203 samples, 0.43%; -0.01%)</title><rect x="15.5" y="389" width="5.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="18.52" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (15 samples, 0.03%; +0.01%)</title><rect x="216.4" y="149" width="0.4" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="219.41" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (5 samples, 0.01%; +0.01%)</title><rect x="840.5" y="373" width="0.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="843.47" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.01%; +0.01%)</title><rect x="75.6" y="421" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="78.58" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (15 samples, 0.03%; -0.03%)</title><rect x="564.9" y="325" width="0.4" height="15.0" fill="rgb(169,169,255)" rx="2" ry="2" />
<text  x="567.91" y="335.5" ></text>
</g>
<g >
<title>operator delete (28 samples, 0.06%; +0.01%)</title><rect x="583.4" y="341" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="586.35" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (103 samples, 0.22%; -0.01%)</title><rect x="924.5" y="373" width="2.6" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="927.52" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="1059.2" y="341" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1062.18" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (30 samples, 0.06%; -0.00%)</title><rect x="20.8" y="469" width="0.7" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="23.78" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (200 samples, 0.42%; -0.01%)</title><rect x="777.0" y="373" width="5.0" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="779.96" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (77 samples, 0.16%; -0.01%)</title><rect x="274.3" y="325" width="1.9" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="277.25" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (7 samples, 0.01%; -0.00%)</title><rect x="1134.0" y="421" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="1137.02" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (6 samples, 0.01%; 0.00%)</title><rect x="772.0" y="373" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.97" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (47 samples, 0.10%; +0.01%)</title><rect x="742.8" y="341" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="745.85" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (771 samples, 1.63%; +0.00%)</title><rect x="1078.5" y="341" width="19.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1081.50" y="351.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (13 samples, 0.03%; -0.00%)</title><rect x="616.5" y="421" width="0.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="619.50" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (58 samples, 0.12%; -0.01%)</title><rect x="425.8" y="357" width="1.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="428.81" y="367.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.01%; 0.00%)</title><rect x="509.8" y="229" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="512.79" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (25 samples, 0.05%; +0.00%)</title><rect x="845.6" y="293" width="0.6" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="848.61" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (21 samples, 0.04%; +0.01%)</title><rect x="860.9" y="357" width="0.5" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="863.91" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (10 samples, 0.02%; +0.01%)</title><rect x="834.7" y="325" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="837.68" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.01%; +0.00%)</title><rect x="291.7" y="357" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="294.72" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (7 samples, 0.01%; +0.01%)</title><rect x="1102.3" y="341" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1105.33" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (31 samples, 0.07%; -0.02%)</title><rect x="669.4" y="485" width="0.8" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="672.40" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (8 samples, 0.02%; +0.00%)</title><rect x="1034.8" y="149" width="0.2" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1037.80" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (107 samples, 0.23%; +0.02%)</title><rect x="518.2" y="245" width="2.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="521.20" y="255.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (43 samples, 0.09%; +0.00%)</title><rect x="767.5" y="405" width="1.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="770.50" y="415.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (32 samples, 0.07%; +0.00%)</title><rect x="582.3" y="357" width="0.8" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="585.31" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (5 samples, 0.01%; 0.00%)</title><rect x="1056.2" y="325" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1059.19" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (16 samples, 0.03%; +0.00%)</title><rect x="45.5" y="485" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="48.46" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (14 samples, 0.03%; -0.01%)</title><rect x="271.5" y="325" width="0.3" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="274.48" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (24 samples, 0.05%; +0.01%)</title><rect x="998.1" y="261" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1001.07" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (85 samples, 0.18%; -0.00%)</title><rect x="755.8" y="357" width="2.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="758.85" y="367.5" ></text>
</g>
<g >
<title>operator new (71 samples, 0.15%; -0.01%)</title><rect x="287.0" y="277" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="290.03" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (10 samples, 0.02%; +0.01%)</title><rect x="850.1" y="277" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="853.05" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (23 samples, 0.05%; +0.04%)</title><rect x="580.9" y="341" width="0.6" height="15.0" fill="rgb(255,151,151)" rx="2" ry="2" />
<text  x="583.91" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (5 samples, 0.01%; 0.00%)</title><rect x="1119.0" y="405" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.98" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (7 samples, 0.01%; +0.01%)</title><rect x="402.2" y="245" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="405.23" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (25 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.42" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (18 samples, 0.04%; -0.00%)</title><rect x="663.1" y="421" width="0.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="666.11" y="431.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (40 samples, 0.08%; -0.01%)</title><rect x="756.7" y="309" width="1.0" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="759.72" y="319.5" ></text>
</g>
<g >
<title>auth::get_permissions (1,243 samples, 2.63%; 0.00%)</title><rect x="800.6" y="309" width="31.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.64" y="319.5" >au..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.01%; 0.00%)</title><rect x="992.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.03" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (54 samples, 0.11%; -0.01%)</title><rect x="753.4" y="389" width="1.3" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="756.38" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (59 samples, 0.12%; -0.02%)</title><rect x="550.2" y="357" width="1.5" height="15.0" fill="rgb(186,186,255)" rx="2" ry="2" />
<text  x="553.21" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.01%; +0.01%)</title><rect x="459.2" y="261" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="462.15" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (23 samples, 0.05%; 0.00%)</title><rect x="1066.2" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1069.20" y="287.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (77 samples, 0.16%; -0.00%)</title><rect x="422.4" y="293" width="1.9" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="425.39" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (25 samples, 0.05%; -0.00%)</title><rect x="233.8" y="229" width="0.6" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="236.75" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (19 samples, 0.04%; +0.02%)</title><rect x="616.9" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="619.92" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (6 samples, 0.01%; -0.04%)</title><rect x="71.9" y="405" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="74.94" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (211 samples, 0.45%; -0.09%)</title><rect x="209.2" y="133" width="5.2" height="15.0" fill="rgb(81,81,255)" rx="2" ry="2" />
<text  x="212.17" y="143.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.01%; +0.00%)</title><rect x="870.1" y="389" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="873.07" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (11 samples, 0.02%; -0.06%)</title><rect x="557.2" y="389" width="0.3" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="560.23" y="399.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (37 samples, 0.08%; +0.00%)</title><rect x="936.1" y="357" width="1.0" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="939.13" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (54 samples, 0.11%; +0.02%)</title><rect x="512.8" y="213" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="515.81" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (16 samples, 0.03%; -0.00%)</title><rect x="710.7" y="469" width="0.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="713.68" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (40 samples, 0.08%; +0.02%)</title><rect x="879.8" y="421" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="882.78" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.03%; +0.00%)</title><rect x="697.0" y="453" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="699.98" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (32 samples, 0.07%; +0.01%)</title><rect x="649.2" y="469" width="0.8" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="652.16" y="479.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (55 samples, 0.12%; -0.01%)</title><rect x="609.1" y="405" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="612.13" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (14 samples, 0.03%; +0.01%)</title><rect x="529.9" y="325" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="532.92" y="335.5" ></text>
</g>
<g >
<title>table::query (30 samples, 0.06%; +0.00%)</title><rect x="1175.6" y="501" width="0.7" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="1178.58" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.01%; +0.01%)</title><rect x="662.6" y="453" width="0.1" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="665.56" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (16 samples, 0.03%; +0.01%)</title><rect x="39.2" y="437" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="42.20" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (16 samples, 0.03%; +0.00%)</title><rect x="1038.4" y="213" width="0.4" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1041.37" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (9 samples, 0.02%; +0.02%)</title><rect x="1016.4" y="277" width="0.2" height="15.0" fill="rgb(255,186,186)" rx="2" ry="2" />
<text  x="1019.38" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (5 samples, 0.01%; -0.00%)</title><rect x="602.5" y="373" width="0.1" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="605.47" y="383.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%; +0.00%)</title><rect x="557.6" y="405" width="0.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="560.60" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (24 samples, 0.05%; 0.00%)</title><rect x="1139.4" y="229" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.44" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23,563 samples, 49.83%; +0.03%)</title><rect x="49.9" y="485" width="588.1" height="15.0" fill="rgb(255,163,163)" rx="2" ry="2" />
<text  x="52.93" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (6 samples, 0.01%; +0.00%)</title><rect x="989.2" y="341" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="992.16" y="351.5" ></text>
</g>
<g >
<title>operator delete (49 samples, 0.10%; +0.03%)</title><rect x="573.4" y="277" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="576.40" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.02%; +0.00%)</title><rect x="812.8" y="213" width="0.2" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="815.77" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (38 samples, 0.08%; +0.02%)</title><rect x="251.8" y="165" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="254.79" y="175.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (20 samples, 0.04%; +0.01%)</title><rect x="846.3" y="293" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="849.29" y="303.5" ></text>
</g>
<g >
<title>query::result::builder::build (58 samples, 0.12%; -0.06%)</title><rect x="603.7" y="437" width="1.4" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="606.67" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (296 samples, 0.63%; -0.00%)</title><rect x="870.9" y="453" width="7.4" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="873.94" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (8 samples, 0.02%; -0.00%)</title><rect x="633.5" y="389" width="0.2" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="636.52" y="399.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.04%; +0.00%)</title><rect x="983.9" y="357" width="0.5" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="986.92" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.01%; +0.01%)</title><rect x="913.8" y="309" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="916.77" y="319.5" ></text>
</g>
<g >
<title>operator new (91 samples, 0.19%; -0.00%)</title><rect x="993.6" y="325" width="2.3" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="996.65" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (159 samples, 0.34%; -0.01%)</title><rect x="909.7" y="309" width="4.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="912.70" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (181 samples, 0.38%; +0.01%)</title><rect x="742.5" y="357" width="4.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="745.55" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (45 samples, 0.10%; +0.00%)</title><rect x="1021.5" y="229" width="1.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1024.52" y="239.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.02%; +0.01%)</title><rect x="551.3" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="554.34" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (6 samples, 0.01%; -0.02%)</title><rect x="675.3" y="469" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="678.34" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (7 samples, 0.01%; +0.00%)</title><rect x="1130.3" y="389" width="0.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="1133.26" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (250 samples, 0.53%; +0.01%)</title><rect x="624.4" y="437" width="6.3" height="15.0" fill="rgb(255,198,198)" rx="2" ry="2" />
<text  x="627.43" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (29 samples, 0.06%; -0.02%)</title><rect x="785.3" y="341" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="788.32" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (9 samples, 0.02%; +0.01%)</title><rect x="641.8" y="453" width="0.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="644.80" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (5 samples, 0.01%; +0.01%)</title><rect x="1136.4" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1139.45" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (77 samples, 0.16%; +0.08%)</title><rect x="72.9" y="373" width="1.9" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="75.91" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (125 samples, 0.26%; 0.00%)</title><rect x="717.3" y="437" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.34" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (5 samples, 0.01%; 0.00%)</title><rect x="997.6" y="277" width="0.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.59" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (19 samples, 0.04%; -0.00%)</title><rect x="699.2" y="325" width="0.5" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="702.20" y="335.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (38 samples, 0.08%; -0.00%)</title><rect x="690.2" y="453" width="1.0" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="693.24" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (26 samples, 0.05%; +0.03%)</title><rect x="1064.9" y="261" width="0.7" height="15.0" fill="rgb(255,166,166)" rx="2" ry="2" />
<text  x="1067.95" y="271.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (172 samples, 0.36%; -0.00%)</title><rect x="866.4" y="421" width="4.2" height="15.0" fill="rgb(207,207,255)" rx="2" ry="2" />
<text  x="869.35" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (81 samples, 0.17%; +0.00%)</title><rect x="832.5" y="325" width="2.1" height="15.0" fill="rgb(255,204,204)" rx="2" ry="2" />
<text  x="835.54" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (783 samples, 1.66%; -0.01%)</title><rect x="503.3" y="293" width="19.5" height="15.0" fill="rgb(198,198,255)" rx="2" ry="2" />
<text  x="506.27" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (5 samples, 0.01%; +0.01%)</title><rect x="957.0" y="405" width="0.1" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="960.01" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (14 samples, 0.03%; +0.01%)</title><rect x="272.2" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="275.21" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (11 samples, 0.02%; +0.01%)</title><rect x="1077.0" y="293" width="0.2" height="15.0" fill="rgb(255,201,201)" rx="2" ry="2" />
<text  x="1079.95" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (29 samples, 0.06%; -0.01%)</title><rect x="819.7" y="133" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="822.66" y="143.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (12 samples, 0.03%; +0.00%)</title><rect x="850.0" y="293" width="0.3" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="853.01" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.01%; -0.01%)</title><rect x="933.7" y="341" width="0.1" height="15.0" fill="rgb(201,201,255)" rx="2" ry="2" />
<text  x="936.66" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (39 samples, 0.08%; +0.01%)</title><rect x="963.7" y="373" width="1.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="966.68" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.03%; 0.00%)</title><rect x="638.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.08" y="479.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (10 samples, 0.02%; 0.00%)</title><rect x="250.1" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="253.07" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (60 samples, 0.13%; +0.00%)</title><rect x="126.9" y="293" width="1.5" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="129.87" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5,028 samples, 10.63%; -0.00%)</title><rect x="299.6" y="373" width="125.5" height="15.0" fill="rgb(204,204,255)" rx="2" ry="2" />
<text  x="302.58" y="383.5" >flat_mutation_r..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (5 samples, 0.01%; +0.00%)</title><rect x="18.4" y="181" width="0.1" height="15.0" fill="rgb(255,207,207)" rx="2" ry="2" />
<text  x="21.39" y="191.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (220 samples, 0.47%; -0.05%)</title><rect x="1082.2" y="245" width="5.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1085.22" y="255.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (21 samples, 0.04%; -0.03%)</title><rect x="861.7" y="341" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="864.71" y="351.5" ></text>
</g>
</g>
</svg>
