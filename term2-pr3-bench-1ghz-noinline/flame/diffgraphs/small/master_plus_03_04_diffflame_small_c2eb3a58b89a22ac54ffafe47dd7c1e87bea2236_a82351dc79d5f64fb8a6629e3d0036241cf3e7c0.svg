<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="998.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="981" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="981" > </text>
<g id="frames">
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="799.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; +0.06%)</title><rect x="422.4" y="517" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="425.44" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="670.7" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.73" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="904.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="907.57" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="842.0" y="661" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="844.98" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.10%; +0.04%)</title><rect x="613.9" y="725" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="616.87" y="735.5" ></text>
</g>
<g >
<title>get_scheduling_groups (1 samples, 0.02%; 0.00%)</title><rect x="112.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.02" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="651.5" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.47" y="735.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="703.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (1 samples, 0.02%; +0.02%)</title><rect x="862.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.62" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1128.3" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.33" y="543.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="741" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="751.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="527.5" ></text>
</g>
<g >
<title>query::result::builder::build (9 samples, 0.17%; +0.02%)</title><rect x="599.7" y="725" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="602.66" y="735.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.12%; -0.04%)</title><rect x="997.9" y="565" width="1.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1000.88" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1013.9" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1016.93" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::stat_data&gt;, seastar::reactor::file_stat (1 samples, 0.02%; 0.00%)</title><rect x="676.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.00" y="799.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%; -0.02%)</title><rect x="1118.0" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1121.01" y="527.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%; +0.02%)</title><rect x="394.2" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="397.24" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (67 samples, 1.30%; 0.00%)</title><rect x="24.7" y="661" width="15.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.67" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%; -0.02%)</title><rect x="611.8" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="614.81" y="735.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%; +0.02%)</title><rect x="478.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="481.38" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; +0.02%)</title><rect x="653.3" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.30" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="302.5" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="305.54" y="623.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%; 0.00%)</title><rect x="110.9" y="757" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (3 samples, 0.06%; +0.06%)</title><rect x="699.6" y="757" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="702.61" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="258.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.75" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, utils::directories::verify_owner_and_mode (1 samples, 0.02%; 0.00%)</title><rect x="716.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.81" y="799.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; 0.00%)</title><rect x="1165.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.01" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.71" y="671.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="59.7" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.75" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (3 samples, 0.06%; 0.00%)</title><rect x="54.9" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.93" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="299.1" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="302.10" y="607.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.80" y="911.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%; -0.08%)</title><rect x="837.4" y="677" width="2.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="840.40" y="687.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="1189.5" y="917" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.54" y="927.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="831.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (1 samples, 0.02%; +0.02%)</title><rect x="39.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.80" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;data_value, data_value&gt;, std::allocator&lt;std::pair&lt;data_value, data_value&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="1032.5" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1035.50" y="575.5" ></text>
</g>
<g >
<title>libat_load_16_i1 (1 samples, 0.02%; +0.02%)</title><rect x="1179.2" y="917" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1182.22" y="927.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1115.5" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.49" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.06%)</title><rect x="763.6" y="613" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="766.58" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="803.2" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.24" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; 0.00%)</title><rect x="246.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.37" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="789.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="792.02" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; -0.06%)</title><rect x="281.9" y="501" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="284.90" y="511.5" ></text>
</g>
<g >
<title>row::external_memory_usage (30 samples, 0.58%; +0.10%)</title><rect x="247.7" y="437" width="6.9" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="250.74" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="1110.4" y="709" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1113.45" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="43.2" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.24" y="639.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="853.9" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.91" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%; -0.02%)</title><rect x="1059.6" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1062.55" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="973.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.58" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="575.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (44 samples, 0.85%; -0.04%)</title><rect x="496.0" y="581" width="10.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="499.03" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; +0.02%)</title><rect x="281.2" y="485" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="284.21" y="495.5" ></text>
</g>
<g >
<title>schema_builder::with_column (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="623.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (4 samples, 0.08%; 0.00%)</title><rect x="861.9" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="51.0" y="565" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.04" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="511.4" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.39" y="607.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (7 samples, 0.14%; 0.00%)</title><rect x="828.2" y="709" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.23" y="719.5" ></text>
</g>
<g >
<title>database::shard_of (4 samples, 0.08%; 0.00%)</title><rect x="1122.8" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.83" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="629.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.00" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; 0.00%)</title><rect x="650.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.78" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.28" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="804.8" y="517" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="807.84" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; -0.02%)</title><rect x="713.4" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="716.37" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="922.0" y="677" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="925.00" y="687.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; +0.02%)</title><rect x="990.5" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="993.54" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (114 samples, 2.21%; -0.04%)</title><rect x="1001.3" y="565" width="26.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1004.32" y="575.5" >s..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (14 samples, 0.27%; -0.02%)</title><rect x="149.8" y="709" width="3.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="152.85" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="763.1" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="766.12" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (8 samples, 0.16%; 0.00%)</title><rect x="79.2" y="773" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.24" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="620.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.06" y="719.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%; +0.02%)</title><rect x="604.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="607.70" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="878.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="881.67" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="57.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.23" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1124.4" y="533" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="690.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.90" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.27" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="463.5" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="466.48" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="833.0" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="836.04" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (7 samples, 0.14%; -0.02%)</title><rect x="903.0" y="629" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="905.97" y="639.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="639.5" ></text>
</g>
<g >
<title>std::map&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="1142.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1145.77" y="751.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.1" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.06" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (17 samples, 0.33%; 0.00%)</title><rect x="759.9" y="693" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.91" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="129.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.99" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="644.4" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="647.36" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (2 samples, 0.04%; +0.04%)</title><rect x="436.9" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="439.88" y="575.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="112.2" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.25" y="799.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="575.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (3 samples, 0.06%; 0.00%)</title><rect x="72.8" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (8 samples, 0.16%; +0.02%)</title><rect x="740.9" y="661" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.88" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; -0.10%)</title><rect x="131.3" y="741" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="134.28" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="596.4" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="599.45" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.21%; 0.00%)</title><rect x="1039.6" y="597" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.61" y="607.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (10 samples, 0.19%; +0.06%)</title><rect x="484.8" y="581" width="2.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="487.80" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="816.5" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="819.54" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="478.8" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="481.84" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (3 samples, 0.06%; +0.06%)</title><rect x="905.3" y="661" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="908.26" y="671.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.10%)</title><rect x="95.1" y="757" width="0.6" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="98.06" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="897.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="900.69" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="788.8" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="791.80" y="527.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.0" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.02" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (590 samples, 11.46%; +0.02%)</title><rect x="167.5" y="629" width="135.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="170.50" y="639.5" >mutation_fragment..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="803.9" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.93" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="319.0" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="322.04" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="74.4" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.42" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="531.3" y="581" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="534.34" y="591.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (11 samples, 0.21%; 0.00%)</title><rect x="69.6" y="709" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.61" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="762.4" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.43" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; -0.04%)</title><rect x="999.3" y="549" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1002.26" y="559.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; 0.00%)</title><rect x="678.8" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.75" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; 0.00%)</title><rect x="545.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.32" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; -0.02%)</title><rect x="44.4" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="47.39" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="48.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.16%; 0.00%)</title><rect x="46.0" y="613" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.99" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="897.9" y="597" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="900.92" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (3 samples, 0.06%; -0.12%)</title><rect x="323.9" y="661" width="0.6" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="326.86" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (1 samples, 0.02%; +0.02%)</title><rect x="1128.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.10" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="744.5" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="747.55" y="655.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (27 samples, 0.52%; -0.04%)</title><rect x="499.0" y="549" width="6.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="502.01" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; +0.04%)</title><rect x="108.4" y="773" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="111.35" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="778.0" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.02" y="607.5" ></text>
</g>
<g >
<title>__tls_init (4 samples, 0.08%; +0.08%)</title><rect x="519.2" y="517" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="522.19" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="430.7" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="433.69" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="73.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.28" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="60.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.21" y="623.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (23 samples, 0.45%; -0.04%)</title><rect x="489.4" y="565" width="5.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="492.38" y="575.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.14%; +0.02%)</title><rect x="823.4" y="645" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="826.41" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; +0.02%)</title><rect x="985.5" y="533" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="988.50" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="708.3" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="711.33" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="864.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.45" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="820.4" y="629" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.43" y="639.5" ></text>
</g>
<g >
<title>composite::serialize_value&lt;partition_key_view&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="85.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.88" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (90 samples, 1.75%; +0.16%)</title><rect x="906.6" y="693" width="20.7" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="909.63" y="703.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (8 samples, 0.16%; 0.00%)</title><rect x="79.2" y="757" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.24" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="887.6" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="890.61" y="607.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (11 samples, 0.21%; 0.00%)</title><rect x="1121.9" y="565" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.91" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="639.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (3 samples, 0.06%; 0.00%)</title><rect x="38.9" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.89" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="669.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="672.58" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="545.8" y="517" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="548.78" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (182 samples, 3.54%; +0.02%)</title><rect x="216.1" y="469" width="41.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="219.10" y="479.5" >mut..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (13 samples, 0.25%; +0.02%)</title><rect x="683.6" y="773" width="2.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="686.57" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (6 samples, 0.12%; +0.04%)</title><rect x="940.3" y="677" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="943.34" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.54" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%; -0.06%)</title><rect x="545.8" y="533" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="548.78" y="543.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (10 samples, 0.19%; +0.04%)</title><rect x="980.5" y="581" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="983.46" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="630.6" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="633.61" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="863.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="866.76" y="655.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="763.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.35" y="639.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; 0.00%)</title><rect x="605.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.62" y="671.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%; 0.00%)</title><rect x="734.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.00" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="527.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%; +0.02%)</title><rect x="1140.3" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.25" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; -0.02%)</title><rect x="46.7" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="49.68" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%; +0.02%)</title><rect x="84.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.28" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="851.8" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="854.84" y="735.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.33%; 0.00%)</title><rect x="1092.3" y="645" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.34" y="655.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.06%)</title><rect x="596.0" y="693" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="598.99" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="93.5" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="96.45" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="1083.4" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1086.39" y="655.5" ></text>
</g>
<g >
<title>ser::mutation_view::table_id (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.22" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (8 samples, 0.16%; -0.02%)</title><rect x="336.2" y="533" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="339.24" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::update_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.02" y="639.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; 0.00%)</title><rect x="209.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.46" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (3 samples, 0.06%; -0.02%)</title><rect x="590.9" y="661" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="593.94" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; 0.00%)</title><rect x="267.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="270.92" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="433.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="435.98" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="442.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="445.84" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%; -0.06%)</title><rect x="517.8" y="549" width="2.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="520.81" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="204.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.95" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (25 samples, 0.49%; +0.02%)</title><rect x="95.7" y="757" width="5.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="98.74" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.06%)</title><rect x="643.4" y="773" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="646.44" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (3 samples, 0.06%; +0.06%)</title><rect x="455.0" y="629" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="457.99" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.02%)</title><rect x="652.6" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="655.62" y="719.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%; +0.02%)</title><rect x="631.5" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.52" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.14" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="538.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="541.67" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="495.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="639.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="655.6" y="741" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.60" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="986.6" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.65" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="516.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="519.89" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="719.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (4 samples, 0.08%; +0.04%)</title><rect x="1090.3" y="661" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1093.27" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.06%)</title><rect x="655.6" y="725" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="658.60" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="623.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="694.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.80" y="751.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (7 samples, 0.14%; 0.00%)</title><rect x="1122.4" y="501" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.37" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (63 samples, 1.22%; +0.02%)</title><rect x="701.2" y="789" width="14.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="704.22" y="799.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (5 samples, 0.10%; +0.02%)</title><rect x="567.8" y="613" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="570.79" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.88" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.02%)</title><rect x="1052.4" y="597" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1055.44" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (580 samples, 11.27%; -0.04%)</title><rect x="952.9" y="693" width="133.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="955.95" y="703.5" >service::storage..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%; +0.02%)</title><rect x="25.4" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.36" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%; +0.04%)</title><rect x="660.2" y="773" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="663.18" y="783.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%; 0.00%)</title><rect x="485.9" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="488.94" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="605.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.62" y="655.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; 0.00%)</title><rect x="1077.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.97" y="559.5" ></text>
</g>
<g >
<title>cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;(anonymous namespace)::remote_fill_buffer_result&gt; &gt;::invoke&lt;(anonymous namespace)::shard_reader::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="867.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.20" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="432.8" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="435.76" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.16%; 0.00%)</title><rect x="56.3" y="533" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (31 samples, 0.60%; +0.04%)</title><rect x="889.0" y="581" width="7.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="891.98" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%; +0.02%)</title><rect x="87.5" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.49" y="815.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; -0.02%)</title><rect x="507.3" y="613" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="510.26" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1099.7" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.67" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.83" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="783.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (12 samples, 0.23%; +0.02%)</title><rect x="847.3" y="693" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="850.26" y="703.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%; +0.04%)</title><rect x="748.0" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="750.99" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.12%; 0.00%)</title><rect x="1040.8" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1043.75" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (11 samples, 0.21%; +0.06%)</title><rect x="475.2" y="565" width="2.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="478.17" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1163.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.41" y="767.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="510.5" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.47" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="724.6" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="727.60" y="719.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%; +0.04%)</title><rect x="414.9" y="453" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="417.87" y="463.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (26 samples, 0.51%; -0.06%)</title><rect x="915.3" y="661" width="6.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="918.35" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="659.7" y="773" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="662.72" y="783.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%; 0.00%)</title><rect x="148.9" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="151.93" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; -0.02%)</title><rect x="824.8" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="827.79" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1033.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1035.96" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="114.5" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="117.54" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="151.2" y="661" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="154.22" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (2 samples, 0.04%; +0.02%)</title><rect x="981.8" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="984.83" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::optional&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt; &gt;::invoke&lt;cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="767.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (79 samples, 1.53%; +0.10%)</title><rect x="647.6" y="789" width="18.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="650.57" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1163.4" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.41" y="719.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%; +0.02%)</title><rect x="1157.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1160.22" y="783.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; +0.02%)</title><rect x="425.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="428.19" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="645" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (21 samples, 0.41%; -0.04%)</title><rect x="521.2" y="533" width="4.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="524.25" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="760.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="763.37" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="981.8" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="984.83" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.16%; -0.02%)</title><rect x="407.3" y="437" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="410.31" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; 0.00%)</title><rect x="1162.9" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.95" y="799.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; -0.04%)</title><rect x="588.9" y="629" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="591.88" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="847.5" ></text>
</g>
<g >
<title>database::query (101 samples, 1.96%; +0.12%)</title><rect x="1001.8" y="549" width="23.1" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="1004.78" y="559.5" >d..</text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1166.8" y="917" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.84" y="927.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="954.3" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="957.32" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (6 samples, 0.12%; 0.00%)</title><rect x="311.9" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="314.94" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="62.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.50" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="666.6" y="757" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="669.60" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="78.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.09" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="935.1" y="661" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="938.06" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5 samples, 0.10%; -0.06%)</title><rect x="300.5" y="613" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="303.47" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%; 0.00%)</title><rect x="688.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.61" y="799.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%; +0.04%)</title><rect x="342.2" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="345.20" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="96.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="99.20" y="751.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="716.3" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.35" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1113.9" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1116.89" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.79" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="41.2" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.18" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%; -0.06%)</title><rect x="526.8" y="517" width="0.6" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="529.75" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%; 0.00%)</title><rect x="52.6" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.64" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="46.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.99" y="591.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (22 samples, 0.43%; 0.00%)</title><rect x="11.6" y="901" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.60" y="911.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="861.9" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="864.93" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="975.2" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="978.18" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="644.1" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="647.13" y="783.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%; +0.02%)</title><rect x="753.9" y="693" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.95" y="703.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.02%)</title><rect x="657.2" y="725" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="660.20" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; +0.06%)</title><rect x="702.8" y="757" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="705.82" y="767.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.10%; 0.00%)</title><rect x="947.9" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.90" y="687.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="757" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="767.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (3 samples, 0.06%; -0.02%)</title><rect x="696.6" y="741" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="699.63" y="751.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="112.2" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.25" y="783.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (13 samples, 0.25%; -0.04%)</title><rect x="985.0" y="581" width="3.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="988.04" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="854.4" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.36" y="703.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::priority_class_data, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::lw_shared_ptr&lt;seastar::priority_class&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.04%)</title><rect x="202.8" y="469" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="205.81" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="787.9" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="790.88" y="559.5" ></text>
</g>
<g >
<title>__tls_init (6 samples, 0.12%; +0.12%)</title><rect x="191.1" y="533" width="1.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="194.12" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="655.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="900.7" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="903.67" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (5 samples, 0.10%; 0.00%)</title><rect x="897.9" y="613" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="900.92" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1020.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.81" y="511.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="623.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; +0.02%)</title><rect x="850.2" y="725" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.24" y="735.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="792.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.69" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="591.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%; 0.00%)</title><rect x="417.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.39" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="523.8" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="526.77" y="479.5" ></text>
</g>
<g >
<title>posix_memalign (2 samples, 0.04%; -0.02%)</title><rect x="242.2" y="373" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="245.24" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; 0.00%)</title><rect x="503.1" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="506.14" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (5 samples, 0.10%; +0.04%)</title><rect x="743.6" y="661" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="746.63" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.08%; +0.02%)</title><rect x="295.4" y="565" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="298.43" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="647.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="650.34" y="735.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; +0.02%)</title><rect x="726.9" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="729.90" y="751.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="445.6" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.59" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; +0.02%)</title><rect x="864.0" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="866.99" y="655.5" ></text>
</g>
<g >
<title>utils::utf8::internal::validate_partial (1 samples, 0.02%; +0.02%)</title><rect x="111.6" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.56" y="511.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; 0.00%)</title><rect x="1019.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.97" y="495.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%; -0.02%)</title><rect x="395.6" y="453" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="398.61" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%; +0.02%)</title><rect x="77.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.40" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="979.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="982.08" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.08%)</title><rect x="668.7" y="757" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="671.66" y="767.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.12%; -0.02%)</title><rect x="413.5" y="453" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="416.50" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (7 samples, 0.14%; 0.00%)</title><rect x="73.5" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.50" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%; -0.04%)</title><rect x="275.7" y="469" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="278.71" y="479.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; -0.02%)</title><rect x="81.8" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="84.76" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1032.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.27" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; +0.02%)</title><rect x="57.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.46" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="502.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="505.91" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="976.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.56" y="639.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; -0.04%)</title><rect x="57.0" y="389" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="60.00" y="399.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%; 0.00%)</title><rect x="867.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.89" y="591.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="508.6" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="511.64" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (12 samples, 0.23%; +0.19%)</title><rect x="1104.5" y="677" width="2.7" height="15.0" fill="rgb(255,78,78)" rx="2" ry="2" />
<text  x="1107.49" y="687.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (3 samples, 0.06%; +0.02%)</title><rect x="96.7" y="725" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="99.66" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (2 samples, 0.04%; 0.00%)</title><rect x="109.0" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="767.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%; +0.04%)</title><rect x="968.5" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="971.54" y="639.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="1030.4" y="533" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.44" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="102.6" y="757" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="105.62" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="901.1" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.13" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.04%)</title><rect x="950.9" y="661" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="953.88" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="306.9" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="309.89" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="761.7" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="764.74" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="866.7" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.74" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="863.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="866.30" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1060.2" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1063.24" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (34 samples, 0.66%; 0.00%)</title><rect x="861.5" y="773" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.47" y="783.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%; -0.02%)</title><rect x="979.3" y="613" width="3.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="982.31" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (5 samples, 0.10%; 0.00%)</title><rect x="73.5" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.50" y="655.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (2 samples, 0.04%; 0.00%)</title><rect x="1117.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.55" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="671.6" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.64" y="767.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%; +0.02%)</title><rect x="120.3" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="123.27" y="751.5" ></text>
</g>
<g >
<title>utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (17 samples, 0.33%; +0.06%)</title><rect x="640.5" y="789" width="3.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="643.46" y="799.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.09" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (3 samples, 0.06%; 0.00%)</title><rect x="259.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.98" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (18 samples, 0.35%; -0.02%)</title><rect x="277.1" y="485" width="4.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="280.09" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="85.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.20" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="46.9" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.91" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (4 samples, 0.08%; 0.00%)</title><rect x="1128.8" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.79" y="591.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (203 samples, 3.94%; 0.00%)</title><rect x="22.8" y="725" width="46.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="735.5" >cql3..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.06%)</title><rect x="426.1" y="517" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="429.11" y="527.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (8 samples, 0.16%; +0.02%)</title><rect x="823.2" y="661" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="826.18" y="671.5" ></text>
</g>
<g >
<title>seastar::smp::poll_queues (1 samples, 0.02%; +0.02%)</title><rect x="1166.4" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.39" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (222 samples, 4.31%; -0.04%)</title><rect x="210.8" y="517" width="50.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="213.83" y="527.5" >parti..</text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.10%; +0.06%)</title><rect x="1016.5" y="421" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1019.45" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.5" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.46" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.12%; +0.10%)</title><rect x="587.5" y="629" width="1.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="590.51" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::attach_service_level_statement*, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="66.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.40" y="607.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; 0.00%)</title><rect x="650.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.55" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="134.9" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="137.95" y="751.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="805.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.30" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (15 samples, 0.29%; -0.06%)</title><rect x="1054.3" y="597" width="3.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1057.28" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="748.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="751.67" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="435.7" y="533" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="438.74" y="543.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (265 samples, 5.15%; -0.02%)</title><rect x="764.3" y="693" width="60.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="767.26" y="703.5" >servic..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="615.0" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="618.02" y="735.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="815.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (172 samples, 3.34%; 0.00%)</title><rect x="771.8" y="645" width="39.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.83" y="655.5" >ser..</text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="212.4" y="485" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="215.44" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (15 samples, 0.29%; 0.00%)</title><rect x="799.6" y="453" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.57" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="322.9" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.94" y="687.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; +0.02%)</title><rect x="92.8" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="95.76" y="783.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%; 0.00%)</title><rect x="280.8" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="283.76" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (19 samples, 0.37%; -0.08%)</title><rect x="1043.5" y="597" width="4.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1046.50" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (534 samples, 10.37%; -0.04%)</title><rect x="322.7" y="693" width="122.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="325.71" y="703.5" >seastar::future..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; -0.02%)</title><rect x="107.0" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="109.98" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="689.5" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.53" y="799.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="689.1" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.07" y="783.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%; +0.02%)</title><rect x="682.6" y="741" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.65" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.08%)</title><rect x="316.1" y="549" width="1.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="319.06" y="559.5" ></text>
</g>
<g >
<title>db::cql_type_parser::parse (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="671.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%; +0.02%)</title><rect x="109.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.50" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (6 samples, 0.12%; 0.00%)</title><rect x="793.6" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.61" y="511.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="735.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%; 0.00%)</title><rect x="23.5" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.53" y="703.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (10 samples, 0.19%; -0.04%)</title><rect x="523.5" y="517" width="2.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="526.54" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (41 samples, 0.80%; +0.06%)</title><rect x="1050.2" y="629" width="9.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1053.15" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%; 0.00%)</title><rect x="62.7" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.73" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="571.5" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="574.46" y="575.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="895.6" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="898.63" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="546.9" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="549.93" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (49 samples, 0.95%; 0.00%)</title><rect x="581.1" y="677" width="11.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="584.09" y="687.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (7 samples, 0.14%; -0.02%)</title><rect x="36.1" y="533" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="39.14" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.03%; -0.02%)</title><rect x="308.3" y="645" width="12.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="311.27" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="95.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="98.51" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="102.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="105.39" y="751.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (67 samples, 1.30%; 0.00%)</title><rect x="24.7" y="645" width="15.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.67" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (3 samples, 0.06%; 0.00%)</title><rect x="866.7" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.74" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (11 samples, 0.21%; +0.04%)</title><rect x="698.7" y="773" width="2.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="701.70" y="783.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="836.9" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="839.94" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; +0.02%)</title><rect x="271.1" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="274.13" y="543.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1118.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.24" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (15 samples, 0.29%; +0.06%)</title><rect x="427.7" y="485" width="3.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="430.71" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%; 0.00%)</title><rect x="865.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.14" y="671.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (3 samples, 0.06%; -0.06%)</title><rect x="79.9" y="709" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="82.92" y="719.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="892.7" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="895.65" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; 0.00%)</title><rect x="571.5" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.46" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="282.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="285.82" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="789.9" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="792.94" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="568.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.71" y="591.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (3 samples, 0.06%; 0.00%)</title><rect x="1117.3" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.32" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; -0.02%)</title><rect x="40.3" y="613" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="43.26" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; +0.02%)</title><rect x="1014.4" y="437" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1017.39" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="309.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="311.95" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (6 samples, 0.12%; 0.00%)</title><rect x="179.9" y="549" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="182.88" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume (4 samples, 0.08%; +0.08%)</title><rect x="423.4" y="517" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="426.36" y="527.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (2 samples, 0.04%; 0.00%)</title><rect x="86.1" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.11" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1100.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1103.82" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="746.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="749.84" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="543.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.26" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%; +0.02%)</title><rect x="22.2" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.15" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.10%; +0.04%)</title><rect x="264.7" y="453" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="267.71" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="620.5" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="623.52" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%; 0.00%)</title><rect x="17.8" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.79" y="847.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::on_released (1 samples, 0.02%; 0.00%)</title><rect x="716.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.35" y="751.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1048.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.09" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (2 samples, 0.04%; 0.00%)</title><rect x="867.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.66" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="762.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.66" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="25.4" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (3 samples, 0.06%; 0.00%)</title><rect x="260.6" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.58" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="189.7" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="192.74" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="49.2" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.20" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="26.5" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.51" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="326.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.61" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.11" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="781.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="784.00" y="623.5" ></text>
</g>
<g >
<title>database::has_keyspace (13 samples, 0.25%; 0.00%)</title><rect x="836.9" y="709" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.94" y="719.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="443.8" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="446.76" y="671.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,784 samples, 34.66%; -0.02%)</title><rect x="154.9" y="725" width="409.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="157.89" y="735.5" >query::querier&lt;</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%; +0.02%)</title><rect x="1147.6" y="693" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1150.59" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (3 samples, 0.06%; +0.04%)</title><rect x="469.9" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="472.90" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="932.8" y="693" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="935.77" y="703.5" ></text>
</g>
<g >
<title>auth::get_permissions (123 samples, 2.39%; -0.08%)</title><rect x="781.9" y="597" width="28.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="784.92" y="607.5" >a..</text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="527.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%; 0.00%)</title><rect x="1163.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.41" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="776.4" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="779.42" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.3" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.26" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.08%; -0.02%)</title><rect x="329.8" y="581" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="332.82" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="344.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="347.95" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; +0.02%)</title><rect x="104.0" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="107.00" y="799.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1049.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.92" y="639.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.22" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; 0.00%)</title><rect x="530.4" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="533.42" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%; -0.10%)</title><rect x="358.7" y="469" width="1.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="361.70" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (4 samples, 0.08%; 0.00%)</title><rect x="84.1" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.05" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.08%)</title><rect x="723.5" y="693" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="726.46" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="867.4" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.43" y="607.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="53" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="63.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (6 samples, 0.12%; -0.04%)</title><rect x="626.3" y="725" width="1.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="629.25" y="735.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%; -0.02%)</title><rect x="888.5" y="581" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="891.52" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="1143.7" y="725" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1146.69" y="735.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (4 samples, 0.08%; 0.00%)</title><rect x="79.9" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.92" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="93.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="96.45" y="767.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (10 samples, 0.19%; +0.04%)</title><rect x="533.2" y="581" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="536.17" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (8 samples, 0.16%; 0.00%)</title><rect x="1108.6" y="709" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.61" y="719.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.02%)</title><rect x="687.9" y="773" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="690.92" y="783.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; +0.02%)</title><rect x="931.6" y="661" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="934.62" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.63" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (8 samples, 0.16%; 0.00%)</title><rect x="680.6" y="757" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.58" y="767.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (25 samples, 0.49%; 0.00%)</title><rect x="427.0" y="517" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.02" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (259 samples, 5.03%; 0.00%)</title><rect x="21.7" y="789" width="59.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="799.5" >cql3::..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="805" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; 0.00%)</title><rect x="808.5" y="581" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.51" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (12 samples, 0.23%; +0.04%)</title><rect x="1145.8" y="741" width="2.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1148.75" y="751.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%; +0.02%)</title><rect x="83.1" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.13" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (16 samples, 0.31%; -0.04%)</title><rect x="846.6" y="725" width="3.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="849.57" y="735.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="59.7" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.75" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="536.2" y="597" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="539.15" y="607.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (2 samples, 0.04%; -0.02%)</title><rect x="741.8" y="597" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="744.80" y="607.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a82351dc79d5f64fb8a6629e3d0036241cf3e7c0] (1 samples, 0.02%; +0.02%)</title><rect x="500.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="503.39" y="511.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%; +0.02%)</title><rect x="85.4" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.43" y="735.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="719.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="511.5" ></text>
</g>
<g >
<title>cql3::constants::value::~value (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="116.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.38" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%; +0.02%)</title><rect x="74.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.19" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="1086.8" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1089.83" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%; 0.00%)</title><rect x="282.4" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="285.36" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; -0.02%)</title><rect x="86.6" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="89.57" y="687.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="712.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="714.99" y="735.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; +0.02%)</title><rect x="705.6" y="741" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="708.57" y="751.5" ></text>
</g>
<g >
<title>table::query (2,166 samples, 42.08%; -0.02%)</title><rect x="135.2" y="741" width="496.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="138.18" y="751.5" >table::query</text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%; -0.02%)</title><rect x="760.4" y="661" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="763.37" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="858.0" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.03" y="799.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (1 samples, 0.02%; +0.02%)</title><rect x="982.7" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="985.75" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%; -0.02%)</title><rect x="948.4" y="645" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="951.36" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="312.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="315.39" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (1 samples, 0.02%; +0.02%)</title><rect x="432.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="435.30" y="511.5" ></text>
</g>
<g >
<title>validation::validate_column_family (31 samples, 0.60%; 0.00%)</title><rect x="817.9" y="677" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.91" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="357.1" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="360.10" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="444.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.91" y="687.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (1 samples, 0.02%; 0.00%)</title><rect x="896.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="899.32" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (109 samples, 2.12%; 0.00%)</title><rect x="40.3" y="661" width="25.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="671.5" >c..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="511.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="514.16" y="607.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; 0.00%)</title><rect x="739.0" y="677" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.05" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (41 samples, 0.80%; -0.02%)</title><rect x="69.4" y="757" width="9.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="72.38" y="767.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (6 samples, 0.12%; -0.06%)</title><rect x="1108.6" y="693" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1111.61" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (2 samples, 0.04%; 0.00%)</title><rect x="51.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.50" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%; 0.00%)</title><rect x="644.4" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.36" y="799.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="582.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="585.92" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="119.6" y="741" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="122.59" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="579.9" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="582.94" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="46.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.91" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="270.4" y="517" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="273.44" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; 0.00%)</title><rect x="578.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.79" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="1160.2" y="741" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1163.20" y="751.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; 0.00%)</title><rect x="115.9" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.92" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%; +0.06%)</title><rect x="153.1" y="709" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="156.06" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="692.5" y="757" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="695.51" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="857.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="860.57" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="904.1" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.11" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="98.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.27" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%; 0.00%)</title><rect x="258.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.29" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="958.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.99" y="671.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%; +0.02%)</title><rect x="494.9" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="497.88" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (42 samples, 0.82%; +0.04%)</title><rect x="836.5" y="725" width="9.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="839.48" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1129.2" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.25" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="49.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.89" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%; 0.00%)</title><rect x="46.7" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="57.0" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="463.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (3 samples, 0.06%; +0.04%)</title><rect x="419.5" y="517" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="422.46" y="527.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; 0.00%)</title><rect x="985.5" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.50" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="878.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="881.21" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (5 samples, 0.10%; 0.00%)</title><rect x="708.6" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.55" y="719.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="804.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="807.16" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="892.9" y="549" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="895.88" y="559.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%; +0.02%)</title><rect x="83.8" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.82" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%; 0.00%)</title><rect x="957.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.76" y="671.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="815.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.10%; 0.00%)</title><rect x="739.0" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.05" y="671.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (65 samples, 1.26%; 0.00%)</title><rect x="566.2" y="645" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.18" y="655.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="688.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="691.15" y="783.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="733.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.09" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="41.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.95" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.48" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="115.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.00" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="196.2" y="517" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="199.16" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (4 samples, 0.08%; +0.06%)</title><rect x="473.6" y="565" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="476.56" y="575.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="269.8" y="517" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.75" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.04%)</title><rect x="661.1" y="773" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="664.10" y="783.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (103 samples, 2.00%; -0.02%)</title><rect x="482.7" y="613" width="23.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="485.73" y="623.5" >d..</text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="456.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="459.37" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1048.3" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1051.32" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="431.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (2 samples, 0.04%; +0.02%)</title><rect x="319.5" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="322.50" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.06%)</title><rect x="1138.9" y="773" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1141.88" y="783.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="623.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1107.5" y="709" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1110.47" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="108.8" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="111.81" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="622.1" y="661" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="625.12" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="257.6" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="260.60" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%; 0.00%)</title><rect x="825.9" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.94" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (21 samples, 0.41%; -0.02%)</title><rect x="249.3" y="421" width="4.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="252.35" y="431.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.28" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="699.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.38" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; 0.00%)</title><rect x="180.6" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="183.57" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="318.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="321.13" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.12%; +0.06%)</title><rect x="669.8" y="773" width="1.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="672.81" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="647.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.34" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="527.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="705.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="708.80" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="659.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.49" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.79" y="639.5" ></text>
</g>
<g >
<title>_Unwind_Find_FDE (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.38" y="911.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="56.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="799.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; -0.02%)</title><rect x="806.4" y="533" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="809.45" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%; -0.02%)</title><rect x="424.3" y="517" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="427.27" y="527.5" ></text>
</g>
<g >
<title>query_state::query_state (21 samples, 0.41%; -0.08%)</title><rect x="601.9" y="725" width="4.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="604.95" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%; 0.00%)</title><rect x="265.4" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.40" y="447.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (57 samples, 1.11%; -0.04%)</title><rect x="271.1" y="549" width="13.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="274.13" y="559.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%; 0.00%)</title><rect x="109.7" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.73" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="780.5" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="783.54" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="504.3" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.28" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="586.1" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="589.13" y="639.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.04%)</title><rect x="544.9" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="547.86" y="591.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%; 0.00%)</title><rect x="1116.2" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.18" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_type_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.86" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="360.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="363.31" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.06%)</title><rect x="701.4" y="773" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="704.45" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; +0.02%)</title><rect x="47.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.37" y="527.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%; +0.02%)</title><rect x="1019.7" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1022.66" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="550.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="553.59" y="703.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1128.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.79" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.89" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1107.2" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.24" y="687.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="1110.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1112.99" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (8 samples, 0.16%; 0.00%)</title><rect x="974.3" y="613" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.27" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1148.0" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.05" y="687.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="110.9" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (5 samples, 0.10%; -0.02%)</title><rect x="728.0" y="709" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="731.04" y="719.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (2 samples, 0.04%; 0.00%)</title><rect x="77.4" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.40" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.16%; 0.00%)</title><rect x="663.8" y="741" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.85" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%; 0.00%)</title><rect x="1029.1" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1032.06" y="559.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%; +0.04%)</title><rect x="537.8" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="540.76" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="658.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.81" y="783.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="751.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="703.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%; -0.06%)</title><rect x="1079.3" y="597" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1082.27" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.04%)</title><rect x="851.6" y="693" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="854.61" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="580.4" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.40" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="715.7" y="757" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="718.66" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%; 0.00%)</title><rect x="793.6" y="485" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.61" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; -0.10%)</title><rect x="333.5" y="549" width="0.7" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="336.49" y="559.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (3 samples, 0.06%; +0.06%)</title><rect x="185.8" y="549" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="188.84" y="559.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator bool (1 samples, 0.02%; +0.02%)</title><rect x="60.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.98" y="623.5" ></text>
</g>
<g >
<title>__libc_start_main (4,710 samples, 91.51%; 0.00%)</title><rect x="87.0" y="917" width="1079.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="927.5" >__libc_start_main</text>
</g>
<g >
<title>std::optional&lt;cql3::expr::expression&gt;::optional (1 samples, 0.02%; +0.02%)</title><rect x="64.3" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.33" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="612.7" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.72" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="479.5" ></text>
</g>
<g >
<title>from_hex (8 samples, 0.16%; +0.14%)</title><rect x="69.6" y="629" width="1.8" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="72.61" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%; +0.06%)</title><rect x="577.0" y="565" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="579.96" y="575.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (1 samples, 0.02%; +0.02%)</title><rect x="1157.4" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1160.45" y="783.5" ></text>
</g>
<g >
<title>mutation_querier::consume (187 samples, 3.63%; -0.02%)</title><rect x="350.9" y="485" width="42.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="353.91" y="495.5" >muta..</text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (2 samples, 0.04%; 0.00%)</title><rect x="78.8" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.78" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="896.5" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="899.55" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="111.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.79" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (507 samples, 9.85%; -0.04%)</title><rect x="325.5" y="629" width="116.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="328.46" y="639.5" >seastar::futur..</text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%; +0.08%)</title><rect x="336.7" y="501" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="339.70" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="473.1" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="476.10" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (5 samples, 0.10%; 0.00%)</title><rect x="1128.6" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.56" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; 0.00%)</title><rect x="190.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="192.97" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; -0.02%)</title><rect x="466.5" y="533" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="469.46" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::select_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.7" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.69" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%; +0.02%)</title><rect x="153.7" y="725" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="156.75" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="716.1" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.12" y="783.5" ></text>
</g>
<g >
<title>query::querier_base::close (127 samples, 2.47%; -0.02%)</title><rect x="563.9" y="725" width="29.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="566.89" y="735.5" >qu..</text>
</g>
<g >
<title>query_mutations_on_all_shards (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (2 samples, 0.04%; 0.00%)</title><rect x="1000.9" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.86" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%; +0.08%)</title><rect x="30.2" y="549" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="33.17" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="709" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; +0.02%)</title><rect x="859.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.87" y="591.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (12 samples, 0.23%; 0.00%)</title><rect x="730.8" y="629" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="733.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="903.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.20" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="802.6" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="805.55" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; +0.02%)</title><rect x="801.9" y="373" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="804.86" y="383.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1115.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (8 samples, 0.16%; +0.06%)</title><rect x="712.5" y="725" width="1.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="715.45" y="735.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (22 samples, 0.43%; 0.00%)</title><rect x="1114.8" y="597" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.80" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="79.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.69" y="751.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="599.4" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="602.43" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; -0.06%)</title><rect x="1085.9" y="693" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1088.92" y="703.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="303.5" ></text>
</g>
<g >
<title>database::find_keyspace (26 samples, 0.51%; +0.02%)</title><rect x="1042.1" y="629" width="6.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.13" y="639.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; -0.02%)</title><rect x="212.2" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="215.21" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; -0.04%)</title><rect x="524.2" y="485" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="527.23" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; -0.02%)</title><rect x="436.4" y="565" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="439.42" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (52 samples, 1.01%; 0.00%)</title><rect x="48.1" y="613" width="11.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.06" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (2 samples, 0.04%; +0.04%)</title><rect x="1010.0" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1013.03" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="55.6" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.62" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="283.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="286.51" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="596.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.45" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="810.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.80" y="591.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (16 samples, 0.31%; -0.02%)</title><rect x="729.9" y="677" width="3.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="732.88" y="687.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set_row::get_as&lt;long&gt; (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="735.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.02%)</title><rect x="538.2" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="541.21" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1091.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1094.19" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.14%; +0.02%)</title><rect x="170.9" y="597" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="173.94" y="607.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%; 0.00%)</title><rect x="37.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.05" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (3 samples, 0.06%; +0.06%)</title><rect x="674.4" y="725" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="677.39" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.51" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="969.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="972.68" y="655.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; 0.00%)</title><rect x="716.3" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.35" y="735.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::attach_service_level_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="66.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.17" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="62.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.04" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="806.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="809.91" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%; 0.00%)</title><rect x="438.9" y="581" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.95" y="591.5" ></text>
</g>
<g >
<title>ser::mutation_view::table_id (1 samples, 0.02%; 0.00%)</title><rect x="1123.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.51" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; -0.02%)</title><rect x="866.1" y="533" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="869.06" y="543.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; 0.00%)</title><rect x="601.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.72" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="190.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="193.20" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="668.9" y="773" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="671.89" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="52.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.64" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%; -0.04%)</title><rect x="733.5" y="677" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="736.54" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; 0.00%)</title><rect x="1159.7" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.74" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; -0.04%)</title><rect x="977.2" y="597" width="1.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="980.25" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (19 samples, 0.37%; 0.00%)</title><rect x="284.2" y="549" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.19" y="559.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="885" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.15" y="895.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (1 samples, 0.02%; -0.04%)</title><rect x="885.1" y="629" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="888.08" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (7 samples, 0.14%; -0.14%)</title><rect x="632.2" y="773" width="1.6" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="635.21" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (2 samples, 0.04%; +0.04%)</title><rect x="96.9" y="709" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="99.89" y="719.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (226 samples, 4.39%; 0.00%)</title><rect x="983.2" y="629" width="51.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.21" y="639.5" >servi..</text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.64" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1026.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1029.77" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="703.5" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.51" y="767.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.02%)</title><rect x="1045.8" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.80" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="751.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="259.7" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="262.66" y="431.5" ></text>
</g>
<g >
<title>create_partitions (278 samples, 5.40%; 0.00%)</title><rect x="18.9" y="821" width="63.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="831.5" >create_..</text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (28 samples, 0.54%; +0.02%)</title><rect x="691.1" y="773" width="6.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="694.13" y="783.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (2 samples, 0.04%; 0.00%)</title><rect x="1123.3" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.29" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; -0.04%)</title><rect x="813.8" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="816.78" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (2 samples, 0.04%; -0.08%)</title><rect x="906.2" y="677" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="909.18" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (30 samples, 0.58%; +0.23%)</title><rect x="290.4" y="581" width="6.9" height="15.0" fill="rgb(255,52,52)" rx="2" ry="2" />
<text  x="293.38" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.00" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (6 samples, 0.12%; +0.04%)</title><rect x="275.3" y="485" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="278.25" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="59.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.52" y="575.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.08%; 0.00%)</title><rect x="1115.3" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; +0.02%)</title><rect x="871.1" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.10" y="767.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.28" y="591.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (11 samples, 0.21%; +0.12%)</title><rect x="14.1" y="869" width="2.5" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="17.13" y="879.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%; 0.00%)</title><rect x="111.3" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (39 samples, 0.76%; -0.02%)</title><rect x="95.1" y="773" width="8.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="98.06" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="1026.5" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1029.54" y="559.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (23 samples, 0.45%; +0.04%)</title><rect x="1013.0" y="469" width="5.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1016.01" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="56.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="511.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.2" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.22" y="575.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%; +0.02%)</title><rect x="555.0" y="645" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="557.95" y="655.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (255 samples, 4.95%; +0.08%)</title><rect x="479.3" y="629" width="58.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="482.29" y="639.5" >memtab..</text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="834.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="836.96" y="735.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (27 samples, 0.52%; 0.00%)</title><rect x="846.1" y="741" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.11" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%; +0.02%)</title><rect x="328.9" y="549" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="331.90" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (50 samples, 0.97%; +0.08%)</title><rect x="271.6" y="517" width="11.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="274.59" y="527.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%; +0.02%)</title><rect x="1121.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.45" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="159.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="478.8" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="481.84" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="785.8" y="517" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="788.82" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="715.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="718.89" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.89" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%; +0.02%)</title><rect x="115.7" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="118.69" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="812.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.41" y="639.5" ></text>
</g>
<g >
<title>abstract_type::deserialize_impl&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="591.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (469 samples, 9.11%; +0.02%)</title><rect x="330.7" y="581" width="107.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="333.73" y="591.5" >seastar::repe..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="461.6" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="464.64" y="575.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (2 samples, 0.04%; -0.02%)</title><rect x="85.0" y="741" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="87.97" y="751.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (695 samples, 13.50%; -0.10%)</title><rect x="162.7" y="661" width="159.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="165.69" y="671.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (5 samples, 0.10%; 0.00%)</title><rect x="53.8" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="160.6" y="661" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="163.62" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::has_supporting_index (1 samples, 0.02%; +0.02%)</title><rect x="72.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.36" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="345.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="348.87" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%; +0.02%)</title><rect x="685.2" y="725" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="688.17" y="735.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="190.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="192.97" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.35" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%; +0.04%)</title><rect x="437.6" y="549" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="440.57" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="439.9" y="549" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="442.86" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="1075.8" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1078.83" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (434 samples, 8.43%; -0.10%)</title><rect x="449.0" y="661" width="99.5" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="452.03" y="671.5" >std::_Functi..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; 0.00%)</title><rect x="987.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.11" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.43" y="431.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="517.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="520.35" y="543.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1166.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.16" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="107.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="110.21" y="783.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="543.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (76 samples, 1.48%; +0.06%)</title><rect x="222.3" y="405" width="17.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="225.29" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (1 samples, 0.02%; +0.02%)</title><rect x="77.6" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.63" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%; 0.00%)</title><rect x="753.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.49" y="703.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="799.5" ></text>
</g>
<g >
<title>perf_simple_que (5,146 samples, 99.98%; 0.00%)</title><rect x="10.0" y="933" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="943.5" >perf_simple_que</text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; +0.02%)</title><rect x="749.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="752.59" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%; +0.04%)</title><rect x="1084.3" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1087.31" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="899.5" y="565" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="902.53" y="575.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (3 samples, 0.06%; 0.00%)</title><rect x="72.8" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::collection_type (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="52.2" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.18" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (74 samples, 1.44%; 0.00%)</title><rect x="43.5" y="645" width="16.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.70" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (2 samples, 0.04%; +0.02%)</title><rect x="133.8" y="741" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="136.80" y="751.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.08%; 0.00%)</title><rect x="1115.3" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (197 samples, 3.83%; 0.00%)</title><rect x="23.8" y="709" width="45.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.76" y="719.5" >seas..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (3 samples, 0.06%; 0.00%)</title><rect x="468.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.29" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; -0.02%)</title><rect x="1116.4" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1119.41" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="268.1" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="271.15" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.06%)</title><rect x="534.1" y="549" width="1.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="537.09" y="559.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::operation::raw_update*, false&gt;::_Head_base&lt;cql3::operation::raw_update*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.5" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.50" y="351.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%; 0.00%)</title><rect x="867.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.89" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="879.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (38 samples, 0.74%; +0.02%)</title><rect x="69.4" y="725" width="8.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.38" y="735.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (5 samples, 0.10%; 0.00%)</title><rect x="73.5" y="629" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.50" y="639.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; 0.00%)</title><rect x="782.6" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.61" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (2 samples, 0.04%; 0.00%)</title><rect x="18.0" y="837" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.02" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="575.1" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.13" y="575.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%; 0.00%)</title><rect x="947.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.67" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="442.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="445.38" y="655.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.16%; +0.08%)</title><rect x="929.1" y="693" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="932.10" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (12 samples, 0.23%; 0.00%)</title><rect x="865.4" y="661" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.37" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="75.3" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.34" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.28" y="607.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (15 samples, 0.29%; 0.00%)</title><rect x="409.1" y="437" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.14" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; -0.04%)</title><rect x="720.9" y="773" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="723.93" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%; 0.00%)</title><rect x="861.9" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%; 0.00%)</title><rect x="581.1" y="661" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="584.09" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1129.0" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.02" y="575.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="848.6" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.63" y="655.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="1020.6" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.58" y="511.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="45.3" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="479.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (7 samples, 0.14%; 0.00%)</title><rect x="1122.4" y="533" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.37" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="591.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (2 samples, 0.04%; +0.02%)</title><rect x="337.6" y="501" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="340.61" y="511.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.12%; 0.00%)</title><rect x="10.0" y="901" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="911.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.16%; 0.00%)</title><rect x="966.7" y="613" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.70" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; -0.02%)</title><rect x="571.0" y="597" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="574.00" y="607.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (5 samples, 0.10%; 0.00%)</title><rect x="626.3" y="693" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.25" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (56 samples, 1.09%; +0.02%)</title><rect x="271.4" y="533" width="12.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="274.36" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.71" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (10 samples, 0.19%; -0.06%)</title><rect x="812.0" y="645" width="2.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="814.95" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1131.5" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.54" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.02%)</title><rect x="437.3" y="565" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="440.34" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="79.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.01" y="719.5" ></text>
</g>
<g >
<title>executor&lt;test_read (591 samples, 11.48%; -0.04%)</title><rect x="721.2" y="773" width="135.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="724.16" y="783.5" >executor&lt;test_read</text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="894.5" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.48" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="563.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.97" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="477.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="480.69" y="575.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%; 0.00%)</title><rect x="1120.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.08" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (2 samples, 0.04%; 0.00%)</title><rect x="665.7" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.68" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="694.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="697.34" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="1085.0" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.00" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="703.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="431.5" ></text>
</g>
<g >
<title>__vfprintf_internal (2 samples, 0.04%; -0.02%)</title><rect x="82.9" y="901" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="85.90" y="911.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%; +0.04%)</title><rect x="194.8" y="533" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="197.78" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="18.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.71" y="671.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (22 samples, 0.43%; -0.02%)</title><rect x="1053.8" y="613" width="5.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1056.82" y="623.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%; -0.02%)</title><rect x="585.4" y="645" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="588.44" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.12%; +0.02%)</title><rect x="98.5" y="709" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.49" y="719.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="786.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.73" y="527.5" ></text>
</g>
<g >
<title>abstract_type::deserialize&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; 0.00%)</title><rect x="423.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="426.13" y="527.5" ></text>
</g>
<g >
<title>hwloc_bitmap_isset (1 samples, 0.02%; +0.02%)</title><rect x="83.4" y="901" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.36" y="911.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%; 0.00%)</title><rect x="1158.1" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.13" y="767.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1113.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1116.20" y="735.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%; +0.02%)</title><rect x="1165.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.70" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="705.1" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="708.12" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.02" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="672.3" y="741" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="675.33" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (5 samples, 0.10%; 0.00%)</title><rect x="85.0" y="757" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (10 samples, 0.19%; +0.02%)</title><rect x="865.4" y="629" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.37" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.04%)</title><rect x="261.0" y="437" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="264.04" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="80.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.38" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (4 samples, 0.08%; 0.00%)</title><rect x="62.5" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.50" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (6 samples, 0.12%; 0.00%)</title><rect x="651.0" y="757" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.01" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (2 samples, 0.04%; +0.04%)</title><rect x="1137.5" y="773" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1140.50" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; +0.02%)</title><rect x="54.2" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.25" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (2 samples, 0.04%; +0.02%)</title><rect x="576.5" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.50" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="792.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.92" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (3 samples, 0.06%; +0.04%)</title><rect x="527.7" y="517" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="530.67" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (4 samples, 0.08%; +0.02%)</title><rect x="826.4" y="709" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="829.39" y="719.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (5 samples, 0.10%; -0.04%)</title><rect x="183.3" y="533" width="1.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="186.32" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; +0.02%)</title><rect x="57.9" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.92" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (24 samples, 0.47%; 0.00%)</title><rect x="499.7" y="517" width="5.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="502.70" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="827.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.31" y="719.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (7 samples, 0.14%; 0.00%)</title><rect x="1122.4" y="517" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.37" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (3 samples, 0.06%; -0.06%)</title><rect x="257.8" y="453" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="260.83" y="463.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::begin (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="1082.7" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1085.71" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1084.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1087.08" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (5 samples, 0.10%; +0.10%)</title><rect x="793.8" y="453" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="796.84" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; +0.02%)</title><rect x="169.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="172.56" y="623.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.89" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; -0.02%)</title><rect x="782.6" y="549" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="785.61" y="559.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (7 samples, 0.14%; -0.02%)</title><rect x="855.1" y="757" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="858.05" y="767.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="1131.1" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.08" y="783.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="652.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="655.16" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; -0.04%)</title><rect x="128.8" y="677" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="131.76" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (2 samples, 0.04%; -0.02%)</title><rect x="700.8" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="703.76" y="767.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; -0.06%)</title><rect x="820.7" y="613" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="823.66" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%; 0.00%)</title><rect x="55.6" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.62" y="575.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (52 samples, 1.01%; -0.02%)</title><rect x="176.0" y="581" width="11.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="178.98" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (8 samples, 0.16%; +0.02%)</title><rect x="465.8" y="549" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="468.77" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="725.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.06" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1097.1" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1100.15" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="783.5" ></text>
</g>
<g >
<title>free (9 samples, 0.17%; +0.02%)</title><rect x="428.9" y="469" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="431.86" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="866.7" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.74" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="845.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.88" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="1031.8" y="501" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1034.81" y="511.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (2 samples, 0.04%; -0.02%)</title><rect x="1059.8" y="613" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1062.78" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (8 samples, 0.16%; +0.02%)</title><rect x="848.2" y="677" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="851.17" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="635.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.96" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.35%; 0.00%)</title><rect x="1124.4" y="565" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="575.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (18 samples, 0.35%; +0.04%)</title><rect x="124.4" y="693" width="4.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="127.40" y="703.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (7 samples, 0.14%; +0.02%)</title><rect x="608.4" y="709" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="611.37" y="719.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="80.8" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.84" y="751.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="73.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.73" y="591.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="441.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.70" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (8 samples, 0.16%; +0.04%)</title><rect x="201.9" y="517" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="204.89" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_tail (1 samples, 0.02%; +0.02%)</title><rect x="51.7" y="341" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.73" y="351.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%; +0.02%)</title><rect x="462.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.79" y="559.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (3 samples, 0.06%; +0.04%)</title><rect x="610.0" y="725" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="612.97" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="680.1" y="773" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="683.13" y="783.5" ></text>
</g>
<g >
<title>min_max_tracker&lt;long&gt;::update (1 samples, 0.02%; +0.02%)</title><rect x="1116.4" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.41" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="935.5" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.52" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (547 samples, 10.63%; +0.02%)</title><rect x="958.4" y="661" width="125.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="961.45" y="671.5" >service::storag..</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (12 samples, 0.23%; +0.02%)</title><rect x="197.3" y="501" width="2.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="200.31" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="49.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.20" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (20 samples, 0.39%; 0.00%)</title><rect x="1158.1" y="773" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.13" y="783.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.16%; 0.00%)</title><rect x="56.3" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="559.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%; 0.00%)</title><rect x="59.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.52" y="591.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (15 samples, 0.29%; 0.00%)</title><rect x="979.3" y="597" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.31" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (4 samples, 0.08%; 0.00%)</title><rect x="109.5" y="789" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="799.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.17%; 0.00%)</title><rect x="863.1" y="677" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.08" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="347.9" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="350.93" y="479.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="527.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (35 samples, 0.68%; 0.00%)</title><rect x="246.6" y="453" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="249.60" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.3" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.33" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="561.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.37" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="74.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.96" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.02%; +0.02%)</title><rect x="37.7" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.74" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (4 samples, 0.08%; +0.04%)</title><rect x="1015.5" y="421" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1018.53" y="431.5" ></text>
</g>
<g >
<title>database::find_uuid (12 samples, 0.23%; -0.02%)</title><rect x="820.4" y="645" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="823.43" y="655.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="151.2" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="154.22" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%; -0.02%)</title><rect x="282.4" y="485" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="285.36" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; -0.02%)</title><rect x="1153.8" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1156.78" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.04%; -0.04%)</title><rect x="768.4" y="661" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="771.39" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="831.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.85%; 0.00%)</title><rect x="1179.5" y="917" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.45" y="927.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%; -0.02%)</title><rect x="259.0" y="405" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="261.98" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.12%; 0.00%)</title><rect x="50.6" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.58" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (4 samples, 0.08%; +0.02%)</title><rect x="41.6" y="613" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.64" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::void_message&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="82.7" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.68" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="780.5" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="783.54" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="663.4" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="666.39" y="767.5" ></text>
</g>
<g >
<title>db::commitlog::segment::batch_cycle (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="575.5" ></text>
</g>
<g >
<title>composite::serialize_value&lt;partition_key_view&amp;, signed char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="85.9" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.88" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="593.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="596.70" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%; 0.00%)</title><rect x="747.5" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.53" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.27" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (21 samples, 0.41%; -0.02%)</title><rect x="197.1" y="517" width="4.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="200.08" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (17 samples, 0.33%; -0.04%)</title><rect x="556.6" y="677" width="3.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="559.56" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (221 samples, 4.29%; 0.00%)</title><rect x="210.8" y="501" width="50.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.83" y="511.5" >logal..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.06%)</title><rect x="910.5" y="645" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="913.53" y="655.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (288 samples, 5.60%; +0.23%)</title><rect x="204.9" y="533" width="66.0" height="15.0" fill="rgb(255,52,52)" rx="2" ry="2" />
<text  x="207.87" y="543.5" >partiti..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1091.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1094.88" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (39 samples, 0.76%; +0.10%)</title><rect x="571.9" y="597" width="9.0" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="574.92" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="623.3" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="626.27" y="655.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="18.0" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.02" y="799.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (10 samples, 0.19%; +0.08%)</title><rect x="32.7" y="533" width="2.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="35.70" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.04%)</title><rect x="530.2" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="533.19" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%; +0.02%)</title><rect x="275.7" y="453" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="278.71" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%; +0.02%)</title><rect x="983.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="985.98" y="639.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (4 samples, 0.08%; 0.00%)</title><rect x="1119.8" y="565" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.85" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (3 samples, 0.06%; 0.00%)</title><rect x="652.4" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.39" y="751.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (2 samples, 0.04%; 0.00%)</title><rect x="866.1" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.06" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="524.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.69" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="131.7" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.74" y="751.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (1 samples, 0.02%; +0.02%)</title><rect x="896.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.09" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="914.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="917.20" y="623.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%; -0.02%)</title><rect x="18.7" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="21.71" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="267.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.69" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.22" y="591.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%; 0.00%)</title><rect x="866.7" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.74" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="52.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.87" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.23%; -0.02%)</title><rect x="722.5" y="741" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="725.54" y="751.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%; 0.00%)</title><rect x="252.1" y="389" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="255.10" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%; +0.02%)</title><rect x="952.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="955.72" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="744.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="747.32" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; -0.02%)</title><rect x="885.3" y="581" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="888.31" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="627.6" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="630.63" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="517.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="520.58" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="888.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="891.06" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.86" y="639.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1115.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%; 0.00%)</title><rect x="826.6" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.62" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1030.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1032.98" y="575.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="80.8" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.84" y="719.5" ></text>
</g>
<g >
<title>all (5,147 samples, 100%)</title><rect x="10.0" y="949" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,248 samples, 24.25%; -0.25%)</title><rect x="159.0" y="709" width="286.1" height="15.0" fill="rgb(39,39,255)" rx="2" ry="2" />
<text  x="162.02" y="719.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="495.5" ></text>
</g>
<g >
<title>partition_entry::read (12 samples, 0.23%; -0.06%)</title><rect x="532.7" y="597" width="2.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="535.71" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="442.6" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="445.61" y="655.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (20 samples, 0.39%; 0.00%)</title><rect x="313.3" y="597" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="316.31" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="860.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.55" y="783.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%; +0.02%)</title><rect x="359.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="362.85" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="660.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="663.87" y="783.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.10%; -0.06%)</title><rect x="793.8" y="469" width="1.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="796.84" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_limit (1 samples, 0.02%; 0.00%)</title><rect x="1087.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1090.29" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (26 samples, 0.51%; +0.02%)</title><rect x="977.0" y="629" width="6.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="980.02" y="639.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="719.5" ></text>
</g>
<g >
<title>database::~database (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="623.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="476.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="479.77" y="559.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (38 samples, 0.74%; -0.02%)</title><rect x="122.3" y="741" width="8.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="125.34" y="751.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.12%; +0.04%)</title><rect x="593.9" y="709" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="596.92" y="719.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="1165.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.47" y="751.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="687.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; -0.04%)</title><rect x="1056.6" y="581" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1059.57" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; +0.04%)</title><rect x="568.0" y="597" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="571.02" y="607.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1127.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.95" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="132.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="135.20" y="751.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="495.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; +0.02%)</title><rect x="1117.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.10" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="927.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.04" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="48.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="1042.6" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.59" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; -0.02%)</title><rect x="1086.1" y="693" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1089.15" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="63.0" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.96" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="713.6" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="716.60" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%; +0.02%)</title><rect x="87.9" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.95" y="815.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (199 samples, 3.87%; -0.02%)</title><rect x="768.8" y="677" width="45.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="771.85" y="687.5" >std:..</text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%; +0.02%)</title><rect x="80.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.15" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (11 samples, 0.21%; 0.00%)</title><rect x="69.6" y="677" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.61" y="687.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (3 samples, 0.06%; +0.04%)</title><rect x="396.5" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="399.53" y="511.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%; +0.04%)</title><rect x="71.4" y="661" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="74.44" y="671.5" ></text>
</g>
<g >
<title>make_combined_reader (2 samples, 0.04%; +0.04%)</title><rect x="449.9" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="452.95" y="655.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="469.4" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="472.44" y="575.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="111.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="804.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="807.39" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (203 samples, 3.94%; 0.00%)</title><rect x="22.8" y="757" width="46.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="767.5" >cql3..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, read_context::stop (2 samples, 0.04%; 0.00%)</title><rect x="109.5" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%; +0.02%)</title><rect x="807.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.82" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1019.9" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1022.89" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="691.6" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="694.59" y="751.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%; 0.00%)</title><rect x="542.1" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.11" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (2 samples, 0.04%; 0.00%)</title><rect x="27.4" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.42" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (10 samples, 0.19%; 0.00%)</title><rect x="778.2" y="597" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.25" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="767.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (1 samples, 0.02%; -0.02%)</title><rect x="710.8" y="725" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="713.85" y="735.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="712.2" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.22" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (7 samples, 0.14%; +0.04%)</title><rect x="1143.0" y="741" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1146.00" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="796.6" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="799.59" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%; 0.00%)</title><rect x="652.4" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.39" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="751.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%; -0.02%)</title><rect x="21.5" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="24.46" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (510 samples, 9.91%; 0.00%)</title><rect x="325.0" y="645" width="116.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.00" y="655.5" >flat_mutation_..</text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.10%)</title><rect x="1101.0" y="677" width="2.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1104.05" y="687.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a82351dc79d5f64fb8a6629e3d0036241cf3e7c0] (1 samples, 0.02%; +0.02%)</title><rect x="372.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="375.00" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (5 samples, 0.10%; +0.08%)</title><rect x="470.6" y="565" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="473.58" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (23 samples, 0.45%; -0.06%)</title><rect x="619.1" y="725" width="5.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="622.14" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (46 samples, 0.89%; -0.04%)</title><rect x="461.4" y="581" width="10.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="464.41" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="810.8" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="813.80" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="657.9" y="773" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="660.89" y="783.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="317.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="320.90" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="575.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.12%; 0.00%)</title><rect x="760.1" y="677" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.14" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="1125.3" y="405" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1128.35" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%; +0.06%)</title><rect x="130.1" y="709" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="133.13" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="661" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="715.7" y="789" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.66" y="799.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="801.9" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.86" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="672.8" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="675.79" y="735.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="47.1" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.14" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="975.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="978.87" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="463.7" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="466.71" y="559.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="810.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.12" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,278 samples, 44.26%; +0.06%)</title><rect x="112.7" y="789" width="522.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="115.71" y="799.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%; 0.00%)</title><rect x="27.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.65" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (38 samples, 0.74%; +0.02%)</title><rect x="888.3" y="613" width="8.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="891.29" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (3 samples, 0.06%; 0.00%)</title><rect x="26.5" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.51" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; 0.00%)</title><rect x="819.3" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.29" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="860.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.10" y="735.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.0" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.04" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (3 samples, 0.06%; 0.00%)</title><rect x="866.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.74" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (5 samples, 0.10%; +0.02%)</title><rect x="765.2" y="661" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="768.18" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="867.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.97" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="591.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (6 samples, 0.12%; 0.00%)</title><rect x="1119.8" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.85" y="591.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="50.3" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.35" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1059.3" y="613" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1062.32" y="623.5" ></text>
</g>
<g >
<title>from_hex (1 samples, 0.02%; +0.02%)</title><rect x="72.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.82" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="46.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.91" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="821.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.35" y="607.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="110.9" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="735.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (3 samples, 0.06%; 0.00%)</title><rect x="79.9" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.92" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,053 samples, 20.46%; -0.04%)</title><rect x="872.5" y="741" width="241.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="875.48" y="751.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="585.7" y="645" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="588.67" y="655.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;sstables::file_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.34" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%; +0.02%)</title><rect x="623.5" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.50" y="687.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (4 samples, 0.08%; 0.00%)</title><rect x="1076.3" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.29" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.06%)</title><rect x="1103.1" y="661" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1106.11" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (568 samples, 11.04%; -0.16%)</title><rect x="954.6" y="677" width="130.2" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="957.55" y="687.5" >service::storage..</text>
</g>
<g >
<title>main (4,710 samples, 91.51%; 0.00%)</title><rect x="87.0" y="901" width="1079.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="911.5" >main</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (3 samples, 0.06%; -0.02%)</title><rect x="75.3" y="677" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="78.34" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; -0.04%)</title><rect x="342.7" y="453" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="345.66" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.14%; +0.08%)</title><rect x="1154.2" y="773" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1157.24" y="783.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="773.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="776.89" y="639.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (5 samples, 0.10%; 0.00%)</title><rect x="765.2" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="768.18" y="687.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (440 samples, 8.55%; +0.04%)</title><rect x="447.7" y="693" width="100.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="450.66" y="703.5" >mutation_sou..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="634.5" y="741" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="637.50" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (12 samples, 0.23%; +0.02%)</title><rect x="655.1" y="757" width="2.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="658.14" y="767.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="815.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="327.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.30" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="116.6" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="119.61" y="767.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1034.3" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1037.33" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (2 samples, 0.04%; 0.00%)</title><rect x="19.4" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.40" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="18.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.48" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%; +0.02%)</title><rect x="1119.6" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.62" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="767.2" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.24" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="44.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.62" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (4 samples, 0.08%; 0.00%)</title><rect x="861.9" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.06%)</title><rect x="132.4" y="741" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="135.42" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1139.8" y="773" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1142.79" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="921.3" y="677" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="924.31" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="905.9" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="908.95" y="671.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="1125.6" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (2 samples, 0.04%; +0.04%)</title><rect x="970.1" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="973.14" y="655.5" ></text>
</g>
<g >
<title>seastar::schedule (2 samples, 0.04%; +0.04%)</title><rect x="1131.8" y="789" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1134.77" y="799.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="793.2" y="501" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="796.15" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="1047.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.86" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="417.6" y="501" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="420.62" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; 0.00%)</title><rect x="109.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.73" y="527.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.42" y="623.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1113.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1116.89" y="767.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (3 samples, 0.06%; 0.00%)</title><rect x="151.2" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="154.22" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (19 samples, 0.37%; +0.04%)</title><rect x="1158.4" y="757" width="4.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1161.36" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (2 samples, 0.04%; 0.00%)</title><rect x="72.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="639.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,179 samples, 22.91%; +0.02%)</title><rect x="861.0" y="789" width="270.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="864.01" y="799.5" >seastar::lambda_task&lt;seastar::execut..</text>
</g>
<g >
<title>service::abstract_read_executor::execute (19 samples, 0.37%; -0.02%)</title><rect x="693.0" y="757" width="4.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="695.96" y="767.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%; 0.00%)</title><rect x="948.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="951.36" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="707.4" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="710.41" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (4 samples, 0.08%; 0.00%)</title><rect x="624.6" y="725" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="627.65" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; -0.08%)</title><rect x="610.7" y="725" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="613.66" y="735.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="507.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="510.04" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="40.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; +0.02%)</title><rect x="126.2" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="129.23" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (71 samples, 1.38%; +0.08%)</title><rect x="564.8" y="661" width="16.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="567.81" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="814.2" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.24" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="61.1" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.12" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (5 samples, 0.10%; -0.02%)</title><rect x="62.3" y="597" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="65.27" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (2 samples, 0.04%; +0.02%)</title><rect x="547.4" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="550.38" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (5 samples, 0.10%; 0.00%)</title><rect x="1128.6" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.56" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (32 samples, 0.62%; 0.00%)</title><rect x="745.7" y="629" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.69" y="639.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; 0.00%)</title><rect x="813.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.10" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="76.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.49" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; -0.02%)</title><rect x="41.4" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.41" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (1 samples, 0.02%; -0.04%)</title><rect x="904.8" y="661" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="907.80" y="671.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (98 samples, 1.90%; -0.08%)</title><rect x="784.9" y="565" width="22.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="787.90" y="575.5" >a..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="282.8" y="453" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="285.82" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="665.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="668.68" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%; +0.02%)</title><rect x="730.1" y="613" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="733.10" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1032.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.27" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (349 samples, 6.78%; -0.08%)</title><rect x="338.8" y="517" width="80.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="341.76" y="527.5" >compact_m..</text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="17.8" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.79" y="831.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (203 samples, 3.94%; 0.00%)</title><rect x="22.8" y="741" width="46.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="751.5" >cql3..</text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (1 samples, 0.02%; +0.02%)</title><rect x="830.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.06" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="766.6" y="645" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.56" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::restrictions::restrictions&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::restrictions::restrictions&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="76.0" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.03" y="687.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (2 samples, 0.04%; +0.04%)</title><rect x="144.3" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="147.35" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (460 samples, 8.94%; +0.06%)</title><rect x="331.0" y="565" width="105.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="333.96" y="575.5" >flat_mutatio..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (5 samples, 0.10%; 0.00%)</title><rect x="1128.6" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.56" y="623.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%; 0.00%)</title><rect x="639.8" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.78" y="767.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.02%)</title><rect x="257.4" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="260.37" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.13" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (7 samples, 0.14%; +0.14%)</title><rect x="181.7" y="533" width="1.6" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="184.72" y="543.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="676.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="679.00" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="765.9" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="768.87" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mE (1 samples, 0.02%; +0.02%)</title><rect x="31.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="34.78" y="559.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="109.0" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.04" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; -0.04%)</title><rect x="836.3" y="709" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="839.25" y="719.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (3 samples, 0.06%; +0.04%)</title><rect x="941.7" y="693" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="944.71" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (19 samples, 0.37%; 0.00%)</title><rect x="1092.1" y="677" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.11" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.35" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="261.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="264.50" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="1021.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.04" y="511.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; -0.02%)</title><rect x="177.4" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="180.36" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.81" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="931.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.39" y="687.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; +0.02%)</title><rect x="332.1" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="335.11" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="867.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.20" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.91" y="623.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="866.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.29" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (86 samples, 1.67%; -0.17%)</title><rect x="511.8" y="597" width="19.8" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="514.85" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="847.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1115.5" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.49" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (7 samples, 0.14%; +0.08%)</title><rect x="828.2" y="693" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="831.23" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="806.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="809.68" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; 0.00%)</title><rect x="802.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.32" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="911.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.99" y="639.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (24 samples, 0.47%; +0.06%)</title><rect x="234.0" y="357" width="5.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="236.99" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.71" y="687.5" ></text>
</g>
<g >
<title>parse_raw (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (16 samples, 0.31%; 0.00%)</title><rect x="729.9" y="661" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="626.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="629.71" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="103.5" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.54" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%; +0.02%)</title><rect x="75.6" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.57" y="639.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%; +0.02%)</title><rect x="349.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="352.76" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (9 samples, 0.17%; -0.02%)</title><rect x="800.5" y="437" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="803.49" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%; +0.02%)</title><rect x="283.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="286.28" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; 0.00%)</title><rect x="859.4" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="767.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1019.4" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1022.43" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="27.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.88" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="573.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="576.06" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (33 samples, 0.64%; 0.00%)</title><rect x="52.0" y="597" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.95" y="607.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="495.3" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="498.34" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="867.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.20" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="533" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="543.5" ></text>
</g>
<g >
<title>std::move&lt;cql3::expr::untyped_constant&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="59.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.06" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="654.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.99" y="767.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="687.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="703.7" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.74" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (12 samples, 0.23%; -0.04%)</title><rect x="257.8" y="469" width="2.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="260.83" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_bound_terms (1 samples, 0.02%; +0.02%)</title><rect x="81.3" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.30" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (10 samples, 0.19%; -0.02%)</title><rect x="731.0" y="613" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="734.02" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="119.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="122.82" y="751.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="813.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.78" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1124.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.20" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.04%)</title><rect x="187.2" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="190.22" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="58.8" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.83" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt; (2 samples, 0.04%; +0.04%)</title><rect x="625.8" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="628.79" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="1009.8" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1012.80" y="511.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="54.2" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.25" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="1053.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1056.36" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (2 samples, 0.04%; -0.02%)</title><rect x="547.8" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="550.84" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; +0.04%)</title><rect x="817.0" y="629" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="819.99" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%; +0.02%)</title><rect x="58.1" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.14" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.28" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.16%; 0.00%)</title><rect x="40.7" y="629" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="762.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="765.66" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="826.6" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.62" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (5 samples, 0.10%; 0.00%)</title><rect x="861.9" y="677" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="687.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%; +0.04%)</title><rect x="357.8" y="453" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="360.79" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (15 samples, 0.29%; -0.04%)</title><rect x="263.8" y="469" width="3.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="266.79" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.10%; +0.10%)</title><rect x="161.5" y="661" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="164.54" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (2 samples, 0.04%; +0.04%)</title><rect x="902.5" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="905.51" y="655.5" ></text>
</g>
<g >
<title>boost::algorithm::replace_all_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char [2], char [2]&gt; (1 samples, 0.02%; +0.02%)</title><rect x="689.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.76" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (3 samples, 0.06%; 0.00%)</title><rect x="652.4" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.39" y="767.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (8 samples, 0.16%; 0.00%)</title><rect x="69.6" y="645" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.61" y="655.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (2 samples, 0.04%; +0.02%)</title><rect x="1126.7" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.72" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (4 samples, 0.08%; +0.08%)</title><rect x="515.3" y="565" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="518.29" y="575.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="548.5" y="693" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.53" y="703.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (10 samples, 0.19%; +0.04%)</title><rect x="781.9" y="581" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="784.92" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="847.5" ></text>
</g>
<g >
<title>db::system_keyspace::compactions_in_progress (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="678.1" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.06" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="48.7" y="421" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="51.74" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%; 0.00%)</title><rect x="299.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="302.56" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (25 samples, 0.49%; +0.02%)</title><rect x="262.4" y="485" width="5.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="265.41" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="895.2" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.17" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%; +0.02%)</title><rect x="799.6" y="421" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="802.57" y="431.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1116.9" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.87" y="463.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="895.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (3 samples, 0.06%; +0.02%)</title><rect x="1012.1" y="485" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.09" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="261.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="264.27" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="185.4" y="549" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="188.38" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="107.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="110.89" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="694.6" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="697.57" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (2 samples, 0.04%; +0.04%)</title><rect x="99.4" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="102.41" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="868.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.12" y="687.5" ></text>
</g>
<g >
<title>seastar::io_queue::queue_request (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%; +0.02%)</title><rect x="20.5" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.55" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="296.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.12" y="559.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="791.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.55" y="463.5" ></text>
</g>
<g >
<title>database::find_keyspace (4 samples, 0.08%; +0.08%)</title><rect x="962.1" y="645" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="965.12" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (527 samples, 10.24%; -0.06%)</title><rect x="323.4" y="677" width="120.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="326.40" y="687.5" >query::consume_..</text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1118.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.47" y="511.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="26.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="29.28" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (16 samples, 0.31%; 0.00%)</title><rect x="729.9" y="645" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.88" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (629 samples, 12.22%; +0.23%)</title><rect x="943.1" y="709" width="144.2" height="15.0" fill="rgb(255,52,52)" rx="2" ry="2" />
<text  x="946.09" y="719.5" >cql3::statements::..</text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%; +0.02%)</title><rect x="1122.6" y="485" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.60" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="561.6" y="677" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="564.60" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;unsigned int&gt;::_Rb_tree_const_iterator (1 samples, 0.02%; 0.00%)</title><rect x="39.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.35" y="591.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.10%; +0.02%)</title><rect x="1046.7" y="581" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1049.71" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (10 samples, 0.19%; -0.02%)</title><rect x="1164.3" y="805" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1167.32" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (7 samples, 0.14%; -0.02%)</title><rect x="394.9" y="469" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="397.93" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; +0.02%)</title><rect x="716.3" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.35" y="719.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%; +0.04%)</title><rect x="1124.4" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1127.43" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1110.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.91" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="57.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.23" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="53.6" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.56" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.83" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt; &gt;::set_value&lt;std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="860.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.78" y="751.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; 0.00%)</title><rect x="881.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.42" y="703.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="109.5" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (197 samples, 3.83%; +0.02%)</title><rect x="23.8" y="693" width="45.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.76" y="703.5" >cql3..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (14 samples, 0.27%; +0.02%)</title><rect x="680.4" y="773" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="683.36" y="783.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (7 samples, 0.14%; +0.04%)</title><rect x="924.7" y="677" width="1.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="927.75" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="74.4" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.42" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%; +0.02%)</title><rect x="859.4" y="741" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.41" y="751.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="23.5" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.53" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (3 samples, 0.06%; -0.04%)</title><rect x="810.3" y="613" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="813.35" y="623.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; -0.04%)</title><rect x="324.5" y="661" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="327.54" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1100.1" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1103.13" y="703.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (13 samples, 0.25%; +0.17%)</title><rect x="387.4" y="437" width="2.9" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="390.36" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.35%; 0.00%)</title><rect x="1124.4" y="581" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.14%; +0.08%)</title><rect x="232.4" y="357" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="235.38" y="367.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="20.3" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.32" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1096.2" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1099.23" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.06%)</title><rect x="646.0" y="773" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="648.97" y="783.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%; 0.00%)</title><rect x="853.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.99" y="767.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="418.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="421.77" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="440.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="443.78" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%; -0.02%)</title><rect x="694.3" y="741" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="697.34" y="751.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="1126.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.04" y="447.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (48 samples, 0.93%; -0.04%)</title><rect x="1087.5" y="709" width="11.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1090.52" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="740.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.65" y="671.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (1 samples, 0.02%; +0.02%)</title><rect x="44.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.85" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="72.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.59" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="24.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.90" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (3 samples, 0.06%; +0.06%)</title><rect x="616.9" y="725" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="619.85" y="735.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="768.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="771.16" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (8 samples, 0.16%; +0.02%)</title><rect x="341.1" y="469" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="344.05" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="713.8" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="716.83" y="703.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="559.5" ></text>
</g>
<g >
<title>[[vdso]] (30 samples, 0.58%; +0.04%)</title><rect x="1168.7" y="901" width="6.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1171.68" y="911.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="662.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.01" y="783.5" ></text>
</g>
<g >
<title>dht::tri_compare (9 samples, 0.17%; -0.31%)</title><rect x="1068.5" y="517" width="2.1" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="1071.49" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (8 samples, 0.16%; -0.02%)</title><rect x="723.0" y="725" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="726.00" y="735.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (10 samples, 0.19%; -0.02%)</title><rect x="461.9" y="565" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="464.87" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (6 samples, 0.12%; +0.04%)</title><rect x="974.5" y="597" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="977.50" y="607.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="847.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="575.5" ></text>
</g>
<g >
<title>read_context::stop (2 samples, 0.04%; 0.00%)</title><rect x="109.5" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="607.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,068 samples, 20.75%; 0.00%)</title><rect x="869.3" y="773" width="244.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.27" y="783.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="527.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (8 samples, 0.16%; 0.00%)</title><rect x="554.7" y="661" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.72" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="274.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.11" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="775.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.04" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="43.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.70" y="559.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="347.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="350.01" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="924.3" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="927.29" y="639.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (3 samples, 0.06%; +0.04%)</title><rect x="1033.6" y="581" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1036.64" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="757" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="767.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (14 samples, 0.27%; -0.04%)</title><rect x="749.8" y="565" width="3.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="752.82" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.19" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%; +0.06%)</title><rect x="420.8" y="533" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="423.83" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1132.9" y="789" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1135.91" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (76 samples, 1.48%; +0.10%)</title><rect x="513.9" y="581" width="17.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="516.91" y="591.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::range_tombstone_view, std::allocator&lt;ser::range_tombstone_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.9" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="207.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%; 0.00%)</title><rect x="78.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.78" y="735.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; 0.00%)</title><rect x="192.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.49" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (6 samples, 0.12%; 0.00%)</title><rect x="636.6" y="773" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.57" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="217.3" y="437" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="220.25" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="833.7" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="836.73" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="898.8" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="901.84" y="591.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (7 samples, 0.14%; 0.00%)</title><rect x="855.1" y="741" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.05" y="751.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%; +0.02%)</title><rect x="1012.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.78" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (220 samples, 4.27%; +0.06%)</title><rect x="984.1" y="613" width="50.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="987.12" y="623.5" >servi..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%; -0.02%)</title><rect x="668.0" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="670.98" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; -0.04%)</title><rect x="251.9" y="389" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="254.87" y="399.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="534.1" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="537.09" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%; +0.02%)</title><rect x="928.0" y="693" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="930.96" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (63 samples, 1.22%; 0.00%)</title><rect x="25.1" y="613" width="14.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.13" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%; 0.00%)</title><rect x="858.5" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.49" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="643.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="646.67" y="783.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="283.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="286.05" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="864.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.91" y="591.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="591.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.27%; +0.02%)</title><rect x="846.8" y="709" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="849.80" y="719.5" ></text>
</g>
<g >
<title>memtable::apply (22 samples, 0.43%; +0.02%)</title><rect x="1114.8" y="549" width="5.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.80" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (23 samples, 0.45%; +0.16%)</title><rect x="489.4" y="549" width="5.3" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="492.38" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1030.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.21" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (16 samples, 0.31%; +0.14%)</title><rect x="303.0" y="629" width="3.7" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="305.99" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="503.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="506.60" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (49 samples, 0.95%; +0.02%)</title><rect x="690.0" y="789" width="11.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.98" y="799.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; +0.02%)</title><rect x="49.2" y="453" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.20" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (10 samples, 0.19%; 0.00%)</title><rect x="1122.1" y="549" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.14" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="82.2" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.22" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; +0.02%)</title><rect x="288.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.55" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="76.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.03" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="613.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="616.18" y="735.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="79.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.01" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="651.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.70" y="719.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%; 0.00%)</title><rect x="867.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.89" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.10%)</title><rect x="512.8" y="565" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="515.77" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="843.8" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="846.82" y="703.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%; +0.02%)</title><rect x="747.1" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="750.07" y="575.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (20 samples, 0.39%; 0.00%)</title><rect x="748.4" y="613" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.45" y="623.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (5 samples, 0.10%; +0.02%)</title><rect x="325.7" y="597" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="328.69" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%; -0.04%)</title><rect x="610.9" y="725" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="613.89" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="324.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="327.09" y="655.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (22 samples, 0.43%; +0.06%)</title><rect x="385.3" y="453" width="5.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="388.30" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (2 samples, 0.04%; -0.02%)</title><rect x="741.8" y="613" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="744.80" y="623.5" ></text>
</g>
<g >
<title>do_cql_test (279 samples, 5.42%; 0.00%)</title><rect x="18.9" y="837" width="64.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="847.5" >do_cql_..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; 0.00%)</title><rect x="1115.3" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.82" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="762.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="765.89" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="548.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.07" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%; 0.00%)</title><rect x="939.4" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.42" y="687.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.16%; -0.02%)</title><rect x="541.9" y="597" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="544.88" y="607.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; +0.02%)</title><rect x="963.9" y="645" width="1.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="966.95" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%; +0.02%)</title><rect x="88.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.41" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="152.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="155.83" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="546.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="549.70" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (39 samples, 0.76%; +0.06%)</title><rect x="289.0" y="597" width="9.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="292.01" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (2 samples, 0.04%; +0.04%)</title><rect x="247.3" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="250.28" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; +0.02%)</title><rect x="270.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="273.90" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="928.6" y="661" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="931.64" y="671.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; -0.02%)</title><rect x="710.4" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="713.39" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%; +0.04%)</title><rect x="284.9" y="517" width="3.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="287.88" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%; -0.02%)</title><rect x="25.4" y="485" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="28.36" y="495.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="18.9" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.94" y="815.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (5 samples, 0.10%; +0.02%)</title><rect x="151.9" y="693" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="154.91" y="703.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (2 samples, 0.04%; -0.02%)</title><rect x="43.0" y="645" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="46.01" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (7 samples, 0.14%; -0.08%)</title><rect x="778.9" y="581" width="1.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="781.94" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%; +0.06%)</title><rect x="190.4" y="549" width="2.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="193.43" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="652.8" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="655.84" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; +0.02%)</title><rect x="76.9" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.94" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (288 samples, 5.60%; 0.00%)</title><rect x="16.9" y="869" width="66.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="879.5" >seastar..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1117.3" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.32" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="658.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.58" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="1121.9" y="597" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.91" y="607.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::deserialize_visitor&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="109.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.27" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::functions::function_call&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::functions::function_call&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="78.3" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.32" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="691.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="694.82" y="767.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; -0.04%)</title><rect x="999.3" y="565" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1002.26" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (127 samples, 2.47%; 0.00%)</title><rect x="563.9" y="693" width="29.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.89" y="703.5" >fl..</text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (3 samples, 0.06%; +0.04%)</title><rect x="463.0" y="549" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="466.02" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="548.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.07" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="55.6" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.62" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_keyspace_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.63" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.02%)</title><rect x="412.6" y="453" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="415.58" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="717.5" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.50" y="799.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.12%; +0.06%)</title><rect x="521.9" y="517" width="1.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="524.94" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.10%; -0.02%)</title><rect x="507.7" y="613" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="510.72" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="477.9" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="480.92" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="201.0" y="453" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="203.97" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="719.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (5 samples, 0.10%; 0.00%)</title><rect x="899.3" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.30" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%; 0.00%)</title><rect x="581.3" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="584.32" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="501" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="78.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.78" y="751.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="66.6" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.63" y="623.5" ></text>
</g>
<g >
<title>cql3::cf_name::~cf_name (1 samples, 0.02%; +0.02%)</title><rect x="40.0" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.03" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="662.2" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.24" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="324.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="327.32" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (17 samples, 0.33%; +0.02%)</title><rect x="97.3" y="725" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="100.35" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%; -0.04%)</title><rect x="729.9" y="629" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="732.88" y="639.5" ></text>
</g>
<g >
<title>make_combined_reader (99 samples, 1.92%; +0.04%)</title><rect x="456.6" y="629" width="22.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="459.60" y="639.5" >m..</text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="753.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.72" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="932.5" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.54" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="55.9" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.85" y="511.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%; -0.02%)</title><rect x="16.6" y="901" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="19.65" y="911.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="697.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="700.09" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%; 0.00%)</title><rect x="552.2" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.20" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="51.5" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.50" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="634.3" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.27" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (31 samples, 0.60%; -0.02%)</title><rect x="795.9" y="485" width="7.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="798.90" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (5 samples, 0.10%; -0.02%)</title><rect x="1016.5" y="437" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1019.45" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.02%)</title><rect x="1027.5" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1030.45" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (8 samples, 0.16%; -0.04%)</title><rect x="239.7" y="405" width="1.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="242.72" y="415.5" ></text>
</g>
<g >
<title>query_result_builder::consume (192 samples, 3.73%; +0.02%)</title><rect x="350.2" y="501" width="44.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="353.22" y="511.5" >quer..</text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%; -0.04%)</title><rect x="947.7" y="693" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="950.67" y="703.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (5 samples, 0.10%; +0.10%)</title><rect x="361.2" y="469" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="364.23" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (12 samples, 0.23%; 0.00%)</title><rect x="755.1" y="693" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="758.09" y="703.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::variant (1 samples, 0.02%; +0.02%)</title><rect x="1118.2" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.24" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="826.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.16" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1117.8" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.78" y="463.5" ></text>
</g>
<g >
<title>posix_memalign (20 samples, 0.39%; +0.04%)</title><rect x="234.9" y="341" width="4.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="237.90" y="351.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (23 samples, 0.45%; +0.02%)</title><rect x="276.6" y="501" width="5.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="279.63" y="511.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%; +0.02%)</title><rect x="1163.9" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.86" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.04%)</title><rect x="307.3" y="645" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="310.35" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="806.4" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="809.45" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="1018.5" y="485" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1021.51" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="591.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%; +0.02%)</title><rect x="731.0" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="734.02" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="809.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="812.20" y="575.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="608.1" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="611.14" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="262.0" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="264.96" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_map (1 samples, 0.02%; 0.00%)</title><rect x="27.4" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.42" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; 0.00%)</title><rect x="466.5" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.46" y="527.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="319.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (14 samples, 0.27%; +0.02%)</title><rect x="938.5" y="693" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="941.50" y="703.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="799.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (1 samples, 0.02%; 0.00%)</title><rect x="72.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="623.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%; +0.02%)</title><rect x="18.3" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.25" y="735.5" ></text>
</g>
<g >
<title>local_schema_registry (4 samples, 0.08%; +0.02%)</title><rect x="963.0" y="645" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="966.03" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="627.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="630.40" y="703.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%; 0.00%)</title><rect x="522.9" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.85" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (3 samples, 0.06%; 0.00%)</title><rect x="477.0" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="480.00" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; 0.00%)</title><rect x="1030.4" y="517" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.44" y="527.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; -0.04%)</title><rect x="608.6" y="693" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="611.60" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="869" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="879.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="865.8" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.83" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1038.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1041.92" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="831.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%; +0.02%)</title><rect x="29.0" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.03" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (36 samples, 0.70%; -0.17%)</title><rect x="487.1" y="581" width="8.2" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="490.09" y="591.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_delete_visitor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (2 samples, 0.04%; -0.02%)</title><rect x="1024.0" y="501" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1027.02" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (9 samples, 0.17%; -0.04%)</title><rect x="1089.4" y="677" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1092.35" y="687.5" ></text>
</g>
<g >
<title>service::client_state::has_access (3 samples, 0.06%; -0.02%)</title><rect x="79.9" y="725" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="82.92" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="606.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="609.08" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="315.4" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="318.37" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="924.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="927.52" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; +0.02%)</title><rect x="76.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.71" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.57" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="172.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.32" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="56.5" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.54" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="837" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1164.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1167.78" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.92" y="719.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (67 samples, 1.30%; -0.02%)</title><rect x="788.8" y="533" width="15.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="791.80" y="543.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1121.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.91" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (3 samples, 0.06%; +0.06%)</title><rect x="882.1" y="677" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="885.10" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (5 samples, 0.10%; 0.00%)</title><rect x="981.1" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="984.14" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (16 samples, 0.31%; 0.00%)</title><rect x="1124.4" y="517" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (116 samples, 2.25%; -0.14%)</title><rect x="219.3" y="421" width="26.6" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="222.31" y="431.5" >c..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="575.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; 0.00%)</title><rect x="800.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.95" y="415.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (12 samples, 0.23%; +0.02%)</title><rect x="382.1" y="453" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="385.09" y="463.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::operator delete (1 samples, 0.02%; 0.00%)</title><rect x="23.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.53" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%; +0.02%)</title><rect x="50.1" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.12" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="1024.2" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1027.25" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="716.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.58" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (15 samples, 0.29%; 0.00%)</title><rect x="60.4" y="629" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.44" y="639.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%; +0.02%)</title><rect x="1110.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1113.22" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%; 0.00%)</title><rect x="871.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.33" y="751.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (35 samples, 0.68%; -0.16%)</title><rect x="404.6" y="453" width="8.0" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="407.56" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="101.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.70" y="735.5" ></text>
</g>
<g >
<title>__strlen_avx2 (7 samples, 0.14%; -0.04%)</title><rect x="1004.5" y="533" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1007.53" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;do_io_check&lt;checked_file_impl::close (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.30" y="799.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="242.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="245.93" y="415.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%; +0.04%)</title><rect x="127.8" y="661" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="130.84" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.10%)</title><rect x="501.8" y="485" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="504.76" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="824.3" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.33" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="447.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%; 0.00%)</title><rect x="79.0" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.01" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; -0.02%)</title><rect x="573.3" y="581" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="576.29" y="591.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%; +0.02%)</title><rect x="1034.6" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1037.56" y="623.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%; +0.02%)</title><rect x="1076.5" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1079.52" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="686.3" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="751.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%; 0.00%)</title><rect x="798.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.88" y="415.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="557.0" y="645" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.01" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; -0.02%)</title><rect x="1100.6" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1103.59" y="719.5" ></text>
</g>
<g >
<title>logalloc::segment::occupancy (1 samples, 0.02%; +0.02%)</title><rect x="10.5" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.46" y="783.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="109.5" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="751.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="115.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.46" y="767.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%; +0.04%)</title><rect x="998.3" y="549" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1001.34" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%; 0.00%)</title><rect x="593.2" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.24" y="719.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; +0.02%)</title><rect x="43.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.01" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="767.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="85.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.97" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%; 0.00%)</title><rect x="25.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="725" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="735.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (6 samples, 0.12%; +0.10%)</title><rect x="214.7" y="469" width="1.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="217.73" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="483.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.19" y="607.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="821.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.35" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="320.0" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="322.96" y="623.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1127.9" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.87" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (1 samples, 0.02%; +0.02%)</title><rect x="419.0" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="422.00" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; -0.06%)</title><rect x="682.4" y="757" width="1.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="685.42" y="767.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="693" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="703.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="1079.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1082.50" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="448.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="451.80" y="671.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="809.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="812.89" y="575.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="20.3" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.32" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="1000.4" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.40" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; +0.02%)</title><rect x="472.6" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="475.65" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="717.7" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.72" y="799.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (2 samples, 0.04%; 0.00%)</title><rect x="109.0" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="783.5" ></text>
</g>
<g >
<title>database::apply_in_memory (22 samples, 0.43%; 0.00%)</title><rect x="1114.8" y="581" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.80" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="133.3" y="741" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="136.34" y="751.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (66 samples, 1.28%; -0.06%)</title><rect x="738.4" y="693" width="15.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="741.36" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; +0.02%)</title><rect x="218.2" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="221.17" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (15 samples, 0.29%; 0.00%)</title><rect x="72.6" y="693" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.59" y="703.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (2 samples, 0.04%; 0.00%)</title><rect x="864.7" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.68" y="671.5" ></text>
</g>
<g >
<title>database::query (2 samples, 0.04%; +0.04%)</title><rect x="996.0" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="999.05" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; 0.00%)</title><rect x="712.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.99" y="751.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="639.5" ></text>
</g>
<g >
<title>std::apply&lt;sstables::sstable_directory::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (2 samples, 0.04%; +0.02%)</title><rect x="350.5" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="353.45" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1116.9" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.87" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="445.1" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.14" y="719.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1115.9" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.95" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="671.5" ></text>
</g>
<g >
<title>database::query (20 samples, 0.39%; +0.14%)</title><rect x="104.2" y="789" width="4.6" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="107.23" y="799.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="582.0" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="585.00" y="655.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%; +0.02%)</title><rect x="58.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.37" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="571.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="574.00" y="559.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.05" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (1 samples, 0.02%; 0.00%)</title><rect x="865.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.14" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="607.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; +0.04%)</title><rect x="541.4" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="544.42" y="607.5" ></text>
</g>
<g >
<title>row::~row (2 samples, 0.04%; +0.04%)</title><rect x="287.6" y="501" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="290.63" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="958.2" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="961.22" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1085.2" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1088.23" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="200.5" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="203.51" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="556.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.56" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="43.5" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.47" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (104 samples, 2.02%; 0.00%)</title><rect x="784.4" y="581" width="23.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.44" y="591.5" >s..</text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="865.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.60" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="781.2" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="784.23" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; -0.02%)</title><rect x="683.3" y="725" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="686.34" y="735.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="751.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="687.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; -0.06%)</title><rect x="1084.3" y="661" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1087.31" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="546.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="549.47" y="575.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="703.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; 0.00%)</title><rect x="549.9" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.91" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="924.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="927.06" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="815.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="202.3" y="501" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="205.35" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="591.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1052.4" y="613" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.44" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="55.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.85" y="543.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="914.4" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="917.43" y="639.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1115.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="783.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="803.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.01" y="495.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%; 0.00%)</title><rect x="1165.5" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.47" y="783.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; +0.02%)</title><rect x="286.9" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="289.95" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (17 samples, 0.33%; +0.02%)</title><rect x="235.6" y="325" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="238.59" y="335.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="57.0" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.00" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (49 samples, 0.95%; +0.04%)</title><rect x="309.2" y="629" width="11.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="312.18" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="511.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (133 samples, 2.58%; -0.10%)</title><rect x="363.3" y="469" width="30.5" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="366.29" y="479.5" >wr..</text>
</g>
<g >
<title>single_node_cql_env::execute_cql (265 samples, 5.15%; 0.00%)</title><rect x="21.7" y="805" width="60.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="815.5" >single..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%; +0.02%)</title><rect x="1021.3" y="517" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1024.26" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (4 samples, 0.08%; 0.00%)</title><rect x="1111.4" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1114.36" y="719.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="655.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.14%; +0.10%)</title><rect x="120.7" y="725" width="1.6" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="123.73" y="735.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::full_name (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="347.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="350.70" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="618.5" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.46" y="735.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="888.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="891.75" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (2 samples, 0.04%; 0.00%)</title><rect x="397.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.22" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (31 samples, 0.60%; +0.10%)</title><rect x="936.0" y="709" width="7.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="938.98" y="719.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%; 0.00%)</title><rect x="582.2" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="585.23" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="432.5" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="435.53" y="511.5" ></text>
</g>
<g >
<title>sstables::column_stats::reset (1 samples, 0.02%; +0.02%)</title><rect x="86.1" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.11" y="751.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (8 samples, 0.16%; 0.00%)</title><rect x="50.1" y="597" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.12" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="431.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::pop_front (1 samples, 0.02%; 0.00%)</title><rect x="1114.1" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.12" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (33 samples, 0.64%; +0.02%)</title><rect x="861.5" y="709" width="7.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="864.47" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::identity_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="860.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.78" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (82 samples, 1.59%; +0.02%)</title><rect x="398.4" y="485" width="18.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="401.37" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (1 samples, 0.02%; +0.02%)</title><rect x="697.3" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="700.32" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="787.6" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.65" y="559.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_a82351dc79d5f64fb8a6629e3d0036241cf3e7c0] (1 samples, 0.02%; +0.02%)</title><rect x="838.5" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="841.54" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%; 0.00%)</title><rect x="296.8" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.80" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.09" y="671.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (2 samples, 0.04%; 0.00%)</title><rect x="608.8" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.83" y="703.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (8 samples, 0.16%; -0.02%)</title><rect x="328.0" y="565" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="330.98" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1080.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.87" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="55.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.39" y="527.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="287.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.40" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (38 samples, 0.74%; 0.00%)</title><rect x="122.3" y="725" width="8.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="125.34" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.89" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.06%)</title><rect x="1098.8" y="709" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1101.75" y="719.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="504.7" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="507.74" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="93.7" y="773" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="96.68" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="184.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="187.47" y="543.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="665.0" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.00" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="789" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="799.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.7" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.72" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="689.5" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.53" y="767.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.52" y="607.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; -0.02%)</title><rect x="1075.6" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1078.60" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; -0.02%)</title><rect x="1091.4" y="677" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1094.42" y="687.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.06%)</title><rect x="690.2" y="773" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="693.21" y="783.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%; +0.02%)</title><rect x="811.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="814.26" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="768.4" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="771.39" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; 0.00%)</title><rect x="790.2" y="501" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.17" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%; +0.02%)</title><rect x="1011.9" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.87" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (4 samples, 0.08%; -0.02%)</title><rect x="765.4" y="645" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="768.41" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="148.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="151.01" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (10 samples, 0.19%; -0.02%)</title><rect x="985.0" y="565" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="988.04" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.9" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.94" y="671.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1118.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.70" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="43.7" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.70" y="623.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="742.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.03" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="132.0" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.97" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%; -0.02%)</title><rect x="347.2" y="469" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="350.24" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (5 samples, 0.10%; -0.04%)</title><rect x="816.5" y="645" width="1.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="819.54" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (4 samples, 0.08%; 0.00%)</title><rect x="259.0" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.98" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.35%; 0.00%)</title><rect x="1124.4" y="597" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; +0.02%)</title><rect x="919.9" y="613" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="922.93" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (13 samples, 0.25%; -0.04%)</title><rect x="985.0" y="597" width="3.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="988.04" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; +0.02%)</title><rect x="17.1" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.11" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%; 0.00%)</title><rect x="663.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.62" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (5 samples, 0.10%; +0.02%)</title><rect x="101.5" y="757" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="104.47" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::reserve (1 samples, 0.02%; 0.00%)</title><rect x="1124.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.20" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="526.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="529.06" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; -0.08%)</title><rect x="662.7" y="773" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="665.70" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="671.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (9 samples, 0.17%; +0.06%)</title><rect x="173.7" y="581" width="2.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="176.69" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (38 samples, 0.74%; +0.02%)</title><rect x="1010.9" y="501" width="8.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1013.95" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.04%)</title><rect x="42.3" y="469" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="45.33" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="83.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.59" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="869.0" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.04" y="735.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%; -0.02%)</title><rect x="233.5" y="341" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="236.53" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1120.8" y="229" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.76" y="239.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (36 samples, 0.70%; -0.02%)</title><rect x="340.8" y="485" width="8.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="343.82" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.08%)</title><rect x="758.1" y="661" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="761.07" y="671.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,710 samples, 91.51%; 0.00%)</title><rect x="87.0" y="885" width="1079.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="895.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="777.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="780.79" y="607.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="687.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="899.5" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.53" y="591.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1115.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="463.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="76.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.49" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; 0.00%)</title><rect x="717.0" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.04" y="799.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%; -0.02%)</title><rect x="1078.8" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1081.81" y="607.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.57" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (16 samples, 0.31%; +0.04%)</title><rect x="421.5" y="533" width="3.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="424.52" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.29" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1058.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1061.86" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (3 samples, 0.06%; 0.00%)</title><rect x="22.8" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="928.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.87" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="48.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.29" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (3 samples, 0.06%; 0.00%)</title><rect x="348.4" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="351.39" y="479.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.16" y="527.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="613.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.95" y="735.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="110.9" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.87" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (4 samples, 0.08%; +0.06%)</title><rect x="1097.4" y="693" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1100.38" y="703.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="109.5" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="767.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (43 samples, 0.84%; -0.02%)</title><rect x="666.1" y="789" width="9.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="669.14" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="748.7" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="751.67" y="591.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%; +0.06%)</title><rect x="253.5" y="405" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="256.47" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="201.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="204.66" y="511.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="607.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="934.1" y="661" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="937.15" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (4 samples, 0.08%; -0.02%)</title><rect x="622.6" y="677" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="625.58" y="687.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%; +0.02%)</title><rect x="706.7" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="709.72" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="441.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="444.93" y="655.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (2 samples, 0.04%; +0.04%)</title><rect x="384.8" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="387.84" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="641.2" y="773" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="644.15" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,047 samples, 20.34%; +0.02%)</title><rect x="872.9" y="725" width="240.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.93" y="735.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%; +0.10%)</title><rect x="542.1" y="549" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="545.11" y="559.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (18 samples, 0.35%; +0.02%)</title><rect x="729.4" y="693" width="4.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="732.42" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (7 samples, 0.14%; -0.02%)</title><rect x="812.6" y="629" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="815.64" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.06%)</title><rect x="750.1" y="549" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="753.05" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.08%)</title><rect x="502.4" y="485" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="505.45" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="298.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="301.41" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,709 samples, 91.49%; +0.02%)</title><rect x="87.0" y="821" width="1079.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.03" y="831.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1123.7" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.74" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="525.8" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="528.83" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (3 samples, 0.06%; -0.02%)</title><rect x="878.9" y="709" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="881.89" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; -0.04%)</title><rect x="246.6" y="437" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="249.60" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; 0.00%)</title><rect x="260.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.35" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="327.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="330.07" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="445.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.82" y="703.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (8 samples, 0.16%; 0.00%)</title><rect x="19.9" y="789" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.86" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (567 samples, 11.02%; -0.04%)</title><rect x="169.8" y="613" width="130.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="172.79" y="623.5" >mutation_reader_..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;do_io_check&lt;checked_file_impl::close (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.30" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1130.4" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.39" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="614.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="617.79" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%; 0.00%)</title><rect x="626.9" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.94" y="687.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (10 samples, 0.19%; +0.04%)</title><rect x="629.2" y="693" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="632.23" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (7 samples, 0.14%; 0.00%)</title><rect x="26.5" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.51" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="548.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.30" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.99" y="783.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="933.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="936.46" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="665.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.68" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="44.4" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="47.39" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; +0.02%)</title><rect x="36.8" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="39.82" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.10%; 0.00%)</title><rect x="17.3" y="853" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="863.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; -0.04%)</title><rect x="598.7" y="661" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="601.74" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="60.7" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.67" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; -0.14%)</title><rect x="754.2" y="677" width="0.2" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="757.18" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; +0.02%)</title><rect x="55.2" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.16" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; 0.00%)</title><rect x="746.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="749.84" y="591.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.02%)</title><rect x="1141.9" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1144.86" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (66 samples, 1.28%; 0.00%)</title><rect x="24.9" y="629" width="15.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="40.3" y="485" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="43.26" y="495.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.08%; -0.06%)</title><rect x="1152.4" y="741" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1155.40" y="751.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="51.3" y="501" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="54.27" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1126.0" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.04" y="463.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%; +0.02%)</title><rect x="847.7" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="850.72" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; +0.02%)</title><rect x="860.3" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.32" y="799.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="641.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="644.84" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="17.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.34" y="735.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="747.5" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="750.53" y="575.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="501.8" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="504.76" y="511.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; 0.00%)</title><rect x="569.4" y="613" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.39" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="536.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.15" y="623.5" ></text>
</g>
<g >
<title>database::find_column_family (13 samples, 0.25%; +0.04%)</title><rect x="1039.1" y="629" width="3.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1042.15" y="639.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="95.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%; +0.04%)</title><rect x="524.9" y="501" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="527.92" y="511.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (29 samples, 0.56%; +0.02%)</title><rect x="1114.6" y="613" width="6.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.57" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (8 samples, 0.16%; -0.04%)</title><rect x="258.5" y="453" width="1.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="261.52" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="150.5" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="153.54" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::operator= (1 samples, 0.02%; +0.02%)</title><rect x="53.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.10" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="725" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; -0.02%)</title><rect x="941.3" y="661" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="944.25" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.89%; 0.00%)</title><rect x="28.1" y="597" width="10.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.11" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.19" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.06%)</title><rect x="133.1" y="741" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="136.11" y="751.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%; +0.02%)</title><rect x="62.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.50" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="383.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (4 samples, 0.08%; +0.04%)</title><rect x="438.9" y="565" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="441.95" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="479.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; -0.02%)</title><rect x="455.7" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="458.68" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; -0.02%)</title><rect x="820.9" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="823.89" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="48.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; 0.00%)</title><rect x="866.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.51" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; -0.04%)</title><rect x="801.9" y="405" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="804.86" y="415.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="469.0" y="565" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="471.98" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="93.0" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="95.99" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.5" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.54" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1111.1" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1114.13" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="976.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.10" y="623.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.06%)</title><rect x="606.8" y="725" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="609.76" y="735.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.17%; -0.02%)</title><rect x="663.6" y="757" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="666.62" y="767.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; 0.00%)</title><rect x="527.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="530.44" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.02%)</title><rect x="317.2" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="320.21" y="575.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="367.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%; +0.04%)</title><rect x="939.0" y="677" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="941.96" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::stats (7 samples, 0.14%; +0.02%)</title><rect x="518.5" y="533" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.50" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1155.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1158.84" y="783.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%; +0.02%)</title><rect x="461.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="464.18" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; +0.02%)</title><rect x="760.6" y="629" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="763.60" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; +0.02%)</title><rect x="175.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="178.75" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.08%; +0.06%)</title><rect x="123.3" y="693" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="126.25" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="415.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.5" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.47" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="854.8" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="857.82" y="735.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; -0.02%)</title><rect x="84.3" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="87.28" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="74.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.88" y="591.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_line (1 samples, 0.02%; +0.02%)</title><rect x="28.3" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.34" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="41.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.41" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; -0.02%)</title><rect x="13.9" y="869" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="16.90" y="879.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (4 samples, 0.08%; 0.00%)</title><rect x="1115.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="356.6" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="359.64" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (29 samples, 0.56%; 0.00%)</title><rect x="261.7" y="517" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.73" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="57.0" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="447.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="598.1" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="601.05" y="687.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="447.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; +0.02%)</title><rect x="939.6" y="661" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="942.65" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%; 0.00%)</title><rect x="651.9" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.93" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="245.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="248.68" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; +0.02%)</title><rect x="57.7" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.69" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (4 samples, 0.08%; +0.08%)</title><rect x="856.7" y="773" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="859.66" y="783.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.08%)</title><rect x="666.1" y="773" width="1.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="669.14" y="783.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="499.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="502.47" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; +0.02%)</title><rect x="74.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.96" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="1136.1" y="773" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1139.12" y="783.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (2 samples, 0.04%; +0.02%)</title><rect x="814.7" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.70" y="687.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="941.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="944.48" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (4 samples, 0.08%; -0.04%)</title><rect x="129.2" y="661" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="132.22" y="671.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (3 samples, 0.06%; +0.04%)</title><rect x="360.5" y="469" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="363.54" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="628.1" y="725" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="631.08" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; +0.04%)</title><rect x="618.0" y="709" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="621.00" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="807.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.59" y="575.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (5 samples, 0.10%; -0.08%)</title><rect x="731.9" y="581" width="1.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="734.94" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.11" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="740.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.19" y="687.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1129.0" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.02" y="543.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%; 0.00%)</title><rect x="1124.4" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="80.8" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.84" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.14%; +0.04%)</title><rect x="680.8" y="741" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="683.81" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; 0.00%)</title><rect x="848.6" y="629" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.63" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.02%)</title><rect x="698.0" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="701.01" y="783.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; -0.04%)</title><rect x="767.0" y="613" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="770.02" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="607.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (62 samples, 1.20%; +0.02%)</title><rect x="1062.1" y="581" width="14.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1065.07" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="239.5" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="242.49" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%; 0.00%)</title><rect x="925.2" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.20" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="799.5" ></text>
</g>
<g >
<title>std::allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::allocator (1 samples, 0.02%; +0.02%)</title><rect x="27.4" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.42" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="655.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%; -0.02%)</title><rect x="911.9" y="645" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="914.91" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="784.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="786.98" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%; -0.02%)</title><rect x="1027.2" y="549" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1030.23" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%; +0.10%)</title><rect x="686.8" y="773" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="689.77" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="77.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.86" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="73.7" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.73" y="575.5" ></text>
</g>
<g >
<title>database::find_uuid (10 samples, 0.19%; +0.02%)</title><rect x="761.5" y="677" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="764.51" y="687.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="558.4" y="629" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.39" y="639.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (4 samples, 0.08%; 0.00%)</title><rect x="510.2" y="597" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.24" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="243.6" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="246.62" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="50.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.81" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="202.3" y="485" width="1.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="205.35" y="495.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.70%; +0.08%)</title><rect x="795.0" y="501" width="8.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="797.99" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (9 samples, 0.17%; 0.00%)</title><rect x="899.1" y="629" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.07" y="639.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_channel (1 samples, 0.02%; +0.02%)</title><rect x="28.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.57" y="575.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (12 samples, 0.23%; -0.02%)</title><rect x="1116.9" y="533" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1119.87" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%; +0.04%)</title><rect x="1079.7" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1082.73" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (3 samples, 0.06%; +0.02%)</title><rect x="312.6" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="315.62" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%; +0.04%)</title><rect x="254.6" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="257.62" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="863.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%; +0.02%)</title><rect x="1024.5" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1027.47" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; 0.00%)</title><rect x="508.0" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="510.95" y="607.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.04%)</title><rect x="596.7" y="693" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="599.68" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="688.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="691.38" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="637.7" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.71" y="767.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (433 samples, 8.41%; +0.02%)</title><rect x="189.3" y="565" width="99.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="192.28" y="575.5" >logalloc::al..</text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="283.7" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="286.74" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (10 samples, 0.19%; +0.10%)</title><rect x="1077.2" y="613" width="2.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1080.20" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (202 samples, 3.92%; +0.14%)</title><rect x="988.3" y="597" width="46.3" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="991.25" y="607.5" >serv..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="478.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="481.61" y="575.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; -0.02%)</title><rect x="358.5" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="361.47" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="75.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.80" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="172.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.09" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1116.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.87" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%; 0.00%)</title><rect x="829.8" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.83" y="735.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1160.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1163.88" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="443.8" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="446.76" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="751.5" ></text>
</g>
<g >
<title>row_cache::make_reader (36 samples, 0.70%; -0.10%)</title><rect x="538.4" y="629" width="8.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="541.44" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="867.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.20" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.05" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (2 samples, 0.04%; +0.04%)</title><rect x="620.7" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="623.75" y="703.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::complete (2 samples, 0.04%; 0.00%)</title><rect x="1164.8" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1167.78" y="783.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="78.5" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.55" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; +0.02%)</title><rect x="424.5" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="427.50" y="511.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; 0.00%)</title><rect x="1165.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.70" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="935.5" y="645" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="938.52" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="931.9" y="645" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="934.85" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="671.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,710 samples, 91.51%; 0.00%)</title><rect x="87.0" y="869" width="1079.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="879.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%; 0.00%)</title><rect x="1114.3" y="757" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.34" y="767.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.2" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.24" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (3 samples, 0.06%; +0.04%)</title><rect x="431.6" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="434.61" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; -0.04%)</title><rect x="418.1" y="485" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="421.08" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="810.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.35" y="607.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; 0.00%)</title><rect x="18.3" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.25" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (18 samples, 0.35%; +0.04%)</title><rect x="671.9" y="757" width="4.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="674.87" y="767.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.70" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="543.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (10 samples, 0.19%; 0.00%)</title><rect x="1124.4" y="501" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="511.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="885" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.69" y="895.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%; +0.02%)</title><rect x="38.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.20" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (3 samples, 0.06%; 0.00%)</title><rect x="26.5" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.51" y="511.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%; 0.00%)</title><rect x="1126.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.72" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.99" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (2 samples, 0.04%; 0.00%)</title><rect x="1164.8" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1167.78" y="799.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (63 samples, 1.22%; +0.02%)</title><rect x="1061.8" y="597" width="14.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1064.84" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="863.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; -0.04%)</title><rect x="578.8" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="581.79" y="575.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="582.2" y="629" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="585.23" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="757.8" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.85" y="703.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="847.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="51.0" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.04" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="671.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; 0.00%)</title><rect x="204.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="207.41" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.17%; -0.08%)</title><rect x="372.2" y="453" width="2.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="375.23" y="463.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (5 samples, 0.10%; +0.02%)</title><rect x="545.6" y="597" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="548.55" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.10%; -0.02%)</title><rect x="53.8" y="549" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="56.79" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="579.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="582.48" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="433.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="436.21" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="62.7" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.73" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="203.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.50" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="329.4" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="332.36" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;&amp;, seastar::bool_class&lt;continuous_tag&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1117.6" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.55" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (22 samples, 0.43%; -0.06%)</title><rect x="729.2" y="709" width="5.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="732.19" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (246 samples, 4.78%; +0.04%)</title><rect x="879.6" y="709" width="56.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="882.58" y="719.5" >cql3:..</text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_impl::_Deque_impl (2 samples, 0.04%; +0.04%)</title><rect x="22.8" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="25.84" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (11 samples, 0.21%; 0.00%)</title><rect x="69.6" y="693" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.61" y="703.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (4 samples, 0.08%; 0.00%)</title><rect x="545.8" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.78" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (4 samples, 0.08%; 0.00%)</title><rect x="109.5" y="773" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="783.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%; +0.02%)</title><rect x="130.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="133.82" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; -0.04%)</title><rect x="548.5" y="677" width="1.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="551.53" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="758.5" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="761.53" y="703.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (6 samples, 0.12%; 0.00%)</title><rect x="775.5" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.50" y="607.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (13 samples, 0.25%; +0.02%)</title><rect x="628.5" y="709" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="631.54" y="719.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (40 samples, 0.78%; +0.04%)</title><rect x="339.9" y="501" width="9.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="342.90" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1138.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1140.96" y="783.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%; +0.06%)</title><rect x="505.4" y="565" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="508.43" y="575.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; -0.04%)</title><rect x="217.9" y="421" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="220.94" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (35 samples, 0.68%; -0.08%)</title><rect x="196.8" y="533" width="8.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="199.85" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="753.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.03" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; +0.02%)</title><rect x="426.8" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="429.79" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="597.8" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="600.82" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="709" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="719.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="898.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="901.61" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="101.9" y="741" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="104.93" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (3 samples, 0.06%; 0.00%)</title><rect x="665.0" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.00" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; 0.00%)</title><rect x="861.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%; 0.00%)</title><rect x="129.2" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.22" y="687.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (554 samples, 10.76%; +0.04%)</title><rect x="725.7" y="757" width="127.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="728.75" y="767.5" >single_node_cql..</text>
</g>
<g >
<title>std::unique_ptr&lt;std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter&gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="716.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.81" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="74.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.65" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="799.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%; +0.02%)</title><rect x="867.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.66" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; -0.02%)</title><rect x="937.8" y="693" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="940.81" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="841.3" y="677" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="844.30" y="687.5" ></text>
</g>
<g >
<title>seastar::io_queue::find_or_create_class (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; 0.00%)</title><rect x="790.2" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.17" y="463.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%; 0.00%)</title><rect x="939.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.42" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="894.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="897.03" y="527.5" ></text>
</g>
<g >
<title>query::result::builder::builder (15 samples, 0.29%; +0.04%)</title><rect x="603.3" y="709" width="3.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="606.32" y="719.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (11 samples, 0.21%; 0.00%)</title><rect x="796.8" y="437" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.82" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="562.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.29" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.13" y="719.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; -0.02%)</title><rect x="287.2" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="290.18" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="799.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="1158.8" y="741" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1161.82" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (30 samples, 0.58%; 0.00%)</title><rect x="861.9" y="693" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.04%)</title><rect x="968.1" y="597" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="971.08" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (9 samples, 0.17%; +0.10%)</title><rect x="718.0" y="789" width="2.0" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="720.95" y="799.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="54.7" y="213" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.71" y="223.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (6 samples, 0.12%; -0.02%)</title><rect x="48.5" y="597" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="51.52" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; 0.00%)</title><rect x="623.7" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.73" y="671.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="810.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.58" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; -0.02%)</title><rect x="571.0" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="574.00" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="976.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="979.79" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%; +0.02%)</title><rect x="1113.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.97" y="735.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1070.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1073.56" y="559.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="518.0" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.04" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="575.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.27%; +0.06%)</title><rect x="144.8" y="725" width="3.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="147.80" y="735.5" ></text>
</g>
<g >
<title>service::client_state::has_access (194 samples, 3.77%; +0.06%)</title><rect x="769.8" y="661" width="44.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="772.77" y="671.5" >serv..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (3 samples, 0.06%; +0.06%)</title><rect x="591.6" y="661" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="594.63" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.19" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="643.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="646.22" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (3 samples, 0.06%; +0.02%)</title><rect x="612.0" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.04" y="735.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="807.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.37" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1027.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1030.00" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="845.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="848.65" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="887.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="890.38" y="591.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; +0.02%)</title><rect x="600.6" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="603.57" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.14%)</title><rect x="134.7" y="741" width="0.2" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="137.72" y="751.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="757.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="760.39" y="623.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="288.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.09" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.12%; 0.00%)</title><rect x="891.3" y="549" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.27" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="979.5" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.54" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.14%; 0.00%)</title><rect x="903.0" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="905.97" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%; +0.02%)</title><rect x="1131.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.31" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; 0.00%)</title><rect x="274.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.34" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.56" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (3 samples, 0.06%; +0.02%)</title><rect x="654.2" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="657.22" y="767.5" ></text>
</g>
<g >
<title>row::row (126 samples, 2.45%; -0.06%)</title><rect x="217.7" y="437" width="28.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="220.71" y="447.5" >ro..</text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (76 samples, 1.48%; -0.04%)</title><rect x="737.0" y="709" width="17.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="739.98" y="719.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (14 samples, 0.27%; +0.06%)</title><rect x="342.9" y="469" width="3.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="345.89" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="778.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.71" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="66.2" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.17" y="639.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; +0.02%)</title><rect x="993.3" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="996.30" y="591.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%; +0.02%)</title><rect x="120.0" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="123.04" y="751.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="321.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="324.79" y="655.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.70" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="738.1" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="741.13" y="703.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (29 samples, 0.56%; +0.16%)</title><rect x="1063.9" y="533" width="6.7" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1066.91" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="88.2" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.18" y="815.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (6 samples, 0.12%; 0.00%)</title><rect x="626.3" y="709" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.25" y="719.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="799.3" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="802.34" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.84" y="687.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="42.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.55" y="639.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (6 samples, 0.12%; -0.06%)</title><rect x="268.4" y="517" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="271.38" y="527.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; -0.02%)</title><rect x="679.2" y="757" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="682.21" y="767.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%; 0.00%)</title><rect x="1116.9" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.87" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="203.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="206.27" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.11" y="671.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="591.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set_row::index (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="703.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="866.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.51" y="591.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="590.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="593.71" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="471.7" y="565" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="474.73" y="575.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="863.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="813.3" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.33" y="607.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%; 0.00%)</title><rect x="110.9" y="789" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="799.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="691.6" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="694.59" y="767.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.04%)</title><rect x="623.0" y="661" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="626.04" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%; +0.02%)</title><rect x="547.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="550.16" y="639.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.88" y="623.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; -0.02%)</title><rect x="728.0" y="693" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="731.04" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="591.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; 0.00%)</title><rect x="835.8" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.79" y="735.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%; +0.02%)</title><rect x="1046.9" y="565" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1049.94" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%; -0.06%)</title><rect x="1156.3" y="757" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1159.30" y="767.5" ></text>
</g>
<g >
<title>database::do_apply (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="629" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::modification_statement (1 samples, 0.02%; +0.02%)</title><rect x="64.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.56" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="84.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.05" y="623.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; +0.04%)</title><rect x="416.2" y="469" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="419.25" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.76" y="799.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="463.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (35 samples, 0.68%; +0.02%)</title><rect x="1062.5" y="549" width="8.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1065.53" y="559.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%; 0.00%)</title><rect x="111.3" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="719.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; -0.02%)</title><rect x="710.6" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="713.62" y="719.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="759.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.91" y="687.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (4 samples, 0.08%; -0.08%)</title><rect x="392.9" y="453" width="0.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="395.86" y="463.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; 0.00%)</title><rect x="1024.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.70" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (28 samples, 0.54%; -0.02%)</title><rect x="1101.0" y="709" width="6.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1104.05" y="719.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="757.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="760.62" y="671.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.16%; +0.02%)</title><rect x="818.6" y="645" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="821.60" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="114.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="117.77" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="253.2" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="256.24" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="651.5" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.47" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="69.1" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.15" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="41.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.87" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="706.9" y="709" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="709.95" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="1143.7" y="709" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1146.69" y="719.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (439 samples, 8.53%; +0.06%)</title><rect x="188.4" y="581" width="100.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="191.36" y="591.5" >seastar::do_..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (6 samples, 0.12%; +0.10%)</title><rect x="779.2" y="565" width="1.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="782.17" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (1 samples, 0.02%; +0.02%)</title><rect x="42.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.78" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="47.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.60" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%; 0.00%)</title><rect x="727.1" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.12" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="543.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.02%)</title><rect x="948.6" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="951.59" y="639.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (12 samples, 0.23%; 0.00%)</title><rect x="607.2" y="725" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.22" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="914.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="917.66" y="655.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; +0.02%)</title><rect x="729.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="731.96" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="585.0" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="587.98" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%; -0.02%)</title><rect x="796.1" y="453" width="3.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="799.13" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="844.3" y="677" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.28" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.64" y="527.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; -0.02%)</title><rect x="35.0" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="37.99" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.71" y="239.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (288 samples, 5.60%; 0.00%)</title><rect x="16.9" y="885" width="66.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="895.5" >seastar..</text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%; +0.02%)</title><rect x="430.9" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="433.92" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="108.1" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="111.12" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="618.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="621.91" y="735.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; -0.04%)</title><rect x="432.1" y="485" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="435.07" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="671.4" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="674.41" y="767.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1122.8" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.83" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.02%)</title><rect x="850.5" y="709" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.47" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="627.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="630.86" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="26.5" y="469" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="29.51" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%; +0.04%)</title><rect x="949.0" y="677" width="2.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="952.05" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="284.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="287.65" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%; -0.02%)</title><rect x="1165.7" y="773" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1168.70" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="439.9" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="442.86" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="729.6" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.65" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (37 samples, 0.72%; -0.02%)</title><rect x="888.5" y="597" width="8.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="891.52" y="607.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.65" y="799.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="438.3" y="581" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="441.26" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1077.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.97" y="543.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (127 samples, 2.47%; -0.02%)</title><rect x="1133.6" y="789" width="29.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1136.60" y="799.5" >se..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="821.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.35" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; +0.02%)</title><rect x="204.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="207.18" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (5 samples, 0.10%; -0.04%)</title><rect x="931.6" y="677" width="1.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="934.62" y="687.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="845.2" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.19" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (7 samples, 0.14%; +0.08%)</title><rect x="285.8" y="501" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="288.80" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.81" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; +0.02%)</title><rect x="941.3" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="944.25" y="655.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; +0.04%)</title><rect x="845.2" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="848.19" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="325.9" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.92" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (23 samples, 0.45%; -0.04%)</title><rect x="53.3" y="581" width="5.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="56.33" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="101.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.70" y="751.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (12 samples, 0.23%; -0.06%)</title><rect x="223.9" y="389" width="2.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="226.90" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="617.5" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="620.54" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; 0.00%)</title><rect x="624.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.96" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="45.3" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="1023.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.79" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%; -0.04%)</title><rect x="1136.8" y="773" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1139.81" y="783.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%; +0.04%)</title><rect x="953.9" y="677" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="956.86" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%; +0.04%)</title><rect x="695.5" y="725" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="698.49" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="531.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="534.11" y="575.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="418.1" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="421.08" y="511.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="420.1" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="423.15" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (3 samples, 0.06%; 0.00%)</title><rect x="865.8" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.83" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.10%; +0.02%)</title><rect x="305.1" y="613" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="308.06" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.43" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%; +0.04%)</title><rect x="216.8" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="219.79" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="110.0" y="37" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.96" y="47.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; -0.06%)</title><rect x="1097.1" y="677" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1100.15" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="271.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%; +0.04%)</title><rect x="256.7" y="453" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="259.68" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.82" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="714.3" y="741" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="717.29" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="328.2" y="549" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="331.21" y="559.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; 0.00%)</title><rect x="1017.1" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.14" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="719.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="813.6" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.56" y="607.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (8 samples, 0.16%; 0.00%)</title><rect x="19.9" y="805" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.86" y="815.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%; +0.02%)</title><rect x="755.3" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.32" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1053.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1056.59" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%; 0.00%)</title><rect x="716.3" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.35" y="783.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (1 samples, 0.02%; 0.00%)</title><rect x="1126.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.04" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.02%)</title><rect x="1017.8" y="453" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1020.83" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="803.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.70" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (56 samples, 1.09%; -0.02%)</title><rect x="740.4" y="677" width="12.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="743.42" y="687.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="18.3" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.25" y="767.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; -0.04%)</title><rect x="982.3" y="565" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="985.29" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="852.3" y="741" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="855.30" y="751.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="655.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="79.0" y="741" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="82.01" y="751.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; -0.02%)</title><rect x="935.5" y="661" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="938.52" y="671.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; +0.02%)</title><rect x="864.2" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.22" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1057.3" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1060.26" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1083.9" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1086.85" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="869" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1030.4" y="549" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.44" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="811.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.03" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (11 samples, 0.21%; 0.00%)</title><rect x="1039.6" y="613" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.61" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="799.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (3 samples, 0.06%; -0.02%)</title><rect x="545.8" y="565" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="548.78" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="57.0" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (6 samples, 0.12%; +0.06%)</title><rect x="1108.6" y="677" width="1.4" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1111.61" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; 0.00%)</title><rect x="913.1" y="629" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="916.05" y="639.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%; 0.00%)</title><rect x="112.2" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.25" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="776.9" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="779.87" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;query::result_set_row, std::allocator&lt;query::result_set_row&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.79" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%; -0.04%)</title><rect x="1029.1" y="565" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1032.06" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="844.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.28" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; 0.00%)</title><rect x="107.4" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.44" y="783.5" ></text>
</g>
<g >
<title>dht::tri_compare (8 samples, 0.16%; 0.00%)</title><rect x="497.2" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="500.18" y="559.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%; 0.00%)</title><rect x="1122.8" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.83" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%; 0.00%)</title><rect x="836.9" y="693" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.94" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%; +0.02%)</title><rect x="73.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.50" y="623.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="527.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; +0.04%)</title><rect x="1006.4" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1009.36" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%; 0.00%)</title><rect x="75.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="623.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_term (2 samples, 0.04%; 0.00%)</title><rect x="72.8" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="655.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.04%)</title><rect x="981.1" y="549" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="984.14" y="559.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="1126.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.72" y="479.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%; +0.02%)</title><rect x="183.8" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="186.78" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.14" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (3 samples, 0.06%; 0.00%)</title><rect x="26.5" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.51" y="527.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="784.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="787.21" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (38 samples, 0.74%; +0.02%)</title><rect x="29.3" y="565" width="8.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.26" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.02%)</title><rect x="1141.9" y="709" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1144.86" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.02%)</title><rect x="510.5" y="565" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="513.47" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (2 samples, 0.04%; +0.04%)</title><rect x="1130.6" y="773" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1133.62" y="783.5" ></text>
</g>
<g >
<title>sstables::sstable::remove_temp_dir (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="767.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::revoke_role_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="67.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.54" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (511 samples, 9.93%; 0.00%)</title><rect x="325.0" y="661" width="117.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.00" y="671.5" >flat_mutation_..</text>
</g>
<g >
<title>row_cache::do_make_reader (34 samples, 0.66%; 0.00%)</title><rect x="538.9" y="613" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.90" y="623.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; +0.02%)</title><rect x="863.5" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="866.53" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="853" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="863.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; -0.02%)</title><rect x="765.4" y="629" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="768.41" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="895.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="788.3" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="791.34" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.04%)</title><rect x="1012.3" y="469" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1015.32" y="479.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; 0.00%)</title><rect x="377.5" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="380.50" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (6 samples, 0.12%; 0.00%)</title><rect x="1119.8" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.85" y="607.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%; +0.02%)</title><rect x="50.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.58" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%; 0.00%)</title><rect x="951.8" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.80" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="859.4" y="789" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="799.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="258.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.75" y="431.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.08%)</title><rect x="805.8" y="533" width="0.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="808.76" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="10.0" y="885" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;read_context::stop (2 samples, 0.04%; 0.00%)</title><rect x="109.5" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="575.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (60 samples, 1.17%; -0.02%)</title><rect x="885.3" y="629" width="13.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="888.31" y="639.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (2 samples, 0.04%; +0.02%)</title><rect x="567.1" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="570.10" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="112.5" y="789" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="115.48" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%; 0.00%)</title><rect x="327.5" y="581" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.52" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%; -0.02%)</title><rect x="831.7" y="677" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="834.67" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1162.5" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1165.49" y="719.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="730.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="733.56" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1163.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.41" y="751.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="696.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.86" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; -0.04%)</title><rect x="858.3" y="789" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="861.26" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; -0.08%)</title><rect x="558.4" y="613" width="2.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="561.39" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.25" y="671.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (161 samples, 3.13%; -0.04%)</title><rect x="774.1" y="629" width="36.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="777.12" y="639.5" >ser..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.73" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="715.7" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.66" y="783.5" ></text>
</g>
<g >
<title>auth::get_permissions (1 samples, 0.02%; -0.02%)</title><rect x="80.2" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="83.15" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="420.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="423.60" y="527.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; +0.02%)</title><rect x="862.8" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.85" y="671.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="607.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="735.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; -0.06%)</title><rect x="601.5" y="693" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="604.49" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="857.8" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="860.80" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="549" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.10%)</title><rect x="442.8" y="613" width="0.5" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="445.84" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (13 samples, 0.25%; 0.00%)</title><rect x="596.7" y="709" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.68" y="719.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="859.4" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.41" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::attach_service_level_statement&gt;, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="66.2" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.17" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (3 samples, 0.06%; 0.00%)</title><rect x="196.2" y="533" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="199.16" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; 0.00%)</title><rect x="760.4" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.37" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="575.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (2 samples, 0.04%; +0.04%)</title><rect x="1007.1" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1010.05" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="657.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="660.66" y="735.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="106.5" y="773" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="109.52" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="550.8" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="553.82" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="45.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="495.5" ></text>
</g>
<g >
<title>abstract_type::from_string (8 samples, 0.16%; 0.00%)</title><rect x="69.6" y="661" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.61" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; +0.02%)</title><rect x="260.1" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="263.12" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (15 samples, 0.29%; -0.02%)</title><rect x="1175.6" y="901" width="3.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1178.56" y="911.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="825.2" y="693" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="828.25" y="703.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; 0.00%)</title><rect x="1024.9" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.93" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (8 samples, 0.16%; 0.00%)</title><rect x="120.5" y="741" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="123.50" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="523.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="526.31" y="527.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="1163.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.18" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="700.3" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.30" y="767.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (30 samples, 0.58%; +0.02%)</title><rect x="1121.7" y="629" width="6.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.68" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.10%; -0.02%)</title><rect x="1150.8" y="741" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1153.80" y="751.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (49 samples, 0.95%; 0.00%)</title><rect x="1167.8" y="917" width="11.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.76" y="927.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (4 samples, 0.08%; +0.06%)</title><rect x="1049.0" y="629" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1052.01" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; -0.02%)</title><rect x="832.6" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="835.58" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.06%)</title><rect x="186.5" y="549" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="189.53" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="57.0" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="926.6" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="929.58" y="687.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%; +0.08%)</title><rect x="536.4" y="613" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="539.38" y="623.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%; 0.00%)</title><rect x="867.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.89" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.02%)</title><rect x="1137.0" y="773" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1140.04" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (398 samples, 7.73%; +0.02%)</title><rect x="334.2" y="549" width="91.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="337.17" y="559.5" >mutation_f..</text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (2 samples, 0.04%; 0.00%)</title><rect x="1116.2" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.18" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.17%; 0.00%)</title><rect x="790.2" y="517" width="13.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.17" y="527.5" ></text>
</g>
<g >
<title>utils::directories::verify_owner_and_mode (1 samples, 0.02%; 0.00%)</title><rect x="716.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.81" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.1" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.07" y="799.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (72 samples, 1.40%; +0.02%)</title><rect x="564.6" y="677" width="16.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="567.58" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1138.4" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1141.42" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="911.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::~path (1 samples, 0.02%; 0.00%)</title><rect x="716.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.81" y="767.5" ></text>
</g>
<g >
<title>auth::resource::resource (11 samples, 0.21%; -0.02%)</title><rect x="766.3" y="677" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="769.33" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="242.7" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="245.70" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%; 0.00%)</title><rect x="62.0" y="613" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="623.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.50" y="415.5" ></text>
</g>
<g >
<title>seastar::posix_file_real_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="431.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (3 samples, 0.06%; +0.04%)</title><rect x="1132.2" y="789" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1135.23" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="703.5" ></text>
</g>
<g >
<title>seastar::priority_class_data::priority_class_data (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="351.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (2 samples, 0.04%; 0.00%)</title><rect x="914.9" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="917.89" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="64.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.56" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="52.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.64" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="1099.9" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.90" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="296.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.35" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (7 samples, 0.14%; -0.02%)</title><rect x="598.1" y="693" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="601.05" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.05" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6 samples, 0.12%; -0.02%)</title><rect x="1141.4" y="725" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1144.40" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (60 samples, 1.17%; 0.00%)</title><rect x="1140.5" y="773" width="13.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.48" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.27%; +0.02%)</title><rect x="722.1" y="757" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="725.08" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (7 samples, 0.14%; -0.02%)</title><rect x="394.9" y="485" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="397.93" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="885" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="895.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; +0.04%)</title><rect x="831.0" y="693" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="833.98" y="703.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (2 samples, 0.04%; +0.04%)</title><rect x="742.3" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="745.26" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="1129.0" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.02" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1138.2" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1141.19" y="783.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (14 samples, 0.27%; 0.00%)</title><rect x="532.5" y="613" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.48" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (4 samples, 0.08%; -0.02%)</title><rect x="529.0" y="565" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="532.04" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="611.3" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="614.35" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="128.5" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="131.53" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="1133.1" y="789" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.14" y="799.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.02%)</title><rect x="635.6" y="773" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="638.65" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; 0.00%)</title><rect x="1149.4" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1152.42" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="618.0" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.00" y="735.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (101 samples, 1.96%; -0.02%)</title><rect x="509.1" y="613" width="23.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="512.10" y="623.5" >m..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.04%)</title><rect x="893.8" y="533" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="896.80" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (10 samples, 0.19%; 0.00%)</title><rect x="865.4" y="645" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.37" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; -0.04%)</title><rect x="295.0" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="297.97" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1059.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1062.09" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (2 samples, 0.04%; +0.04%)</title><rect x="881.6" y="677" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="884.65" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (486 samples, 9.44%; 0.00%)</title><rect x="326.8" y="597" width="111.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.84" y="607.5" >std::__invoke..</text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.33" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (4 samples, 0.08%; 0.00%)</title><rect x="551.7" y="709" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.74" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="904.3" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.34" y="591.5" ></text>
</g>
<g >
<title>db::commitlog::segment::cycle (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="684.3" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.25" y="751.5" ></text>
</g>
<g >
<title>__dynamic_cast (8 samples, 0.16%; +0.08%)</title><rect x="876.4" y="709" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="879.37" y="719.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (278 samples, 5.40%; +0.10%)</title><rect x="971.3" y="645" width="63.7" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="974.29" y="655.5" >service..</text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (6 samples, 0.12%; -0.02%)</title><rect x="804.4" y="549" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="807.39" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.09" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (7 samples, 0.14%; 0.00%)</title><rect x="73.5" y="677" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.50" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.10%; +0.04%)</title><rect x="797.7" y="405" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="800.74" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (6 samples, 0.12%; +0.02%)</title><rect x="775.5" y="581" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="778.50" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="51.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.27" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="805.5" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.53" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.27" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%; 0.00%)</title><rect x="831.0" y="709" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.98" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="667.7" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.75" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.57" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="44.2" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.16" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="861.2" y="773" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="864.24" y="783.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (27 samples, 0.52%; 0.00%)</title><rect x="728.0" y="725" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="731.04" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="27.2" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.19" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="80.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.38" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="570.5" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.54" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="445.1" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="448.14" y="703.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1101.0" y="693" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1104.05" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (18 samples, 0.35%; 0.00%)</title><rect x="72.4" y="709" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.36" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.3" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.28" y="719.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%; +0.02%)</title><rect x="73.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.28" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="320.4" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="323.42" y="655.5" ></text>
</g>
<g >
<title>antlr3::RuleReturnValue&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::RuleReturnValue (1 samples, 0.02%; +0.02%)</title><rect x="52.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.41" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1122.1" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.14" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="255.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="258.08" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="431.2" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="434.15" y="495.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="1025.9" y="517" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1028.85" y="527.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (17 samples, 0.33%; 0.00%)</title><rect x="1013.7" y="453" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.70" y="463.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="575.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (16 samples, 0.31%; +0.02%)</title><rect x="556.8" y="661" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.78" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%; -0.04%)</title><rect x="819.3" y="597" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="822.29" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (7 samples, 0.14%; +0.06%)</title><rect x="1014.8" y="437" width="1.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1017.85" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.62" y="607.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (35 samples, 0.68%; -0.04%)</title><rect x="1121.7" y="773" width="8.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1124.68" y="783.5" ></text>
</g>
<g >
<title>sstables::key::make_key&lt;partition_key_view&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="85.7" y="725" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.66" y="735.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; -0.02%)</title><rect x="1007.5" y="533" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1010.51" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%; 0.00%)</title><rect x="909.4" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="912.39" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::syscall_result&lt;int&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="16.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.88" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.27" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="677" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::set_promise (1 samples, 0.02%; 0.00%)</title><rect x="860.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.55" y="751.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%; +0.02%)</title><rect x="267.2" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.23" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="181.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="184.03" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="729.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.19" y="703.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (2 samples, 0.04%; 0.00%)</title><rect x="866.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.06" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="671.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="674.19" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (3 samples, 0.06%; +0.04%)</title><rect x="987.3" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="990.33" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%; +0.04%)</title><rect x="1058.2" y="597" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1061.18" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="1028.6" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1031.60" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (3 samples, 0.06%; 0.00%)</title><rect x="111.3" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="633.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="636.82" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="639.5" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="642.55" y="751.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="869" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="879.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%; -0.02%)</title><rect x="1085.5" y="677" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1088.46" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (2 samples, 0.04%; 0.00%)</title><rect x="77.4" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.40" y="687.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="783.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (22 samples, 0.43%; 0.00%)</title><rect x="1114.8" y="565" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.80" y="575.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.35" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%; -0.06%)</title><rect x="645.3" y="773" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="648.28" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (5 samples, 0.10%; +0.04%)</title><rect x="708.6" y="693" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="711.55" y="703.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="841.3" y="693" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.30" y="703.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (13 samples, 0.25%; -0.02%)</title><rect x="885.3" y="613" width="3.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="888.31" y="623.5" ></text>
</g>
<g >
<title>free (4 samples, 0.08%; +0.02%)</title><rect x="97.6" y="709" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="100.58" y="719.5" ></text>
</g>
<g >
<title>auth::resource::parent (17 samples, 0.33%; +0.04%)</title><rect x="777.1" y="613" width="3.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="780.10" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="74.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.42" y="591.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%; -0.02%)</title><rect x="808.3" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="811.28" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.80" y="879.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="579.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="582.71" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="719.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="977.2" y="613" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.25" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; -0.02%)</title><rect x="790.2" y="485" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="793.17" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::member_hook::~member_hook (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.48" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="614.3" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="617.33" y="719.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="657.2" y="709" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="660.20" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.42" y="607.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (1 samples, 0.02%; +0.02%)</title><rect x="81.1" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.07" y="799.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="1089.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.35" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="472.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="475.88" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="860.6" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.55" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; +0.02%)</title><rect x="54.5" y="245" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.48" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (20 samples, 0.39%; -0.02%)</title><rect x="671.4" y="773" width="4.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="674.41" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (1 samples, 0.02%; +0.02%)</title><rect x="29.9" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.95" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (291 samples, 5.65%; -0.04%)</title><rect x="759.2" y="709" width="66.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="762.22" y="719.5" >cql3::s..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="44.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.85" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="363.1" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="366.06" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (2 samples, 0.04%; +0.04%)</title><rect x="1043.0" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1046.04" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (4 samples, 0.08%; -0.04%)</title><rect x="301.6" y="613" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="304.62" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::do_resize (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; -0.02%)</title><rect x="651.7" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="654.70" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (5 samples, 0.10%; +0.02%)</title><rect x="174.6" y="565" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="177.61" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="71.9" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.90" y="671.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="866.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.29" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%; 0.00%)</title><rect x="864.7" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.68" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="438.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.72" y="575.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.08%; 0.00%)</title><rect x="1006.1" y="533" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1009.13" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="295.2" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="298.20" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::CqlLexer (1 samples, 0.02%; +0.02%)</title><rect x="110.6" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.65" y="735.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1149.0" y="725" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.96" y="735.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="902.0" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="905.05" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="733.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="736.31" y="623.5" ></text>
</g>
<g >
<title>_setjmp (1 samples, 0.02%; +0.02%)</title><rect x="19.4" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.40" y="799.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%; +0.02%)</title><rect x="821.6" y="597" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.58" y="607.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="997.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1000.65" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; -0.04%)</title><rect x="696.4" y="741" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="699.40" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (7 samples, 0.14%; 0.00%)</title><rect x="816.1" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.08" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="472.9" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="475.88" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="655.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,710 samples, 91.51%; 0.00%)</title><rect x="87.0" y="853" width="1079.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="863.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.02%)</title><rect x="715.2" y="773" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="718.20" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (9 samples, 0.17%; +0.04%)</title><rect x="746.4" y="597" width="2.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="749.38" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="901.6" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.59" y="655.5" ></text>
</g>
<g >
<title>schema::make_column_specification (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (127 samples, 2.47%; 0.00%)</title><rect x="563.9" y="709" width="29.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.89" y="719.5" >st..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; -0.04%)</title><rect x="126.0" y="677" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="129.01" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (11 samples, 0.21%; 0.00%)</title><rect x="815.2" y="677" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.16" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="640.0" y="741" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="643.01" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="143.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="807.1" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.14" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="901.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.36" y="655.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::has_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="22.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.61" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (2 samples, 0.04%; -0.02%)</title><rect x="27.4" y="517" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="30.42" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%; +0.02%)</title><rect x="38.4" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.43" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (2 samples, 0.04%; +0.04%)</title><rect x="1153.3" y="741" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1156.32" y="751.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (53 samples, 1.03%; +0.06%)</title><rect x="483.4" y="597" width="12.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="486.42" y="607.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%; -0.08%)</title><rect x="340.6" y="485" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="343.59" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="878.4" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="881.44" y="719.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%; 0.00%)</title><rect x="949.0" y="693" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.05" y="703.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.10%; -0.02%)</title><rect x="947.9" y="693" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="950.90" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; -0.02%)</title><rect x="57.0" y="501" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="60.00" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; -0.02%)</title><rect x="298.0" y="597" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="300.95" y="607.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (8 samples, 0.16%; +0.04%)</title><rect x="1151.9" y="757" width="1.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1154.94" y="767.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; -0.02%)</title><rect x="203.3" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="206.27" y="495.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="802.3" y="373" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="805.32" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="590.3" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="593.26" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (3 samples, 0.06%; -0.04%)</title><rect x="467.6" y="549" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="470.60" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="1147.4" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1150.36" y="703.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.16%; 0.00%)</title><rect x="40.7" y="645" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.04%)</title><rect x="791.8" y="501" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="794.78" y="511.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; -0.04%)</title><rect x="839.2" y="645" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="842.23" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="758.8" y="693" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="761.76" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::submit_io_write (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (9 samples, 0.17%; -0.04%)</title><rect x="899.1" y="613" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="902.07" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="975.2" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="978.18" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; 0.00%)</title><rect x="1125.1" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.12" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="201.4" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="204.43" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (53 samples, 1.03%; -0.08%)</title><rect x="459.8" y="597" width="12.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="462.81" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="725.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.29" y="767.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (1 samples, 0.02%; +0.02%)</title><rect x="1113.4" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1116.43" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; +0.04%)</title><rect x="679.2" y="741" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="682.21" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1100.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1103.36" y="703.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%; 0.00%)</title><rect x="1163.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.18" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="687.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="201.0" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="203.97" y="479.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="17.6" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.57" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="306.2" y="613" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="309.20" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (28 samples, 0.54%; +0.04%)</title><rect x="584.3" y="661" width="6.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="587.30" y="671.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="48.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.43%; -0.06%)</title><rect x="148.7" y="725" width="5.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="151.70" y="735.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (18 samples, 0.35%; +0.06%)</title><rect x="917.2" y="645" width="4.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="920.18" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (72 samples, 1.40%; +0.02%)</title><rect x="399.7" y="469" width="16.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="402.74" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="646.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="649.65" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="298.6" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="301.64" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="971.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.06" y="655.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="481.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="484.82" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (6 samples, 0.12%; -0.06%)</title><rect x="241.6" y="405" width="1.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="244.55" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="863.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1125.8" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.81" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%; 0.00%)</title><rect x="241.6" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="244.55" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (3 samples, 0.06%; +0.04%)</title><rect x="969.0" y="645" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="971.99" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="671.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%; +0.02%)</title><rect x="82.4" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.45" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="671.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="512.8" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.77" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="38.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.66" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="495.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="101.2" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="104.25" y="751.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; +0.02%)</title><rect x="961.9" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="964.89" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; +0.02%)</title><rect x="87.7" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.72" y="815.5" ></text>
</g>
<g >
<title>seastar::create_scheduling_group (1 samples, 0.02%; 0.00%)</title><rect x="112.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.02" y="783.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%; +0.02%)</title><rect x="1162.7" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1165.72" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="523.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.77" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="1096.7" y="693" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1099.69" y="703.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%; +0.02%)</title><rect x="771.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.37" y="655.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="757.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.39" y="655.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%; 0.00%)</title><rect x="273.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.42" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (34 samples, 0.66%; -0.02%)</title><rect x="861.5" y="741" width="7.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="864.47" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="849.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="852.78" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="673.7" y="725" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="676.71" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="975.6" y="549" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="978.64" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.14%; 0.00%)</title><rect x="831.4" y="693" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.44" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="47.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.83" y="575.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%; -0.06%)</title><rect x="345.2" y="453" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="348.18" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="301.2" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="304.16" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="495.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (27 samples, 0.52%; 0.00%)</title><rect x="499.0" y="533" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="502.01" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="935.5" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.52" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;, column_kind&amp;, unsigned int&amp;, column_view_virtual&amp;, std::unique_ptr&lt;column_computation, std::default_delete&lt;column_computation&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="511.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="1115.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.72" y="431.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="560.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="563.22" y="607.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (10 samples, 0.19%; +0.02%)</title><rect x="774.8" y="613" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="777.81" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; 0.00%)</title><rect x="524.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.23" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="508.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="511.87" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (9 samples, 0.17%; 0.00%)</title><rect x="526.3" y="533" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="529.29" y="543.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="505.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="508.20" y="559.5" ></text>
</g>
<g >
<title>sstables::sstable::seal_sstable (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%; 0.00%)</title><rect x="46.7" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="559.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (15 samples, 0.29%; +0.04%)</title><rect x="842.7" y="709" width="3.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="845.67" y="719.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%; +0.04%)</title><rect x="673.0" y="725" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="676.02" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="345.6" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="348.64" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="928.2" y="677" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="931.19" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (2 samples, 0.04%; 0.00%)</title><rect x="61.6" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="367.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%; +0.04%)</title><rect x="148.2" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="151.24" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="399.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="340.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.36" y="495.5" ></text>
</g>
<g >
<title>utils::utf8::validate (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="763.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="766.12" y="607.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="356.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.41" y="479.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="748.7" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="751.67" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="639.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="943.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="863.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%; -0.04%)</title><rect x="482.0" y="613" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="485.05" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (69 samples, 1.34%; 0.00%)</title><rect x="788.3" y="549" width="15.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.34" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="614.3" y="693" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="617.33" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="521.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="524.71" y="527.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; 0.00%)</title><rect x="775.7" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.73" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="862.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.16" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="1157.0" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1159.99" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (10 samples, 0.19%; +0.02%)</title><rect x="974.0" y="629" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="977.04" y="639.5" ></text>
</g>
<g >
<title>seastar::priority_class_data::register_stats (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="335.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1057.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1060.72" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="825.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="828.02" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%; -0.02%)</title><rect x="838.5" y="661" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="841.54" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (3 samples, 0.06%; +0.04%)</title><rect x="1027.9" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1030.91" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="192.9" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="195.95" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="850.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.01" y="719.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="687.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (3 samples, 0.06%; +0.04%)</title><rect x="269.1" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="272.06" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; -0.02%)</title><rect x="938.3" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="941.27" y="703.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%; 0.00%)</title><rect x="1163.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.18" y="783.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="511.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="911.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="579.0" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="582.02" y="591.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1078.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1081.58" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.10%; +0.02%)</title><rect x="1045.1" y="581" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.11" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (711 samples, 13.81%; -0.04%)</title><rect x="159.5" y="693" width="163.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="162.48" y="703.5" >flat_mutation_reader:..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="55.2" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.16" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (506 samples, 9.83%; -0.02%)</title><rect x="325.5" y="613" width="116.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="328.46" y="623.5" >seastar::inter..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (5 samples, 0.10%; +0.06%)</title><rect x="146.9" y="709" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="149.87" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="735.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%; 0.00%)</title><rect x="419.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="422.23" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1130.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.16" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="983.7" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="986.67" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="325.9" y="565" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="328.92" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_charPositionInLine (1 samples, 0.02%; +0.02%)</title><rect x="31.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="34.09" y="543.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; +0.02%)</title><rect x="10.2" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.23" y="815.5" ></text>
</g>
<g >
<title>db::commitlog::segment::cycle (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="559.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (11 samples, 0.21%; +0.16%)</title><rect x="277.3" y="469" width="2.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="280.32" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1032.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.27" y="495.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="703.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="383.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="751.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="315.1" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="318.14" y="591.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (2 samples, 0.04%; +0.02%)</title><rect x="1117.6" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.55" y="479.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="885.3" y="597" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.31" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (9 samples, 0.17%; 0.00%)</title><rect x="558.4" y="645" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.39" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="823.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.96" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; +0.04%)</title><rect x="1081.1" y="645" width="2.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1084.10" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; 0.00%)</title><rect x="799.8" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.80" y="415.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (4 samples, 0.08%; -0.04%)</title><rect x="634.0" y="773" width="1.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="637.05" y="783.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%; -0.02%)</title><rect x="460.7" y="581" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="463.72" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; 0.00%)</title><rect x="742.7" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.71" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="43.7" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.70" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (73 samples, 1.42%; +0.08%)</title><rect x="1060.5" y="613" width="16.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1063.47" y="623.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (2 samples, 0.04%; +0.04%)</title><rect x="134.3" y="741" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="137.26" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1162.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.26" y="719.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (18 samples, 0.35%; -0.04%)</title><rect x="474.7" y="597" width="4.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="477.71" y="607.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; +0.02%)</title><rect x="606.3" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="609.30" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.08%)</title><rect x="255.3" y="437" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="258.31" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.99" y="767.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictionsL11has_eq_nullERKNS4_13query_optionsERKNS5_10expressionEE3$_8EES8_SI_T_EUlRS7_E_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_8constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_11conjunctionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_12column_valueEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_5tokenEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13function_callEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4castEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_15field_selectionEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_4nullEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_13bind_variableEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_16untyped_constantEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_17tuple_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_22collection_constructorEE_ZNSB_ISJ_EES8_SI_SK_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSR_S6_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_SN_S1Z_S23_S27_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2C_S2F_ (4 samples, 0.08%; 0.00%)</title><rect x="861.9" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="623.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%; 0.00%)</title><rect x="1118.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.70" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="46.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (3 samples, 0.06%; 0.00%)</title><rect x="109.5" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%; -0.02%)</title><rect x="910.1" y="661" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="913.07" y="671.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="837" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="661" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="441.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.47" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="948.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="951.82" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;partition_key, clustering_key_prefix&gt;, std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt;, cql3::update_parameters::prefetch_data::key_less, std::allocator&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt; &gt;::_M_erase (1 samples, 0.02%; +0.02%)</title><rect x="868.3" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.35" y="687.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%; +0.02%)</title><rect x="700.5" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.53" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%; +0.06%)</title><rect x="630.8" y="677" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="633.84" y="687.5" ></text>
</g>
<g >
<title>schema::get_column_definition (2 samples, 0.04%; 0.00%)</title><rect x="76.5" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.49" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="297.3" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="300.26" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (70 samples, 1.36%; 0.00%)</title><rect x="885.1" y="645" width="16.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.08" y="655.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="926.4" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="929.35" y="687.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.39" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="563.4" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="566.43" y="719.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="651.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.70" y="703.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="571.2" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="574.23" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (4 samples, 0.08%; +0.06%)</title><rect x="711.1" y="725" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="714.08" y="735.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (2 samples, 0.04%; 0.00%)</title><rect x="1089.8" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.81" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (9 samples, 0.17%; 0.00%)</title><rect x="35.7" y="549" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.68" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.31" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="668.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.43" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="645.7" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.74" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (19 samples, 0.37%; -0.02%)</title><rect x="427.3" y="501" width="4.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="430.25" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (9 samples, 0.17%; +0.02%)</title><rect x="922.7" y="677" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="925.68" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%; +0.02%)</title><rect x="53.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.79" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (7 samples, 0.14%; +0.02%)</title><rect x="1141.2" y="741" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1144.17" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.06%)</title><rect x="218.4" y="421" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="221.40" y="431.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%; 0.00%)</title><rect x="280.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="283.53" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; +0.08%)</title><rect x="332.6" y="549" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="335.57" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; -0.04%)</title><rect x="838.5" y="645" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="841.54" y="655.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.14%; 0.00%)</title><rect x="844.3" y="693" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.28" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="73.7" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.73" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (3 samples, 0.06%; +0.04%)</title><rect x="349.1" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="352.08" y="511.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (29 samples, 0.56%; -0.02%)</title><rect x="593.0" y="725" width="6.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="596.01" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; +0.06%)</title><rect x="299.8" y="613" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="302.78" y="623.5" ></text>
</g>
<g >
<title>auth::resource::resource (9 samples, 0.17%; 0.00%)</title><rect x="766.3" y="661" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.33" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="581" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%; +0.02%)</title><rect x="590.0" y="645" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="593.03" y="655.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="80.8" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.84" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="441.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.01" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.04%)</title><rect x="531.6" y="597" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="534.57" y="607.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.10" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="543.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.49" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="61.6" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.58" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="112.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.02" y="767.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; -0.04%)</title><rect x="203.5" y="501" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="206.50" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (13 samples, 0.25%; -0.04%)</title><rect x="621.2" y="693" width="3.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="624.21" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="535.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="538.92" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="131.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.51" y="751.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; +0.02%)</title><rect x="709.7" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="712.70" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (5 samples, 0.10%; +0.10%)</title><rect x="834.6" y="725" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="837.65" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.04%)</title><rect x="1089.6" y="645" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1092.58" y="655.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (10 samples, 0.19%; +0.02%)</title><rect x="755.6" y="677" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.55" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="348.8" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="351.85" y="447.5" ></text>
</g>
<g >
<title>row::compact_and_expire (85 samples, 1.65%; +0.02%)</title><rect x="397.7" y="501" width="19.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="400.68" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="543.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="109.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (2 samples, 0.04%; +0.02%)</title><rect x="1020.1" y="501" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.12" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="591.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (2 samples, 0.04%; 0.00%)</title><rect x="970.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="973.60" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (6 samples, 0.12%; +0.10%)</title><rect x="265.9" y="453" width="1.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="268.85" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%; +0.02%)</title><rect x="568.9" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.94" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; +0.06%)</title><rect x="1024.9" y="533" width="1.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1027.93" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (34 samples, 0.66%; 0.00%)</title><rect x="861.5" y="757" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.47" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="296.6" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="299.57" y="575.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="559.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="742.7" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.71" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.12%; +0.02%)</title><rect x="823.6" y="629" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="826.64" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="59.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.29" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="935.5" y="613" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="938.52" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="787.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.42" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (9 samples, 0.17%; +0.04%)</title><rect x="731.3" y="597" width="2.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="734.25" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="562.7" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.75" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; -0.04%)</title><rect x="348.2" y="469" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="351.16" y="479.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (26 samples, 0.51%; +0.02%)</title><rect x="706.0" y="741" width="6.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="709.03" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.06%)</title><rect x="1021.5" y="485" width="2.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1024.49" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.04%)</title><rect x="242.0" y="389" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="245.01" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; -0.04%)</title><rect x="882.1" y="693" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="885.10" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="757.8" y="677" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="760.85" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (30 samples, 0.58%; +0.02%)</title><rect x="425.9" y="533" width="6.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="428.88" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%; +0.02%)</title><rect x="714.7" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="717.74" y="751.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (12 samples, 0.23%; -0.02%)</title><rect x="379.3" y="453" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="382.34" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (11 samples, 0.21%; +0.06%)</title><rect x="390.3" y="453" width="2.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="393.34" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="725.5" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.52" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="735.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (8 samples, 0.16%; 0.00%)</title><rect x="46.0" y="597" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.99" y="607.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (1 samples, 0.02%; -0.02%)</title><rect x="1127.2" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1130.18" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.10%; +0.06%)</title><rect x="756.5" y="661" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="759.47" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1107.0" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1110.01" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="284.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="287.42" y="543.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="771.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.60" y="655.5" ></text>
</g>
<g >
<title>dht::shard_of (5 samples, 0.10%; +0.02%)</title><rect x="996.5" y="565" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="999.50" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (8 samples, 0.16%; -0.02%)</title><rect x="678.3" y="773" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="681.29" y="783.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.35%; 0.00%)</title><rect x="1124.4" y="549" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="559.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; -0.02%)</title><rect x="175.3" y="549" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="178.30" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (16 samples, 0.31%; +0.08%)</title><rect x="586.4" y="645" width="3.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="589.36" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%; +0.02%)</title><rect x="1127.6" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.64" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="543.9" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.95" y="607.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; 0.00%)</title><rect x="122.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="125.11" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.02%)</title><rect x="378.2" y="453" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="381.19" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="671.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.56" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="79.9" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.92" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (2 samples, 0.04%; +0.04%)</title><rect x="25.6" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="28.59" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.54" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; -0.10%)</title><rect x="926.1" y="645" width="0.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="929.12" y="655.5" ></text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="863.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; +0.02%)</title><rect x="209.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="212.69" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%; 0.00%)</title><rect x="819.1" y="629" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.06" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (437 samples, 8.49%; 0.00%)</title><rect x="448.3" y="677" width="100.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="451.34" y="687.5" >std::functio..</text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.77" y="671.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.16%; -0.06%)</title><rect x="433.7" y="533" width="1.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="436.67" y="543.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.9" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.89" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_end (1 samples, 0.02%; 0.00%)</title><rect x="715.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.89" y="751.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (3 samples, 0.06%; 0.00%)</title><rect x="21.7" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="1129.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.02" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (2 samples, 0.04%; +0.04%)</title><rect x="981.4" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="984.37" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="834.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="837.19" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="520.1" y="549" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="523.10" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="725" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="735.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (4 samples, 0.08%; 0.00%)</title><rect x="863.5" y="661" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.53" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="501.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.76" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (6 samples, 0.12%; 0.00%)</title><rect x="853.7" y="741" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.68" y="751.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="507.0" y="613" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="510.04" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="900.4" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="903.44" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.10%; 0.00%)</title><rect x="48.7" y="517" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="527.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1056.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1059.34" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="45.3" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="48.31" y="447.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (6 samples, 0.12%; +0.04%)</title><rect x="99.9" y="693" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="102.87" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (6 samples, 0.12%; +0.08%)</title><rect x="615.5" y="725" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="618.48" y="735.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (5 samples, 0.10%; +0.02%)</title><rect x="1165.2" y="789" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.24" y="799.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%; 0.00%)</title><rect x="35.4" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.45" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="973.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.81" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="176.9" y="549" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="179.90" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="820.4" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="823.43" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="796.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.59" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="813.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.78" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (21 samples, 0.41%; +0.02%)</title><rect x="96.4" y="741" width="4.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="99.43" y="751.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (9 samples, 0.17%; 0.00%)</title><rect x="785.6" y="549" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.59" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%; +0.02%)</title><rect x="31.3" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="34.32" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="541.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.19" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="817.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.68" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1127.2" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.18" y="479.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%; +0.04%)</title><rect x="526.3" y="517" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="529.29" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; -0.02%)</title><rect x="52.2" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="55.18" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (4 samples, 0.08%; +0.02%)</title><rect x="127.6" y="677" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="130.61" y="687.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="767.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (14 samples, 0.27%; +0.12%)</title><rect x="250.3" y="405" width="3.2" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="253.26" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="653.1" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.07" y="767.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="506.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="509.12" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (2 samples, 0.04%; 0.00%)</title><rect x="77.4" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.40" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="77.2" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.17" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="853.9" y="709" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="856.91" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; +0.02%)</title><rect x="109.7" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.73" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.16%; +0.04%)</title><rect x="1146.7" y="709" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1149.67" y="719.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="639.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.14%; -0.04%)</title><rect x="200.1" y="501" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="203.06" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; -0.04%)</title><rect x="312.4" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="315.39" y="591.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::batch_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="67.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.09" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (18 samples, 0.35%; 0.00%)</title><rect x="1103.3" y="693" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1106.34" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="808.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.05" y="575.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set_row::get_view (1 samples, 0.02%; 0.00%)</title><rect x="635.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.96" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.86" y="655.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="1163.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.41" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (12 samples, 0.23%; 0.00%)</title><rect x="25.4" y="581" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="479.5" ></text>
</g>
<g >
<title>schema_builder::with_column (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1115.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.33" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%; 0.00%)</title><rect x="1123.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.29" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="479.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (33 samples, 0.64%; 0.00%)</title><rect x="1114.1" y="773" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.12" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.09" y="655.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="852.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.76" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="817.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.68" y="671.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%; -0.04%)</title><rect x="346.1" y="469" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="349.09" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (23 samples, 0.45%; +0.02%)</title><rect x="635.2" y="789" width="5.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="638.19" y="799.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (15 samples, 0.29%; -0.06%)</title><rect x="32.0" y="549" width="3.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="35.01" y="559.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.02%)</title><rect x="893.3" y="549" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="896.34" y="559.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (4 samples, 0.08%; +0.02%)</title><rect x="279.8" y="469" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="282.84" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (31 samples, 0.60%; 0.00%)</title><rect x="1114.6" y="677" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.57" y="687.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="63.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.42" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (30 samples, 0.58%; -0.02%)</title><rect x="796.1" y="469" width="6.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="799.13" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="598.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="601.51" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%; 0.00%)</title><rect x="396.1" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="399.07" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::remove_file (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (16 samples, 0.31%; -0.02%)</title><rect x="60.4" y="645" width="3.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="63.44" y="655.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="785.8" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.82" y="543.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%; +0.02%)</title><rect x="1120.5" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.53" y="559.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="839.2" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.23" y="671.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%; 0.00%)</title><rect x="1119.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.62" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="563.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.66" y="719.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="831.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%; 0.00%)</title><rect x="1118.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.01" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="44.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.62" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.02%)</title><rect x="1007.5" y="517" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1010.51" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="671.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.96" y="767.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="653.5" y="741" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="656.53" y="751.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.08%)</title><rect x="535.7" y="613" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="538.69" y="623.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (17 samples, 0.33%; -0.02%)</title><rect x="890.6" y="565" width="3.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="893.59" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="860.1" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.10" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (9 samples, 0.17%; 0.00%)</title><rect x="684.5" y="757" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.48" y="767.5" ></text>
</g>
<g >
<title>dht::minimum_token (2 samples, 0.04%; +0.04%)</title><rect x="458.7" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="461.66" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="200.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="203.29" y="495.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="1124.9" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.89" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1129.0" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.02" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="561.1" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.14" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1018.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.06" y="447.5" ></text>
</g>
<g >
<title>seastar::file::dma_write_impl (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="926.8" y="677" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="929.81" y="687.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="66.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.86" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (2 samples, 0.04%; +0.04%)</title><rect x="720.2" y="789" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="723.25" y="799.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::~metric_groups (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; 0.00%)</title><rect x="837.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.17" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;db::rp_handle&gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="1121.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.99" y="559.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.16%; +0.08%)</title><rect x="243.8" y="405" width="1.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="246.84" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (4 samples, 0.08%; -0.04%)</title><rect x="25.4" y="501" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="28.36" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (4 samples, 0.08%; 0.00%)</title><rect x="73.7" y="613" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.73" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="789.5" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="792.48" y="527.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="591.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="814.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.01" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="49.4" y="437" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="52.43" y="447.5" ></text>
</g>
<g >
<title>freeze (10 samples, 0.19%; 0.00%)</title><rect x="1124.4" y="485" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.43" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (50 samples, 0.97%; 0.00%)</title><rect x="909.8" y="677" width="11.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="912.84" y="687.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flush_accounter::operator (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="84.7" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.74" y="623.5" ></text>
</g>
<g >
<title>table::query (3 samples, 0.06%; 0.00%)</title><rect x="1163.2" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.18" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="320.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="323.88" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (40 samples, 0.78%; -0.02%)</title><rect x="310.3" y="613" width="9.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="313.33" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (4 samples, 0.08%; 0.00%)</title><rect x="46.7" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="847.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="192.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="195.72" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="18.0" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.02" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="297.7" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="300.72" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,254 samples, 43.79%; -0.12%)</title><rect x="115.2" y="773" width="516.8" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="118.23" y="783.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="720.0" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="723.02" y="799.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::attributes&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="647.1" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="650.11" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; 0.00%)</title><rect x="827.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.08" y="703.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (417 samples, 8.10%; +0.17%)</title><rect x="734.2" y="725" width="95.6" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="737.23" y="735.5" >cql3::query..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1032.3" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1035.27" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (2 samples, 0.04%; +0.02%)</title><rect x="21.7" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.69" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (4 samples, 0.08%; +0.06%)</title><rect x="125.1" y="677" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="128.09" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="57.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.23" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="302.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="305.76" y="639.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mX (1 samples, 0.02%; +0.02%)</title><rect x="35.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.22" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="934.1" y="645" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="937.15" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="688.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.61" y="783.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="72.1" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.13" y="671.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1054.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1057.05" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="824.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="827.56" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="143.9" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.89" y="735.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="559.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="693" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="703.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; 0.00%)</title><rect x="741.3" y="645" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.34" y="655.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%; -0.04%)</title><rect x="566.9" y="629" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="569.87" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (5 samples, 0.10%; +0.08%)</title><rect x="500.6" y="501" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="503.62" y="511.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%; +0.02%)</title><rect x="27.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.65" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.08%)</title><rect x="886.5" y="565" width="0.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="889.46" y="575.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%; +0.04%)</title><rect x="604.0" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="607.01" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1164.1" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1167.09" y="799.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="1122.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.37" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="864.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.68" y="623.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="591.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.04%)</title><rect x="838.8" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="841.77" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="816.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.31" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="322.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.25" y="671.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="284.0" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="286.97" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.08%)</title><rect x="318.8" y="581" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="321.81" y="591.5" ></text>
</g>
<g >
<title>_Unwind_IteratePhdrCallback (1 samples, 0.02%; +0.02%)</title><rect x="11.4" y="885" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.38" y="895.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%; +0.04%)</title><rect x="916.7" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="919.72" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="436.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="439.19" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="613.4" y="725" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="616.41" y="735.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="831.9" y="661" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="834.90" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (54 samples, 1.05%; 0.00%)</title><rect x="702.8" y="773" width="12.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.82" y="783.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="456.1" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="459.14" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1057.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1060.95" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.25%; +0.02%)</title><rect x="25.1" y="597" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.13" y="607.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; +0.02%)</title><rect x="629.7" y="677" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="632.69" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%; 0.00%)</title><rect x="75.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%; +0.02%)</title><rect x="763.8" y="693" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="766.81" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (36 samples, 0.70%; -0.06%)</title><rect x="231.2" y="373" width="8.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="234.24" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (2 samples, 0.04%; -0.02%)</title><rect x="74.7" y="629" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="77.65" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (2 samples, 0.04%; 0.00%)</title><rect x="51.5" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.50" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_get_map_allocator (1 samples, 0.02%; 0.00%)</title><rect x="27.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.42" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="643.4" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="646.44" y="767.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="463.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_type (1 samples, 0.02%; 0.00%)</title><rect x="31.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.55" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.93" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="831.9" y="645" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="834.90" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="383.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="609.3" y="693" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.29" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (5 samples, 0.10%; 0.00%)</title><rect x="656.7" y="741" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.74" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%; 0.00%)</title><rect x="1087.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1090.29" y="703.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="524.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.00" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; 0.00%)</title><rect x="494.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.66" y="575.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="662.9" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.93" y="783.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="64.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.79" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="543.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.72" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.04%)</title><rect x="811.5" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="814.49" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="859.2" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.18" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; 0.00%)</title><rect x="259.9" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.89" y="447.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="885" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="895.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="719.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="895.9" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="898.86" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="664.5" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="667.54" y="735.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="322.5" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.48" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; -0.04%)</title><rect x="730.6" y="597" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="733.56" y="607.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="897.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="900.01" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%; -0.02%)</title><rect x="268.6" y="501" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="271.61" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (3 samples, 0.06%; -0.02%)</title><rect x="321.1" y="645" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="324.11" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (2 samples, 0.04%; 0.00%)</title><rect x="22.8" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.84" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (5 samples, 0.10%; -0.02%)</title><rect x="741.6" y="629" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="744.57" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (279 samples, 5.42%; 0.00%)</title><rect x="18.9" y="853" width="64.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="863.5" >std::_F..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (13 samples, 0.25%; -0.02%)</title><rect x="644.6" y="789" width="3.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="647.59" y="799.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="821" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="831.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.50" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.73" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (620 samples, 12.05%; 0.00%)</title><rect x="165.2" y="645" width="142.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="168.21" y="655.5" >mutation_fragment_..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="45.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="511.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; 0.00%)</title><rect x="625.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.56" y="735.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="417.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.17" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="63.6" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.65" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="254.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.39" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="709" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,057 samples, 20.54%; -0.02%)</title><rect x="871.6" y="757" width="242.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="874.56" y="767.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>mutation_fragment::destroy_data (33 samples, 0.64%; -0.02%)</title><rect x="425.4" y="549" width="7.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="428.42" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (339 samples, 6.59%; +0.10%)</title><rect x="193.2" y="549" width="77.7" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="196.18" y="559.5" >partitio..</text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (6 samples, 0.12%; +0.02%)</title><rect x="923.1" y="661" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="926.14" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="317.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="320.67" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="839.9" y="693" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="842.92" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="815.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="109.0" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_anonymous_memory (1 samples, 0.02%; +0.02%)</title><rect x="1166.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.62" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.3" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="809.4" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="812.43" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,709 samples, 91.49%; 0.00%)</title><rect x="87.0" y="837" width="1079.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.03" y="847.5" >seastar::reactor::run</text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (9 samples, 0.17%; 0.00%)</title><rect x="761.7" y="661" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.74" y="671.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (9 samples, 0.17%; +0.02%)</title><rect x="394.5" y="501" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="397.47" y="511.5" ></text>
</g>
<g >
<title>abstract_type::from_string (1 samples, 0.02%; 0.00%)</title><rect x="72.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="686.1" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="689.09" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (38 samples, 0.74%; +0.06%)</title><rect x="649.2" y="773" width="8.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="652.18" y="783.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (2 samples, 0.04%; +0.02%)</title><rect x="862.4" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.39" y="591.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%; 0.00%)</title><rect x="689.5" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.53" y="783.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (36 samples, 0.70%; +0.04%)</title><rect x="520.8" y="549" width="8.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="523.79" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="552.7" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.66" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="860.1" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.10" y="751.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.89%; +0.02%)</title><rect x="28.1" y="581" width="10.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.11" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="79.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.83" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="85.0" y="773" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="286.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="289.72" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="19.2" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.17" y="815.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (4 samples, 0.08%; 0.00%)</title><rect x="861.9" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.06%)</title><rect x="767.5" y="629" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="770.47" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="821" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="831.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%; +0.02%)</title><rect x="1163.6" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.64" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="55.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.85" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="645.0" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.05" y="767.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.10%; 0.00%)</title><rect x="1126.7" y="501" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.72" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; +0.02%)</title><rect x="322.0" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.02" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="560.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="563.91" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (361 samples, 7.01%; +0.06%)</title><rect x="338.1" y="533" width="82.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="341.07" y="543.5" >flat_muta..</text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (6 samples, 0.12%; -0.06%)</title><rect x="128.8" y="693" width="1.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="131.76" y="703.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="751.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%; -0.02%)</title><rect x="844.5" y="661" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="847.51" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="1148.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.27" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="450.6" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="453.64" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (32 samples, 0.62%; +0.02%)</title><rect x="1114.3" y="741" width="7.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.34" y="751.5" ></text>
</g>
<g >
<title>seastar::reactor::fdatasync (1 samples, 0.02%; 0.00%)</title><rect x="1165.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.47" y="767.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="827.5" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="830.54" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="48.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.52" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1128.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.56" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (1 samples, 0.02%; +0.02%)</title><rect x="1140.7" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.71" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="636.1" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.11" y="783.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="799.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.04%)</title><rect x="839.2" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="842.23" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (34 samples, 0.66%; 0.00%)</title><rect x="1088.7" y="693" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1091.67" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%; -0.04%)</title><rect x="322.0" y="677" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="325.02" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.02%)</title><rect x="434.8" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="437.82" y="527.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="715.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="717.97" y="767.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (61 samples, 1.19%; -0.02%)</title><rect x="1010.5" y="533" width="14.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1013.49" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="632.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.98" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; +0.02%)</title><rect x="537.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="540.30" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; -0.02%)</title><rect x="881.6" y="693" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="884.65" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; +0.02%)</title><rect x="195.9" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="198.93" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="61.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.35" y="591.5" ></text>
</g>
<g >
<title>sstables::write_cell_value&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.20" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%; +0.02%)</title><rect x="288.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.78" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%; +0.02%)</title><rect x="254.2" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="257.16" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.25%; 0.00%)</title><rect x="83.6" y="901" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="911.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%; +0.02%)</title><rect x="318.4" y="597" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="321.35" y="607.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%; +0.06%)</title><rect x="583.1" y="661" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="586.15" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (248 samples, 4.82%; +0.02%)</title><rect x="22.4" y="773" width="56.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.38" y="783.5" >cql3::..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="591.5" ></text>
</g>
<g >
<title>utils::utf8::validate_with_error_position (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.15" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%; -0.06%)</title><rect x="441.0" y="549" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="444.01" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="629.9" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.92" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%; 0.00%)</title><rect x="476.3" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="479.31" y="559.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (3 samples, 0.06%; -0.04%)</title><rect x="942.4" y="693" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="945.40" y="703.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; 0.00%)</title><rect x="790.2" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.17" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; +0.02%)</title><rect x="474.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="477.48" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (2 samples, 0.04%; 0.00%)</title><rect x="860.6" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.55" y="799.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="74.4" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.42" y="511.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="507.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="510.49" y="607.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (9 samples, 0.17%; +0.04%)</title><rect x="933.7" y="677" width="2.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="936.69" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="41.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.18" y="607.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (17 samples, 0.33%; +0.02%)</title><rect x="374.3" y="453" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="377.29" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; +0.04%)</title><rect x="94.4" y="773" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="97.37" y="783.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="719.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1115.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.26" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%; -0.06%)</title><rect x="654.9" y="757" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="657.91" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; +0.02%)</title><rect x="44.2" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.16" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.06%)</title><rect x="642.1" y="773" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="645.07" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; -0.02%)</title><rect x="1098.5" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1101.53" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="18.0" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.02" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (2 samples, 0.04%; 0.00%)</title><rect x="887.1" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.15" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; -0.02%)</title><rect x="571.0" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="574.00" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="296.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="299.57" y="559.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%; +0.04%)</title><rect x="503.8" y="485" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="506.83" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.10%; +0.02%)</title><rect x="126.5" y="677" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="129.46" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.27" y="559.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (21 samples, 0.41%; -0.12%)</title><rect x="754.4" y="709" width="4.8" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="757.41" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.88" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (32 samples, 0.62%; -0.02%)</title><rect x="1144.6" y="757" width="7.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1147.61" y="767.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (5 samples, 0.10%; -0.04%)</title><rect x="357.1" y="469" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="360.10" y="479.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="860.1" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.10" y="783.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (10 samples, 0.19%; 0.00%)</title><rect x="315.6" y="581" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="318.60" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="52.6" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.64" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="1121.9" y="581" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.91" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (3 samples, 0.06%; +0.04%)</title><rect x="126.9" y="661" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="129.92" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (4 samples, 0.08%; 0.00%)</title><rect x="646.7" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.12" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="245.4" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="248.45" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="662.5" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.47" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (56 samples, 1.09%; -0.08%)</title><rect x="226.7" y="389" width="12.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="229.65" y="399.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (517 samples, 10.04%; -0.10%)</title><rect x="727.6" y="741" width="118.5" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="730.58" y="751.5" >single_node_cq..</text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="802.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.32" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; +0.02%)</title><rect x="710.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="713.39" y="703.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::attach_service_level_statement*, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (2 samples, 0.04%; 0.00%)</title><rect x="66.2" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.17" y="623.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="696.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.86" y="719.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; -0.02%)</title><rect x="1127.0" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1129.95" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.04%)</title><rect x="631.8" y="757" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="634.75" y="767.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%; +0.02%)</title><rect x="956.2" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="959.16" y="671.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="303.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.50" y="431.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1079.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1082.27" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="79.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.01" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%; 0.00%)</title><rect x="121.9" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.88" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1116.6" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.64" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (36 samples, 0.70%; +0.08%)</title><rect x="553.1" y="693" width="8.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="556.12" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.13" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="686.5" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="689.55" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="956.6" y="645" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="959.61" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.02%)</title><rect x="557.0" y="629" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="560.01" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="1113.7" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1116.66" y="735.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%; +0.02%)</title><rect x="39.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.12" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.48" y="463.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (6 samples, 0.12%; -0.02%)</title><rect x="1055.2" y="581" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1058.20" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="399.5" ></text>
</g>
<g >
<title>checked_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="131.0" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.05" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (5 samples, 0.10%; +0.06%)</title><rect x="577.6" y="549" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="580.65" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (4 samples, 0.08%; +0.02%)</title><rect x="903.7" y="613" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.65" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="677" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (32 samples, 0.62%; -0.04%)</title><rect x="122.8" y="709" width="7.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="125.80" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="634.0" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.05" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.08%; -0.02%)</title><rect x="473.6" y="581" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="476.56" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="478.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="481.61" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="646.7" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="751.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="895.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="443.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="446.53" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%; +0.02%)</title><rect x="459.3" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="462.35" y="607.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%; +0.02%)</title><rect x="86.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.34" y="735.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="575.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (4 samples, 0.08%; -0.06%)</title><rect x="1089.4" y="661" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1092.35" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="74.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.42" y="543.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; 0.00%)</title><rect x="575.4" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.35" y="575.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%; 0.00%)</title><rect x="111.3" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%; -0.02%)</title><rect x="544.2" y="597" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="547.18" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="425.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="427.96" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (18 samples, 0.35%; +0.04%)</title><rect x="748.9" y="597" width="4.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="751.90" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%; -0.02%)</title><rect x="840.8" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="843.84" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="62.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.27" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (15 samples, 0.29%; -0.06%)</title><rect x="474.9" y="581" width="3.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="477.94" y="591.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.51" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.14%; -0.02%)</title><rect x="931.2" y="693" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="934.17" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (598 samples, 11.62%; -0.02%)</title><rect x="720.7" y="789" width="137.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="723.71" y="799.5" >seastar::internal..</text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%; 0.00%)</title><rect x="109.5" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.50" y="559.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (8 samples, 0.16%; +0.08%)</title><rect x="11.6" y="869" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="14.60" y="879.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="450.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="453.41" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (3 samples, 0.06%; 0.00%)</title><rect x="674.4" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.39" y="751.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%; -0.02%)</title><rect x="1048.3" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1051.32" y="639.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="880.5" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="883.50" y="703.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; 0.00%)</title><rect x="435.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.51" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3 samples, 0.06%; +0.02%)</title><rect x="75.3" y="645" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.34" y="655.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (2 samples, 0.04%; 0.00%)</title><rect x="18.5" y="853" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="863.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (3 samples, 0.06%; -0.02%)</title><rect x="880.7" y="693" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="883.73" y="703.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%; 0.00%)</title><rect x="62.7" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.73" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%; 0.00%)</title><rect x="73.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.28" y="639.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="671.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (1 samples, 0.02%; +0.02%)</title><rect x="358.2" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="361.25" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (12 samples, 0.23%; 0.00%)</title><rect x="865.4" y="677" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.37" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="76.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.49" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="150.8" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="153.77" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="81.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.76" y="767.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.27" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="51.5" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.50" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.10%)</title><rect x="387.1" y="437" width="0.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="390.13" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (53 samples, 1.03%; +0.04%)</title><rect x="676.2" y="789" width="12.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="679.23" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="523.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.08" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.04%)</title><rect x="952.3" y="693" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="955.26" y="703.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="885" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.92" y="895.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="807.1" y="517" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="810.14" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%; +0.02%)</title><rect x="517.1" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="520.12" y="559.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.65" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%; 0.00%)</title><rect x="23.5" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.53" y="719.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.83" y="591.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="567.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.56" y="623.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; 0.00%)</title><rect x="13.4" y="869" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.44" y="879.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="76.5" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.49" y="703.5" ></text>
</g>
<g >
<title>seastar::file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.76" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="727.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="730.35" y="751.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (36 samples, 0.70%; -0.04%)</title><rect x="1062.5" y="565" width="8.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1065.53" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="203.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.27" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (2 samples, 0.04%; +0.02%)</title><rect x="37.3" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.28" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; +0.02%)</title><rect x="980.0" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="983.00" y="591.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1057.0" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1060.03" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="688.8" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="691.84" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (87 samples, 1.69%; 0.00%)</title><rect x="1059.8" y="629" width="19.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1062.78" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.10%; 0.00%)</title><rect x="46.7" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="591.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (3 samples, 0.06%; +0.04%)</title><rect x="362.4" y="469" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="365.37" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (33 samples, 0.64%; 0.00%)</title><rect x="861.5" y="725" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.47" y="735.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%; +0.02%)</title><rect x="865.1" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.14" y="655.5" ></text>
</g>
<g >
<title>siglongjmp@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="19.6" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.63" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (20 samples, 0.39%; +0.12%)</title><rect x="1071.2" y="549" width="4.6" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="1074.24" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="741" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="751.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (7 samples, 0.14%; -0.02%)</title><rect x="1161.1" y="725" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1164.11" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (1 samples, 0.02%; +0.02%)</title><rect x="859.6" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.64" y="735.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.28" y="575.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="73.0" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.05" y="623.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::deleted_at (1 samples, 0.02%; 0.00%)</title><rect x="1118.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.47" y="527.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.19" y="543.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="46.9" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.06%)</title><rect x="1149.0" y="709" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1151.96" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="56.8" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.77" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; 0.00%)</title><rect x="263.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.33" y="479.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.65" y="751.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="43.9" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.93" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="74.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.42" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="626.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.71" y="687.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (23 samples, 0.45%; -0.02%)</title><rect x="1013.0" y="485" width="5.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1016.01" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (10 samples, 0.19%; -0.02%)</title><rect x="1030.2" y="565" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1033.21" y="575.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (39 samples, 0.76%; -0.02%)</title><rect x="496.5" y="565" width="8.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="499.49" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (25 samples, 0.49%; +0.02%)</title><rect x="1042.4" y="613" width="5.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.36" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1124.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.97" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.5" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.54" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.49" y="479.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%; +0.02%)</title><rect x="1115.0" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.03" y="543.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (16 samples, 0.31%; -0.06%)</title><rect x="911.2" y="661" width="3.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="914.22" y="671.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="420.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="423.37" y="527.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.08%)</title><rect x="676.7" y="773" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="679.69" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="831.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (10 samples, 0.19%; +0.04%)</title><rect x="554.3" y="677" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="557.26" y="687.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="580.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="583.86" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.56" y="639.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (1 samples, 0.02%; +0.02%)</title><rect x="20.3" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.32" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="814.5" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.47" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (45 samples, 0.87%; +0.02%)</title><rect x="570.8" y="613" width="10.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="573.77" y="623.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="632.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.98" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="803.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.47" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="77.2" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.17" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="78.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.78" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="443.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="446.30" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (5 samples, 0.10%; 0.00%)</title><rect x="577.6" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.65" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="394.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="397.01" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (9 samples, 0.17%; -0.02%)</title><rect x="800.5" y="421" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="803.49" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="845.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.96" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; -0.02%)</title><rect x="58.4" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="61.37" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (8 samples, 0.16%; -0.04%)</title><rect x="821.1" y="613" width="1.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="824.12" y="623.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="505.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.97" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="935.8" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="938.75" y="703.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%; -0.06%)</title><rect x="585.4" y="629" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="588.44" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="643.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="645.99" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="702.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="705.59" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="645" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="842.4" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="845.44" y="703.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.05" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1017.6" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1020.60" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (48 samples, 0.93%; -0.02%)</title><rect x="704.0" y="757" width="11.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="706.97" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="860.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.55" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.02%)</title><rect x="832.6" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="835.58" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="910.8" y="645" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="913.76" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="646.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="1142.3" y="709" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1145.31" y="719.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="1084.3" y="645" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1087.31" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="697.6" y="773" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="700.55" y="783.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (7 samples, 0.14%; 0.00%)</title><rect x="336.5" y="517" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="339.47" y="527.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%; +0.02%)</title><rect x="927.3" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="930.27" y="703.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="667.1" y="773" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="670.06" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="809.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.97" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.2" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.23" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="74.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.65" y="623.5" ></text>
</g>
<g >
<title>table::make_reader (426 samples, 8.28%; +0.06%)</title><rect x="450.9" y="645" width="97.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="453.87" y="655.5" >table::make..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="58.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.60" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="93.2" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="96.22" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (6 samples, 0.12%; +0.04%)</title><rect x="695.0" y="741" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="698.03" y="751.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1018.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1021.28" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (17 samples, 0.33%; +0.02%)</title><rect x="620.3" y="709" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="623.29" y="719.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.04%)</title><rect x="823.9" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="826.87" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="212.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="214.98" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%; +0.04%)</title><rect x="983.2" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="986.21" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.04" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; 0.00%)</title><rect x="186.8" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="189.76" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="306.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="309.66" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="357.6" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="360.56" y="463.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%; -0.02%)</title><rect x="865.6" y="613" width="2.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="868.60" y="623.5" ></text>
</g>
<g >
<title>table::as_mutation_source (13 samples, 0.25%; -0.02%)</title><rect x="628.5" y="725" width="3.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="631.54" y="735.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="687.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (2 samples, 0.04%; 0.00%)</title><rect x="85.0" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="735.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="21.9" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.92" y="735.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; -0.08%)</title><rect x="260.8" y="453" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="263.81" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="86.8" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.80" y="863.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; +0.02%)</title><rect x="288.3" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.32" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="751.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.83" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%; -0.04%)</title><rect x="242.2" y="357" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="245.24" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="315.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="318.83" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.06%)</title><rect x="808.5" y="565" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="811.51" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="1116.2" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.18" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="738.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="741.82" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="79.2" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.24" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="61.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.81" y="479.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="783.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="927.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="243.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="246.39" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (29 samples, 0.56%; 0.00%)</title><rect x="1121.9" y="613" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.91" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.10%; +0.04%)</title><rect x="947.9" y="661" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="950.90" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (7 samples, 0.14%; 0.00%)</title><rect x="841.1" y="709" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.07" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%; +0.02%)</title><rect x="830.3" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.29" y="735.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="99.9" y="709" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.87" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%; +0.02%)</title><rect x="1118.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.01" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="316.1" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="319.06" y="575.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="867.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.89" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="757.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.39" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (3 samples, 0.06%; +0.06%)</title><rect x="444.2" y="677" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="447.22" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="79.5" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.47" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="689.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="692.30" y="767.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; 0.00%)</title><rect x="73.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.28" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (7 samples, 0.14%; 0.00%)</title><rect x="848.4" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.40" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (6 samples, 0.12%; +0.02%)</title><rect x="812.6" y="613" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="815.64" y="623.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%; +0.04%)</title><rect x="341.3" y="453" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="344.28" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; 0.00%)</title><rect x="677.8" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.83" y="783.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="1086.6" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1089.60" y="687.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.27" y="463.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="703.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1115.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.49" y="431.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (3 samples, 0.06%; -0.02%)</title><rect x="242.2" y="389" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="245.24" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; -0.04%)</title><rect x="416.0" y="437" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="419.02" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="1129.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.25" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="40.3" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.26" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="1045.6" y="565" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.57" y="575.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; -0.02%)</title><rect x="176.9" y="565" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="179.90" y="575.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="723.5" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.46" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; +0.04%)</title><rect x="274.6" y="485" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="277.57" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="495.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (2 samples, 0.04%; -0.02%)</title><rect x="31.1" y="549" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="34.09" y="559.5" ></text>
</g>
<g >
<title>sstables::sstable_directory::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.39" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (49 samples, 0.95%; 0.00%)</title><rect x="92.8" y="789" width="11.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="95.76" y="799.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="109.3" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.27" y="751.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%; +0.02%)</title><rect x="1076.7" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1079.75" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="783.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; +0.02%)</title><rect x="38.9" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.89" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="66.2" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.17" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="674.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="677.17" y="751.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%; +0.02%)</title><rect x="200.7" y="485" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="203.74" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%; -0.04%)</title><rect x="607.0" y="725" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="609.99" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; -0.08%)</title><rect x="728.0" y="677" width="1.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="731.04" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; +0.02%)</title><rect x="1156.1" y="773" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1159.07" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.90" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1098.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1101.30" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1052.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1055.21" y="623.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="894.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="897.25" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (201 samples, 3.91%; +0.08%)</title><rect x="1035.0" y="645" width="46.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1038.02" y="655.5" >serv..</text>
</g>
<g >
<title>[unknown] (22 samples, 0.43%; 0.00%)</title><rect x="11.6" y="885" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.60" y="895.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (67 samples, 1.30%; 0.00%)</title><rect x="45.1" y="629" width="15.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.08" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="204.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="207.64" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; +0.02%)</title><rect x="1084.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1087.77" y="687.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.15" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (21 samples, 0.41%; +0.02%)</title><rect x="464.2" y="565" width="4.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="467.16" y="575.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%; +0.02%)</title><rect x="1080.2" y="629" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1083.18" y="639.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (3 samples, 0.06%; 0.00%)</title><rect x="865.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.83" y="591.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="799.6" y="437" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="802.57" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.02%)</title><rect x="791.3" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="794.32" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="562.5" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.52" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%; 0.00%)</title><rect x="181.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="184.49" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1124.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.89" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.18" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="636.3" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.34" y="783.5" ></text>
</g>
<g >
<title>clustering_row::minimal_external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="651.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.47" y="719.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="724.8" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="727.83" y="735.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="314.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="317.92" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1157.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1160.90" y="783.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="575.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (10 samples, 0.19%; -0.02%)</title><rect x="1124.4" y="469" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1127.43" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (171 samples, 3.32%; -0.04%)</title><rect x="993.8" y="581" width="39.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="996.75" y="591.5" >ser..</text>
</g>
<g >
<title>seastar::internal::io_pgetevents (2 samples, 0.04%; +0.02%)</title><rect x="1165.9" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.93" y="767.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%; -0.06%)</title><rect x="124.2" y="693" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="127.17" y="703.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (4 samples, 0.08%; 0.00%)</title><rect x="861.9" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.93" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1163.2" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.18" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="563.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="566.20" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::single_column_relation&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="63.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.88" y="639.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1125.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.12" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; -0.02%)</title><rect x="524.0" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="527.00" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="161.1" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="164.08" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="111.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.10" y="543.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; -0.08%)</title><rect x="393.8" y="485" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="396.78" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="56.3" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.31" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (3 samples, 0.06%; -0.02%)</title><rect x="634.3" y="757" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="637.27" y="767.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (2 samples, 0.04%; -0.02%)</title><rect x="733.5" y="693" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="736.54" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (3 samples, 0.06%; -0.02%)</title><rect x="348.4" y="453" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="351.39" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; +0.02%)</title><rect x="35.4" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.45" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%; 0.00%)</title><rect x="667.5" y="773" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="670.52" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (104 samples, 2.02%; +0.02%)</title><rect x="882.8" y="693" width="23.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="885.79" y="703.5" >c..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="523.1" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="526.08" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="885" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="895.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%; -0.02%)</title><rect x="360.1" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="363.08" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="18.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.48" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="25.4" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%; +0.04%)</title><rect x="164.8" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="167.75" y="655.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%; +0.02%)</title><rect x="80.6" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.61" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="1029.3" y="517" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1032.29" y="527.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%; +0.02%)</title><rect x="573.7" y="581" width="1.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="576.75" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%; 0.00%)</title><rect x="1024.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.25" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%; -0.02%)</title><rect x="1006.4" y="517" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1009.36" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="530.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="532.96" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="834.4" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="837.42" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="103.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.77" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (15 samples, 0.29%; -0.02%)</title><rect x="575.4" y="581" width="3.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="578.35" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="905.0" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="908.03" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="661" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (11 samples, 0.21%; 0.00%)</title><rect x="56.1" y="565" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="575.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="867.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.89" y="559.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="239.5" ></text>
</g>
<g >
<title>sstables::sstable::seal_sstable (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; +0.04%)</title><rect x="1129.7" y="773" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1132.70" y="783.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (1 samples, 0.02%; 0.00%)</title><rect x="23.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.53" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (12 samples, 0.23%; 0.00%)</title><rect x="25.4" y="565" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="575.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%; 0.00%)</title><rect x="110.9" y="773" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.02%)</title><rect x="449.5" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="452.49" y="655.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1129.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.25" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (11 samples, 0.21%; +0.08%)</title><rect x="197.5" y="485" width="2.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="200.53" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (42 samples, 0.82%; -0.02%)</title><rect x="552.9" y="709" width="9.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="555.89" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (4 samples, 0.08%; +0.06%)</title><rect x="675.1" y="741" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="678.08" y="751.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="415.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%; +0.02%)</title><rect x="671.0" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="673.96" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%; +0.02%)</title><rect x="263.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="266.56" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="551.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.51" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (16 samples, 0.31%; -0.02%)</title><rect x="284.7" y="533" width="3.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="287.65" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="556.3" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.33" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="27.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.19" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (14 samples, 0.27%; +0.04%)</title><rect x="707.6" y="725" width="3.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="710.64" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="46.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.45" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="46.7" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="532.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.25" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (59 samples, 1.15%; -0.04%)</title><rect x="567.6" y="629" width="13.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="570.56" y="639.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (91 samples, 1.77%; -0.06%)</title><rect x="883.9" y="661" width="20.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="886.94" y="671.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="1115.7" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.72" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (6 samples, 0.12%; +0.02%)</title><rect x="750.7" y="549" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="753.74" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,692 samples, 91.16%; +0.02%)</title><rect x="88.6" y="805" width="1075.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.64" y="815.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="621.9" y="677" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="624.89" y="687.5" ></text>
</g>
<g >
<title>[unknown] (336 samples, 6.53%; 0.00%)</title><rect x="10.0" y="917" width="77.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="927.5" >[unknown]</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="860.1" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.10" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.33%; +0.16%)</title><rect x="1092.3" y="629" width="3.9" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1095.34" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.55" y="671.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="956.6" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="959.61" y="671.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="75.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.11" y="655.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%; -0.08%)</title><rect x="502.0" y="501" width="2.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="504.99" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="45.3" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.31" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="719.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="767.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="516.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="519.21" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%; 0.00%)</title><rect x="766.6" y="629" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.56" y="639.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%; +0.02%)</title><rect x="28.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.80" y="575.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; 0.00%)</title><rect x="1021.5" y="501" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.49" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (7 samples, 0.14%; 0.00%)</title><rect x="43.5" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.47" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.23%; -0.04%)</title><rect x="830.5" y="725" width="2.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="833.52" y="735.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="930.9" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="933.94" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.14%; +0.04%)</title><rect x="411.0" y="421" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="413.98" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (5 samples, 0.10%; 0.00%)</title><rect x="605.2" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.16" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="56.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.77" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%; +0.02%)</title><rect x="38.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.97" y="575.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (37 samples, 0.72%; +0.04%)</title><rect x="744.8" y="661" width="8.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="747.78" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.14%; +0.06%)</title><rect x="684.5" y="741" width="1.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="687.48" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="1159.3" y="725" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1162.28" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; 0.00%)</title><rect x="805.8" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.76" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="598.7" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="601.74" y="687.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="839.9" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.92" y="719.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (15 samples, 0.29%; -0.21%)</title><rect x="181.3" y="549" width="3.4" height="15.0" fill="rgb(65,65,255)" rx="2" ry="2" />
<text  x="184.26" y="559.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.02%)</title><rect x="1047.4" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.40" y="559.5" ></text>
</g>
<g >
<title>make_combined_reader (86 samples, 1.67%; +0.02%)</title><rect x="459.1" y="613" width="19.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="462.12" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (10 samples, 0.19%; +0.12%)</title><rect x="991.0" y="581" width="2.3" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="994.00" y="591.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.10%; 0.00%)</title><rect x="865.6" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="607.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.27" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1143.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1146.46" y="735.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="639.1" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.09" y="767.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (16 samples, 0.31%; 0.00%)</title><rect x="749.4" y="581" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="752.36" y="591.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%; 0.00%)</title><rect x="1118.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.24" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (2 samples, 0.04%; 0.00%)</title><rect x="74.2" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.19" y="607.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (4 samples, 0.08%; +0.04%)</title><rect x="752.1" y="549" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="755.11" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="527.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%; -0.02%)</title><rect x="1112.5" y="709" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1115.51" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.65" y="767.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (11 samples, 0.21%; -0.06%)</title><rect x="966.0" y="629" width="2.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="969.01" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="903.4" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.43" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (4 samples, 0.08%; 0.00%)</title><rect x="646.7" y="773" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.65" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="308.7" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="311.73" y="639.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="866.1" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.06" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (11 samples, 0.21%; -0.02%)</title><rect x="472.0" y="597" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="474.96" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.08" y="479.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.62" y="623.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (707 samples, 13.74%; -0.02%)</title><rect x="159.9" y="677" width="162.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="162.94" y="687.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (3 samples, 0.06%; +0.04%)</title><rect x="528.4" y="533" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="531.36" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1083.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1086.16" y="655.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="110.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.42" y="719.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (5 samples, 0.10%; -0.04%)</title><rect x="923.4" y="645" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="926.37" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (4 samples, 0.08%; +0.06%)</title><rect x="20.8" y="773" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="23.78" y="783.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.08%; 0.00%)</title><rect x="600.8" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.80" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="599.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="602.20" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="643.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="646.90" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="897.2" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="900.24" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (191 samples, 3.71%; +0.02%)</title><rect x="24.2" y="677" width="43.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.21" y="687.5" >cql3..</text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (8 samples, 0.16%; 0.00%)</title><rect x="604.9" y="693" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="607.93" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (441 samples, 8.57%; +0.02%)</title><rect x="187.9" y="597" width="101.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="190.91" y="607.5" >partition_sn..</text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%; 0.00%)</title><rect x="21.9" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.92" y="751.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1116.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.41" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (125 samples, 2.43%; -0.02%)</title><rect x="781.5" y="613" width="28.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="784.46" y="623.5" >st..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (7 samples, 0.14%; +0.04%)</title><rect x="1148.5" y="741" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1151.50" y="751.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="990.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="993.77" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_descriptor::encode (1 samples, 0.02%; +0.02%)</title><rect x="86.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.57" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (39 samples, 0.76%; 0.00%)</title><rect x="69.4" y="741" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.38" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="595.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.30" y="719.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="692.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="695.28" y="767.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="845.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.96" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; -0.02%)</title><rect x="1029.3" y="533" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1032.29" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="629.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.00" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (3 samples, 0.06%; 0.00%)</title><rect x="1150.1" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.11" y="751.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="1116.9" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.87" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.08%; +0.04%)</title><rect x="822.0" y="581" width="1.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="825.04" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="831.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.27%; 0.00%)</title><rect x="438.3" y="597" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.26" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (2 samples, 0.04%; 0.00%)</title><rect x="79.2" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.24" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="441.2" y="533" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="444.24" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (2 samples, 0.04%; +0.02%)</title><rect x="560.5" y="677" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="563.45" y="687.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="591.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (8 samples, 0.16%; 0.00%)</title><rect x="1160.9" y="741" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1163.88" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="688.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="691.61" y="767.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="665.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="668.91" y="783.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (2 samples, 0.04%; -0.02%)</title><rect x="864.7" y="645" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="867.68" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (6 samples, 0.12%; 0.00%)</title><rect x="523.5" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.54" y="511.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="868.8" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.81" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="471.7" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="474.73" y="559.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (1 samples, 0.02%; 0.00%)</title><rect x="866.7" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.74" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (209 samples, 4.06%; -0.04%)</title><rect x="213.4" y="485" width="47.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="216.35" y="495.5" >part..</text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.10" y="591.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%; 0.00%)</title><rect x="358.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="361.47" y="479.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%; +0.02%)</title><rect x="1179.0" y="917" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1182.00" y="927.5" ></text>
</g>
<g >
<title>database::find_schema (22 samples, 0.43%; 0.00%)</title><rect x="818.1" y="661" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.14" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (3 samples, 0.06%; +0.02%)</title><rect x="184.7" y="549" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="187.70" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="976.3" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.33" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (9 samples, 0.17%; +0.02%)</title><rect x="1146.4" y="725" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1149.44" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="832.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.81" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="455.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="458.91" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="853.2" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="856.22" y="767.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.96" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1127.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.41" y="495.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (47 samples, 0.91%; -0.04%)</title><rect x="495.6" y="597" width="10.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="498.57" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.08%)</title><rect x="661.8" y="773" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="664.79" y="783.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%; +0.02%)</title><rect x="1048.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1051.78" y="639.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::free (1 samples, 0.02%; 0.00%)</title><rect x="23.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.53" y="655.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="25.4" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.36" y="527.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (2 samples, 0.04%; 0.00%)</title><rect x="79.2" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.24" y="751.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="18.0" y="821" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.02" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.76" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="879.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (22 samples, 0.43%; -0.04%)</title><rect x="1070.8" y="565" width="5.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1073.78" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; +0.02%)</title><rect x="256.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="259.45" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="758.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="761.30" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="245.9" y="421" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="248.91" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.14%; -0.06%)</title><rect x="542.1" y="581" width="1.6" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="545.11" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="664.8" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="667.77" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1157.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1160.67" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (3 samples, 0.06%; +0.02%)</title><rect x="773.2" y="629" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="776.21" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;db::rp_handle&gt;::promise_type::get_return_object (1 samples, 0.02%; 0.00%)</title><rect x="1121.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.99" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; +0.06%)</title><rect x="964.2" y="629" width="1.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="967.18" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="203.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.72" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,245 samples, 43.62%; +0.02%)</title><rect x="117.1" y="757" width="514.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="120.06" y="767.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="1148.0" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.05" y="671.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (1 samples, 0.02%; +0.02%)</title><rect x="784.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="787.67" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="593.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="596.01" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="790.4" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="793.40" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="827.8" y="709" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="830.77" y="719.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="46.2" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.22" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (27 samples, 0.52%; +0.02%)</title><rect x="262.2" y="501" width="6.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="265.19" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (47 samples, 0.91%; +0.02%)</title><rect x="1010.5" y="517" width="10.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1013.49" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="482.5" y="597" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="485.50" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.67" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; 0.00%)</title><rect x="659.0" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.03" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="867.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.97" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="57.2" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.23" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; 0.00%)</title><rect x="684.0" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.02" y="767.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::select_statement*, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="67.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.31" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%; 0.00%)</title><rect x="745.9" y="613" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.92" y="623.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%; 0.00%)</title><rect x="84.7" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.74" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%; +0.06%)</title><rect x="506.3" y="613" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="509.35" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="1163.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.18" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.04" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.84" y="703.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="688.8" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.84" y="799.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; -0.02%)</title><rect x="442.2" y="661" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="445.15" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%; +0.02%)</title><rect x="1164.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1167.55" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%; +0.04%)</title><rect x="209.9" y="517" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="212.91" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%; 0.00%)</title><rect x="716.3" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.35" y="767.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="753.3" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.26" y="687.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%; +0.02%)</title><rect x="110.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.42" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1079.0" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1082.04" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.87" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (3 samples, 0.06%; 0.00%)</title><rect x="85.4" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.43" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="646.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="649.88" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="51.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.50" y="415.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="18.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.71" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (7 samples, 0.14%; -0.08%)</title><rect x="762.2" y="645" width="1.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="765.20" y="655.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; +0.02%)</title><rect x="818.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="821.37" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%; +0.04%)</title><rect x="264.2" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="267.25" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="537.5" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="540.53" y="623.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="54.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.02" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; 0.00%)</title><rect x="673.0" y="741" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="676.02" y="751.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="323.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="326.17" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; 0.00%)</title><rect x="667.7" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="670.75" y="767.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="83.6" y="773" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.59" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="927.7" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.73" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="775.0" y="581" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="778.04" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="624.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="627.19" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (32 samples, 0.62%; 0.00%)</title><rect x="745.7" y="645" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.69" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (99 samples, 1.92%; -0.04%)</title><rect x="883.5" y="677" width="22.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="886.48" y="687.5" >_..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%; -0.02%)</title><rect x="665.7" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="668.68" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.33" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="448.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="451.57" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="803.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.70" y="511.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (131 samples, 2.55%; -0.04%)</title><rect x="216.6" y="453" width="30.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="219.56" y="463.5" >cl..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; -0.02%)</title><rect x="804.6" y="533" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="807.61" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="988.0" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="991.02" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.13" y="703.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; +0.02%)</title><rect x="839.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="842.69" y="655.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="815.4" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.39" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (2 samples, 0.04%; +0.02%)</title><rect x="551.1" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="554.05" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.02%)</title><rect x="786.5" y="533" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="789.50" y="543.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; -0.02%)</title><rect x="738.8" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="741.82" y="687.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="644.8" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.82" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="76.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.26" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="624.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="627.42" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="86.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.57" y="735.5" ></text>
</g>
<g >
<title>seastar::remove_file (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="930.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.71" y="687.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="60.9" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.90" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="395.8" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="398.84" y="447.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%; +0.04%)</title><rect x="918.6" y="629" width="2.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="921.56" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.72" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (5 samples, 0.10%; +0.02%)</title><rect x="595.5" y="709" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="598.53" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::identity_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="860.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.78" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; +0.02%)</title><rect x="81.5" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.53" y="799.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (3 samples, 0.06%; 0.00%)</title><rect x="1107.9" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.93" y="719.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="682.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.42" y="751.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (40 samples, 0.78%; +0.06%)</title><rect x="177.6" y="565" width="9.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="180.59" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; -0.04%)</title><rect x="978.2" y="581" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="981.16" y="591.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="865.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.60" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::set_value&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="110.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.19" y="719.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (460 samples, 8.94%; +0.08%)</title><rect x="446.1" y="709" width="105.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="449.05" y="719.5" >query::queri..</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="195.5" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="198.47" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="103.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.31" y="767.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (35 samples, 0.68%; 0.00%)</title><rect x="1121.7" y="693" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.68" y="703.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="561.6" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="564.60" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1092.1" y="661" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1095.11" y="671.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.38" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%; +0.02%)</title><rect x="397.2" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="400.22" y="495.5" ></text>
</g>
<g >
<title>schema_registry::get (14 samples, 0.27%; 0.00%)</title><rect x="965.8" y="645" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="968.78" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (9 samples, 0.17%; 0.00%)</title><rect x="274.6" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.57" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.91" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.56" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="833.3" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="836.27" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, unsigned long&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1120.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.31" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="479.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%; 0.00%)</title><rect x="42.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.55" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="692.0" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="695.05" y="767.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (2 samples, 0.04%; +0.02%)</title><rect x="801.4" y="405" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="804.40" y="415.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (16 samples, 0.31%; -0.02%)</title><rect x="1140.9" y="757" width="3.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1143.94" y="767.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (3 samples, 0.06%; 0.00%)</title><rect x="889.9" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="892.90" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="1033.2" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1036.19" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%; +0.04%)</title><rect x="549.9" y="677" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="552.91" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.76" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1090.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1093.04" y="639.5" ></text>
</g>
<g >
<title>table::set_hit_rate (8 samples, 0.16%; 0.00%)</title><rect x="712.5" y="741" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.45" y="751.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (3 samples, 0.06%; 0.00%)</title><rect x="545.8" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.78" y="559.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="111.3" y="357" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.33" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.96" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_per_partition_limit (1 samples, 0.02%; 0.00%)</title><rect x="1096.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.46" y="703.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; 0.00%)</title><rect x="1032.7" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.73" y="575.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.08" y="559.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="54.2" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.25" y="543.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.02%)</title><rect x="790.6" y="437" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="793.63" y="447.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%; -0.02%)</title><rect x="1063.0" y="533" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1065.99" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (55 samples, 1.07%; -0.02%)</title><rect x="516.4" y="565" width="12.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="519.43" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="46.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.68" y="479.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="255.3" y="453" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="258.31" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="350.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="352.99" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="24.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.67" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (67 samples, 1.30%; -0.08%)</title><rect x="172.5" y="597" width="15.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="175.55" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="535.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="538.46" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (11 samples, 0.21%; +0.02%)</title><rect x="933.2" y="693" width="2.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="936.23" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="1095.5" y="613" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1098.54" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.63" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; -0.04%)</title><rect x="581.3" y="629" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="584.32" y="639.5" ></text>
</g>
<g >
<title>__start_context (288 samples, 5.60%; 0.00%)</title><rect x="16.9" y="901" width="66.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="911.5" >__start..</text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="969.9" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="972.91" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (10 samples, 0.19%; +0.04%)</title><rect x="797.0" y="421" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="800.05" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (11 samples, 0.21%; 0.00%)</title><rect x="637.9" y="773" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.94" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.57" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="957.5" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="960.53" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (13 samples, 0.25%; -0.04%)</title><rect x="433.4" y="549" width="3.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="436.44" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="868.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.58" y="687.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="108.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.81" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (2 samples, 0.04%; 0.00%)</title><rect x="1126.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.72" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (7 samples, 0.14%; +0.02%)</title><rect x="853.4" y="757" width="1.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="856.45" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; +0.02%)</title><rect x="42.1" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.10" y="607.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; 0.00%)</title><rect x="436.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.96" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="23.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.30" y="703.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::deleted_at (1 samples, 0.02%; 0.00%)</title><rect x="109.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.04" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="940.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.11" y="655.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="879.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="787.0" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.96" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="859.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.87" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="592.3" y="677" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="595.32" y="687.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; -0.04%)</title><rect x="604.5" y="693" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="607.47" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (2 samples, 0.04%; +0.02%)</title><rect x="1046.3" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1049.25" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.21%; +0.02%)</title><rect x="663.2" y="773" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.16" y="783.5" ></text>
</g>
</g>
</svg>
