<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>seastar::memory::stats (5 samples, 0.10%; +0.02%)</title><rect x="509.2" y="421" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="512.16" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="79.8" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="82.82" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (6 samples, 0.11%; +0.02%)</title><rect x="455.4" y="437" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="458.38" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="687.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%; +0.02%)</title><rect x="647.2" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="650.23" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,791 samples, 91.75%; 0.00%)</title><rect x="85.2" y="709" width="1082.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="719.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; 0.00%)</title><rect x="721.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="724.12" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%; +0.02%)</title><rect x="683.2" y="613" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="686.16" y="623.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (6 samples, 0.11%; -0.06%)</title><rect x="1114.5" y="581" width="1.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1117.53" y="591.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.13%; +0.06%)</title><rect x="384.7" y="325" width="1.5" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="387.65" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; +0.02%)</title><rect x="227.8" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="230.83" y="319.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1040.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1043.86" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.02%)</title><rect x="750.7" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="753.72" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="508.0" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="511.03" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; 0.00%)</title><rect x="322.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="325.29" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="673.9" y="613" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="676.89" y="623.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (5 samples, 0.10%; 0.00%)</title><rect x="858.7" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.73" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="1030.2" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.24" y="367.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1113.8" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1116.85" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="863.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.25" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (103 samples, 1.97%; -0.06%)</title><rect x="642.9" y="677" width="23.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="645.93" y="687.5" >s..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; +0.02%)</title><rect x="37.1" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="40.12" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="935.8" y="501" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="938.79" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (5 samples, 0.10%; -0.04%)</title><rect x="83.2" y="661" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="86.21" y="671.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%; +0.02%)</title><rect x="472.8" y="501" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="475.78" y="511.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::add_key (1 samples, 0.02%; 0.00%)</title><rect x="83.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.89" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (30 samples, 0.57%; 0.00%)</title><rect x="70.1" y="645" width="6.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.11" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (2 samples, 0.04%; 0.00%)</title><rect x="73.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="919.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.74" y="527.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="431.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.04%; -0.08%)</title><rect x="1168.1" y="805" width="0.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1171.08" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%; 0.00%)</title><rect x="642.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="824.8" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="827.84" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1025.0" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1028.04" y="383.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (29 samples, 0.56%; +0.02%)</title><rect x="1120.6" y="661" width="6.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1123.63" y="671.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; -0.06%)</title><rect x="1048.3" y="437" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1051.32" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="687.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.68" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="868.4" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="871.45" y="495.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (27 samples, 0.52%; +0.02%)</title><rect x="488.4" y="437" width="6.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="491.37" y="447.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (13 samples, 0.25%; +0.02%)</title><rect x="1144.6" y="645" width="2.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1147.58" y="655.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="687.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="690.68" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (2 samples, 0.04%; 0.00%)</title><rect x="61.3" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="511.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%; 0.00%)</title><rect x="1004.7" y="453" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.71" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (11 samples, 0.21%; -0.06%)</title><rect x="375.8" y="341" width="2.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="378.84" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%; 0.00%)</title><rect x="1087.2" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1090.18" y="559.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; 0.00%)</title><rect x="728.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="731.35" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="75.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.08" y="463.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="20.4" y="661" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="23.39" y="671.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%; 0.00%)</title><rect x="1044.7" y="517" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1047.70" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (206 samples, 3.94%; 0.00%)</title><rect x="22.9" y="581" width="46.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.88" y="591.5" >cql3..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; 0.00%)</title><rect x="893.5" y="469" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.53" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%; +0.08%)</title><rect x="337.9" y="469" width="2.0" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="340.88" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="530.6" y="501" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="533.63" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.10%; +0.04%)</title><rect x="1058.0" y="469" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1061.04" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="889.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="892.24" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="330.4" y="533" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="333.42" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (27 samples, 0.52%; 0.00%)</title><rect x="70.6" y="613" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.56" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="59.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.49" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="673.7" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="676.67" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.10" y="527.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%; +0.02%)</title><rect x="21.8" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="24.75" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="287.5" ></text>
</g>
<g >
<title>dht::shard_of (2 samples, 0.04%; -0.02%)</title><rect x="998.4" y="469" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1001.38" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="52.9" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="55.93" y="431.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%; 0.00%)</title><rect x="111.7" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="751.6" y="437" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="754.62" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.04%)</title><rect x="228.1" y="309" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="231.06" y="319.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%; +0.02%)</title><rect x="326.8" y="485" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="329.81" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::open_directory (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="431.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (27 samples, 0.52%; -0.02%)</title><rect x="1054.4" y="501" width="6.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1057.42" y="511.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; +0.02%)</title><rect x="867.5" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="870.55" y="559.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%; 0.00%)</title><rect x="688.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.13" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (5 samples, 0.10%; +0.02%)</title><rect x="521.1" y="405" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="524.14" y="415.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1121.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="335.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; -0.06%)</title><rect x="678.0" y="629" width="0.9" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="680.96" y="639.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (2 samples, 0.04%; +0.04%)</title><rect x="1033.9" y="437" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1036.86" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%; -0.02%)</title><rect x="694.9" y="629" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="697.91" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="518.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.20" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="1135.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.54" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="399.5" ></text>
</g>
<g >
<title>database::find_uuid (11 samples, 0.21%; 0.00%)</title><rect x="828.0" y="533" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.00" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="713.4" y="629" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="716.44" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="618.5" y="613" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="621.53" y="623.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (55 samples, 1.05%; -0.06%)</title><rect x="740.6" y="581" width="12.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="743.55" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (4 samples, 0.08%; 0.00%)</title><rect x="73.7" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%; 0.00%)</title><rect x="766.3" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.31" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="112.4" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="115.36" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.13%; +0.06%)</title><rect x="966.1" y="517" width="1.5" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="969.07" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (14 samples, 0.27%; 0.00%)</title><rect x="77.1" y="645" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="789.6" y="405" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="792.59" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (18 samples, 0.34%; +0.02%)</title><rect x="1109.8" y="597" width="4.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1112.78" y="607.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1070.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1073.69" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="38.9" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="41.92" y="415.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="612.7" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="615.65" y="591.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="783.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="511.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; 0.00%)</title><rect x="1129.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="525.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.20" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="999.7" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1002.74" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%; +0.02%)</title><rect x="301.0" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="304.05" y="463.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; +0.02%)</title><rect x="835.2" y="597" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="838.23" y="607.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (436 samples, 8.35%; -0.11%)</title><rect x="737.6" y="613" width="98.5" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="740.61" y="623.5" >cql3::query..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="433.2" y="501" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="436.24" y="511.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 0.06%; +0.06%)</title><rect x="962.5" y="565" width="0.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="965.45" y="575.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%; 0.00%)</title><rect x="595.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.48" y="591.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (19 samples, 0.36%; -0.06%)</title><rect x="763.6" y="533" width="4.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="766.60" y="543.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="501" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (5 samples, 0.10%; 0.00%)</title><rect x="1145.0" y="629" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.03" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.10%; +0.04%)</title><rect x="193.5" y="421" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="196.49" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; +0.02%)</title><rect x="100.4" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="103.39" y="607.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.02%; +0.02%)</title><rect x="81.6" y="757" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="84.63" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="969.2" y="549" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="972.23" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; +0.04%)</title><rect x="495.6" y="501" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="498.60" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (35 samples, 0.67%; -0.02%)</title><rect x="561.1" y="485" width="7.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="564.13" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="201.2" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="204.17" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.02%)</title><rect x="691.7" y="661" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="694.74" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%; +0.02%)</title><rect x="690.2" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="693.16" y="639.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; +0.02%)</title><rect x="728.1" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="731.12" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (4 samples, 0.08%; 0.00%)</title><rect x="60.4" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="511.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; +0.02%)</title><rect x="898.3" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="901.28" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.02%)</title><rect x="641.4" y="661" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="644.35" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%; -0.02%)</title><rect x="545.8" y="597" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="548.77" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (2 samples, 0.04%; +0.04%)</title><rect x="85.9" y="693" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="88.92" y="703.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (16 samples, 0.31%; +0.02%)</title><rect x="139.9" y="581" width="3.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="142.93" y="591.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (10 samples, 0.19%; +0.04%)</title><rect x="750.0" y="501" width="2.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="753.04" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::use_statement, std::default_delete&lt;cql3::statements::raw::use_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.1" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="71.07" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; -0.04%)</title><rect x="901.7" y="437" width="0.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="904.67" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (9 samples, 0.17%; +0.02%)</title><rect x="77.6" y="565" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="80.56" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.97" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="69" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.23" y="79.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (5 samples, 0.10%; 0.00%)</title><rect x="249.5" y="277" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="252.53" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="689.9" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.93" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%; 0.00%)</title><rect x="46.6" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (20 samples, 0.38%; -0.02%)</title><rect x="693.3" y="645" width="4.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="696.32" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="358.0" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="360.99" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="565" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="216.5" y="373" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="219.53" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="549" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="817.8" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="820.83" y="527.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="85.0" y="741" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="88.02" y="751.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (11 samples, 0.21%; +0.02%)</title><rect x="1046.5" y="501" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1049.51" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="686.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.77" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (57 samples, 1.09%; 0.00%)</title><rect x="24.2" y="549" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.24" y="559.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (5 samples, 0.10%; +0.02%)</title><rect x="868.7" y="453" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="871.67" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%; -0.02%)</title><rect x="265.6" y="325" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="268.57" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; -0.02%)</title><rect x="681.6" y="629" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="684.57" y="639.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%; +0.02%)</title><rect x="1019.2" y="357" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1022.17" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; +0.04%)</title><rect x="600.0" y="597" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="603.00" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (210 samples, 4.02%; -0.10%)</title><rect x="994.3" y="501" width="47.5" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="997.31" y="511.5" >serv..</text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="1013.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.52" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%; +0.02%)</title><rect x="130.0" y="597" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="132.99" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; +0.02%)</title><rect x="264.7" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="267.66" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="95.2" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="98.19" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="135.0" y="565" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="137.96" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%; 0.00%)</title><rect x="688.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.58" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (17 samples, 0.33%; -0.02%)</title><rect x="645.9" y="645" width="3.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="648.87" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1085.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.38" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="831.6" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.62" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (18 samples, 0.34%; +0.08%)</title><rect x="1175.5" y="789" width="4.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1178.54" y="799.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="986.6" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="989.63" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="61.7" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="64.75" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="367.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (9 samples, 0.17%; +0.04%)</title><rect x="830.5" y="549" width="2.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="833.49" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="1059.2" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1062.17" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (12 samples, 0.23%; +0.04%)</title><rect x="454.5" y="453" width="2.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="457.48" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="823.9" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="826.93" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_service_level_statement&gt;, void&gt; (1 samples, 0.02%; -0.02%)</title><rect x="67.8" y="549" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="70.85" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.64" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (41 samples, 0.79%; +0.04%)</title><rect x="97.2" y="661" width="9.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="100.22" y="671.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (1 samples, 0.02%; 0.00%)</title><rect x="81.4" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.41" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="750.5" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="753.49" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; +0.02%)</title><rect x="22.9" y="565" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="25.88" y="575.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.10%; 0.00%)</title><rect x="736.0" y="581" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.03" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="83.4" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.44" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="1149.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1152.55" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="724.5" y="645" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="727.51" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (8 samples, 0.15%; -0.02%)</title><rect x="755.5" y="581" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="758.47" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="633.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="635.99" y="655.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; +0.02%)</title><rect x="218.8" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="221.79" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; -0.10%)</title><rect x="1134.0" y="661" width="0.2" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1136.96" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (43 samples, 0.82%; 0.00%)</title><rect x="864.6" y="597" width="9.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.61" y="607.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; +0.02%)</title><rect x="688.4" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="691.35" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="997.0" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1000.02" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="790.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.49" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (1 samples, 0.02%; 0.00%)</title><rect x="454.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="457.25" y="463.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (7 samples, 0.13%; +0.08%)</title><rect x="1135.8" y="677" width="1.5" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1138.77" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (2 samples, 0.04%; 0.00%)</title><rect x="709.6" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.59" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_fd1596171e2adf1d6a1bd2abbc1d76b17b98ea7c] (1 samples, 0.02%; +0.02%)</title><rect x="671.9" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="674.86" y="623.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_clone_visitor&gt; (1 samples, 0.02%; +0.02%)</title><rect x="73.5" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="76.50" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="655.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (38 samples, 0.73%; +0.04%)</title><rect x="728.6" y="597" width="8.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="731.58" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="782.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.81" y="479.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; -0.10%)</title><rect x="575.1" y="533" width="0.5" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="578.14" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (24 samples, 0.46%; +0.02%)</title><rect x="1128.1" y="501" width="5.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1131.09" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="689.5" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.48" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="49.3" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="52.32" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.68" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="609.0" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.04" y="623.5" ></text>
</g>
<g >
<title>__dynamic_cast (3 samples, 0.06%; +0.06%)</title><rect x="645.0" y="645" width="0.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="647.97" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (77 samples, 1.47%; -0.02%)</title><rect x="395.5" y="373" width="17.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="398.50" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="719.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%; -0.02%)</title><rect x="129.3" y="613" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="132.31" y="623.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="913.4" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="916.42" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (3 samples, 0.06%; +0.04%)</title><rect x="496.1" y="501" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="499.06" y="511.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (10 samples, 0.19%; +0.02%)</title><rect x="1021.4" y="341" width="2.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1024.43" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.21" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; -0.02%)</title><rect x="1060.1" y="485" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1063.07" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.2" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1132.21" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="98.4" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="101.35" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.04%)</title><rect x="659.4" y="661" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="662.43" y="671.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.02" y="287.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="508.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="511.26" y="431.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (1 samples, 0.02%; -0.10%)</title><rect x="892.6" y="517" width="0.3" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="895.63" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%; +0.02%)</title><rect x="268.5" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="271.51" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (617 samples, 11.82%; +0.06%)</title><rect x="952.1" y="597" width="139.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="955.06" y="607.5" >cql3::statements:..</text>
</g>
<g >
<title>std::move&lt;std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_Vector_impl&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="63.1" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="66.10" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.13%; +0.04%)</title><rect x="1006.1" y="421" width="1.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1009.06" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%; +0.04%)</title><rect x="430.5" y="469" width="2.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="433.52" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (325 samples, 6.22%; -0.04%)</title><rect x="343.5" y="437" width="73.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="346.53" y="447.5" >mutation..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="829.1" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.13" y="495.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (37 samples, 0.71%; +0.15%)</title><rect x="475.9" y="469" width="8.4" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="478.94" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="46.2" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="49.15" y="479.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (6 samples, 0.11%; 0.00%)</title><rect x="1162.0" y="629" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.98" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.90" y="511.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="686.1" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="689.09" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%; 0.00%)</title><rect x="836.8" y="597" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.81" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1155.2" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1158.20" y="655.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (7 samples, 0.13%; +0.04%)</title><rect x="335.6" y="485" width="1.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="338.62" y="495.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.98" y="559.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="271.0" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="273.99" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="866.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.42" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="946.0" y="533" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="948.96" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (2 samples, 0.04%; -0.04%)</title><rect x="242.3" y="245" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="245.29" y="255.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="642.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.48" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="866.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.64" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.47" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="357.1" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="360.09" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="817.4" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="820.38" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (2 samples, 0.04%; +0.04%)</title><rect x="968.3" y="549" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="971.33" y="559.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.17" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1050.1" y="517" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1053.13" y="527.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="23.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="26.56" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%; +0.10%)</title><rect x="295.8" y="405" width="3.2" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="298.85" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%; -0.02%)</title><rect x="753.7" y="581" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="756.66" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="656.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.94" y="655.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.15" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (6 samples, 0.11%; +0.02%)</title><rect x="297.7" y="389" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="300.66" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="946.9" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="949.86" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="48.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.87" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="749.8" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="752.82" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="610.4" y="565" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="613.39" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (6 samples, 0.11%; -0.02%)</title><rect x="647.5" y="613" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="650.45" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;checked_file_impl&gt;::shared_ptr_count_for&lt;std::function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="630.7" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.73" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="870.7" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.71" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (214 samples, 4.10%; 0.00%)</title><rect x="21.8" y="645" width="48.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.75" y="655.5" >cql3..</text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%; 0.00%)</title><rect x="130.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="133.67" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.02%)</title><rect x="290.4" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="293.43" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="941.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.98" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (247 samples, 4.73%; +0.02%)</title><rect x="21.3" y="661" width="55.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="24.30" y="671.5" >cql3:..</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="716.1" y="677" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="719.15" y="687.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="819.9" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="822.87" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="461.5" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="464.48" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1047.9" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1050.87" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator=&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="21.5" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="24.52" y="639.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; -0.04%)</title><rect x="735.8" y="469" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="738.81" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%; -0.04%)</title><rect x="397.1" y="357" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="400.08" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="413.4" y="389" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="416.35" y="399.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (17 samples, 0.33%; +0.02%)</title><rect x="851.5" y="613" width="3.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="854.50" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; -0.08%)</title><rect x="217.0" y="373" width="1.8" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="219.99" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.10%; +0.02%)</title><rect x="686.5" y="501" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="689.55" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="957.5" y="581" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.48" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="834.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="837.78" y="607.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.17" y="671.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; -0.02%)</title><rect x="227.2" y="309" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="230.15" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; +0.02%)</title><rect x="111.2" y="37" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="114.23" y="47.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (21 samples, 0.40%; -0.02%)</title><rect x="1120.9" y="453" width="4.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1123.85" y="463.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (6 samples, 0.11%; -0.02%)</title><rect x="930.1" y="533" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="933.14" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="866.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="869.19" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="297.2" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="300.20" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="110.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="113.56" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::formatter&lt;fmt::v7::basic_string_view&lt;char&gt;, char, void&gt;::format&lt;fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="13.68" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="551.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.97" y="479.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; +0.02%)</title><rect x="942.8" y="549" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="945.79" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="531.3" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="534.31" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="383.5" ></text>
</g>
<g >
<title>partition_entry::read (9 samples, 0.17%; -0.04%)</title><rect x="526.1" y="485" width="2.0" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="529.11" y="495.5" ></text>
</g>
<g >
<title>seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (2 samples, 0.04%; +0.02%)</title><rect x="630.5" y="661" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="633.51" y="671.5" ></text>
</g>
<g >
<title>std::apply&lt;sstables::sstable_directory::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.13" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%; +0.02%)</title><rect x="518.7" y="373" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="521.65" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="582.4" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="585.37" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (3 samples, 0.06%; +0.06%)</title><rect x="967.6" y="549" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="970.65" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (70 samples, 1.34%; -0.06%)</title><rect x="555.3" y="533" width="15.8" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="558.26" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; 0.00%)</title><rect x="800.4" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.43" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;cql3::expr::expression const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="73.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="76.72" y="447.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="1037.5" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.47" y="431.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (3 samples, 0.06%; +0.06%)</title><rect x="523.4" y="421" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="526.40" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (3 samples, 0.06%; 0.00%)</title><rect x="71.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.69" y="607.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (2 samples, 0.04%; 0.00%)</title><rect x="17.5" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.46" y="751.5" ></text>
</g>
<g >
<title>rows_entry::rows_entry (1 samples, 0.02%; 0.00%)</title><rect x="17.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.46" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1109.6" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1112.56" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (59 samples, 1.13%; 0.00%)</title><rect x="701.5" y="661" width="13.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.46" y="671.5" ></text>
</g>
<g >
<title>executor&lt;test_read (619 samples, 11.85%; +0.06%)</title><rect x="720.0" y="661" width="139.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="722.99" y="671.5" >executor&lt;test_read</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.1" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="61.13" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="55.6" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.65" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (3 samples, 0.06%; -0.02%)</title><rect x="604.3" y="613" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="607.29" y="623.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="607.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.08%)</title><rect x="415.2" y="405" width="0.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="418.16" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1109.3" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1112.33" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (9 samples, 0.17%; -0.02%)</title><rect x="389.9" y="341" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="392.85" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (7 samples, 0.13%; 0.00%)</title><rect x="78.0" y="533" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.02" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="53.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.16" y="431.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="219.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.25" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%; 0.00%)</title><rect x="937.6" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.59" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="937.1" y="549" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="940.14" y="559.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="873.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.97" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; -0.06%)</title><rect x="144.9" y="629" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="147.90" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.1" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.06" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="667.3" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="670.34" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="708.5" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="711.46" y="607.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; -0.02%)</title><rect x="17.9" y="661" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="20.91" y="671.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="190.3" y="437" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="193.32" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%; 0.00%)</title><rect x="649.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.94" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (15 samples, 0.29%; +0.04%)</title><rect x="312.6" y="517" width="3.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="315.57" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="950.9" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="953.93" y="559.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (11 samples, 0.21%; -0.02%)</title><rect x="525.7" y="501" width="2.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="528.66" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (2 samples, 0.04%; +0.02%)</title><rect x="908.2" y="469" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="911.22" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.64" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1128.3" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.31" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="616.0" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="619.04" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (8 samples, 0.15%; -0.02%)</title><rect x="46.6" y="453" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="49.61" y="463.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; -0.02%)</title><rect x="37.8" y="389" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="40.79" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.94" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="707.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.56" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="751.4" y="453" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="754.40" y="463.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="55.6" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="58.65" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="652.9" y="613" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="655.88" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%; -0.02%)</title><rect x="1035.9" y="453" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1038.89" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (389 samples, 7.45%; -0.04%)</title><rect x="340.1" y="453" width="87.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="343.14" y="463.5" >flat_mutat..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="433.5" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="436.46" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; -0.02%)</title><rect x="698.7" y="629" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="701.75" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="18.4" y="725" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="21.36" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="146.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.71" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.04%)</title><rect x="1098.3" y="517" width="2.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1101.26" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="957.9" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.93" y="559.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%; 0.00%)</title><rect x="133.8" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="136.83" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1059.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1062.62" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="428.3" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="431.27" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; +0.02%)</title><rect x="732.4" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="735.42" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.08%)</title><rect x="705.3" y="629" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="708.30" y="639.5" ></text>
</g>
<g >
<title>abstract_type::from_string (1 samples, 0.02%; 0.00%)</title><rect x="70.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.79" y="559.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.9" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="735.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="186.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="189.48" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_initialize_map (1 samples, 0.02%; 0.00%)</title><rect x="22.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="525.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.43" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%; +0.02%)</title><rect x="53.4" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="56.39" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; 0.00%)</title><rect x="334.3" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="337.26" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (67 samples, 1.28%; -0.04%)</title><rect x="397.5" y="357" width="15.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="400.53" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="581" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%; -0.02%)</title><rect x="847.2" y="549" width="2.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="850.21" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (11 samples, 0.21%; +0.10%)</title><rect x="710.5" y="613" width="2.5" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="713.50" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.02%)</title><rect x="995.4" y="421" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="998.44" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.52%; -0.02%)</title><rect x="1127.9" y="565" width="6.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1130.86" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="463.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.13%; +0.02%)</title><rect x="215.0" y="389" width="1.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="217.95" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%; 0.00%)</title><rect x="852.2" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.18" y="575.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (9 samples, 0.17%; 0.00%)</title><rect x="619.2" y="613" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="622.21" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; -0.02%)</title><rect x="1141.6" y="661" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1144.64" y="671.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%; +0.04%)</title><rect x="801.6" y="293" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="804.56" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="533.8" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="536.79" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.04" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="687.7" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.68" y="511.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (2 samples, 0.04%; +0.04%)</title><rect x="983.0" y="517" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="986.01" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="311.2" y="485" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="314.21" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (2 samples, 0.04%; 0.00%)</title><rect x="210.9" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.88" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; +0.02%)</title><rect x="648.8" y="613" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="651.81" y="623.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.02%)</title><rect x="502.2" y="485" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="505.16" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="580.1" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="583.11" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;db::replay_position, std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt;, std::_Select1st&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt;, std::less&lt;db::replay_position&gt;, std::allocator&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.02%; +0.02%)</title><rect x="1126.1" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.05" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="135.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="138.19" y="575.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (3 samples, 0.06%; +0.06%)</title><rect x="452.4" y="501" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="455.44" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.06%)</title><rect x="996.8" y="405" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="999.80" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%; +0.02%)</title><rect x="346.5" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="349.46" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (74 samples, 1.42%; -0.02%)</title><rect x="507.4" y="453" width="16.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="510.35" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::kernel_submit_work (4 samples, 0.08%; +0.04%)</title><rect x="1166.0" y="677" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1169.05" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (7 samples, 0.13%; -0.02%)</title><rect x="913.2" y="517" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="916.19" y="527.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.10%; 0.00%)</title><rect x="432.6" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="435.56" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="444.5" y="533" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="447.53" y="543.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (214 samples, 4.10%; 0.00%)</title><rect x="21.8" y="629" width="48.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.75" y="639.5" >cql3..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%; +0.02%)</title><rect x="322.3" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="325.29" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%; 0.00%)</title><rect x="866.0" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.96" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;db::replay_position, std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt;, std::_Select1st&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt;, std::less&lt;db::replay_position&gt;, std::allocator&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;db::replay_position const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (19 samples, 0.36%; +0.04%)</title><rect x="1055.3" y="485" width="4.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1058.32" y="495.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1000.0" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1002.96" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="294.3" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="297.27" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (8 samples, 0.15%; 0.00%)</title><rect x="748.2" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.23" y="511.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="671.4" y="629" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="674.41" y="639.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="559.5" ></text>
</g>
<g >
<title>database::find_schema (17 samples, 0.33%; -0.02%)</title><rect x="826.6" y="549" width="3.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="829.64" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="714.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.79" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="671.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="815.6" y="501" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="818.57" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (1 samples, 0.02%; 0.00%)</title><rect x="36.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.89" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1150.0" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.00" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::is_any_node_being_replaced (2 samples, 0.04%; +0.04%)</title><rect x="1075.4" y="485" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1078.43" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (8 samples, 0.15%; +0.04%)</title><rect x="991.4" y="453" width="1.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="994.37" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="689.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.48" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="104.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.23" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (55 samples, 1.05%; +0.02%)</title><rect x="282.5" y="421" width="12.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="285.52" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (6 samples, 0.11%; -0.02%)</title><rect x="619.9" y="597" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="622.89" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="940.8" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="943.76" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (553 samples, 10.59%; -0.04%)</title><rect x="184.7" y="501" width="124.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="187.67" y="511.5" >mutation_reader..</text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="756.8" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="759.82" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="552.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="555.77" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (112 samples, 2.14%; -0.02%)</title><rect x="788.7" y="469" width="25.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="791.68" y="479.5" >s..</text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="367.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (10 samples, 0.19%; +0.02%)</title><rect x="614.0" y="581" width="2.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="617.01" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="421.3" y="341" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="424.26" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="701.9" y="645" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="704.91" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%; 0.00%)</title><rect x="60.6" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.62" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.55" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%; +0.02%)</title><rect x="368.6" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="371.61" y="367.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="947.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.31" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (14 samples, 0.27%; -0.02%)</title><rect x="852.2" y="581" width="3.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="855.18" y="591.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (5 samples, 0.10%; -0.10%)</title><rect x="1114.8" y="565" width="1.1" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1117.75" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1022.8" y="309" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1025.78" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="989.8" y="469" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="992.79" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="808.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="811.12" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="778.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.06" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (10 samples, 0.19%; +0.04%)</title><rect x="1094.2" y="565" width="2.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1097.19" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="275.5" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="278.51" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="80.0" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="83.05" y="575.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%; +0.02%)</title><rect x="896.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="899.92" y="463.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (12 samples, 0.23%; +0.06%)</title><rect x="785.7" y="469" width="2.8" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="788.74" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (7 samples, 0.13%; +0.02%)</title><rect x="249.1" y="293" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="252.07" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="677" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="52.9" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.93" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="672.5" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.54" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="913.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="915.96" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (57 samples, 1.09%; 0.00%)</title><rect x="24.2" y="533" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.24" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; -0.06%)</title><rect x="602.0" y="613" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="605.03" y="623.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (21 samples, 0.40%; +0.02%)</title><rect x="1020.3" y="373" width="4.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1023.30" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (11 samples, 0.21%; 0.00%)</title><rect x="100.4" y="629" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.39" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="39.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="351.5" ></text>
</g>
<g >
<title>schema::get_column_definition (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.98" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="781.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.90" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (34 samples, 0.65%; -0.04%)</title><rect x="401.8" y="341" width="7.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="404.83" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.34" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.68" y="671.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; -0.06%)</title><rect x="461.0" y="469" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="464.03" y="479.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (4 samples, 0.08%; +0.02%)</title><rect x="594.6" y="565" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="597.58" y="575.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (4 samples, 0.08%; 0.00%)</title><rect x="422.6" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="425.62" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="793.4" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="796.43" y="415.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.56%; +0.02%)</title><rect x="1127.4" y="645" width="6.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1130.41" y="655.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="207.3" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="210.27" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="795.5" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.46" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (10 samples, 0.19%; -0.04%)</title><rect x="742.6" y="517" width="2.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="745.59" y="527.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (7 samples, 0.13%; +0.02%)</title><rect x="538.3" y="485" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="541.31" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="661.2" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="664.24" y="671.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%; +0.02%)</title><rect x="592.5" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="595.54" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.13%; -0.15%)</title><rect x="247.5" y="293" width="1.6" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="250.49" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%; 0.00%)</title><rect x="950.0" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.02" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="165.2" y="549" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="168.24" y="559.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%; +0.02%)</title><rect x="604.3" y="597" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="607.29" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.02%)</title><rect x="888.8" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="891.79" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.08%)</title><rect x="1032.3" y="421" width="1.1" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1035.27" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.5" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="69.49" y="559.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (22 samples, 0.42%; -0.02%)</title><rect x="462.4" y="469" width="5.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="465.39" y="479.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (4 samples, 0.08%; +0.02%)</title><rect x="538.8" y="437" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="541.76" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="1164.7" y="677" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1167.69" y="687.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; 0.00%)</title><rect x="1022.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.33" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.04%)</title><rect x="1164.5" y="677" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1167.47" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::push_back (2 samples, 0.04%; +0.04%)</title><rect x="1146.2" y="629" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1149.16" y="639.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (2 samples, 0.04%; +0.02%)</title><rect x="522.9" y="421" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="525.95" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="950.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.70" y="527.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (3 samples, 0.06%; +0.06%)</title><rect x="119.8" y="645" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="122.82" y="655.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (2 samples, 0.04%; -0.11%)</title><rect x="881.8" y="613" width="0.4" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="884.78" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="928.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.56" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="831.8" y="469" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="834.84" y="479.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="542.6" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.60" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="774.0" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="776.99" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%; +0.04%)</title><rect x="987.5" y="485" width="3.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="990.53" y="495.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.02%)</title><rect x="78.5" y="485" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="81.47" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; -0.02%)</title><rect x="103.6" y="629" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="106.55" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (15 samples, 0.29%; 0.00%)</title><rect x="24.5" y="453" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.46" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="814.2" y="453" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="817.22" y="463.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="809.0" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="812.02" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="675.0" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="678.02" y="655.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (54 samples, 1.03%; +0.02%)</title><rect x="1144.4" y="661" width="12.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1147.35" y="671.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="869.1" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.13" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="770.4" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="773.38" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (2 samples, 0.04%; 0.00%)</title><rect x="73.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="856.0" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="859.02" y="655.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (33 samples, 0.63%; +0.02%)</title><rect x="1063.2" y="437" width="7.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1066.23" y="447.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.13%; 0.00%)</title><rect x="766.3" y="517" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.31" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; -0.10%)</title><rect x="674.3" y="629" width="0.3" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="677.34" y="639.5" ></text>
</g>
<g >
<title>validation::validate_column_family (27 samples, 0.52%; +0.02%)</title><rect x="826.4" y="565" width="6.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="829.42" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_max_size&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; const&gt; (1 samples, 0.02%; +0.02%)</title><rect x="26.9" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="29.95" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; 0.00%)</title><rect x="93.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="96.61" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; 0.00%)</title><rect x="666.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.21" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="969.0" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="972.00" y="559.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; -0.02%)</title><rect x="965.8" y="549" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="968.84" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="59.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.71" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%; -0.08%)</title><rect x="557.5" y="485" width="0.5" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="560.52" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="1013.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.52" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="511.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (46 samples, 0.88%; +0.08%)</title><rect x="484.3" y="485" width="10.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="487.30" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="949.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.80" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="767.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="54.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.29" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (5 samples, 0.10%; 0.00%)</title><rect x="550.1" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.06" y="543.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="607.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,172 samples, 22.44%; +0.04%)</title><rect x="172.7" y="597" width="264.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="175.70" y="607.5" >query::consume_page&lt;</text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="17.2" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="20.23" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="753.4" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="756.43" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="630.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.28" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="166.4" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="169.37" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (15 samples, 0.29%; 0.00%)</title><rect x="671.4" y="661" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.41" y="671.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (3 samples, 0.06%; +0.02%)</title><rect x="414.0" y="405" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="417.03" y="415.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (4 samples, 0.08%; 0.00%)</title><rect x="35.5" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.53" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="744.8" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="747.84" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="911.2" y="453" width="0.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="914.16" y="463.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::apply_with_commitlog (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.08%)</title><rect x="1015.8" y="389" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1018.78" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.27" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.62" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="287.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.06%)</title><rect x="706.2" y="629" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="709.20" y="639.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; -0.02%)</title><rect x="475.7" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="478.72" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%; +0.04%)</title><rect x="571.3" y="533" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="574.30" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; +0.02%)</title><rect x="774.4" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="777.45" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; +0.04%)</title><rect x="306.2" y="453" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="309.24" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="826.0" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="828.97" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1060.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.75" y="511.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="687.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (11 samples, 0.21%; -0.02%)</title><rect x="991.1" y="469" width="2.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="994.15" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%; +0.04%)</title><rect x="29.2" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="32.21" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (75 samples, 1.44%; 0.00%)</title><rect x="792.1" y="437" width="16.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.07" y="447.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="706.2" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="709.20" y="623.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; 0.00%)</title><rect x="537.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="540.86" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="603.4" y="613" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="606.39" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1088.5" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1091.54" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (55 samples, 1.05%; -0.02%)</title><rect x="644.1" y="661" width="12.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="647.06" y="671.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.84%; 0.00%)</title><rect x="1179.6" y="805" width="9.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.61" y="815.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="415.5" ></text>
</g>
<g >
<title>auth::resource::resource (11 samples, 0.21%; 0.00%)</title><rect x="771.7" y="549" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.73" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13 samples, 0.25%; -0.08%)</title><rect x="1071.1" y="453" width="3.0" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1074.14" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (7 samples, 0.13%; 0.00%)</title><rect x="571.3" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.30" y="559.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.02" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; +0.02%)</title><rect x="1127.9" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1130.86" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="607.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="80.5" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="83.50" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (121 samples, 2.32%; +0.08%)</title><rect x="889.5" y="581" width="27.3" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="892.46" y="591.5" >c..</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (573 samples, 10.97%; +0.15%)</title><rect x="182.4" y="517" width="129.5" height="15.0" fill="rgb(255,90,90)" rx="2" ry="2" />
<text  x="185.41" y="527.5" >mutation_fragmen..</text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (23 samples, 0.44%; 0.00%)</title><rect x="868.7" y="565" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="657.2" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="660.17" y="671.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.11%; -0.11%)</title><rect x="1094.6" y="549" width="1.4" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="1097.64" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="64.0" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="67.01" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (4 samples, 0.08%; +0.02%)</title><rect x="285.7" y="373" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="288.68" y="383.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; -0.04%)</title><rect x="558.4" y="501" width="1.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="561.42" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="795.9" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="798.91" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="524.5" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="527.53" y="463.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (2 samples, 0.04%; 0.00%)</title><rect x="1128.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (6 samples, 0.11%; -0.02%)</title><rect x="164.8" y="581" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="167.79" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (11 samples, 0.21%; +0.04%)</title><rect x="852.9" y="549" width="2.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="855.86" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="26.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.50" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="54.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.06" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; +0.02%)</title><rect x="1070.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1073.92" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="108.7" y="661" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="111.75" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; +0.04%)</title><rect x="115.3" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="118.30" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.97" y="463.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; +0.02%)</title><rect x="940.5" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="943.53" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.04%)</title><rect x="699.9" y="661" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="702.88" y="671.5" ></text>
</g>
<g >
<title>schema::raw_schema::raw_schema (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="351.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (11 samples, 0.21%; 0.00%)</title><rect x="77.3" y="581" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.34" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (212 samples, 4.06%; 0.00%)</title><rect x="22.0" y="613" width="47.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="623.5" >cql3..</text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; 0.00%)</title><rect x="438.2" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.21" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.72" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; 0.00%)</title><rect x="392.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="395.11" y="383.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; 0.00%)</title><rect x="1027.3" y="389" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1030.30" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (11 samples, 0.21%; +0.02%)</title><rect x="564.3" y="469" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="567.30" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="582.1" y="565" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="585.15" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.02%)</title><rect x="105.1" y="629" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="108.13" y="639.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="815.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_output_stream (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="719.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%; -0.02%)</title><rect x="158.5" y="613" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="161.46" y="623.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (1 samples, 0.02%; +0.02%)</title><rect x="873.2" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="876.19" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.10%; -0.02%)</title><rect x="42.1" y="501" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="45.09" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="473.5" y="485" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="476.46" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="681.3" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="684.35" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="857.6" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="860.60" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="430.1" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="433.07" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.62" y="543.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (7 samples, 0.13%; 0.00%)</title><rect x="1125.6" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.60" y="495.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (10 samples, 0.19%; 0.00%)</title><rect x="54.5" y="453" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.52" y="463.5" ></text>
</g>
<g >
<title>make_combined_reader (66 samples, 1.26%; 0.00%)</title><rect x="453.1" y="501" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="456.12" y="511.5" ></text>
</g>
<g >
<title>schema::cdc_options (2 samples, 0.04%; 0.00%)</title><rect x="864.8" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="264.9" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.89" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%; 0.00%)</title><rect x="60.6" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.62" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="39.4" y="357" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="42.38" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%; +0.02%)</title><rect x="1101.4" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1104.42" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.1" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="42.15" y="335.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="750.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.49" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (11 samples, 0.21%; 0.00%)</title><rect x="707.1" y="613" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.11" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="336.1" y="453" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="339.07" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="109.2" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="112.20" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="809.2" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="812.25" y="447.5" ></text>
</g>
<g >
<title>column_mapping::regular_column_at (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; +0.04%)</title><rect x="980.3" y="517" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="983.30" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_table_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.68" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="620.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.79" y="575.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="1189.5" y="805" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1192.55" y="815.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (5 samples, 0.10%; +0.02%)</title><rect x="651.7" y="645" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="654.75" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%; -0.04%)</title><rect x="835.7" y="581" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="838.68" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="38.2" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.94" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1023.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.46" y="319.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (3 samples, 0.06%; +0.04%)</title><rect x="555.9" y="517" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="558.94" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.4" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="42.38" y="319.5" ></text>
</g>
<g >
<title>service::storage_service::prepare_to_join (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="261.3" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.28" y="335.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="893.5" y="485" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.53" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="82.5" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="85.54" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (16 samples, 0.31%; -0.04%)</title><rect x="1027.3" y="405" width="3.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1030.30" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="255.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="110.3" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="113.33" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,792 samples, 91.77%; 0.00%)</title><rect x="85.2" y="773" width="1082.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="783.5" >seastar::app_template::run</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="559.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (1 samples, 0.02%; +0.02%)</title><rect x="836.1" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="839.14" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="715.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.47" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (2 samples, 0.04%; +0.04%)</title><rect x="981.7" y="533" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="984.66" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; +0.02%)</title><rect x="252.9" y="293" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="255.91" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (38 samples, 0.73%; 0.00%)</title><rect x="28.1" y="469" width="8.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.08" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="177.4" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="180.44" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="949.8" y="549" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="952.80" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; 0.00%)</title><rect x="848.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.56" y="543.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="637.7" y="661" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="640.74" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="367.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (580 samples, 11.11%; +0.10%)</title><rect x="725.0" y="645" width="131.0" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="727.96" y="655.5" >single_node_cql_..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.8" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="45.77" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (28 samples, 0.54%; 0.00%)</title><rect x="240.9" y="261" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="243.94" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="832.5" y="581" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="835.52" y="591.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (3 samples, 0.06%; 0.00%)</title><rect x="1121.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1128.5" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1131.54" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (59 samples, 1.13%; +0.02%)</title><rect x="93.2" y="677" width="13.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="96.16" y="687.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (2 samples, 0.04%; 0.00%)</title><rect x="29.7" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.66" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; +0.02%)</title><rect x="36.4" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="39.44" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (8 samples, 0.15%; +0.02%)</title><rect x="805.4" y="277" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="808.40" y="287.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%; 0.00%)</title><rect x="868.9" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.90" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="276.2" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="279.19" y="415.5" ></text>
</g>
<g >
<title>ser::tombstone_view::operator tombstone (1 samples, 0.02%; 0.00%)</title><rect x="1124.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.02" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (2 samples, 0.04%; +0.02%)</title><rect x="318.0" y="517" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="320.99" y="527.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="328.2" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="331.16" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (16 samples, 0.31%; 0.00%)</title><rect x="948.2" y="597" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="951.22" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (10 samples, 0.19%; +0.08%)</title><rect x="404.8" y="325" width="2.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="407.76" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1027.1" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1030.08" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="517.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="520.07" y="383.5" ></text>
</g>
<g >
<title>table::query (2 samples, 0.04%; +0.04%)</title><rect x="1165.1" y="677" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1168.14" y="687.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%; -0.02%)</title><rect x="920.0" y="549" width="2.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="922.97" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%; 0.00%)</title><rect x="865.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.51" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="59.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.71" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%; 0.00%)</title><rect x="951.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.83" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="327.0" y="469" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="330.03" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="337.4" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="340.43" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.11%; -0.02%)</title><rect x="411.1" y="341" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="414.09" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="627.6" y="661" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="630.57" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.20" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; 0.00%)</title><rect x="273.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.48" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="253.8" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="256.82" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.10%; 0.00%)</title><rect x="1152.0" y="629" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1155.04" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="839.1" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="842.07" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (429 samples, 8.22%; -0.06%)</title><rect x="335.6" y="501" width="97.0" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="338.62" y="511.5" >seastar::in..</text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.02%)</title><rect x="450.6" y="517" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="453.64" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="1113.2" y="565" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1116.17" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (8 samples, 0.15%; -0.06%)</title><rect x="309.9" y="501" width="1.8" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="312.86" y="511.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (120 samples, 2.30%; -0.08%)</title><rect x="498.5" y="501" width="27.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="501.54" y="511.5" >m..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="781.0" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="784.00" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::set_errorRecovery (1 samples, 0.02%; 0.00%)</title><rect x="39.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.83" y="527.5" ></text>
</g>
<g >
<title>log_heap&lt;logalloc::segment_descriptor, logalloc::segment_descriptor_hist_options&gt;::adjust_up (1 samples, 0.02%; +0.02%)</title><rect x="11.4" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="14.36" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.04%)</title><rect x="218.3" y="357" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="221.34" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.02%)</title><rect x="634.6" y="661" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="637.57" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (2 samples, 0.04%; +0.02%)</title><rect x="633.2" y="645" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="636.22" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%; 0.00%)</title><rect x="111.7" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="687.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="80.7" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="83.73" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="958.8" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="961.84" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="577.2" y="517" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="580.18" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (5 samples, 0.10%; +0.08%)</title><rect x="465.1" y="437" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="468.10" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="696.3" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.26" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="717.7" y="677" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="720.73" y="687.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="652.2" y="629" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="655.20" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%; -0.02%)</title><rect x="1104.4" y="581" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1107.36" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1038.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.60" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="120.7" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="123.72" y="655.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="79.4" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="82.37" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="65.1" y="549" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="68.14" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; +0.02%)</title><rect x="862.6" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="865.57" y="543.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1034.3" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1037.31" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="378.1" y="325" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="381.10" y="335.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.06%)</title><rect x="795.7" y="325" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="798.69" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (28 samples, 0.54%; 0.00%)</title><rect x="417.9" y="421" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.87" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="268.1" y="357" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="271.05" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (1 samples, 0.02%; -0.02%)</title><rect x="558.2" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="561.20" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="861.0" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="863.99" y="687.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1121.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.76" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1101.2" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1104.19" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="459.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="462.67" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (3 samples, 0.06%; 0.00%)</title><rect x="25.6" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.59" y="431.5" ></text>
</g>
<g >
<title>seastar::jmp_buf_link::switch_in (1 samples, 0.02%; +0.02%)</title><rect x="629.8" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="632.83" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (329 samples, 6.30%; -0.04%)</title><rect x="758.9" y="597" width="74.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="761.85" y="607.5" >cql3::st..</text>
</g>
<g >
<title>row::compact_and_expire (81 samples, 1.55%; +0.02%)</title><rect x="394.6" y="389" width="18.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="397.60" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1129.9" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1132.89" y="319.5" ></text>
</g>
<g >
<title>sstables::metadata_base&lt;sstables::compaction_metadata&gt;::serialized_size (1 samples, 0.02%; +0.02%)</title><rect x="81.9" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="84.86" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="1150.0" y="597" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1153.00" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.11%; +0.02%)</title><rect x="1045.2" y="501" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1048.16" y="511.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.90" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.8" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.76" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="383.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;gms::gossiper&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="367.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="78.9" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="81.92" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::restrictions::restrictions&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::restrictions::restrictions&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="75.8" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.76" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="147.8" y="629" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="150.84" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.10%; -0.02%)</title><rect x="1155.4" y="645" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1158.43" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%; +0.02%)</title><rect x="983.5" y="501" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="986.47" y="511.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (4 samples, 0.08%; +0.02%)</title><rect x="72.8" y="549" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="75.82" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="767.4" y="501" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="770.44" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.10%; 0.00%)</title><rect x="42.1" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (42 samples, 0.80%; 0.00%)</title><rect x="840.9" y="613" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.88" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.33%; -0.10%)</title><rect x="490.2" y="389" width="3.8" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="493.18" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.69" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (9 samples, 0.17%; -0.02%)</title><rect x="676.8" y="661" width="2.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="679.83" y="671.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.99" y="351.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (4 samples, 0.08%; 0.00%)</title><rect x="72.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.82" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.11%; -0.08%)</title><rect x="341.9" y="437" width="1.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="344.95" y="447.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%; 0.00%)</title><rect x="1122.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.89" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="325.7" y="437" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="328.68" y="447.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_following (1 samples, 0.02%; +0.02%)</title><rect x="51.1" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="54.13" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="833.9" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="836.88" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="48.2" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="51.19" y="399.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (11 samples, 0.21%; +0.08%)</title><rect x="277.3" y="421" width="2.5" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="280.32" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.79" y="543.5" ></text>
</g>
<g >
<title>__mmap (1 samples, 0.02%; +0.02%)</title><rect x="1167.9" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1170.86" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="72.4" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="75.37" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="652.7" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="655.65" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="571.8" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="574.75" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="1137.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.58" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (56 samples, 1.07%; +0.02%)</title><rect x="24.2" y="501" width="12.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="27.24" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; +0.02%)</title><rect x="790.7" y="405" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="793.72" y="415.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%; +0.04%)</title><rect x="166.6" y="597" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="169.60" y="607.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="870.9" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.93" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (26 samples, 0.50%; +0.06%)</title><rect x="631.0" y="677" width="5.8" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="633.96" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (262 samples, 5.02%; 0.00%)</title><rect x="21.3" y="677" width="59.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.30" y="687.5" >cql3::..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.02%; +0.02%)</title><rect x="81.0" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="83.95" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (1 samples, 0.02%; +0.02%)</title><rect x="1165.6" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1168.60" y="703.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="125.9" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="128.92" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; +0.02%)</title><rect x="331.3" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="334.33" y="591.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="788.5" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="791.46" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.45" y="367.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="80.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.50" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (6 samples, 0.11%; 0.00%)</title><rect x="956.1" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="959.12" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1121.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.31" y="335.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.91" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="324.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="327.32" y="479.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (7 samples, 0.13%; -0.02%)</title><rect x="392.3" y="389" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="395.34" y="399.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="1143.5" y="661" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1146.45" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1049.4" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1052.45" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="621.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="624.47" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; +0.02%)</title><rect x="530.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="533.18" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="872.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.74" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (24 samples, 0.46%; +0.06%)</title><rect x="850.6" y="629" width="5.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="853.60" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (6 samples, 0.11%; -0.02%)</title><rect x="517.3" y="373" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="520.30" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="666.7" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.66" y="671.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,090 samples, 20.87%; -0.15%)</title><rect x="874.3" y="661" width="246.3" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="877.32" y="671.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="906.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="908.96" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (11 samples, 0.21%; 0.00%)</title><rect x="852.9" y="565" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.86" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="824.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.61" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.64" y="383.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="536.5" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="539.50" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="767.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; -0.02%)</title><rect x="17.2" y="677" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="20.23" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (1 samples, 0.02%; -0.02%)</title><rect x="541.9" y="517" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="544.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (26 samples, 0.50%; -0.10%)</title><rect x="534.0" y="501" width="5.9" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="537.02" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="399.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.05" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="60.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.62" y="447.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.4" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.45" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="999.1" y="469" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1002.06" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (4 samples, 0.08%; 0.00%)</title><rect x="78.5" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.47" y="511.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; +0.02%)</title><rect x="1121.8" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1124.76" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (3 samples, 0.06%; 0.00%)</title><rect x="642.0" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="639.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="529.0" y="501" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.05" y="511.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (12 samples, 0.23%; +0.11%)</title><rect x="1082.9" y="533" width="2.7" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="1085.89" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (5 samples, 0.10%; +0.02%)</title><rect x="47.1" y="325" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="50.06" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="866.0" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="868.96" y="495.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (4 samples, 0.08%; 0.00%)</title><rect x="1125.6" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.60" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (5 samples, 0.10%; 0.00%)</title><rect x="83.2" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.21" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="741" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="751.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="575.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="598.0" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="600.97" y="591.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%; +0.02%)</title><rect x="1165.8" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1168.82" y="687.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1079.5" y="485" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1082.50" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (16 samples, 0.31%; -0.02%)</title><rect x="652.9" y="645" width="3.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="655.88" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.06%)</title><rect x="656.5" y="661" width="0.7" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="659.49" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="551.6" y="565" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="554.64" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; -0.02%)</title><rect x="877.3" y="645" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="880.26" y="655.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="868.9" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="871.90" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (20 samples, 0.38%; +0.04%)</title><rect x="242.7" y="245" width="4.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="245.75" y="255.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="1030.5" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.47" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_keyspace_statement*, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.5" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="67.46" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1047.4" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.41" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%; 0.00%)</title><rect x="29.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.66" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.68" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="1090.8" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1093.80" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="575.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (3 samples, 0.06%; +0.06%)</title><rect x="887.0" y="597" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="889.98" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="86.4" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="89.38" y="703.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="558.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.97" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (2 samples, 0.04%; +0.02%)</title><rect x="88.2" y="693" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="91.18" y="703.5" ></text>
</g>
<g >
<title>query::result_set::result_set (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="575.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="755.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="758.69" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (4 samples, 0.08%; +0.06%)</title><rect x="640.2" y="661" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="643.22" y="671.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="895.8" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="898.79" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="615.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="618.82" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="1023.7" y="341" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1026.69" y="351.5" ></text>
</g>
<g >
<title>auth::resource::parent (6 samples, 0.11%; -0.02%)</title><rect x="781.7" y="501" width="1.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="784.68" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (178 samples, 3.41%; -0.13%)</title><rect x="1042.0" y="533" width="40.2" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="1044.99" y="543.5" >ser..</text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; +0.02%)</title><rect x="37.3" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="40.34" y="559.5" ></text>
</g>
<g >
<title>db::filter_for_query (1 samples, 0.02%; +0.02%)</title><rect x="974.4" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="977.43" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.0" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="79.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (1 samples, 0.02%; +0.02%)</title><rect x="630.1" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="633.05" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="560.9" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="563.91" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%; +0.06%)</title><rect x="1052.6" y="469" width="1.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="1055.61" y="479.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="769.9" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.93" y="559.5" ></text>
</g>
<g >
<title>database::do_apply (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="517" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="527.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="206.4" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="209.37" y="431.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (25 samples, 0.48%; +0.04%)</title><rect x="1065.0" y="421" width="5.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1068.04" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%; +0.02%)</title><rect x="870.0" y="421" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.03" y="431.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (26 samples, 0.50%; +0.02%)</title><rect x="454.0" y="469" width="5.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="457.03" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="860.3" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="863.31" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="48.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.87" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="415.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%; +0.02%)</title><rect x="412.9" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="415.90" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="518.4" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="521.43" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (689 samples, 13.19%; -0.08%)</title><rect x="175.6" y="581" width="155.7" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="178.63" y="591.5" >flat_mutation_reade..</text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1128.5" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.54" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="666.9" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="669.89" y="655.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="764.5" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="767.50" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="542.2" y="517" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="545.15" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="447.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%; 0.00%)</title><rect x="22.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="59.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.71" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.11%; +0.04%)</title><rect x="745.5" y="533" width="1.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="748.52" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; 0.00%)</title><rect x="696.7" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="511.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="26.5" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.50" y="399.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="789.6" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="792.59" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (58 samples, 1.11%; +0.02%)</title><rect x="895.6" y="501" width="13.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="898.56" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="50.0" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.00" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="215.9" y="341" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="218.86" y="351.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%; -0.02%)</title><rect x="109.9" y="661" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="112.88" y="671.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; -0.13%)</title><rect x="1003.1" y="453" width="0.3" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="1006.13" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (195 samples, 3.73%; -0.04%)</title><rect x="997.7" y="485" width="44.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1000.70" y="495.5" >serv..</text>
</g>
<g >
<title>service::client_state::ensure_has_permission (178 samples, 3.41%; 0.00%)</title><rect x="777.8" y="533" width="40.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="780.84" y="543.5" >ser..</text>
</g>
<g >
<title>auth::data_resource_view::table (2 samples, 0.04%; +0.02%)</title><rect x="777.2" y="533" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="780.16" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (9 samples, 0.17%; 0.00%)</title><rect x="1165.8" y="693" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.82" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="82.5" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.54" y="575.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (2 samples, 0.04%; 0.00%)</title><rect x="870.5" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.48" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="80.3" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="83.28" y="671.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (2 samples, 0.04%; +0.04%)</title><rect x="596.6" y="597" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="599.61" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="862.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.12" y="687.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (10 samples, 0.19%; +0.02%)</title><rect x="1122.0" y="421" width="2.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1124.98" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="877.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="880.49" y="623.5" ></text>
</g>
<g >
<title>_setjmp (1 samples, 0.02%; 0.00%)</title><rect x="629.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.60" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="845.4" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.40" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="399.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%; +0.02%)</title><rect x="100.6" y="597" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="103.61" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (179 samples, 3.43%; 0.00%)</title><rect x="1000.2" y="469" width="40.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.19" y="479.5" >ser..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="536.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.73" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; -0.06%)</title><rect x="146.3" y="629" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="149.26" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.25%; 0.00%)</title><rect x="663.0" y="645" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.04" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (47 samples, 0.90%; 0.00%)</title><rect x="1050.6" y="517" width="10.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.58" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (43 samples, 0.82%; -0.04%)</title><rect x="237.8" y="277" width="9.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="240.77" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%; +0.02%)</title><rect x="37.6" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="40.57" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (8 samples, 0.15%; +0.02%)</title><rect x="496.7" y="501" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="499.73" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="906.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="909.19" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%; +0.02%)</title><rect x="812.9" y="405" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="815.86" y="415.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (4 samples, 0.08%; 0.00%)</title><rect x="70.8" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.79" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (19 samples, 0.36%; -0.04%)</title><rect x="585.8" y="597" width="4.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="588.76" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; -0.02%)</title><rect x="941.2" y="581" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="944.21" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; 0.00%)</title><rect x="326.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.35" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="689.0" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.03" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="384.4" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="387.43" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (2 samples, 0.04%; 0.00%)</title><rect x="858.1" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.05" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="895.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.34" y="495.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="870.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.48" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="642.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.48" y="559.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (3 samples, 0.06%; 0.00%)</title><rect x="83.2" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.21" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.90" y="463.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="46.6" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="351.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%; 0.00%)</title><rect x="974.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.65" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="751.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="431.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%; -0.02%)</title><rect x="215.9" y="373" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="218.86" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="405" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.06%)</title><rect x="1110.2" y="565" width="1.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1113.23" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="468.0" y="485" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="471.04" y="495.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="82.1" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%; -0.02%)</title><rect x="316.6" y="533" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="319.64" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (2 samples, 0.04%; 0.00%)</title><rect x="575.6" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.60" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="826.9" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="829.87" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="986.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.18" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (438 samples, 8.39%; -0.02%)</title><rect x="443.6" y="549" width="99.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="446.63" y="559.5" >std::_Funct..</text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="527.5" ></text>
</g>
<g >
<title>query_result_builder::consume (149 samples, 2.85%; 0.00%)</title><rect x="358.7" y="389" width="33.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="361.67" y="399.5" >qu..</text>
</g>
<g >
<title>query::querier_base::querier_base (5 samples, 0.10%; +0.02%)</title><rect x="620.1" y="581" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="623.11" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1041.3" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1044.31" y="479.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; 0.00%)</title><rect x="1167.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.18" y="655.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="214.7" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="217.73" y="383.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; +0.02%)</title><rect x="998.8" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1001.83" y="479.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="18.8" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="21.81" y="575.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.02%)</title><rect x="935.3" y="517" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="938.34" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (9 samples, 0.17%; +0.02%)</title><rect x="995.0" y="453" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="997.99" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1133.3" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1136.28" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="718.4" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="721.41" y="687.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.34" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="56.8" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="59.78" y="495.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="757.3" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.27" y="575.5" ></text>
</g>
<g >
<title>free (10 samples, 0.19%; +0.06%)</title><rect x="419.5" y="357" width="2.2" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="422.45" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="795.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.69" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.08%)</title><rect x="913.4" y="485" width="1.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="916.42" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (68 samples, 1.30%; +0.08%)</title><rect x="188.3" y="469" width="15.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="191.29" y="479.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.08%)</title><rect x="822.6" y="549" width="1.6" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="825.58" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (44 samples, 0.84%; +0.02%)</title><rect x="864.4" y="613" width="9.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="867.38" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (9 samples, 0.17%; +0.08%)</title><rect x="772.0" y="517" width="2.0" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="774.96" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::max_size (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.95" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="751.5" ></text>
</g>
<g >
<title>libat_store_16_i1 (1 samples, 0.02%; +0.02%)</title><rect x="715.0" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="718.02" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%; 0.00%)</title><rect x="994.8" y="469" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="997.76" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.15" y="351.5" ></text>
</g>
<g >
<title>seastar::current_backtrace (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (4 samples, 0.08%; 0.00%)</title><rect x="944.1" y="581" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="947.15" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.04%)</title><rect x="356.9" y="357" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="359.86" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; -0.02%)</title><rect x="484.1" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="487.08" y="463.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.10%; +0.08%)</title><rect x="598.4" y="581" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="601.42" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1025.3" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1028.27" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, std::function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1127.6" y="597" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.63" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%; +0.02%)</title><rect x="411.8" y="325" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="414.77" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="999.5" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1002.51" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%; +0.04%)</title><rect x="291.6" y="389" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="294.55" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%; +0.02%)</title><rect x="567.7" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="570.69" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="591.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.7" y="293" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="43.73" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="910.3" y="453" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="913.25" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.02%)</title><rect x="122.1" y="645" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="125.08" y="655.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="19.3" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="22.26" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="511.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%; +0.02%)</title><rect x="869.6" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="872.58" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="672.1" y="613" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="675.08" y="623.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="974.9" y="533" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.88" y="543.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,202 samples, 23.02%; +0.02%)</title><rect x="863.5" y="677" width="271.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="866.48" y="687.5" >seastar::lambda_task&lt;seastar::execut..</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1109.1" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1112.10" y="607.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.63" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; -0.02%)</title><rect x="1095.1" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1098.09" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1127.6" y="629" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.63" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.02%)</title><rect x="803.8" y="293" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="806.82" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::posix_file_impl::close (1 samples, 0.02%; +0.02%)</title><rect x="87.1" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="90.05" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="46.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="109.4" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.43" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="565.0" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="567.98" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="367.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1032.3" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.27" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_roles_statement, std::default_delete&lt;cql3::statements::list_roles_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_roles_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.8" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="71.75" y="575.5" ></text>
</g>
<g >
<title>gms::gossiper::gossiper (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="303.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%; 0.00%)</title><rect x="1167.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.95" y="671.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (3 samples, 0.06%; 0.00%)</title><rect x="1121.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (2 samples, 0.04%; +0.02%)</title><rect x="423.7" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="426.75" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="70.3" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="73.33" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (18 samples, 0.34%; -0.02%)</title><rect x="804.0" y="309" width="4.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="807.05" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="707.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="710.79" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%; 0.00%)</title><rect x="1167.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.40" y="639.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="588.0" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="591.02" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.06%)</title><rect x="782.6" y="453" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="785.58" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (6 samples, 0.11%; +0.04%)</title><rect x="675.5" y="661" width="1.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="678.47" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="104.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.00" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="267.4" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="270.38" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="947.5" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="950.54" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="44.6" y="309" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="47.57" y="319.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (5 samples, 0.10%; 0.00%)</title><rect x="869.8" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.80" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (4 samples, 0.08%; -0.02%)</title><rect x="70.8" y="581" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="73.79" y="591.5" ></text>
</g>
<g >
<title>all (5,222 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="838.8" y="533" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="841.85" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.11%; 0.00%)</title><rect x="682.9" y="629" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.93" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%; +0.04%)</title><rect x="668.2" y="629" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="671.24" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="309.6" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="312.63" y="511.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (11 samples, 0.21%; 0.00%)</title><rect x="945.7" y="565" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.73" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="797.3" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="800.27" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (22 samples, 0.42%; -0.04%)</title><rect x="611.8" y="613" width="4.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="614.75" y="623.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (9 samples, 0.17%; 0.00%)</title><rect x="513.5" y="389" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="516.45" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="367.5" ></text>
</g>
<g >
<title>table::as_mutation_source (3 samples, 0.06%; -0.02%)</title><rect x="621.7" y="613" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="624.69" y="623.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1148.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.87" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%; +0.02%)</title><rect x="407.9" y="309" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="410.93" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (4 samples, 0.08%; -0.02%)</title><rect x="1146.6" y="629" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1149.61" y="639.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_view_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="67.4" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.40" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="862.3" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="519.3" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="522.33" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="415.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (2 samples, 0.04%; 0.00%)</title><rect x="62.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.97" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (442 samples, 8.46%; +0.02%)</title><rect x="442.7" y="565" width="99.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="445.73" y="575.5" >std::functio..</text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.06%)</title><rect x="614.7" y="549" width="1.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="617.69" y="559.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, rows_entry::last_dummy_tag, seastar::bool_class&lt;continuous_tag&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.46" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; +0.02%)</title><rect x="62.2" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="65.20" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="553.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="556.00" y="607.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="719.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="752.8" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="755.75" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="688.8" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="691.81" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (6 samples, 0.11%; -0.02%)</title><rect x="755.9" y="565" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="758.92" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="691.1" y="661" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="694.06" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="307.8" y="469" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="310.82" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="433.0" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="436.01" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="674.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.57" y="655.5" ></text>
</g>
<g >
<title>database::apply_in_memory (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="55.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.97" y="415.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%; +0.04%)</title><rect x="1063.9" y="421" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1066.91" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%; -0.02%)</title><rect x="45.0" y="453" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="48.02" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; +0.02%)</title><rect x="391.9" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="394.88" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.06%)</title><rect x="1041.5" y="469" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1044.54" y="479.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%; 0.00%)</title><rect x="557.5" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.52" y="511.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="489.7" y="373" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="492.73" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="287.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="889.2" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="892.24" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="295.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="298.40" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.49" y="495.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%; 0.00%)</title><rect x="1123.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.57" y="415.5" ></text>
</g>
<g >
<title>table::query (2,103 samples, 40.27%; -0.13%)</title><rect x="149.0" y="629" width="475.2" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="151.97" y="639.5" >table::query</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.06%)</title><rect x="146.9" y="629" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="149.94" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (4 samples, 0.08%; +0.02%)</title><rect x="1030.0" y="389" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.02" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%; +0.10%)</title><rect x="254.5" y="309" width="1.6" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="257.50" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="588.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="591.02" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="69.0" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="71.98" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.02%; 0.00%)</title><rect x="642.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="281.8" y="421" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="284.84" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; -0.04%)</title><rect x="262.0" y="341" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="264.95" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="858.5" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="861.51" y="655.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="436.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="439.17" y="575.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (91 samples, 1.74%; -0.06%)</title><rect x="474.1" y="501" width="20.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="477.14" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (38 samples, 0.73%; -0.02%)</title><rect x="28.1" y="485" width="8.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="31.08" y="495.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.36" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="908.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="911.67" y="511.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.04%)</title><rect x="138.1" y="581" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="141.12" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; 0.00%)</title><rect x="528.6" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.59" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="239.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (6 samples, 0.11%; 0.00%)</title><rect x="956.1" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="959.12" y="575.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="513.9" y="373" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="516.91" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (555 samples, 10.63%; +0.02%)</title><rect x="963.6" y="565" width="125.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="966.58" y="575.5" >service::storag..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%; 0.00%)</title><rect x="22.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="591.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (14 samples, 0.27%; +0.04%)</title><rect x="140.4" y="565" width="3.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="143.38" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="1036.3" y="421" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1039.34" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="623.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="303.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="43.7" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="46.67" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="517.1" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="520.07" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="595.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.25" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (163 samples, 3.12%; -0.02%)</title><rect x="225.8" y="357" width="36.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="228.80" y="367.5" >mut..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="671.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (26 samples, 0.50%; -0.02%)</title><rect x="352.3" y="373" width="5.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="355.34" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; 0.00%)</title><rect x="795.0" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.01" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="26.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.72" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="782.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.81" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_access (11 samples, 0.21%; 0.00%)</title><rect x="77.3" y="613" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.34" y="623.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%; +0.02%)</title><rect x="40.3" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="43.28" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%; +0.02%)</title><rect x="833.2" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="836.20" y="607.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (3 samples, 0.06%; -0.02%)</title><rect x="352.3" y="357" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="355.34" y="367.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="677.7" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="680.73" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; 0.00%)</title><rect x="542.6" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.60" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="367.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; -0.02%)</title><rect x="522.3" y="405" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="525.27" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (3 samples, 0.06%; +0.06%)</title><rect x="260.6" y="341" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="263.60" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::gossiper&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="453" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="699.0" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="701.97" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1135.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1138.09" y="463.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="872.3" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.29" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="689.3" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.26" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; -0.06%)</title><rect x="242.5" y="229" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="245.52" y="239.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (134 samples, 2.57%; 0.00%)</title><rect x="225.8" y="341" width="30.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="228.80" y="351.5" >cl..</text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="559.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.4" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1135.38" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="825.5" y="517" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="828.52" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1029.3" y="357" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1032.34" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="102.9" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="105.87" y="639.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="870.5" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.48" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (1 samples, 0.02%; 0.00%)</title><rect x="53.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.39" y="431.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%; +0.02%)</title><rect x="352.1" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="355.11" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="424.2" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="427.20" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="48.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.87" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.0" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1131.99" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;seastar::consumption_result&lt;char&gt; &gt;, sstables::mx::data_consume_rows_context_m&amp;, seastar::temporary_buffer&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="655.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%; +0.02%)</title><rect x="869.8" y="437" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="872.80" y="447.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1121.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1033.6" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1036.63" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="148.5" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="151.52" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (116 samples, 2.22%; 0.00%)</title><rect x="1008.3" y="453" width="26.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1011.32" y="463.5" >s..</text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (16 samples, 0.31%; 0.00%)</title><rect x="515.7" y="389" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="518.71" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="687.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.90" y="479.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%; +0.06%)</title><rect x="424.6" y="421" width="2.3" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="427.65" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%; -0.02%)</title><rect x="842.2" y="549" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="845.24" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="62.7" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="65.65" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.97" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (2 samples, 0.04%; +0.02%)</title><rect x="753.0" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="755.98" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="54.5" y="421" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="57.52" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1130.1" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1133.12" y="335.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%; 0.00%)</title><rect x="848.8" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.79" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.06%)</title><rect x="787.6" y="421" width="0.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="790.55" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.66" y="575.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; -0.11%)</title><rect x="1020.8" y="357" width="3.8" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="1023.75" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="665.8" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="668.76" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%; +0.02%)</title><rect x="17.7" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="20.68" y="639.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (17 samples, 0.33%; +0.06%)</title><rect x="323.0" y="485" width="3.8" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="325.96" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="76.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="79.21" y="575.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.05" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, utils::directories::verify_owner_and_mode (1 samples, 0.02%; 0.00%)</title><rect x="715.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.47" y="687.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="587.3" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.35" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (25 samples, 0.48%; -0.02%)</title><rect x="730.4" y="533" width="5.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="733.38" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="693.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="696.10" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="703.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (8 samples, 0.15%; 0.00%)</title><rect x="546.4" y="565" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="549.45" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.68" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="866.6" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="869.64" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (21 samples, 0.40%; +0.04%)</title><rect x="30.3" y="437" width="4.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="33.34" y="447.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1147.1" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.07" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="684.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.51" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="850.1" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="853.15" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (324 samples, 6.20%; -0.04%)</title><rect x="208.9" y="437" width="73.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="211.85" y="447.5" >partitio..</text>
</g>
<g >
<title>sstables::mc::writer::write_cell (2 samples, 0.04%; -0.02%)</title><rect x="83.4" y="517" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="86.44" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="515.5" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="518.49" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="459.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="462.67" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="740.6" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="743.55" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1076.8" y="421" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1079.79" y="431.5" ></text>
</g>
<g >
<title>sstables::mx::data_consume_rows_context_m::do_process_state (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="607.5" ></text>
</g>
<g >
<title>utils::filter::bloom_filter::add (1 samples, 0.02%; +0.02%)</title><rect x="84.1" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="87.12" y="623.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="447.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (10 samples, 0.19%; -0.02%)</title><rect x="789.6" y="437" width="2.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="792.59" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (10 samples, 0.19%; +0.10%)</title><rect x="721.8" y="613" width="2.3" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="724.80" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (7 samples, 0.13%; -0.02%)</title><rect x="1037.2" y="437" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1040.25" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (3 samples, 0.06%; +0.02%)</title><rect x="1040.6" y="469" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1043.64" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="106.0" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="109.04" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="57.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="60.00" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="931.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.27" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="254.3" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="257.27" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (12 samples, 0.23%; 0.00%)</title><rect x="1077.7" y="501" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1080.69" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (6 samples, 0.11%; +0.10%)</title><rect x="915.5" y="565" width="1.3" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="918.45" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%; +0.02%)</title><rect x="661.5" y="661" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="664.46" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.04%)</title><rect x="943.0" y="533" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="946.02" y="543.5" ></text>
</g>
<g >
<title>fmt::v7::detail::parse_replacement_field&lt;char, fmt::v7::detail::format_handler&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char, fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (4 samples, 0.08%; +0.04%)</title><rect x="670.5" y="661" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="673.50" y="671.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="642.0" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%; 0.00%)</title><rect x="1038.8" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.83" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.72" y="319.5" ></text>
</g>
<g >
<title>schema::get_partitioner (2 samples, 0.04%; +0.02%)</title><rect x="939.9" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="942.85" y="591.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1133.1" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1136.06" y="399.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="687.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="690.90" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%; 0.00%)</title><rect x="24.7" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.69" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (2 samples, 0.04%; 0.00%)</title><rect x="649.7" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.71" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.34" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="265.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.34" y="335.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; +0.02%)</title><rect x="434.1" y="549" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="437.14" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="562.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.49" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="908.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="910.99" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.04%)</title><rect x="504.6" y="453" width="1.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="507.64" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.10%; +0.06%)</title><rect x="101.7" y="581" width="1.2" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="104.74" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="319.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="564.5" y="453" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="567.52" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="507.8" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="510.81" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="261.7" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="264.73" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (13 samples, 0.25%; +0.02%)</title><rect x="994.5" y="485" width="3.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="997.54" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="110.3" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="872.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.29" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="873.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.87" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (7 samples, 0.13%; -0.04%)</title><rect x="1148.4" y="629" width="1.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1151.42" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="435.0" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="438.04" y="559.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="831.6" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="834.62" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="49.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.09" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (4 samples, 0.08%; +0.06%)</title><rect x="34.0" y="421" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="36.95" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="524.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.30" y="463.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (2 samples, 0.04%; +0.04%)</title><rect x="1078.4" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1081.37" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="42.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.77" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (8 samples, 0.15%; 0.00%)</title><rect x="682.9" y="645" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.93" y="655.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%; -0.06%)</title><rect x="751.8" y="437" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="754.85" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%; 0.00%)</title><rect x="263.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.76" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="651.3" y="645" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="654.29" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1119.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.50" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="71.0" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="74.01" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.4" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="68.36" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="46.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.99" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (5 samples, 0.10%; -0.04%)</title><rect x="392.8" y="373" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="395.79" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (5 samples, 0.10%; 0.00%)</title><rect x="770.4" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="773.38" y="559.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (6 samples, 0.11%; +0.02%)</title><rect x="346.7" y="405" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="349.69" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (36 samples, 0.69%; +0.10%)</title><rect x="760.0" y="581" width="8.1" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="762.98" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (13 samples, 0.25%; -0.15%)</title><rect x="264.2" y="341" width="3.0" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="267.21" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.99" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%; 0.00%)</title><rect x="1167.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.18" y="639.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.90" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="663.9" y="613" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="666.95" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%; +0.02%)</title><rect x="581.2" y="549" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="584.24" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.2" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1135.15" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="38.9" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.92" y="431.5" ></text>
</g>
<g >
<title>processing_result_generator::generate (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="937.1" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="940.14" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.0" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.96" y="479.5" ></text>
</g>
<g >
<title>column_definition::column_definition (1 samples, 0.02%; +0.02%)</title><rect x="18.6" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="21.59" y="303.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%; +0.04%)</title><rect x="493.3" y="357" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="496.34" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%; +0.04%)</title><rect x="299.0" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="302.01" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%; 0.00%)</title><rect x="428.5" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="431.49" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (15 samples, 0.29%; -0.02%)</title><rect x="732.6" y="485" width="3.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="735.64" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (1 samples, 0.02%; +0.02%)</title><rect x="128.4" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="131.41" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1146.8" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1149.84" y="623.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (4 samples, 0.08%; -0.04%)</title><rect x="1128.3" y="453" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1131.31" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (2 samples, 0.04%; 0.00%)</title><rect x="197.3" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="200.33" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (27 samples, 0.52%; 0.00%)</title><rect x="1127.9" y="533" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.86" y="543.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.04%)</title><rect x="43.0" y="325" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="45.99" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="1030.7" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.69" y="383.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="800.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.88" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%; 0.00%)</title><rect x="44.1" y="501" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (284 samples, 5.44%; 0.00%)</title><rect x="17.2" y="757" width="64.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="767.5" >seastar..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (2 samples, 0.04%; 0.00%)</title><rect x="25.8" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.82" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%; -0.02%)</title><rect x="164.1" y="581" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="167.11" y="591.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="623.5" ></text>
</g>
<g >
<title>gms::gossiper::do_shadow_round (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="623.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="860.5" y="677" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="863.54" y="687.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::alter_type_statement*, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.91" y="511.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="685.9" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="688.87" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1087.0" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1089.96" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (36 samples, 0.69%; -0.02%)</title><rect x="211.6" y="421" width="8.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="214.56" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (19 samples, 0.36%; -0.06%)</title><rect x="804.0" y="325" width="4.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="807.05" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%; +0.02%)</title><rect x="742.4" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="745.36" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.75%; 0.00%)</title><rect x="799.8" y="373" width="8.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.75" y="383.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1000.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1002.96" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl_nrvo&lt;query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="689.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.48" y="671.5" ></text>
</g>
<g >
<title>database::query (101 samples, 1.93%; -0.04%)</title><rect x="1009.5" y="437" width="22.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1012.45" y="447.5" >d..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.40%; 0.00%)</title><rect x="270.1" y="389" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.09" y="399.5" ></text>
</g>
<g >
<title>cql3::prepare_context::set_bound_variables (1 samples, 0.02%; 0.00%)</title><rect x="37.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.57" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="495.5" ></text>
</g>
<g >
<title>auth::get_permissions (8 samples, 0.15%; 0.00%)</title><rect x="77.8" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.79" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,286 samples, 43.78%; -0.02%)</title><rect x="113.0" y="677" width="516.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="116.04" y="687.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>free (1 samples, 0.02%; 0.00%)</title><rect x="48.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.87" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="872.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.06" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="613.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="616.56" y="591.5" ></text>
</g>
<g >
<title>mutation::data::data (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (3 samples, 0.06%; 0.00%)</title><rect x="1035.0" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1037.99" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="843.4" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.37" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="747.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.33" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="959.3" y="581" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="962.29" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.02%)</title><rect x="786.4" y="437" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="789.42" y="447.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%; 0.00%)</title><rect x="1124.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.24" y="431.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (7 samples, 0.13%; 0.00%)</title><rect x="1130.1" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.12" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.04%)</title><rect x="104.5" y="629" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="107.45" y="639.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (28 samples, 0.54%; +0.02%)</title><rect x="1127.6" y="581" width="6.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1130.63" y="591.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%; 0.00%)</title><rect x="1009.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.23" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (73 samples, 1.40%; +0.02%)</title><rect x="554.8" y="565" width="16.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="557.81" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1059.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1062.84" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="717.3" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="720.28" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="667.8" y="645" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="670.79" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="815.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.12" y="463.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (13 samples, 0.25%; -0.02%)</title><rect x="596.6" y="613" width="2.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="599.61" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="685.0" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.96" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5 samples, 0.10%; 0.00%)</title><rect x="1148.9" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.87" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.04%)</title><rect x="842.9" y="517" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="845.91" y="527.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (21 samples, 0.40%; +0.02%)</title><rect x="931.7" y="565" width="4.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="934.72" y="575.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (11 samples, 0.21%; 0.00%)</title><rect x="77.3" y="629" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.34" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; -0.06%)</title><rect x="583.7" y="597" width="0.7" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="586.73" y="607.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="443.2" y="549" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="446.18" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; 0.00%)</title><rect x="190.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="193.32" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="316.4" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="319.41" y="527.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%; +0.04%)</title><rect x="1031.8" y="421" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1034.82" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="60.2" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="63.16" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::raw::cf_statement::cf_statement (1 samples, 0.02%; +0.02%)</title><rect x="62.9" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="65.88" y="511.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (10 samples, 0.19%; 0.00%)</title><rect x="779.4" y="501" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.42" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="992.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.73" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="671.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="581.0" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="584.02" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="821.9" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="824.90" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.20" y="463.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.04%)</title><rect x="433.7" y="549" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="436.69" y="559.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%; 0.00%)</title><rect x="120.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="123.50" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="219.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.47" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="684.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.51" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::tokens_iterator::operator++ (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="24.9" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="27.91" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="866.4" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="869.42" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="580.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.79" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; -0.06%)</title><rect x="258.3" y="277" width="0.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="261.34" y="287.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="984.4" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.37" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (67 samples, 1.28%; 0.00%)</title><rect x="43.4" y="517" width="15.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.44" y="527.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="447.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; -0.02%)</title><rect x="1120.9" y="645" width="6.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1123.85" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="479.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%; +0.02%)</title><rect x="1122.7" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1125.66" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.08%)</title><rect x="669.6" y="661" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="672.60" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="44.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.35" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (1 samples, 0.02%; -0.04%)</title><rect x="148.3" y="629" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="151.29" y="639.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="497.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="500.41" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="791.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.62" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="47.7" y="293" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="50.74" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; +0.02%)</title><rect x="69.7" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="72.66" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="59.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.49" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; +0.04%)</title><rect x="762.5" y="501" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="765.47" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (104 samples, 1.99%; +0.04%)</title><rect x="891.3" y="549" width="23.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="894.27" y="559.5" >_..</text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; -0.02%)</title><rect x="792.5" y="405" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="795.52" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (7 samples, 0.13%; -0.02%)</title><rect x="913.2" y="533" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="916.19" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1024.1" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1027.14" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.06%)</title><rect x="733.1" y="469" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="736.09" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; +0.04%)</title><rect x="95.9" y="661" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="98.87" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; -0.02%)</title><rect x="957.0" y="533" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="960.03" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.97" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (112 samples, 2.14%; -0.08%)</title><rect x="229.0" y="309" width="25.3" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="231.96" y="319.5" >c..</text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1023.2" y="325" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1026.24" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.08%)</title><rect x="1027.3" y="373" width="2.5" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1030.30" y="383.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.11%; 0.00%)</title><rect x="745.5" y="549" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.52" y="559.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="54.3" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="57.29" y="351.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="468.0" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.04" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="73.3" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="76.27" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="856.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.25" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="351.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.21%; +0.02%)</title><rect x="1068.2" y="405" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1071.20" y="415.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (2 samples, 0.04%; 0.00%)</title><rect x="83.4" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.44" y="591.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.4" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="54.35" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%; +0.02%)</title><rect x="49.5" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="52.54" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="664.2" y="613" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="667.17" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; +0.02%)</title><rect x="834.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="837.55" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; -0.02%)</title><rect x="436.6" y="565" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="439.63" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%; 0.00%)</title><rect x="731.3" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="734.29" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%; 0.00%)</title><rect x="18.6" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="751.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="11.8" y="773" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="14.81" y="783.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%; +0.02%)</title><rect x="1029.8" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1032.79" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::file&gt;, seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (2 samples, 0.04%; 0.00%)</title><rect x="630.5" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.51" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (9 samples, 0.17%; -0.02%)</title><rect x="679.3" y="629" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="682.31" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="49.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.77" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="912.3" y="533" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="915.29" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="383.5" ></text>
</g>
<g >
<title>read_context::stop (1 samples, 0.02%; +0.02%)</title><rect x="110.8" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="113.78" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="275.1" y="389" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="278.06" y="399.5" ></text>
</g>
<g >
<title>database::query (15 samples, 0.29%; -0.02%)</title><rect x="106.7" y="677" width="3.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="109.71" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (89 samples, 1.70%; +0.02%)</title><rect x="892.2" y="533" width="20.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="895.18" y="543.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="773" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="783.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (53 samples, 1.01%; +0.02%)</title><rect x="1063.0" y="469" width="12.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1066.01" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="818.1" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="821.06" y="543.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (2 samples, 0.04%; 0.00%)</title><rect x="629.6" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.60" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="226.3" y="325" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="229.25" y="335.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.44" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (2 samples, 0.04%; +0.04%)</title><rect x="1074.1" y="453" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1077.08" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; 0.00%)</title><rect x="219.0" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.02" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="67.2" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.17" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; 0.00%)</title><rect x="1089.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1091.99" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="434.4" y="533" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="437.37" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%; -0.04%)</title><rect x="1019.4" y="341" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1022.39" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="53.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.16" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (20 samples, 0.38%; +0.10%)</title><rect x="98.6" y="645" width="4.5" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="101.58" y="655.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1131.5" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1134.47" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.08" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="53.8" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="56.84" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; +0.02%)</title><rect x="264.0" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="266.99" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="689.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="692.71" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="79.6" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="82.60" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="725" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (84 samples, 1.61%; 0.00%)</title><rect x="1061.4" y="517" width="19.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.42" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="207.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%; +0.02%)</title><rect x="263.3" y="341" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="266.31" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="66.7" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="69.72" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="872.1" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.06" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::max_size (2 samples, 0.04%; 0.00%)</title><rect x="26.9" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.95" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.1" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.06" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.02%)</title><rect x="45.3" y="293" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="48.25" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1080.4" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1083.41" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="319.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%; +0.02%)</title><rect x="1129.7" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1132.67" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="55.2" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="58.19" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="695.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="698.58" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="551.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="554.19" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="630.7" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.73" y="655.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::entry, std::function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="993.0" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="995.96" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%; -0.02%)</title><rect x="1167.2" y="661" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1170.18" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="816.5" y="485" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="819.48" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%; +0.02%)</title><rect x="77.8" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="80.79" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="808.3" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="811.34" y="335.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (265 samples, 5.07%; -0.04%)</title><rect x="982.1" y="533" width="59.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="985.11" y="543.5" >servic..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="29.7" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="32.66" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="357.3" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="360.31" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="160.7" y="597" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="163.72" y="607.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (10 samples, 0.19%; -0.02%)</title><rect x="893.3" y="501" width="2.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="896.31" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; 0.00%)</title><rect x="810.1" y="421" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.15" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (12 samples, 0.23%; +0.04%)</title><rect x="836.4" y="613" width="2.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="839.36" y="623.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.99" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; -0.04%)</title><rect x="708.7" y="597" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="711.69" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="817.6" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="820.61" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="431.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="639.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="41.4" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="44.41" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="48.9" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="51.87" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="1088.1" y="549" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1091.09" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1038.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.60" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (4 samples, 0.08%; 0.00%)</title><rect x="642.0" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="655.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%; +0.02%)</title><rect x="726.5" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="729.54" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="572.2" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="575.21" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.15" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%; -0.02%)</title><rect x="17.9" y="677" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="20.91" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="959.1" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="962.06" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (8 samples, 0.15%; +0.02%)</title><rect x="136.3" y="565" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="139.32" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="70.1" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="73.11" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="765.0" y="469" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="767.96" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="399.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="919.3" y="533" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="922.29" y="543.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="94.7" y="645" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="97.74" y="655.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="869.1" y="389" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="872.13" y="399.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%; +0.02%)</title><rect x="271.7" y="325" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="274.67" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="501.5" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="504.48" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="607.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="994.1" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="997.09" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1123.1" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1126.11" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="639.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::submit_work (2 samples, 0.04%; +0.04%)</title><rect x="1166.5" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1169.50" y="671.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (5 samples, 0.10%; +0.02%)</title><rect x="594.4" y="581" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="597.35" y="591.5" ></text>
</g>
<g >
<title>sstables::mx::mp_row_consumer_m::consume_column (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%; -0.06%)</title><rect x="166.1" y="581" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="169.14" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (13 samples, 0.25%; +0.04%)</title><rect x="663.0" y="629" width="3.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="666.04" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="133" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="697.8" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="700.84" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="575.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.04%)</title><rect x="849.2" y="501" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="852.24" y="511.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (16 samples, 0.31%; +0.02%)</title><rect x="706.4" y="629" width="3.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="709.43" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="559.8" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="562.78" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (11 samples, 0.21%; -0.02%)</title><rect x="721.8" y="629" width="2.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="724.80" y="639.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (3 samples, 0.06%; +0.04%)</title><rect x="1163.8" y="677" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1166.79" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="399.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1121.1" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.04%)</title><rect x="809.7" y="405" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="812.70" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="1160.4" y="613" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1163.40" y="623.5" ></text>
</g>
<g >
<title>ser::mutation_view::table_id (1 samples, 0.02%; 0.00%)</title><rect x="1128.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.52%; 0.00%)</title><rect x="1127.9" y="549" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.86" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (43 samples, 0.82%; 0.00%)</title><rect x="560.2" y="501" width="9.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="563.23" y="511.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1088.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1091.77" y="559.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="175.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="872.7" y="437" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.74" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="767.9" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="770.89" y="559.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (5 samples, 0.10%; +0.02%)</title><rect x="1154.1" y="629" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1157.07" y="639.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (3 samples, 0.06%; +0.02%)</title><rect x="201.6" y="437" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="204.62" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="550.1" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.06" y="527.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (2 samples, 0.04%; +0.04%)</title><rect x="1159.5" y="645" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1162.49" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; 0.00%)</title><rect x="741.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.00" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="845.9" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="848.85" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.36" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (5 samples, 0.10%; 0.00%)</title><rect x="47.1" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.06" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="1139.6" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.61" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="559.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="221.7" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="224.73" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (4 samples, 0.08%; +0.04%)</title><rect x="595.7" y="613" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="598.71" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; 0.00%)</title><rect x="860.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.77" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (2 samples, 0.04%; 0.00%)</title><rect x="1053.5" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1056.52" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="568.1" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="571.14" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="38.2" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="41.25" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.13%; +0.08%)</title><rect x="250.7" y="293" width="1.5" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="253.65" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%; +0.04%)</title><rect x="610.8" y="613" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="613.85" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="749.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="752.59" y="495.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (3 samples, 0.06%; -0.02%)</title><rect x="621.7" y="597" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="624.69" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="533" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_tokenSource (1 samples, 0.02%; +0.02%)</title><rect x="23.3" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="26.33" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="652.4" y="613" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="655.42" y="623.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (2 samples, 0.04%; +0.04%)</title><rect x="1159.0" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1162.04" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="25.1" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="28.14" y="335.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="383.5" ></text>
</g>
<g >
<title>sstables::sstable_directory::process_sstable_dir (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.27%; 0.00%)</title><rect x="203.7" y="485" width="97.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.65" y="495.5" >partition_s..</text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; +0.02%)</title><rect x="1105.9" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1108.94" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (2 samples, 0.04%; +0.04%)</title><rect x="894.7" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="897.66" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="922.2" y="533" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="925.23" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (681 samples, 13.04%; +0.02%)</title><rect x="177.0" y="565" width="153.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="179.99" y="575.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.72" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1060.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.52" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="437.3" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="440.30" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.10%; -0.02%)</title><rect x="415.4" y="389" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="418.38" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.46" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.31%; -0.08%)</title><rect x="424.4" y="437" width="3.6" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="427.42" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="46.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.15" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="671.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.18" y="639.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1121.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.91" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (2 samples, 0.04%; 0.00%)</title><rect x="83.9" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.89" y="639.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (9 samples, 0.17%; 0.00%)</title><rect x="198.0" y="421" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.00" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="63.6" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="66.55" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="27.4" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="30.40" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (2 samples, 0.04%; +0.04%)</title><rect x="86.6" y="693" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="89.60" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%; +0.02%)</title><rect x="990.5" y="501" width="3.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="993.47" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="757" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="621.2" y="613" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="624.24" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (114 samples, 2.18%; 0.00%)</title><rect x="37.8" y="549" width="25.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="559.5" >c..</text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="512.1" y="405" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="515.10" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="71.7" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="74.69" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="719.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; 0.00%)</title><rect x="539.0" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.99" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::grant_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.62" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (22 samples, 0.42%; +0.04%)</title><rect x="747.8" y="517" width="5.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="750.78" y="527.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="813.8" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="816.76" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="57.9" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="60.91" y="479.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (6 samples, 0.11%; +0.04%)</title><rect x="593.0" y="581" width="1.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="596.00" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; -0.02%)</title><rect x="216.5" y="389" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="219.53" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (5 samples, 0.10%; +0.04%)</title><rect x="367.5" y="357" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="370.48" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (3 samples, 0.06%; +0.02%)</title><rect x="1078.8" y="485" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1081.82" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="426.5" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="429.46" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; -0.04%)</title><rect x="812.6" y="421" width="1.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="815.64" y="431.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (8 samples, 0.15%; +0.02%)</title><rect x="769.7" y="565" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="772.70" y="575.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, clustering_key_prefix&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.47" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1060.7" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1063.75" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.3" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="45.31" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1008.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1011.10" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; -0.02%)</title><rect x="1007.9" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1010.87" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%; +0.04%)</title><rect x="848.8" y="517" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="851.79" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="511.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;, std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.36" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::iterator_buffer&lt;seastar::internal::log_buf::inserter_iterator, char, fmt::v7::detail::buffer_traits&gt;::flush (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="781.5" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="784.45" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="367.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%; +0.10%)</title><rect x="924.5" y="533" width="3.8" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="927.49" y="543.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%; +0.02%)</title><rect x="815.3" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="818.35" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="655.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%; 0.00%)</title><rect x="688.1" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.13" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.55" y="399.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%; 0.00%)</title><rect x="1096.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.22" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (57 samples, 1.09%; 0.00%)</title><rect x="895.8" y="485" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.79" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; -0.04%)</title><rect x="1158.1" y="645" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1161.14" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="553.2" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="556.22" y="607.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.40%; -0.02%)</title><rect x="1120.9" y="469" width="4.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1123.85" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1127.6" y="613" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.63" y="623.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (55 samples, 1.05%; -0.04%)</title><rect x="1063.0" y="485" width="12.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1066.01" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (3 samples, 0.06%; 0.00%)</title><rect x="864.8" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.10%; 0.00%)</title><rect x="47.1" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.06" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (8 samples, 0.15%; +0.04%)</title><rect x="824.2" y="549" width="1.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="827.16" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%; +0.02%)</title><rect x="1119.7" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1122.72" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.9" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="703.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.10%; -0.02%)</title><rect x="755.9" y="549" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="758.92" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="84.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.80" y="671.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="877.7" y="645" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="880.71" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="584.4" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="587.41" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="912.7" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="915.74" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="205.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="208.01" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="614.2" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="617.24" y="575.5" ></text>
</g>
<g >
<title>cdc::cdc_service::needs_cdc_augmentation (2 samples, 0.04%; 0.00%)</title><rect x="864.8" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; -0.06%)</title><rect x="276.4" y="405" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="279.42" y="415.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1049.0" y="517" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1052.00" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (4 samples, 0.08%; -0.04%)</title><rect x="267.2" y="357" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="270.15" y="367.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; +0.02%)</title><rect x="1133.7" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1136.73" y="431.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.55" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="469" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="479.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="430.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="433.30" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (9 samples, 0.17%; 0.00%)</title><rect x="742.8" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.81" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="986.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.95" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="1085.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.15" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%; 0.00%)</title><rect x="864.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="293.1" y="341" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="296.14" y="351.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%; 0.00%)</title><rect x="1122.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.21" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.31" y="607.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (24 samples, 0.46%; +0.02%)</title><rect x="489.1" y="421" width="5.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="492.05" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::detach_service_level_statement, std::default_delete&lt;cql3::statements::detach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.0" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="69.04" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (5 samples, 0.10%; +0.06%)</title><rect x="333.1" y="549" width="1.2" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="336.13" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (5 samples, 0.10%; +0.04%)</title><rect x="346.9" y="389" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="349.92" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.11%; +0.04%)</title><rect x="265.8" y="325" width="1.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="268.79" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (7 samples, 0.13%; 0.00%)</title><rect x="46.6" y="389" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%; +0.02%)</title><rect x="1020.1" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1023.07" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="858.1" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.05" y="591.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.17%; 0.00%)</title><rect x="865.7" y="565" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.74" y="575.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="455.6" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="458.61" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (33 samples, 0.63%; -0.04%)</title><rect x="1094.0" y="581" width="7.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1096.96" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="997.3" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1000.25" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (71 samples, 1.36%; 0.00%)</title><rect x="555.0" y="549" width="16.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.03" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%; -0.06%)</title><rect x="978.5" y="501" width="1.8" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="981.49" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="450.9" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="453.86" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="677" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (51 samples, 0.98%; +0.08%)</title><rect x="702.8" y="645" width="11.5" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="705.82" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; +0.04%)</title><rect x="311.9" y="517" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="314.89" y="527.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,705 samples, 32.65%; -0.19%)</title><rect x="168.6" y="613" width="385.3" height="15.0" fill="rgb(60,60,255)" rx="2" ry="2" />
<text  x="171.63" y="623.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::shared_ptr&lt;seastar::file_impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="630.7" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="633.73" y="607.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (458 samples, 8.77%; -0.02%)</title><rect x="332.7" y="565" width="103.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="335.68" y="575.5" >query::consu..</text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (627 samples, 12.01%; -0.02%)</title><rect x="718.6" y="677" width="141.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="721.63" y="687.5" >seastar::internal:..</text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (44 samples, 0.84%; 0.00%)</title><rect x="727.2" y="613" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.22" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (3 samples, 0.06%; 0.00%)</title><rect x="1132.4" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.38" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; 0.00%)</title><rect x="862.3" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (15 samples, 0.29%; -0.02%)</title><rect x="576.7" y="533" width="3.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="579.73" y="543.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="290.9" y="389" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="293.88" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="937.4" y="581" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="940.37" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="286.6" y="389" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="289.58" y="399.5" ></text>
</g>
<g >
<title>__call_tls_dtors (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="799.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="367.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="370.03" y="367.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="864.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="867.61" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="809.5" y="421" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="812.47" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.04%)</title><rect x="162.5" y="597" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="165.53" y="607.5" ></text>
</g>
<g >
<title>[unknown] (3 samples, 0.06%; 0.00%)</title><rect x="10.5" y="773" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="783.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; -0.10%)</title><rect x="1021.9" y="325" width="0.4" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1024.88" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%; 0.00%)</title><rect x="790.5" y="421" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.49" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="771.3" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="774.28" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%; +0.02%)</title><rect x="209.8" y="421" width="0.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="212.75" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="812.6" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="815.64" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (2 samples, 0.04%; +0.02%)</title><rect x="422.2" y="373" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="425.16" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="44.1" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="332.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.23" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="105.6" y="645" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="108.58" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (11 samples, 0.21%; +0.04%)</title><rect x="520.5" y="421" width="2.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="523.46" y="431.5" ></text>
</g>
<g >
<title>memtable::apply (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="623.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (14 samples, 0.27%; 0.00%)</title><rect x="480.9" y="437" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.92" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="829.4" y="453" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="832.36" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="194.6" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="197.62" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,068 samples, 20.45%; 0.00%)</title><rect x="878.6" y="645" width="241.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="881.62" y="655.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="358.2" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="361.22" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (3 samples, 0.06%; 0.00%)</title><rect x="864.8" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.83" y="559.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%; +0.02%)</title><rect x="258.6" y="277" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="261.56" y="287.5" ></text>
</g>
<g >
<title>utils::directories::verify_owner_and_mode (1 samples, 0.02%; 0.00%)</title><rect x="715.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.47" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (5 samples, 0.10%; -0.06%)</title><rect x="292.5" y="373" width="1.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="295.46" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (11 samples, 0.21%; -0.06%)</title><rect x="103.1" y="645" width="2.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="106.10" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1085.6" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1088.60" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (62 samples, 1.19%; -0.02%)</title><rect x="1016.9" y="421" width="14.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1019.91" y="431.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (4 samples, 0.08%; 0.00%)</title><rect x="1039.7" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.73" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="692.6" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="695.65" y="655.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (4 samples, 0.08%; +0.02%)</title><rect x="898.5" y="453" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="901.50" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="612.2" y="597" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="615.20" y="607.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%; 0.00%)</title><rect x="100.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.39" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (419 samples, 8.02%; -0.02%)</title><rect x="205.2" y="453" width="94.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="208.24" y="463.5" >logalloc::a..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; +0.06%)</title><rect x="765.4" y="501" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="768.41" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="863.3" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="866.25" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="949.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.80" y="543.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (33 samples, 0.63%; +0.04%)</title><rect x="582.6" y="613" width="7.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="585.60" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%; +0.04%)</title><rect x="695.8" y="629" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="698.81" y="639.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="544.0" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="546.96" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="285.9" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.91" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="359.1" y="373" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="362.12" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1079.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.73" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (74 samples, 1.42%; 0.00%)</title><rect x="792.3" y="421" width="16.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.30" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="692.2" y="661" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="695.19" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl_nrvo&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="316.0" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="318.96" y="527.5" ></text>
</g>
<g >
<title>make_combined_reader (79 samples, 1.51%; -0.11%)</title><rect x="451.1" y="517" width="17.8" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="454.09" y="527.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="940.3" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="943.31" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="60.4" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="63.39" y="303.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (8 samples, 0.15%; 0.00%)</title><rect x="801.3" y="325" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.34" y="335.5" ></text>
</g>
<g >
<title>seastar::schedule (2 samples, 0.04%; +0.04%)</title><rect x="96.5" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="99.55" y="671.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="1110.2" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.23" y="591.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="35.3" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="38.31" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="886.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="889.75" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;checked_file_impl, false&gt;::make&lt;std::function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="630.7" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.73" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (3 samples, 0.06%; +0.06%)</title><rect x="839.3" y="613" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="842.30" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="101.1" y="597" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="104.06" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="939.0" y="581" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="941.95" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%; +0.06%)</title><rect x="668.7" y="645" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="671.69" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.02%)</title><rect x="676.4" y="645" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="679.38" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="782.1" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.13" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="301.3" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="304.27" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (1 samples, 0.02%; 0.00%)</title><rect x="69.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.88" y="623.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; -0.02%)</title><rect x="727.4" y="581" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="730.45" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="239.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="623.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (1 samples, 0.02%; 0.00%)</title><rect x="53.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.39" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (12 samples, 0.23%; -0.02%)</title><rect x="72.6" y="581" width="2.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="75.59" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (9 samples, 0.17%; -0.06%)</title><rect x="1111.8" y="581" width="2.0" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1114.82" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="641.1" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="644.13" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="211.3" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="214.34" y="431.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="639.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (6 samples, 0.11%; -0.08%)</title><rect x="1003.4" y="453" width="1.3" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1006.35" y="463.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="10.5" y="757" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="13.45" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="1147.1" y="597" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1150.07" y="607.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,792 samples, 91.77%; 0.00%)</title><rect x="85.2" y="757" width="1082.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="767.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.60" y="351.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%; 0.00%)</title><rect x="1123.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.34" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%; -0.02%)</title><rect x="566.1" y="437" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="569.10" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.38%; 0.00%)</title><rect x="418.1" y="389" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="421.10" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="146.5" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="149.48" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="485" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="495.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; -0.02%)</title><rect x="928.3" y="565" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="931.33" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.55" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (27 samples, 0.52%; +0.06%)</title><rect x="269.0" y="405" width="6.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="271.96" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="659.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.20" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (1 samples, 0.02%; -0.10%)</title><rect x="197.8" y="421" width="0.2" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="200.78" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; +0.02%)</title><rect x="800.4" y="309" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="803.43" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.04%)</title><rect x="1034.5" y="453" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1037.53" y="463.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%; 0.00%)</title><rect x="112.1" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="38.5" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="41.47" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%; +0.02%)</title><rect x="307.1" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="310.15" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="710.0" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="713.05" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="45.9" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="48.93" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="942.6" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="945.57" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="112.8" y="677" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="115.82" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (40 samples, 0.77%; +0.04%)</title><rect x="690.6" y="677" width="9.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="693.61" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="44.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="47.12" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="550.7" y="485" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="553.74" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.02%)</title><rect x="518.9" y="357" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="521.88" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="265.6" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="268.57" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; -0.04%)</title><rect x="724.3" y="645" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="727.28" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="63.3" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="66.33" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%; +0.02%)</title><rect x="794.8" y="373" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="797.78" y="383.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (21 samples, 0.40%; 0.00%)</title><rect x="1120.9" y="485" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (11 samples, 0.21%; +0.02%)</title><rect x="287.9" y="373" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="290.94" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (288 samples, 5.52%; +0.10%)</title><rect x="348.7" y="405" width="65.1" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="351.72" y="415.5" >compact..</text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="97.7" y="645" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="100.68" y="655.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (5 samples, 0.10%; 0.00%)</title><rect x="868.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (4 samples, 0.08%; +0.08%)</title><rect x="1115.9" y="597" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1118.88" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; +0.02%)</title><rect x="17.9" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="20.91" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="22.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.43" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%; +0.04%)</title><rect x="85.2" y="693" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="88.25" y="703.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%; 0.00%)</title><rect x="366.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="369.80" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="23.1" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="26.11" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; +0.04%)</title><rect x="1026.4" y="405" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1029.40" y="415.5" ></text>
</g>
<g >
<title>db::commitlog::segment::background_cycle (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="783.0" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="786.03" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; -0.06%)</title><rect x="965.8" y="533" width="1.8" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="968.84" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1142.8" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.77" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="316.2" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="319.19" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%; -0.02%)</title><rect x="358.9" y="373" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="361.89" y="383.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="639.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; 0.00%)</title><rect x="531.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.76" y="527.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (285 samples, 5.46%; -0.04%)</title><rect x="768.1" y="581" width="64.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="771.12" y="591.5" >service..</text>
</g>
<g >
<title>__strlen_avx2 (10 samples, 0.19%; +0.08%)</title><rect x="1011.3" y="421" width="2.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1014.26" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="757.3" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.27" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (267 samples, 5.11%; -0.04%)</title><rect x="887.9" y="597" width="60.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="890.88" y="607.5" >cql3::..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="796.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.59" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="50.4" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.45" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (2 samples, 0.04%; 0.00%)</title><rect x="866.0" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.96" y="527.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; 0.00%)</title><rect x="322.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="325.74" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="797.5" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.50" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%; +0.11%)</title><rect x="1013.7" y="405" width="3.0" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="1016.75" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.13%; +0.08%)</title><rect x="805.6" y="261" width="1.6" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="808.63" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (3 samples, 0.06%; +0.06%)</title><rect x="300.4" y="453" width="0.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="303.37" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; +0.02%)</title><rect x="172.0" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="175.02" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="963.1" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="966.13" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="335.5" ></text>
</g>
<g >
<title>main (4,792 samples, 91.77%; 0.00%)</title><rect x="85.2" y="789" width="1082.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="799.5" >main</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%; +0.04%)</title><rect x="299.9" y="453" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="302.92" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (2 samples, 0.04%; +0.04%)</title><rect x="260.1" y="309" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="263.15" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.89" y="607.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (7 samples, 0.13%; +0.04%)</title><rect x="628.0" y="661" width="1.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="631.02" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="447.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="52.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.48" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (4 samples, 0.08%; +0.04%)</title><rect x="266.2" y="309" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="269.25" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%; -0.02%)</title><rect x="428.5" y="453" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="431.49" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (19 samples, 0.36%; +0.04%)</title><rect x="262.9" y="357" width="4.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="265.86" y="367.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%; +0.04%)</title><rect x="602.9" y="597" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="605.94" y="607.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; 0.00%)</title><rect x="78.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.69" y="479.5" ></text>
</g>
<g >
<title>ser::row_view::columns (2 samples, 0.04%; +0.04%)</title><rect x="1124.7" y="421" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1127.70" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; -0.02%)</title><rect x="570.6" y="517" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="573.62" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="862.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%; +0.04%)</title><rect x="609.7" y="581" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="612.72" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (4 samples, 0.08%; +0.02%)</title><rect x="867.8" y="549" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="870.77" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="73.0" y="533" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="76.04" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="687.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="690.00" y="463.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="412.7" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="415.67" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%; +0.02%)</title><rect x="736.5" y="565" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="739.48" y="575.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="693" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="938.0" y="565" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="941.05" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.70" y="463.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; -0.02%)</title><rect x="381.7" y="341" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="384.72" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="687.5" ></text>
</g>
<g >
<title>ser::deletable_row__deleted_at&lt;bytes_ostream&gt;::deletable_row__deleted_at (1 samples, 0.02%; +0.02%)</title><rect x="1131.2" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1134.25" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (36 samples, 0.69%; +0.04%)</title><rect x="486.6" y="453" width="8.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="489.56" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="688.1" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="691.13" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="873.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.42" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.04%)</title><rect x="1089.4" y="581" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1092.44" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; +0.02%)</title><rect x="1121.5" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1124.53" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="658.3" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="661.30" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="583.3" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.28" y="607.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (109 samples, 2.09%; -0.06%)</title><rect x="890.8" y="565" width="24.7" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="893.82" y="575.5" >_..</text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="22.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.65" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="862.3" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="873.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.42" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%; +0.02%)</title><rect x="1135.3" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1138.32" y="687.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.44" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1024.8" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1027.82" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (15 samples, 0.29%; 0.00%)</title><rect x="24.5" y="485" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.46" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="71.9" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.91" y="591.5" ></text>
</g>
<g >
<title>mutation_querier::consume (143 samples, 2.74%; -0.02%)</title><rect x="359.6" y="373" width="32.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="362.57" y="383.5" >mu..</text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.3" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.31" y="623.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_format_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="703.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%; 0.00%)</title><rect x="687.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.00" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1085.8" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.83" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="60.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.16" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="873.6" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="876.65" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="905.5" y="405" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="908.51" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%; +0.02%)</title><rect x="1149.1" y="581" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1152.10" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (57 samples, 1.09%; -0.02%)</title><rect x="24.2" y="517" width="12.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="27.24" y="527.5" ></text>
</g>
<g >
<title>dht::tri_compare (6 samples, 0.11%; 0.00%)</title><rect x="487.0" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="490.02" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="1160.2" y="629" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1163.17" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%; 0.00%)</title><rect x="307.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="310.60" y="463.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="671.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1039.5" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1042.51" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="713.0" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="715.98" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="274.6" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="277.61" y="383.5" ></text>
</g>
<g >
<title>query_state::query_state (21 samples, 0.40%; +0.02%)</title><rect x="591.0" y="613" width="4.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="593.96" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="74.4" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="77.40" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="79.1" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="82.15" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="684.3" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.29" y="639.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_group::~metric_group (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="735.5" ></text>
</g>
<g >
<title>service::storage_service::prepare_to_join (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="639.5" ></text>
</g>
<g >
<title>seastar::open_directory (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%; -0.10%)</title><rect x="632.8" y="661" width="0.9" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="635.77" y="671.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (23 samples, 0.44%; +0.04%)</title><rect x="803.4" y="341" width="5.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="806.37" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1163.3" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1166.34" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; +0.02%)</title><rect x="762.0" y="533" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="765.02" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="60.8" y="309" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="63.84" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (41 samples, 0.79%; -0.04%)</title><rect x="1017.1" y="405" width="9.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1020.14" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="732.0" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="734.96" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.05" y="591.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; -0.02%)</title><rect x="936.5" y="565" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="939.46" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (8 samples, 0.15%; 0.00%)</title><rect x="820.1" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.09" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (9 samples, 0.17%; 0.00%)</title><rect x="41.4" y="517" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="642.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.48" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="548.0" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="551.03" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%; -0.06%)</title><rect x="601.1" y="613" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="604.13" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="415.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (20 samples, 0.38%; 0.00%)</title><rect x="256.1" y="341" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="259.08" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::do_resize (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (5 samples, 0.10%; 0.00%)</title><rect x="698.5" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.52" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (8 samples, 0.15%; 0.00%)</title><rect x="46.6" y="485" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (9 samples, 0.17%; -0.02%)</title><rect x="828.5" y="501" width="2.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="831.45" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%; +0.06%)</title><rect x="623.0" y="613" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="626.05" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="416.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="419.51" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (35 samples, 0.67%; -0.04%)</title><rect x="1017.6" y="389" width="7.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1020.59" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.11%; +0.02%)</title><rect x="292.2" y="389" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="295.23" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (5 samples, 0.10%; -0.06%)</title><rect x="120.9" y="645" width="1.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="123.95" y="655.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%; +0.02%)</title><rect x="24.5" y="405" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="27.46" y="415.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.02%)</title><rect x="528.1" y="501" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="531.14" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="46.6" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="367.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%; 0.00%)</title><rect x="112.1" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="812.2" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="815.18" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%; 0.00%)</title><rect x="17.5" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.46" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;gms::gossiper, true&gt;::make&lt;seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;netw::messaging_service&gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="516.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="519.84" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="145.8" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="148.81" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1148.2" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1151.20" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%; +0.02%)</title><rect x="22.2" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="25.20" y="479.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="57.0" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; +0.02%)</title><rect x="570.9" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="573.85" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.47" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%; -0.06%)</title><rect x="979.2" y="485" width="1.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="982.17" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.19%; +0.10%)</title><rect x="313.2" y="501" width="2.3" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="316.25" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="749.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="752.36" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%; +0.02%)</title><rect x="810.4" y="405" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="813.38" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (3 samples, 0.06%; +0.04%)</title><rect x="273.7" y="357" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="276.70" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1107.1" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1110.07" y="607.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%; +0.02%)</title><rect x="413.8" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="416.80" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (16 samples, 0.31%; 0.00%)</title><rect x="662.6" y="661" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.59" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; -0.02%)</title><rect x="866.4" y="533" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="869.42" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="688.8" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.81" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="694.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.68" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (2 samples, 0.04%; 0.00%)</title><rect x="945.3" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.28" y="575.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="551.4" y="581" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="554.42" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="779.4" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.42" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (3 samples, 0.06%; +0.02%)</title><rect x="1161.3" y="629" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1164.30" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="951.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="954.60" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (83 samples, 1.59%; -0.04%)</title><rect x="506.4" y="469" width="18.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="509.45" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="604.7" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="607.75" y="607.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (10 samples, 0.19%; -0.04%)</title><rect x="378.6" y="341" width="2.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="381.55" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.11%; +0.08%)</title><rect x="635.5" y="645" width="1.3" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="638.48" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="612.0" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="614.98" y="607.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; 0.00%)</title><rect x="394.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="397.37" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (25 samples, 0.48%; +0.02%)</title><rect x="461.9" y="485" width="5.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="464.93" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (430 samples, 8.23%; 0.00%)</title><rect x="335.4" y="517" width="97.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="338.39" y="527.5" >seastar::fu..</text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (7 samples, 0.13%; +0.02%)</title><rect x="614.5" y="565" width="1.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="617.46" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="639.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%; +0.02%)</title><rect x="1101.6" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1104.65" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (11 samples, 0.21%; +0.04%)</title><rect x="548.7" y="549" width="2.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="551.71" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (17 samples, 0.33%; -0.02%)</title><rect x="732.2" y="517" width="3.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="735.19" y="527.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%; +0.02%)</title><rect x="1125.8" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1128.83" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (2 samples, 0.04%; -0.04%)</title><rect x="62.9" y="533" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="65.88" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="718.2" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="721.18" y="687.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (2 samples, 0.04%; -0.04%)</title><rect x="911.2" y="485" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="914.16" y="495.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.02%)</title><rect x="498.3" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="501.31" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="66.9" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="69.94" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; +0.02%)</title><rect x="48.4" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="51.41" y="495.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.66" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.08%)</title><rect x="633.7" y="661" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="636.67" y="671.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="853.8" y="533" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.76" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="666.0" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="668.98" y="655.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="789" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="126.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="129.37" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="865.3" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="868.29" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (4 samples, 0.08%; 0.00%)</title><rect x="40.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.28" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.90" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (33 samples, 0.63%; -0.04%)</title><rect x="320.5" y="501" width="7.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="323.48" y="511.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::alter_table_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="64.7" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="67.68" y="495.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.04%)</title><rect x="897.1" y="453" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="900.15" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="38.2" y="517" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (2 samples, 0.04%; -0.02%)</title><rect x="210.4" y="421" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="213.43" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (3 samples, 0.06%; 0.00%)</title><rect x="689.9" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.93" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (2 samples, 0.04%; +0.04%)</title><rect x="906.4" y="453" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="909.41" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%; +0.02%)</title><rect x="1081.3" y="517" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1084.31" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (7 samples, 0.13%; -0.02%)</title><rect x="801.6" y="309" width="1.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="804.56" y="319.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (6 samples, 0.11%; 0.00%)</title><rect x="910.9" y="517" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.93" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="55.9" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="58.87" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="810.6" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="813.60" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="834.3" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="837.33" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (8 samples, 0.15%; +0.04%)</title><rect x="508.5" y="437" width="1.8" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="511.48" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (27 samples, 0.52%; -0.02%)</title><rect x="70.6" y="629" width="6.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="73.56" y="639.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; -0.08%)</title><rect x="249.3" y="277" width="0.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="252.30" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="682.3" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="685.25" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="918.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="921.16" y="575.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="52.0" y="293" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="55.03" y="303.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (673 samples, 12.89%; 0.00%)</title><rect x="178.8" y="549" width="152.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="181.80" y="559.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="427.1" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="430.14" y="431.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.08%)</title><rect x="118.5" y="645" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="121.46" y="655.5" ></text>
</g>
<g >
<title>partition_version::partition_version (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.68" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.27" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="49.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.77" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (4 samples, 0.08%; +0.06%)</title><rect x="135.4" y="565" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="138.41" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="559.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.6" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1126.57" y="383.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%; 0.00%)</title><rect x="924.0" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="927.04" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1105.7" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1108.71" y="591.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; 0.00%)</title><rect x="1107.3" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.30" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="986.9" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.86" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (54 samples, 1.03%; +0.02%)</title><rect x="46.4" y="501" width="12.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="49.38" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="639.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.11%; +0.04%)</title><rect x="750.9" y="485" width="1.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="753.95" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="436.4" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="439.40" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="1142.3" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1145.32" y="655.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; 0.00%)</title><rect x="811.1" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.05" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="829.8" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="832.81" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="796.8" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="799.82" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="807.2" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.21" y="287.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="856.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.70" y="639.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%; 0.00%)</title><rect x="688.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.58" y="671.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (15 samples, 0.29%; 0.00%)</title><rect x="480.7" y="453" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.69" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (9 samples, 0.17%; +0.08%)</title><rect x="636.8" y="677" width="2.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="639.83" y="687.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%; 0.00%)</title><rect x="1080.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.95" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="24.5" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.46" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, unsigned long&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1126.3" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.28" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.15" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="87.3" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="90.28" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="252.2" y="293" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="255.24" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (3 samples, 0.06%; -0.06%)</title><rect x="427.4" y="421" width="0.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="430.36" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="351.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%; 0.00%)</title><rect x="1128.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (15 samples, 0.29%; -0.06%)</title><rect x="612.9" y="597" width="3.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="615.88" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%; -0.06%)</title><rect x="830.9" y="517" width="1.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="833.94" y="527.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%; +0.04%)</title><rect x="731.5" y="469" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="734.51" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="758.4" y="581" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="761.40" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (68 samples, 1.30%; 0.00%)</title><rect x="699.7" y="677" width="15.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.65" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (3 samples, 0.06%; -0.02%)</title><rect x="537.0" y="485" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="539.96" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (14 samples, 0.27%; +0.04%)</title><rect x="741.9" y="549" width="3.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="744.91" y="559.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.42%; 0.00%)</title><rect x="12.3" y="773" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.26" y="783.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.13%; 0.00%)</title><rect x="761.6" y="565" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.57" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (8 samples, 0.15%; 0.00%)</title><rect x="38.2" y="533" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="543.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="591.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (13 samples, 0.25%; -0.02%)</title><rect x="212.0" y="389" width="3.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="215.01" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="684.7" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="687.74" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="1099.8" y="501" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1102.84" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="49.8" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="52.77" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="515.3" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="518.26" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (5 samples, 0.10%; +0.10%)</title><rect x="906.9" y="453" width="1.1" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="909.86" y="463.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="911.2" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="914.16" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="200.0" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="203.04" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="653.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="656.55" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="645.6" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="648.65" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (4 samples, 0.08%; +0.02%)</title><rect x="861.2" y="677" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="864.22" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (99 samples, 1.90%; -0.04%)</title><rect x="503.1" y="485" width="22.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="506.06" y="495.5" >s..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="463.5" ></text>
</g>
<g >
<title>auth::resource::parent (1 samples, 0.02%; 0.00%)</title><rect x="77.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.34" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="67.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.17" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;, mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="630.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.28" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (7 samples, 0.13%; 0.00%)</title><rect x="809.5" y="437" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.47" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="1131.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.47" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (16 samples, 0.31%; 0.00%)</title><rect x="386.2" y="341" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="389.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="57.2" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="60.23" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="85.7" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="88.70" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="687.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.68" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="178.6" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="181.57" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="431.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::unthrottle (1 samples, 0.02%; 0.00%)</title><rect x="690.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.39" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="887.7" y="597" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="890.66" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (11 samples, 0.21%; -0.15%)</title><rect x="1071.6" y="437" width="2.5" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="1074.59" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1149.3" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1152.33" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="569.3" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="572.27" y="495.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; +0.02%)</title><rect x="1061.4" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1064.42" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="495.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;partition_version&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.1" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1124.08" y="287.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1123.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.34" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; 0.00%)</title><rect x="816.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.70" y="463.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="674.8" y="661" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="677.80" y="671.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (8 samples, 0.15%; +0.08%)</title><rect x="572.9" y="549" width="1.8" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="575.88" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; -0.02%)</title><rect x="1130.3" y="309" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1133.34" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_aggregate_statement*, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.27" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.90" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%; 0.00%)</title><rect x="602.9" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.94" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="653.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.33" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; 0.00%)</title><rect x="1037.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.02" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.29" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="339.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="342.01" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%; +0.02%)</title><rect x="272.1" y="309" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="275.12" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="814.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="817.89" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (17 samples, 0.33%; 0.00%)</title><rect x="1097.6" y="565" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.58" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="562.7" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="565.72" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="82.3" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="85.31" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="621.0" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="624.01" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_type_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.59" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%; +0.02%)</title><rect x="955.9" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="958.90" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="59.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.71" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.06%)</title><rect x="918.8" y="533" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="921.84" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="355.1" y="341" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="358.05" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_anonymous_memory (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; -0.04%)</title><rect x="461.7" y="485" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="464.71" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.06%)</title><rect x="1090.6" y="565" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1093.57" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.1" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.06" y="431.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; 0.00%)</title><rect x="1048.5" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.54" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="329.7" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="332.74" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%; 0.00%)</title><rect x="1167.0" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.95" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;db::replay_position, std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt;, std::_Select1st&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt;, std::less&lt;db::replay_position&gt;, std::allocator&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1082.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1085.67" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="661" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="712.3" y="597" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="715.31" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (3 samples, 0.06%; -0.02%)</title><rect x="697.2" y="629" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="700.17" y="639.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (3 samples, 0.06%; +0.02%)</title><rect x="1095.3" y="533" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1098.32" y="543.5" ></text>
</g>
<g >
<title>database::find_keyspace (11 samples, 0.21%; 0.00%)</title><rect x="1046.5" y="517" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.51" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="858.1" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.05" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; 0.00%)</title><rect x="826.9" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.87" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="24.5" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.46" y="431.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (6 samples, 0.11%; +0.02%)</title><rect x="19.7" y="693" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="22.72" y="703.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="165.2" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="168.24" y="575.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="873.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.97" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; +0.02%)</title><rect x="295.6" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="298.62" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (3 samples, 0.06%; 0.00%)</title><rect x="61.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="511.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (5 samples, 0.10%; +0.04%)</title><rect x="673.2" y="629" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="676.21" y="639.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="26.3" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="29.27" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="52.3" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="55.26" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%; 0.00%)</title><rect x="82.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="623.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (1 samples, 0.02%; -0.02%)</title><rect x="1061.7" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1064.65" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (4 samples, 0.08%; +0.06%)</title><rect x="1100.5" y="533" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="1103.52" y="543.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="340.6" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="343.59" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.69" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1024.4" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1027.37" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%; 0.00%)</title><rect x="836.8" y="581" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.81" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; -0.04%)</title><rect x="813.1" y="389" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="816.09" y="399.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; -0.02%)</title><rect x="93.8" y="661" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="96.83" y="671.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="205.9" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="208.91" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; -0.04%)</title><rect x="993.2" y="453" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="996.18" y="463.5" ></text>
</g>
<g >
<title>seastar::async&lt;single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="575.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="363.0" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="365.96" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="428.0" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="431.04" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="767.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="103.1" y="629" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="106.10" y="639.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (2 samples, 0.04%; 0.00%)</title><rect x="699.2" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.20" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="602.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.26" y="623.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (1 samples, 0.02%; +0.02%)</title><rect x="158.2" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="161.23" y="623.5" ></text>
</g>
<g >
<title>do_io_check&lt;open_checked_directory (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="873.0" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.97" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="415.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;clustering_key_prefix&gt;::has_supporting_index (1 samples, 0.02%; +0.02%)</title><rect x="75.3" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.30" y="591.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; +0.04%)</title><rect x="356.0" y="357" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="358.96" y="367.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (429 samples, 8.22%; 0.00%)</title><rect x="204.3" y="469" width="97.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="207.33" y="479.5" >seastar::do..</text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.13%; 0.00%)</title><rect x="830.9" y="533" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.94" y="543.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (4 samples, 0.08%; -0.02%)</title><rect x="802.2" y="293" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="805.24" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (9 samples, 0.17%; 0.00%)</title><rect x="772.0" y="533" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.96" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%; +0.06%)</title><rect x="622.4" y="613" width="0.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="625.37" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="53.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.39" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (18 samples, 0.34%; -0.04%)</title><rect x="294.9" y="437" width="4.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="297.94" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="547.6" y="517" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="550.58" y="527.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.04%)</title><rect x="624.2" y="661" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="627.18" y="671.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (14 samples, 0.27%; 0.00%)</title><rect x="586.9" y="581" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="589.89" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="299.7" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="302.69" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="461.3" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="464.26" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1130.3" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.34" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="455.8" y="405" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="458.83" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="428.9" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="431.94" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%; +0.02%)</title><rect x="14.5" y="757" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="17.52" y="767.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="687.4" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="690.45" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="383.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.6" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="61.58" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%; 0.00%)</title><rect x="54.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.29" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="511.5" ></text>
</g>
<g >
<title>perf_simple_que (5,221 samples, 99.98%; 0.00%)</title><rect x="10.0" y="821" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >perf_simple_que</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="447.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="535.8" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="538.83" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1086.1" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1089.06" y="527.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (6 samples, 0.11%; +0.06%)</title><rect x="138.6" y="581" width="1.3" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="141.58" y="591.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="20.2" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="23.17" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,791 samples, 91.75%; 0.00%)</title><rect x="85.2" y="725" width="1082.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="735.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="667.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="670.56" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="50.9" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="53.90" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt;::allocator (1 samples, 0.02%; +0.02%)</title><rect x="22.4" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="25.43" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (2 samples, 0.04%; 0.00%)</title><rect x="1053.5" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1056.52" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="203.2" y="453" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="206.20" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (26 samples, 0.50%; 0.00%)</title><rect x="730.2" y="549" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="733.16" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="855.3" y="613" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="858.34" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; -0.04%)</title><rect x="412.4" y="341" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="415.45" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="206.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.37" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;column_definition const*, std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt; &gt;, column_definition*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%; +0.02%)</title><rect x="456.7" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="459.74" y="447.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="191.5" ></text>
</g>
<g >
<title>flush_memory_accounter::compute_size (1 samples, 0.02%; 0.00%)</title><rect x="82.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="701.0" y="661" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="704.01" y="671.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.13%; 0.00%)</title><rect x="10.5" y="789" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%; +0.02%)</title><rect x="48.6" y="485" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="51.64" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (3 samples, 0.06%; +0.06%)</title><rect x="143.5" y="597" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="146.55" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="59.9" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="62.94" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="540.1" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="543.12" y="511.5" ></text>
</g>
<g >
<title>std::map&lt;db::replay_position, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier, std::less&lt;db::replay_position&gt;, std::allocator&lt;std::pair&lt;db::replay_position const, utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::notifier&gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="968.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="971.78" y="559.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="17.9" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.91" y="719.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="351.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="1098.3" y="533" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1101.26" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="447.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%; -0.02%)</title><rect x="335.4" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="338.39" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_service_level_statement*, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.85" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; 0.00%)</title><rect x="199.4" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.36" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (4 samples, 0.08%; -0.02%)</title><rect x="566.8" y="469" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="569.78" y="479.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="537.4" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="540.41" y="479.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="49.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="52.09" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="583.5" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="586.50" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (8 samples, 0.15%; -0.04%)</title><rect x="257.9" y="293" width="1.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="260.89" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; 0.00%)</title><rect x="650.2" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.16" y="655.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%; +0.02%)</title><rect x="41.0" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="43.96" y="495.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchc (1 samples, 0.02%; +0.02%)</title><rect x="34.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="37.86" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="747.1" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="750.10" y="543.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (1 samples, 0.02%; +0.02%)</title><rect x="726.3" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="729.32" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; -0.04%)</title><rect x="508.3" y="437" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="511.26" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="472.6" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="475.55" y="511.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="274.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.38" y="383.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (395 samples, 7.56%; -0.10%)</title><rect x="339.9" y="469" width="89.3" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="342.91" y="479.5" >seastar::r..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="589.4" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.38" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%; +0.04%)</title><rect x="681.8" y="613" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="684.80" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="23.1" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="26.11" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%; +0.04%)</title><rect x="794.1" y="389" width="2.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="797.11" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (2 samples, 0.04%; 0.00%)</title><rect x="363.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="366.41" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; +0.02%)</title><rect x="44.3" y="453" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="47.35" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="431.2" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="434.20" y="463.5" ></text>
</g>
<g >
<title>__libc_start_main (4,792 samples, 91.77%; 0.00%)</title><rect x="85.2" y="805" width="1082.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="815.5" >__libc_start_main</text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="82.1" y="709" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="902.3" y="437" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="905.34" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%; +0.04%)</title><rect x="162.8" y="597" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="165.75" y="607.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; +0.02%)</title><rect x="1076.3" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1079.34" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::prepared_statement (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.33" y="639.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (4 samples, 0.08%; -0.06%)</title><rect x="859.0" y="629" width="0.9" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="861.96" y="639.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="865.5" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="868.51" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (5 samples, 0.10%; -0.04%)</title><rect x="392.8" y="357" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="395.79" y="367.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="511.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 6.34%; 0.00%)</title><rect x="10.5" y="805" width="74.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="815.5" >[unknown]</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; -0.04%)</title><rect x="507.1" y="453" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="510.13" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.04%)</title><rect x="325.7" y="453" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="328.68" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="286.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="289.81" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; 0.00%)</title><rect x="658.8" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.75" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="591.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (15 samples, 0.29%; -0.04%)</title><rect x="163.2" y="597" width="3.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="166.21" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (14 samples, 0.27%; +0.13%)</title><rect x="344.9" y="421" width="3.1" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="347.88" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%; +0.04%)</title><rect x="145.1" y="629" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="148.13" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="560.7" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="563.68" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="662.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.82" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (12 samples, 0.23%; +0.11%)</title><rect x="653.8" y="629" width="2.7" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="656.78" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.97" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (6 samples, 0.11%; +0.06%)</title><rect x="462.6" y="453" width="1.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="465.61" y="463.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%; 0.00%)</title><rect x="73.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.27" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (2 samples, 0.04%; +0.04%)</title><rect x="28.8" y="437" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="31.76" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,245 samples, 42.99%; +0.02%)</title><rect x="116.9" y="661" width="507.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="119.88" y="671.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="357.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.54" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (2 samples, 0.04%; +0.02%)</title><rect x="25.8" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="28.82" y="399.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="590.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.74" y="591.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="285.7" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.68" y="399.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (1 samples, 0.02%; -0.04%)</title><rect x="690.2" y="645" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="693.16" y="655.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (407 samples, 7.79%; -0.04%)</title><rect x="337.2" y="485" width="92.0" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="340.20" y="495.5" >std::__inv..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="675.2" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="678.25" y="671.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (11 samples, 0.21%; 0.00%)</title><rect x="77.3" y="597" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.34" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="494.0" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="497.02" y="399.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="463.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (11 samples, 0.21%; 0.00%)</title><rect x="1129.7" y="357" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.67" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="160.5" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="163.49" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="431.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="576.0" y="533" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="579.05" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%; -0.04%)</title><rect x="708.0" y="581" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="711.01" y="591.5" ></text>
</g>
<g >
<title>row_cache::make_reader (34 samples, 0.65%; +0.06%)</title><rect x="532.7" y="517" width="7.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="535.66" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (5 samples, 0.10%; +0.08%)</title><rect x="1150.9" y="629" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1153.91" y="639.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (8 samples, 0.15%; -0.02%)</title><rect x="1075.9" y="485" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1078.89" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (3 samples, 0.06%; 0.00%)</title><rect x="393.9" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="396.92" y="399.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="719.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; -0.02%)</title><rect x="437.5" y="597" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="440.53" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.02%)</title><rect x="1037.5" y="405" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1040.47" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (3 samples, 0.06%; +0.02%)</title><rect x="1140.3" y="661" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1143.29" y="671.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (1 samples, 0.02%; +0.02%)</title><rect x="993.6" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="996.63" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; +0.04%)</title><rect x="821.4" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="824.45" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="69.4" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="72.43" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="53" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.23" y="63.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1141.4" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1144.42" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (3 samples, 0.06%; +0.06%)</title><rect x="95.2" y="645" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="98.19" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="227.4" y="309" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="230.38" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (2 samples, 0.04%; 0.00%)</title><rect x="981.0" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="983.98" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (8 samples, 0.15%; +0.11%)</title><rect x="616.7" y="613" width="1.8" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="619.72" y="623.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (1 samples, 0.02%; +0.02%)</title><rect x="872.5" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="875.52" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; -0.02%)</title><rect x="262.6" y="357" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="265.63" y="367.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (29 samples, 0.56%; +0.04%)</title><rect x="899.4" y="453" width="6.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="902.41" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (5 samples, 0.10%; -0.02%)</title><rect x="101.7" y="597" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="104.74" y="607.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="703.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="575.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (3 samples, 0.06%; 0.00%)</title><rect x="1121.1" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="894.2" y="453" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="897.21" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="76.7" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="79.66" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%; +0.02%)</title><rect x="686.8" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="689.77" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="687.5" ></text>
</g>
<g >
<title>posix_memalign (5 samples, 0.10%; 0.00%)</title><rect x="249.5" y="261" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="252.53" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (2 samples, 0.04%; +0.04%)</title><rect x="737.2" y="613" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="740.16" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="849.9" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="852.92" y="591.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%; 0.00%)</title><rect x="688.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.13" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="130.4" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="133.44" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; -0.02%)</title><rect x="1013.5" y="389" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1016.52" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::_M_ptr (2 samples, 0.04%; 0.00%)</title><rect x="67.2" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.17" y="543.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="575.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; +0.02%)</title><rect x="726.1" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="729.09" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="109.7" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="112.65" y="671.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="735.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; -0.04%)</title><rect x="762.2" y="517" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="765.24" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="55.4" y="245" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="58.42" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="549.4" y="517" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="552.38" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="415.5" ></text>
</g>
<g >
<title>std::partition_copy&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1132.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.83" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (11 samples, 0.21%; +0.02%)</title><rect x="763.8" y="517" width="2.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="766.83" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="947.8" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.76" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (2 samples, 0.04%; 0.00%)</title><rect x="73.3" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.27" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1118.6" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1121.59" y="607.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="799.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (2 samples, 0.04%; 0.00%)</title><rect x="80.5" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.50" y="687.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%; +0.02%)</title><rect x="274.8" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="277.83" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (5 samples, 0.10%; +0.04%)</title><rect x="843.8" y="597" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="846.82" y="607.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="949.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.35" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%; +0.06%)</title><rect x="517.5" y="341" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="520.52" y="351.5" ></text>
</g>
<g >
<title>db::commitlog::segment::cycle (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%; +0.06%)</title><rect x="532.0" y="517" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="534.98" y="527.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.17" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="74.6" y="533" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="77.63" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.91" y="543.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="533.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="536.57" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="801.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="804.11" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="642.3" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="645.26" y="463.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (4 samples, 0.08%; +0.04%)</title><rect x="871.4" y="453" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="874.39" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%; 0.00%)</title><rect x="545.8" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.77" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (91 samples, 1.74%; -0.02%)</title><rect x="916.8" y="581" width="20.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="919.81" y="591.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="783.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="20.8" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="23.85" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="83.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.67" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (12 samples, 0.23%; +0.02%)</title><rect x="948.9" y="581" width="2.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="951.89" y="591.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; -0.02%)</title><rect x="919.1" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="922.07" y="527.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; 0.00%)</title><rect x="677.3" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.28" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%; 0.00%)</title><rect x="22.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.65" y="591.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.2" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="804.7" y="293" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="807.73" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="642.7" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="645.71" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (9 samples, 0.17%; 0.00%)</title><rect x="871.4" y="485" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.39" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="895.1" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="898.11" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%; 0.00%)</title><rect x="119.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="122.37" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (11 samples, 0.21%; -0.08%)</title><rect x="407.0" y="325" width="2.5" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="410.02" y="335.5" ></text>
</g>
<g >
<title>schema_registry::get (18 samples, 0.34%; +0.02%)</title><rect x="976.7" y="533" width="4.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="979.69" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%; 0.00%)</title><rect x="862.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.57" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (19 samples, 0.36%; +0.02%)</title><rect x="381.9" y="341" width="4.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="384.94" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="309.0" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="311.95" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="335.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (10 samples, 0.19%; +0.10%)</title><rect x="12.3" y="757" width="2.2" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="15.26" y="767.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="715.2" y="277" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="718.24" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="415.5" ></text>
</g>
<g >
<title>position_in_partition_view::after_all_clustered_rows (1 samples, 0.02%; +0.02%)</title><rect x="17.5" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="20.46" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="651.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.07" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="126.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="129.60" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (64 samples, 1.23%; -0.08%)</title><rect x="1091.5" y="597" width="14.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1094.48" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="870.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.93" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="712.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="715.76" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="585.3" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="588.31" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;seastar::input_stream&lt;char&gt;::consume&lt;std::reference_wrapper&lt;sstables::mx::data_consume_rows_context_m&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%; +0.04%)</title><rect x="764.1" y="501" width="1.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="767.05" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; -0.02%)</title><rect x="46.2" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="49.15" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="194.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="197.39" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%; +0.04%)</title><rect x="1038.2" y="421" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1041.15" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="1048.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.32" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="1104.8" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1107.81" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="740.8" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="743.78" y="575.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="807.4" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.44" y="271.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="698.7" y="645" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="701.75" y="655.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (2 samples, 0.04%; 0.00%)</title><rect x="83.4" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.44" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%; -0.02%)</title><rect x="49.5" y="469" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="52.54" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="764.7" y="485" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="767.73" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::with_merge_lock (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_type_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.91" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; +0.04%)</title><rect x="714.3" y="645" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="717.34" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="910.0" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.03" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.10%; +0.02%)</title><rect x="271.4" y="341" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="274.44" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="597" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (600 samples, 11.49%; -0.02%)</title><rect x="181.1" y="533" width="135.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="184.06" y="543.5" >mutation_fragment..</text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="629" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="639.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1057.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1060.81" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (15 samples, 0.29%; 0.00%)</title><rect x="24.5" y="469" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.46" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_view_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.94" y="559.5" ></text>
</g>
<g >
<title>cql3::cf_name::~cf_name (1 samples, 0.02%; 0.00%)</title><rect x="40.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.05" y="543.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::get_future (1 samples, 0.02%; +0.02%)</title><rect x="1128.3" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1131.31" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="409.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.51" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (22 samples, 0.42%; +0.02%)</title><rect x="51.8" y="469" width="5.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="54.80" y="479.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="207.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.04" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; +0.04%)</title><rect x="126.8" y="629" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="129.82" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="421.7" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="424.71" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (4 samples, 0.08%; +0.02%)</title><rect x="565.2" y="453" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="568.20" y="463.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (2 samples, 0.04%; +0.04%)</title><rect x="1114.1" y="597" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1117.08" y="607.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="328.4" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="331.39" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="12.0" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="15.03" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; -0.04%)</title><rect x="1096.0" y="549" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1099.00" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%; -0.11%)</title><rect x="357.8" y="341" width="0.4" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="360.76" y="351.5" ></text>
</g>
<g >
<title>__start_context (284 samples, 5.44%; 0.00%)</title><rect x="17.2" y="789" width="64.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="799.5" >__start..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.15" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (5 samples, 0.10%; +0.04%)</title><rect x="186.9" y="469" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="189.93" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="436.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="439.85" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.08%)</title><rect x="855.6" y="597" width="0.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="858.57" y="607.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (3 samples, 0.06%; -0.02%)</title><rect x="1022.6" y="325" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1025.56" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="62.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.88" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="62.0" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="64.97" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="259.5" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="262.47" y="271.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.69" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1097.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.35" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="843.4" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.37" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (9 samples, 0.17%; 0.00%)</title><rect x="206.6" y="437" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.59" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="1112.7" y="565" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1115.72" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="292.9" y="357" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="295.91" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%; 0.00%)</title><rect x="119.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="122.59" y="655.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.04%)</title><rect x="832.1" y="453" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="835.07" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; -0.02%)</title><rect x="1120.9" y="613" width="6.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1123.85" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%; +0.02%)</title><rect x="1167.6" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1170.63" y="655.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="831.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.84" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="589.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.83" y="575.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (1 samples, 0.02%; +0.02%)</title><rect x="556.6" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="559.61" y="527.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="607.5" ></text>
</g>
<g >
<title>seastar::api_v3::and_newer::make_file_data_sink (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (207 samples, 3.96%; 0.00%)</title><rect x="22.9" y="597" width="46.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.88" y="607.5" >seas..</text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; +0.02%)</title><rect x="1108.9" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1111.88" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (16 samples, 0.31%; -0.06%)</title><rect x="256.5" y="309" width="3.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="259.53" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.90" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (11 samples, 0.21%; -0.02%)</title><rect x="742.4" y="533" width="2.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="745.36" y="543.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::~inheriting_concrete_execution_stage (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%; 0.00%)</title><rect x="554.4" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.35" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="692.9" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="695.87" y="655.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (23 samples, 0.44%; -0.08%)</title><rect x="489.3" y="405" width="5.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="492.28" y="415.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; +0.02%)</title><rect x="833.4" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="836.42" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="49.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.77" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (2 samples, 0.04%; 0.00%)</title><rect x="357.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.76" y="367.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%; +0.02%)</title><rect x="957.0" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="960.03" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;seastar::shared_ptr&lt;cql3::relation&gt; const*, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::relation&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="76.4" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="79.43" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (13 samples, 0.25%; +0.08%)</title><rect x="928.8" y="565" width="2.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="931.78" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (3 samples, 0.06%; +0.06%)</title><rect x="552.1" y="597" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="555.09" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%; 0.00%)</title><rect x="83.4" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.44" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="339.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="342.69" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (5 samples, 0.10%; 0.00%)</title><rect x="517.3" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="520.30" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="29.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.66" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="548.5" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="551.48" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.02%)</title><rect x="715.7" y="677" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="718.70" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (2 samples, 0.04%; -0.02%)</title><rect x="74.9" y="517" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="77.85" y="527.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.08" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="64.9" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="67.91" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="71.2" y="533" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="74.24" y="543.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; -0.02%)</title><rect x="712.5" y="581" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="715.53" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::promise&lt;void&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="688.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="691.58" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="642.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.48" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="868.2" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="871.22" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; +0.02%)</title><rect x="111.0" y="53" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="114.01" y="63.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="59.5" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="62.49" y="463.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.02%)</title><rect x="1047.4" y="437" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1050.41" y="447.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="504.6" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.64" y="479.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="815.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="117" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.04%)</title><rect x="1023.5" y="293" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1026.46" y="303.5" ></text>
</g>
<g >
<title>database::has_keyspace (10 samples, 0.19%; -0.02%)</title><rect x="841.1" y="597" width="2.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="844.11" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (22 samples, 0.42%; 0.00%)</title><rect x="868.7" y="533" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="543.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="1129.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.89" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="741.7" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="744.68" y="559.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; +0.02%)</title><rect x="62.4" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="65.42" y="511.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="101" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="111.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%; +0.04%)</title><rect x="129.5" y="597" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="132.54" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (3 samples, 0.06%; 0.00%)</title><rect x="73.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.50" y="655.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="70.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.56" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.49" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (11 samples, 0.21%; -0.04%)</title><rect x="983.9" y="485" width="2.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="986.92" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.06%)</title><rect x="659.9" y="661" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="662.88" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="868.4" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.45" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (16 samples, 0.31%; 0.00%)</title><rect x="72.4" y="597" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.37" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%; +0.02%)</title><rect x="27.9" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="30.85" y="367.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="1129.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.89" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (2 samples, 0.04%; +0.04%)</title><rect x="1053.5" y="421" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1056.52" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%; -0.02%)</title><rect x="14.7" y="757" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="17.75" y="767.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="130.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="133.21" y="591.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="297.4" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="300.43" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="991.1" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="994.15" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (3 samples, 0.06%; -0.04%)</title><rect x="537.6" y="485" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="540.63" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1086.7" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1089.73" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="69.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="72.20" y="575.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (2 samples, 0.04%; 0.00%)</title><rect x="1080.9" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.86" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%; +0.04%)</title><rect x="459.2" y="453" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="462.22" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="817.2" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="820.15" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="753.9" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="756.88" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="495.4" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="498.38" y="511.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%; 0.00%)</title><rect x="112.1" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="623.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%; 0.00%)</title><rect x="366.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="369.35" y="367.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (6 samples, 0.11%; -0.04%)</title><rect x="1130.3" y="325" width="1.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1133.34" y="335.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (1 samples, 0.02%; 0.00%)</title><rect x="1167.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.40" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%; +0.02%)</title><rect x="457.0" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="459.96" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;seastar::input_stream&lt;char&gt;::consume&lt;std::reference_wrapper&lt;sstables::mx::data_consume_rows_context_m&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="40.1" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="43.05" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; +0.02%)</title><rect x="727.4" y="565" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="730.45" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="710.3" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="713.27" y="639.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; 0.00%)</title><rect x="842.9" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.91" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="144.5" y="629" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="147.45" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.10%; +0.10%)</title><rect x="340.8" y="437" width="1.1" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="343.82" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (3 samples, 0.06%; -0.02%)</title><rect x="133.2" y="581" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="136.15" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%; 0.00%)</title><rect x="708.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.01" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; -0.02%)</title><rect x="957.3" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="960.25" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="600.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.68" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1111.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1114.59" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.98" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="501.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.93" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (22 samples, 0.42%; -0.02%)</title><rect x="211.8" y="405" width="5.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="214.79" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (4 samples, 0.08%; 0.00%)</title><rect x="867.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.77" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_max_size (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.95" y="415.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1153.4" y="645" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1156.39" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (23 samples, 0.44%; 0.00%)</title><rect x="868.7" y="549" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.34" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="748.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="751.91" y="463.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="534.9" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="537.92" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1058.9" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1061.94" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (207 samples, 3.96%; +0.02%)</title><rect x="222.2" y="405" width="46.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="225.18" y="415.5" >part..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.85" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (10 samples, 0.19%; 0.00%)</title><rect x="271.2" y="357" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="274.22" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="569.0" y="485" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="572.04" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="520.2" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="523.23" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1145.9" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1148.94" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (8 samples, 0.15%; 0.00%)</title><rect x="25.6" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.59" y="447.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%; 0.00%)</title><rect x="688.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.13" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="553.5" y="597" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="556.45" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (51 samples, 0.98%; -0.02%)</title><rect x="317.1" y="533" width="11.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="320.09" y="543.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (5 samples, 0.10%; 0.00%)</title><rect x="538.5" y="469" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.54" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_S_relocate (1 samples, 0.02%; +0.02%)</title><rect x="72.1" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="75.14" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%; -0.10%)</title><rect x="668.0" y="645" width="0.7" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="671.02" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.10%; +0.04%)</title><rect x="328.6" y="533" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="331.61" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="655.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.02%; 0.00%)</title><rect x="642.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="559.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%; -0.10%)</title><rect x="1118.8" y="597" width="0.5" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1121.82" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (7 samples, 0.13%; +0.10%)</title><rect x="280.3" y="421" width="1.5" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="283.26" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::gossiper&gt;::create_local_service&lt;seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;netw::messaging_service&gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="794.6" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="797.56" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%; -0.06%)</title><rect x="1045.4" y="485" width="1.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1048.38" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="18.1" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="21.13" y="671.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="511.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (3 samples, 0.06%; 0.00%)</title><rect x="82.1" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%; +0.02%)</title><rect x="308.3" y="469" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="311.28" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%; -0.02%)</title><rect x="855.1" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="858.12" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="467.4" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="470.36" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; -0.02%)</title><rect x="766.1" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="769.09" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; 0.00%)</title><rect x="667.3" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="670.34" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="351.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (47 samples, 0.90%; -0.02%)</title><rect x="571.3" y="565" width="10.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="574.30" y="575.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (2 samples, 0.04%; +0.02%)</title><rect x="623.7" y="613" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="626.73" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="188.1" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="191.06" y="479.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (174 samples, 3.33%; -0.04%)</title><rect x="778.3" y="517" width="39.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="781.29" y="527.5" >ser..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, unsigned long&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="1126.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.28" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="947.8" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.76" y="527.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="862.8" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="865.80" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="433.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="436.24" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; 0.00%)</title><rect x="263.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.76" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1119.3" y="597" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1122.27" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="63.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="66.78" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.40" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="437.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="440.08" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="466.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.23" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (17 samples, 0.33%; +0.04%)</title><rect x="822.1" y="565" width="3.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="825.13" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (34 samples, 0.65%; -0.02%)</title><rect x="1063.2" y="453" width="7.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1066.23" y="463.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (2 samples, 0.04%; 0.00%)</title><rect x="1128.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (79 samples, 1.51%; 0.00%)</title><rect x="41.2" y="533" width="17.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.18" y="543.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.15%; +0.04%)</title><rect x="535.1" y="485" width="1.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="538.15" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="35.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.08" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (4 samples, 0.08%; 0.00%)</title><rect x="1117.2" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.24" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="247.0" y="229" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="250.04" y="239.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (265 samples, 5.07%; +0.02%)</title><rect x="21.1" y="693" width="59.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="24.07" y="703.5" >single..</text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="513.2" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="516.23" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; +0.02%)</title><rect x="144.2" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="147.22" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="306.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="309.92" y="463.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%; 0.00%)</title><rect x="22.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="629" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="572.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.98" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::aggregates (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="447.5" ></text>
</g>
<g >
<title>do_cql_test (275 samples, 5.27%; 0.00%)</title><rect x="19.3" y="725" width="62.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.26" y="735.5" >do_cql..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (13 samples, 0.25%; +0.02%)</title><rect x="721.3" y="645" width="3.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="724.34" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="421.9" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="424.94" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1038.6" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1041.60" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="797.7" y="341" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="800.72" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="601.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.58" y="623.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="671.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (4 samples, 0.08%; +0.04%)</title><rect x="655.6" y="613" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="658.59" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.20" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%; 0.00%)</title><rect x="846.8" y="565" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.76" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="467.4" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="470.36" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (518 samples, 9.92%; +0.11%)</title><rect x="969.7" y="549" width="117.0" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="972.68" y="559.5" >service::stora..</text>
</g>
<g >
<title>data_consumer::continuous_data_consumer&lt;sstables::mx::data_consume_rows_context_m&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.03" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (13 samples, 0.25%; +0.02%)</title><rect x="548.3" y="565" width="2.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="551.25" y="575.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (24 samples, 0.46%; -0.06%)</title><rect x="922.9" y="549" width="5.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="925.91" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="687.7" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.68" y="495.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (1 samples, 0.02%; 0.00%)</title><rect x="871.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.84" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="339.2" y="421" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="342.23" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="825.3" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="828.29" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.5" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="43.51" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="164.3" y="581" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="167.34" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="53.4" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.39" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="337.0" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="339.97" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%; 0.00%)</title><rect x="393.0" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="396.01" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::io_getevents (1 samples, 0.02%; 0.00%)</title><rect x="1167.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.95" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="788.2" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="791.23" y="463.5" ></text>
</g>
<g >
<title>create_partitions (275 samples, 5.27%; 0.00%)</title><rect x="19.3" y="709" width="62.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.26" y="719.5" >create..</text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1048.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.32" y="463.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (9 samples, 0.17%; +0.13%)</title><rect x="606.6" y="613" width="2.0" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="609.55" y="623.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.08%)</title><rect x="908.9" y="485" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="911.90" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="941.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.44" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (205 samples, 3.93%; +0.04%)</title><rect x="222.4" y="389" width="46.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="225.41" y="399.5" >loga..</text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.6" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1135.60" y="383.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (19 samples, 0.36%; -0.02%)</title><rect x="846.1" y="597" width="4.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="849.08" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="580.3" y="533" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="583.34" y="543.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="43.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="46.90" y="431.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1121.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.76" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="715.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="718.47" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="769.9" y="533" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="772.93" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;gms::gossiper&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="55.6" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.65" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.13" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%; 0.00%)</title><rect x="415.4" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="418.38" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (2 samples, 0.04%; +0.02%)</title><rect x="694.5" y="629" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="697.45" y="639.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%; +0.02%)</title><rect x="1122.4" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1125.44" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%; +0.02%)</title><rect x="687.2" y="453" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="690.22" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.42%; -0.04%)</title><rect x="162.5" y="613" width="5.0" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="165.53" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%; +0.02%)</title><rect x="541.9" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="544.93" y="511.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%; +0.02%)</title><rect x="287.0" y="389" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="290.04" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%; +0.06%)</title><rect x="730.6" y="517" width="1.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="733.61" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (4 samples, 0.08%; +0.06%)</title><rect x="435.3" y="549" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="438.27" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%; +0.02%)</title><rect x="52.7" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="55.71" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="830.0" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="833.03" y="495.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.44" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (16 samples, 0.31%; +0.10%)</title><rect x="646.1" y="629" width="3.6" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="649.10" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (36 samples, 0.69%; -0.04%)</title><rect x="28.5" y="453" width="8.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="31.53" y="463.5" ></text>
</g>
<g >
<title>write_tombstones&lt;ser::mutation_partition__range_tombstones&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1131.9" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1134.93" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.10%; 0.00%)</title><rect x="431.4" y="453" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="434.43" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (3 samples, 0.06%; 0.00%)</title><rect x="566.1" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.10" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (3 samples, 0.06%; 0.00%)</title><rect x="746.9" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="749.88" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="214.5" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="217.50" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.66" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (30 samples, 0.57%; -0.02%)</title><rect x="1127.2" y="661" width="6.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1130.18" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="106.3" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="109.26" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (7 samples, 0.13%; +0.10%)</title><rect x="160.9" y="613" width="1.6" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="163.95" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1113.4" y="549" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1116.40" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="849.7" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="852.69" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (11 samples, 0.21%; +0.19%)</title><rect x="363.9" y="357" width="2.5" height="15.0" fill="rgb(255,60,60)" rx="2" ry="2" />
<text  x="366.86" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="695.4" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="698.36" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="415.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="841.1" y="581" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.11" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="745.1" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="748.07" y="559.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::tomb (1 samples, 0.02%; +0.02%)</title><rect x="1124.5" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1127.47" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (1 samples, 0.02%; +0.02%)</title><rect x="860.1" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="863.09" y="671.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (473 samples, 9.06%; +0.08%)</title><rect x="438.9" y="597" width="106.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="441.89" y="607.5" >query::querie..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%; 0.00%)</title><rect x="834.1" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.10" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; -0.02%)</title><rect x="272.3" y="293" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="275.35" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%; 0.00%)</title><rect x="1036.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.12" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="678.9" y="661" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="681.86" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (9 samples, 0.17%; 0.00%)</title><rect x="908.9" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="911.90" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="22.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.98" y="543.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="202.7" y="453" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="205.75" y="463.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (49 samples, 0.94%; 0.00%)</title><rect x="797.9" y="389" width="11.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.95" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1163.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.56" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="332.5" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="335.45" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (75 samples, 1.44%; -0.08%)</title><rect x="186.7" y="485" width="17.0" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="189.71" y="495.5" ></text>
</g>
<g >
<title>auth::resource::resource (13 samples, 0.25%; 0.00%)</title><rect x="771.5" y="565" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.51" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.11%; 0.00%)</title><rect x="816.0" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.02" y="511.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1168.5" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.53" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="870.9" y="421" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.93" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%; 0.00%)</title><rect x="19.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.49" y="703.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (12 samples, 0.23%; 0.00%)</title><rect x="868.7" y="485" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (15 samples, 0.29%; +0.13%)</title><rect x="490.4" y="373" width="3.4" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="493.41" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (5 samples, 0.10%; +0.02%)</title><rect x="727.2" y="597" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="730.22" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="607.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="866.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.64" y="527.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="1025.5" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1028.50" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (13 samples, 0.25%; -0.02%)</title><rect x="512.6" y="405" width="2.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="515.55" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="842.2" y="533" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="845.24" y="543.5" ></text>
</g>
<g >
<title>main::$_3::operator (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="59.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.71" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%; +0.02%)</title><rect x="856.5" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="859.47" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (12 samples, 0.23%; +0.13%)</title><rect x="140.8" y="549" width="2.7" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="143.83" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (14 samples, 0.27%; -0.06%)</title><rect x="671.4" y="645" width="3.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="674.41" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="791.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.85" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, data_value&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1074.5" y="453" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1077.53" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1121.1" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.08" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="112.6" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="115.59" y="431.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_memory_size_in_allocator (1 samples, 0.02%; 0.00%)</title><rect x="82.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="427.6" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.59" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (8 samples, 0.15%; 0.00%)</title><rect x="46.6" y="469" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%; -0.02%)</title><rect x="83.0" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="85.99" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (2 samples, 0.04%; 0.00%)</title><rect x="1122.9" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.89" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (11 samples, 0.21%; +0.08%)</title><rect x="941.7" y="581" width="2.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="944.66" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (22 samples, 0.42%; 0.00%)</title><rect x="868.7" y="517" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="202.3" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="205.30" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (23 samples, 0.44%; -0.10%)</title><rect x="546.2" y="581" width="5.2" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="549.22" y="591.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="519.6" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="522.56" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.02%)</title><rect x="550.1" y="501" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="553.06" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1105.3" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1108.26" y="591.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="911.8" y="485" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="914.83" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (14 samples, 0.27%; 0.00%)</title><rect x="77.1" y="661" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.11" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="820.5" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.54" y="479.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="81.2" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="84.18" y="687.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; +0.02%)</title><rect x="602.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="605.49" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1025.7" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1028.72" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%; 0.00%)</title><rect x="22.2" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="878.2" y="645" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="881.17" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="41.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="511.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (60 samples, 1.15%; 0.00%)</title><rect x="233.9" y="293" width="13.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="236.93" y="303.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="36.7" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="39.66" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%; 0.00%)</title><rect x="1141.0" y="661" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.97" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (16 samples, 0.31%; +0.04%)</title><rect x="59.0" y="517" width="3.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="62.03" y="527.5" ></text>
</g>
<g >
<title>row::row (4 samples, 0.08%; +0.06%)</title><rect x="298.1" y="373" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="301.11" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="936.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="939.24" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="93.6" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="96.61" y="655.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; -0.02%)</title><rect x="560.9" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="563.91" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (2 samples, 0.04%; +0.02%)</title><rect x="881.3" y="613" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="884.33" y="623.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; 0.00%)</title><rect x="686.8" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.77" y="495.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="454.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="457.25" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%; 0.00%)</title><rect x="816.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.70" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="810.1" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="813.15" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,766 samples, 91.27%; +0.08%)</title><rect x="88.6" y="693" width="1077.0" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="91.64" y="703.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (12 samples, 0.23%; -0.08%)</title><rect x="925.6" y="517" width="2.7" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="928.62" y="527.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.66" y="623.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (4 samples, 0.08%; +0.08%)</title><rect x="272.6" y="341" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="275.57" y="351.5" ></text>
</g>
<g >
<title>seastar::logger::lambda_log_writer&lt;seastar::logger::log&lt;std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="631.9" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="634.86" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="58.4" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="61.36" y="447.5" ></text>
</g>
<g >
<title>table::make_reader (432 samples, 8.27%; +0.27%)</title><rect x="445.0" y="533" width="97.6" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="447.99" y="543.5" >table::make..</text>
</g>
<g >
<title>seastar::execution_stage::~execution_stage (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (4 samples, 0.08%; 0.00%)</title><rect x="642.0" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="47.7" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.74" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (16 samples, 0.31%; +0.02%)</title><rect x="1097.8" y="549" width="3.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1100.81" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt;, std::allocator&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="767.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%; +0.02%)</title><rect x="1007.6" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1010.64" y="463.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_fd1596171e2adf1d6a1bd2abbc1d76b17b98ea7c] (1 samples, 0.02%; +0.02%)</title><rect x="962.2" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="965.23" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.27" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (2 samples, 0.04%; 0.00%)</title><rect x="522.5" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.49" y="415.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="559.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="82.1" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (8 samples, 0.15%; 0.00%)</title><rect x="46.6" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.11%; +0.02%)</title><rect x="865.7" y="549" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="868.74" y="559.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%; -0.02%)</title><rect x="1057.4" y="469" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1060.36" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.99" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (2 samples, 0.04%; +0.02%)</title><rect x="616.3" y="597" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="619.27" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (1 samples, 0.02%; -0.08%)</title><rect x="1033.4" y="437" width="0.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1036.40" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; 0.00%)</title><rect x="957.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.25" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (4 samples, 0.08%; 0.00%)</title><rect x="872.5" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.52" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (3 samples, 0.06%; +0.02%)</title><rect x="83.2" y="597" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="86.21" y="607.5" ></text>
</g>
<g >
<title>CryptoPP::Weak1::MD5::Transform (1 samples, 0.02%; 0.00%)</title><rect x="10.0" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="830.3" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="833.26" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="860.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.31" y="687.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.63" y="799.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="770.6" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="773.61" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (31 samples, 0.59%; +0.02%)</title><rect x="729.0" y="581" width="7.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="732.03" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (8 samples, 0.15%; 0.00%)</title><rect x="46.6" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.61" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="645" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%; +0.10%)</title><rect x="837.0" y="565" width="2.1" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="840.04" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;flush_reader::get_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="82.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="607.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="247.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="250.27" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (2 samples, 0.04%; +0.04%)</title><rect x="613.1" y="581" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="616.11" y="591.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (13 samples, 0.25%; -0.02%)</title><rect x="903.0" y="437" width="3.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="906.02" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="468.5" y="501" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="471.49" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (7 samples, 0.13%; +0.06%)</title><rect x="779.9" y="485" width="1.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="782.87" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.1" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.06" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%; +0.02%)</title><rect x="1049.7" y="517" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1052.67" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="741.5" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="744.46" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="1150.5" y="581" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1153.46" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.5" y="293" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="45.54" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="705.1" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="708.07" y="639.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (42 samples, 0.80%; +0.02%)</title><rect x="474.8" y="485" width="9.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="477.81" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="467.1" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="470.13" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="520.0" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="523.01" y="399.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="83.4" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.44" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="211.8" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="214.79" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.29%; +0.04%)</title><rect x="800.0" y="341" width="3.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="802.98" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; -0.08%)</title><rect x="497.6" y="485" width="0.9" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="500.64" y="495.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="225.6" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="228.57" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="539.4" y="421" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="542.44" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (5 samples, 0.10%; +0.04%)</title><rect x="743.7" y="469" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="746.72" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="77.3" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="80.34" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="777.6" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="780.61" y="543.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="262.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="265.41" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="1140.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.06" y="655.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (1 samples, 0.02%; +0.02%)</title><rect x="28.5" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="31.53" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (5 samples, 0.10%; 0.00%)</title><rect x="609.7" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.72" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (5 samples, 0.10%; +0.08%)</title><rect x="544.6" y="581" width="1.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="547.64" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (17 samples, 0.33%; +0.06%)</title><rect x="818.3" y="533" width="3.8" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="821.28" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="41.6" y="309" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="44.64" y="319.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="995.4" y="437" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="998.44" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="642.0" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="645.03" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.11%; +0.02%)</title><rect x="1157.7" y="661" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1160.69" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (123 samples, 2.36%; -0.04%)</title><rect x="554.8" y="581" width="27.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="557.81" y="591.5" >f..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="194.8" y="421" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="197.84" y="431.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="773" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="14.13" y="783.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="27.6" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="30.63" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="276.0" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="278.96" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="915.0" y="549" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="918.00" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (2 samples, 0.04%; +0.02%)</title><rect x="619.4" y="597" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="622.43" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;gms::gossiper&gt;, seastar::sharded&lt;gms::gossiper&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (2 samples, 0.04%; 0.00%)</title><rect x="870.9" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.93" y="447.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%; -0.02%)</title><rect x="70.1" y="629" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="73.11" y="639.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="493.8" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="496.80" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; -0.02%)</title><rect x="1051.5" y="485" width="2.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1054.48" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1116.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1119.79" y="607.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (15 samples, 0.29%; -0.04%)</title><rect x="134.7" y="581" width="3.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="137.73" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (6 samples, 0.11%; 0.00%)</title><rect x="1162.0" y="613" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.98" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.04%)</title><rect x="262.0" y="325" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="264.95" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="38.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.04%)</title><rect x="568.4" y="469" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="571.36" y="479.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="172.2" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.24" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1128.3" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.31" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (431 samples, 8.25%; -0.04%)</title><rect x="335.2" y="549" width="97.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="338.17" y="559.5" >flat_mutati..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="415.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.83" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="103.6" y="613" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="106.55" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; -0.04%)</title><rect x="337.7" y="469" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="340.65" y="479.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%; +0.04%)</title><rect x="321.8" y="485" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="324.83" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (141 samples, 2.70%; +0.04%)</title><rect x="783.7" y="501" width="31.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="786.71" y="511.5" >st..</text>
</g>
<g >
<title>memtable::update (2 samples, 0.04%; +0.04%)</title><rect x="1125.1" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1128.15" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (54 samples, 1.03%; -0.10%)</title><rect x="896.0" y="469" width="12.2" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="899.02" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (2 samples, 0.04%; +0.02%)</title><rect x="87.5" y="693" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="90.51" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="938.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.72" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="287.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (14 samples, 0.27%; -0.02%)</title><rect x="977.1" y="517" width="3.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="980.14" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (45 samples, 0.86%; +0.02%)</title><rect x="864.2" y="645" width="10.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="867.16" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1035.7" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1038.66" y="463.5" ></text>
</g>
<g >
<title>freeze (12 samples, 0.23%; 0.00%)</title><rect x="1129.7" y="373" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.67" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (6 samples, 0.11%; +0.10%)</title><rect x="540.3" y="517" width="1.4" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="543.34" y="527.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (1 samples, 0.02%; 0.00%)</title><rect x="686.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.77" y="447.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="678.0" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.96" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="835.0" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="838.01" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.08" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="751.4" y="469" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="754.40" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="75.5" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.53" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.73%; -0.02%)</title><rect x="800.0" y="357" width="8.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="802.98" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="261.3" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.28" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="1075.0" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1077.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1038.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.60" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (573 samples, 10.97%; -0.02%)</title><rect x="960.0" y="581" width="129.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="962.97" y="591.5" >service::storage..</text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="543.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="866.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.42" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="606.3" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="609.33" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="816.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.48" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (5 samples, 0.10%; -0.02%)</title><rect x="35.5" y="437" width="1.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="38.53" y="447.5" ></text>
</g>
<g >
<title>row::compact_and_expire (2 samples, 0.04%; 0.00%)</title><rect x="687.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.22" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; +0.02%)</title><rect x="717.5" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="720.50" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (2 samples, 0.04%; +0.02%)</title><rect x="783.3" y="501" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="786.26" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (8 samples, 0.15%; 0.00%)</title><rect x="414.7" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="417.71" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="148.7" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="151.74" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; -0.04%)</title><rect x="352.8" y="341" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="355.79" y="351.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.11%; 0.00%)</title><rect x="289.1" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="292.07" y="367.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%; 0.00%)</title><rect x="41.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.96" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::log_buf::inserter_iterator::operator= (1 samples, 0.02%; +0.02%)</title><rect x="11.6" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="14.58" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (15 samples, 0.29%; 0.00%)</title><rect x="429.2" y="485" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.17" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (38 samples, 0.73%; 0.00%)</title><rect x="865.5" y="581" width="8.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.51" y="591.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="585.8" y="581" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="588.76" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="862.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.57" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; -0.06%)</title><rect x="1158.6" y="645" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1161.59" y="655.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="82.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.08" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="308.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="311.73" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="959.7" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="962.74" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="335.5" ></text>
</g>
<g >
<title>hwloc__add_info_nodup.isra.0 (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="757" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="13.90" y="767.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; -0.08%)</title><rect x="285.9" y="357" width="0.7" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="288.91" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%; +0.02%)</title><rect x="819.6" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="822.64" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.34" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="620.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="623.79" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (15 samples, 0.29%; -0.08%)</title><rect x="418.5" y="373" width="3.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="421.55" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="642.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.48" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (5 samples, 0.10%; 0.00%)</title><rect x="137.0" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.99" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.19%; 0.00%)</title><rect x="100.6" y="613" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.61" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="416.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="419.29" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="808.6" y="373" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="811.57" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; +0.02%)</title><rect x="467.6" y="485" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="470.58" y="495.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (2 samples, 0.04%; +0.04%)</title><rect x="992.3" y="437" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="995.28" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (123 samples, 2.36%; -0.04%)</title><rect x="554.8" y="597" width="27.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="557.81" y="607.5" >s..</text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1077.5" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1080.47" y="447.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (4 samples, 0.08%; -0.02%)</title><rect x="473.2" y="501" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="476.23" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%; 0.00%)</title><rect x="1128.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (4 samples, 0.08%; -0.04%)</title><rect x="748.7" y="485" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="751.69" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.8" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.76" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%; -0.02%)</title><rect x="200.0" y="421" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="203.04" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="719.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_aggregate_statement*, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.1" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="68.14" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (12 samples, 0.23%; -0.02%)</title><rect x="811.1" y="437" width="2.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="814.05" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; 0.00%)</title><rect x="265.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.12" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (1 samples, 0.02%; +0.02%)</title><rect x="112.1" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="115.14" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (4 samples, 0.08%; 0.00%)</title><rect x="249.8" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="252.75" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.16" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="502.6" y="485" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="505.61" y="495.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; -0.02%)</title><rect x="276.0" y="405" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="278.96" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="866.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.42" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.06%)</title><rect x="853.8" y="517" width="1.3" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="856.76" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (22 samples, 0.42%; +0.02%)</title><rect x="195.3" y="437" width="5.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="198.29" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="745.3" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="748.30" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%; +0.02%)</title><rect x="564.1" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="567.07" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%; 0.00%)</title><rect x="772.9" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.86" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (23 samples, 0.44%; 0.00%)</title><rect x="692.6" y="661" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="695.65" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="580.3" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="583.34" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="774.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="777.22" y="559.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (8 samples, 0.15%; -0.02%)</title><rect x="546.4" y="549" width="1.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="549.45" y="559.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="454.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="457.25" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="61.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.52" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1130.8" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1133.80" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.27%; -0.06%)</title><rect x="852.2" y="597" width="3.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="855.18" y="607.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (1 samples, 0.02%; +0.02%)</title><rect x="27.2" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="30.17" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;unsigned long&gt;, sstables::sstable::update_info_for_opened_data (1 samples, 0.02%; 0.00%)</title><rect x="688.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.13" y="687.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.3" y="373" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1126.34" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (14 samples, 0.27%; 0.00%)</title><rect x="679.3" y="661" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.31" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="500.1" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.12" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (5 samples, 0.10%; +0.08%)</title><rect x="1103.2" y="565" width="1.2" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="1106.23" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,220 samples, 42.51%; -0.04%)</title><rect x="122.5" y="645" width="501.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="125.53" y="655.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (13 samples, 0.25%; +0.02%)</title><rect x="805.2" y="293" width="2.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="808.18" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="52.0" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::tuple_map_helper&lt;std::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;, seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::unwrap (1 samples, 0.02%; +0.02%)</title><rect x="1127.2" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1130.18" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.6" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="42.60" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1025.9" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1028.95" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%; +0.04%)</title><rect x="500.6" y="485" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="503.57" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1137.3" y="677" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1140.35" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (197 samples, 3.77%; +0.02%)</title><rect x="23.8" y="565" width="44.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="26.78" y="575.5" >cql3..</text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; +0.02%)</title><rect x="541.7" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="544.70" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%; +0.02%)</title><rect x="187.4" y="453" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="190.38" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="1142.5" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1145.55" y="671.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.02%)</title><rect x="897.6" y="437" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="900.60" y="447.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.02" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; +0.02%)</title><rect x="630.3" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="633.28" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="565" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="51.6" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="54.58" y="399.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="1130.8" y="277" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1133.80" y="287.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (9 samples, 0.17%; +0.04%)</title><rect x="15.2" y="757" width="2.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="18.20" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.10%)</title><rect x="984.4" y="453" width="1.3" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="987.37" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (26 samples, 0.50%; -0.02%)</title><rect x="546.2" y="597" width="5.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="549.22" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;frozen_schema  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="591.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (11 samples, 0.21%; +0.04%)</title><rect x="597.1" y="597" width="2.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="600.06" y="607.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; 0.00%)</title><rect x="807.4" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.44" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="42.1" y="437" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="45.09" y="447.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="697.6" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="700.62" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="674.1" y="597" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="677.12" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (7 samples, 0.13%; 0.00%)</title><rect x="73.7" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (2 samples, 0.04%; +0.04%)</title><rect x="309.2" y="485" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="312.18" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1086.3" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1089.28" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::shared_ptr&lt;schema_extension&gt; &gt; &gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="865.1" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="868.06" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_view_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="68.81" y="559.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="54.1" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="57.06" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="600.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="603.45" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.89" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; -0.02%)</title><rect x="650.8" y="629" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="653.84" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="629.4" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="632.38" y="639.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (210 samples, 4.02%; +0.04%)</title><rect x="774.7" y="565" width="47.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="777.67" y="575.5" >std:..</text>
</g>
<g >
<title>std::function&lt;frozen_schema  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="809.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="812.92" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (2 samples, 0.04%; 0.00%)</title><rect x="50.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="447.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, atomic_cell&gt;, 131072ul&gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, atomic_cell&gt; (1 samples, 0.02%; +0.02%)</title><rect x="863.0" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="866.03" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%; 0.00%)</title><rect x="866.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.96" y="511.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (9 samples, 0.17%; +0.10%)</title><rect x="733.8" y="469" width="2.0" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="736.77" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="22.0" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="24.98" y="527.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%; +0.02%)</title><rect x="84.3" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="87.34" y="591.5" ></text>
</g>
<g >
<title>table::set_hit_rate (12 samples, 0.23%; 0.00%)</title><rect x="710.5" y="629" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.50" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.06%)</title><rect x="920.9" y="517" width="1.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="923.87" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; -0.02%)</title><rect x="52.9" y="453" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="55.93" y="463.5" ></text>
</g>
<g >
<title>sstables::file_writer::make (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1061.0" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1063.97" y="511.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.36" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.08%; +0.04%)</title><rect x="885.8" y="597" width="1.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="888.85" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="417.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.87" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%; +0.11%)</title><rect x="903.5" y="421" width="2.5" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="906.47" y="431.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="677.5" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="680.51" y="639.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 1.30%; +0.04%)</title><rect x="793.7" y="405" width="15.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="796.65" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (5 samples, 0.10%; 0.00%)</title><rect x="584.6" y="597" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.63" y="607.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_error (1 samples, 0.02%; -0.02%)</title><rect x="28.1" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="31.08" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.08%; 0.00%)</title><rect x="566.8" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.78" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.64" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (32 samples, 0.61%; +0.04%)</title><rect x="301.5" y="485" width="7.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="304.50" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.89" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.20" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="147.2" y="629" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="150.16" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="702.6" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="705.59" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="793.0" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="795.98" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (11 samples, 0.21%; -0.04%)</title><rect x="682.5" y="661" width="2.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="685.48" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; +0.02%)</title><rect x="748.7" y="469" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="751.69" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="22.4" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.43" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (3 samples, 0.06%; -0.02%)</title><rect x="339.2" y="437" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="342.23" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="642.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.03" y="607.5" ></text>
</g>
<g >
<title>utils::flush_queue&lt;db::replay_position, std::less&lt;db::replay_position&gt;, seastar::lowres_clock&gt;::run_with_ordered_post_op&lt;db::commitlog::segment::cycle (1 samples, 0.02%; 0.00%)</title><rect x="1126.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.05" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1024.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.82" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="718.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.95" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (9 samples, 0.17%; +0.02%)</title><rect x="634.8" y="661" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="637.80" y="671.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="549.4" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.38" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (1 samples, 0.02%; +0.02%)</title><rect x="506.2" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="509.22" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="672.8" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="675.76" y="607.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="723.4" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.38" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (3 samples, 0.06%; +0.06%)</title><rect x="1096.4" y="565" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="1099.45" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (465 samples, 8.90%; -0.04%)</title><rect x="331.8" y="581" width="105.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="334.78" y="591.5" >seastar::fut..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="319.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="479.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="752.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.08" y="447.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="223.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="226.76" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (4 samples, 0.08%; 0.00%)</title><rect x="73.7" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.10%; +0.02%)</title><rect x="338.8" y="453" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="341.78" y="463.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (3 samples, 0.06%; +0.04%)</title><rect x="1040.0" y="437" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1042.96" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (1 samples, 0.02%; -0.04%)</title><rect x="524.1" y="453" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="527.08" y="463.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%; 0.00%)</title><rect x="330.9" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.87" y="575.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.89" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.5" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="71.53" y="575.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="78.2" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="81.24" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="61.5" y="261" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="64.52" y="271.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.08%; 0.00%)</title><rect x="590.1" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.06" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="116.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.66" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="870.3" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="873.26" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; 0.00%)</title><rect x="605.4" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.42" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="294.5" y="405" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="297.49" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%; -0.06%)</title><rect x="288.4" y="357" width="0.7" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="291.39" y="367.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="78.7" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="81.69" y="415.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (4 samples, 0.08%; +0.04%)</title><rect x="499.7" y="485" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="502.67" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="25.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.14" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%; +0.04%)</title><rect x="647.9" y="597" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="650.91" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; -0.02%)</title><rect x="331.1" y="549" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="334.10" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="855.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.79" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="813.3" y="389" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="816.31" y="399.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.21%; +0.10%)</title><rect x="577.6" y="517" width="2.5" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="580.63" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.11%; 0.00%)</title><rect x="1090.1" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1093.12" y="591.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%; 0.00%)</title><rect x="741.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.00" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; +0.02%)</title><rect x="177.9" y="549" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="180.89" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.3" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="71.30" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (13 samples, 0.25%; 0.00%)</title><rect x="983.5" y="517" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.47" y="527.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="803.1" y="325" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="806.14" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="1158.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.82" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (2 samples, 0.04%; 0.00%)</title><rect x="35.1" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.08" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%; +0.02%)</title><rect x="841.1" y="565" width="2.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="844.11" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (3 samples, 0.06%; 0.00%)</title><rect x="567.0" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.01" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="67.2" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.17" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.08%; +0.06%)</title><rect x="200.3" y="437" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="203.26" y="447.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (3 samples, 0.06%; 0.00%)</title><rect x="1076.8" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.79" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="587.8" y="549" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="590.80" y="559.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="343.3" y="197" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="346.30" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; -0.02%)</title><rect x="580.6" y="533" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="583.57" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::tuple_map_helper&lt;std::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;, seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::unwrap (1 samples, 0.02%; +0.02%)</title><rect x="1134.9" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1137.86" y="671.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="26.0" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="29.04" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%; -0.02%)</title><rect x="825.1" y="533" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="828.06" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%; +0.04%)</title><rect x="1106.2" y="597" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1109.17" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="741.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.23" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="479.5" ></text>
</g>
<g >
<title>row_cache::make_reader (1 samples, 0.02%; +0.02%)</title><rect x="444.3" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="447.31" y="543.5" ></text>
</g>
<g >
<title>auth::get_permissions (135 samples, 2.59%; +0.04%)</title><rect x="784.8" y="485" width="30.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="787.84" y="495.5" >au..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="45.3" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.25" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (1 samples, 0.02%; -0.02%)</title><rect x="450.4" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="453.41" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="378.3" y="341" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="381.33" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.02%)</title><rect x="685.4" y="661" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="688.42" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%; 0.00%)</title><rect x="38.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.02" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; +0.02%)</title><rect x="648.4" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="651.36" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (11 samples, 0.21%; +0.04%)</title><rect x="828.0" y="517" width="2.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="831.00" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="591.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="639.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (2 samples, 0.04%; +0.02%)</title><rect x="756.6" y="533" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="759.60" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="981.4" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="984.43" y="543.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="997.5" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1000.48" y="495.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%; -0.02%)</title><rect x="920.4" y="533" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="923.42" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="334.0" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="337.04" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="951.4" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="954.38" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.10%; +0.06%)</title><rect x="956.4" y="549" width="1.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="959.35" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="1118.1" y="597" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1121.14" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="1137.8" y="677" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1140.80" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="575.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%; 0.00%)</title><rect x="81.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.18" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (5 samples, 0.10%; -0.02%)</title><rect x="871.4" y="469" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="874.39" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (3 samples, 0.06%; +0.02%)</title><rect x="431.9" y="437" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="434.88" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (547 samples, 10.47%; -0.10%)</title><rect x="726.8" y="629" width="123.6" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="729.77" y="639.5" >single_node_cql..</text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.04%)</title><rect x="1120.2" y="629" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1123.18" y="639.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.11%; +0.08%)</title><rect x="409.7" y="341" width="1.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="412.74" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.98" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1089.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.22" y="575.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (39 samples, 0.75%; +0.02%)</title><rect x="485.9" y="469" width="8.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="488.89" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%; +0.04%)</title><rect x="494.7" y="501" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="497.70" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="146.0" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="149.03" y="639.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; +0.02%)</title><rect x="757.0" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="760.05" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (28 samples, 0.54%; 0.00%)</title><rect x="574.7" y="549" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="577.69" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%; 0.00%)</title><rect x="985.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.73" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;int&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="655.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="613" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (20 samples, 0.38%; -0.02%)</title><rect x="931.9" y="549" width="4.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="934.95" y="559.5" ></text>
</g>
<g >
<title>row::row (129 samples, 2.47%; +0.02%)</title><rect x="226.9" y="325" width="29.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="229.93" y="335.5" >ro..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="55.2" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.19" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::gossiper&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="1150.0" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.00" y="623.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.10%; +0.04%)</title><rect x="820.8" y="469" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="823.77" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="557.7" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="560.74" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="357.8" y="325" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="360.76" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="393.7" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="396.69" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="37.8" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="40.79" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.64" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; 0.00%)</title><rect x="793.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.20" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="100.2" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="103.16" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="527.5" ></text>
</g>
<g >
<title>boost::signals2::signal&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="799.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="531.5" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.53" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.04%)</title><rect x="632.1" y="661" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="635.09" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="58.8" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="61.81" y="527.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%; 0.00%)</title><rect x="539.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.67" y="479.5" ></text>
</g>
<g >
<title>fmt::v7::vformat_to&lt;seastar::internal::log_buf::inserter_iterator, fmt::v7::basic_string_view&lt;char&gt;, char, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="495.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; -0.04%)</title><rect x="459.0" y="453" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="462.00" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.85" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; -0.06%)</title><rect x="840.0" y="613" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="842.98" y="623.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (24 samples, 0.46%; 0.00%)</title><rect x="747.6" y="549" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.56" y="559.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (4 samples, 0.08%; 0.00%)</title><rect x="275.1" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="278.06" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.04%)</title><rect x="820.5" y="453" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="823.54" y="463.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.3" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1124.31" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%; 0.00%)</title><rect x="1024.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.82" y="351.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1167.2" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1170.18" y="623.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%; 0.00%)</title><rect x="111.7" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (7 samples, 0.13%; -0.04%)</title><rect x="49.1" y="485" width="1.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="52.09" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="792.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.07" y="431.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::file_data_sink_impl (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="687.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; -0.02%)</title><rect x="427.4" y="405" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="430.36" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="602.7" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="605.71" y="623.5" ></text>
</g>
<g >
<title>free (4 samples, 0.08%; +0.02%)</title><rect x="422.6" y="373" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="425.62" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="83.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.99" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="866.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.42" y="511.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="12.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.03" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="83.7" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="86.67" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.36%; -0.04%)</title><rect x="270.1" y="373" width="4.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="273.09" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="860.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.31" y="671.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (5 samples, 0.10%; 0.00%)</title><rect x="869.8" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.80" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="826.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="829.19" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (6 samples, 0.11%; 0.00%)</title><rect x="942.8" y="565" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.79" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (2 samples, 0.04%; 0.00%)</title><rect x="50.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%; -0.04%)</title><rect x="1145.5" y="613" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1148.48" y="623.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (30 samples, 0.57%; +0.06%)</title><rect x="729.3" y="565" width="6.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="732.25" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%; 0.00%)</title><rect x="22.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.65" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="605.0" y="613" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="607.97" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="147.6" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="150.61" y="639.5" ></text>
</g>
<g >
<title>query::result::builder::build (4 samples, 0.08%; -0.04%)</title><rect x="590.1" y="613" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="593.06" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1117.0" y="597" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1120.01" y="607.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="666.2" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="669.21" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (12 samples, 0.23%; -0.10%)</title><rect x="1004.9" y="437" width="2.7" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1007.93" y="447.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (55 samples, 1.05%; +0.08%)</title><rect x="131.1" y="597" width="12.4" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="134.12" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="588.2" y="549" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="591.25" y="559.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="857.2" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.15" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%; +0.04%)</title><rect x="464.6" y="437" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="467.65" y="447.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; +0.02%)</title><rect x="871.8" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="874.84" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="82.8" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="85.76" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (13 samples, 0.25%; +0.10%)</title><rect x="624.6" y="661" width="3.0" height="15.0" fill="rgb(255,135,135)" rx="2" ry="2" />
<text  x="627.63" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (5 samples, 0.10%; +0.02%)</title><rect x="947.1" y="549" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="950.09" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (19 samples, 0.36%; 0.00%)</title><rect x="515.7" y="405" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="518.71" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="102.6" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="105.65" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%; -0.04%)</title><rect x="560.7" y="485" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="563.68" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="724.1" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="727.06" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="665.3" y="597" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="668.30" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%; +0.02%)</title><rect x="950.0" y="549" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="953.02" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="1048.1" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1051.09" y="479.5" ></text>
</g>
<g >
<title>seastar::get_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.5" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.50" y="479.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.02%)</title><rect x="829.4" y="437" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="832.36" y="447.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (44 samples, 0.84%; 0.00%)</title><rect x="918.4" y="565" width="9.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="921.39" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt;, true&gt;::_Head_base&lt;std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="50.2" y="213" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="53.22" y="223.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (448 samples, 8.58%; +0.02%)</title><rect x="441.4" y="581" width="101.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="444.37" y="591.5" >mutation_sou..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; -0.04%)</title><rect x="781.7" y="485" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="784.68" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="51.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="415.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.11%; +0.02%)</title><rect x="826.6" y="533" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="829.64" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.06%)</title><rect x="927.2" y="501" width="1.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="930.20" y="511.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (4 samples, 0.08%; +0.02%)</title><rect x="1125.6" y="453" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1128.60" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="862.3" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="838.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.85" y="559.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (1 samples, 0.02%; +0.02%)</title><rect x="1054.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1057.19" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (26 samples, 0.50%; -0.10%)</title><rect x="1147.5" y="645" width="5.9" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1150.52" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="55.0" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="57.97" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="1046.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.28" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="319.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="623.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%; 0.00%)</title><rect x="949.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.57" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="83.0" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="85.99" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.44" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%; -0.04%)</title><rect x="1156.6" y="661" width="1.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1159.56" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (5 samples, 0.10%; +0.06%)</title><rect x="628.5" y="645" width="1.1" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="631.47" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (21 samples, 0.40%; -0.04%)</title><rect x="754.1" y="597" width="4.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="757.11" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; +0.02%)</title><rect x="43.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="46.22" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%; -0.02%)</title><rect x="259.7" y="293" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="262.69" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="611.5" y="613" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="614.52" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="85" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="95.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="771.1" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="774.06" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="871.2" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="874.16" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (4 samples, 0.08%; 0.00%)</title><rect x="599.5" y="613" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="602.55" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (7 samples, 0.13%; 0.00%)</title><rect x="1037.2" y="453" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.25" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="208.6" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="211.63" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; +0.02%)</title><rect x="551.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="553.97" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (4 samples, 0.08%; +0.06%)</title><rect x="342.4" y="421" width="0.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="345.40" y="431.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%; -0.02%)</title><rect x="327.9" y="501" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="330.94" y="511.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="217.0" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="219.99" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.08%; +0.08%)</title><rect x="115.8" y="661" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="118.75" y="671.5" ></text>
</g>
<g >
<title>posix_memalign (17 samples, 0.33%; -0.02%)</title><rect x="243.2" y="229" width="3.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="246.20" y="239.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (65 samples, 1.24%; -0.02%)</title><rect x="739.4" y="597" width="14.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="742.42" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (1 samples, 0.02%; +0.02%)</title><rect x="1016.7" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1019.68" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%; +0.04%)</title><rect x="1134.2" y="661" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1137.19" y="671.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%; 0.00%)</title><rect x="606.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="609.10" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (8 samples, 0.15%; -0.02%)</title><rect x="929.7" y="549" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="932.69" y="559.5" ></text>
</g>
<g >
<title>ser::mutation_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="1131.7" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1134.70" y="351.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="527.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%; +0.02%)</title><rect x="363.4" y="341" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="366.41" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="868.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.45" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="951.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="954.15" y="575.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; -0.02%)</title><rect x="475.7" y="469" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="478.72" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="429.2" y="469" width="0.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="432.17" y="479.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (61 samples, 1.17%; -0.02%)</title><rect x="130.7" y="629" width="13.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="133.67" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; -0.02%)</title><rect x="316.9" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="319.86" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="426.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="429.91" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="59.7" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="62.71" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.04%)</title><rect x="500.1" y="469" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="503.12" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="638.6" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="641.64" y="671.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (4 samples, 0.08%; -0.04%)</title><rect x="380.8" y="341" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="383.81" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (44 samples, 0.84%; 0.00%)</title><rect x="864.4" y="629" width="9.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.38" y="639.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (2 samples, 0.04%; +0.04%)</title><rect x="955.4" y="581" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="958.45" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (17 samples, 0.33%; 0.00%)</title><rect x="1159.5" y="661" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.49" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="575.8" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="578.82" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="910.7" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="913.70" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1080.6" y="517" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1083.63" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.10%; +0.02%)</title><rect x="167.5" y="613" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="170.50" y="623.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="864.8" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="867.83" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (41 samples, 0.79%; +0.04%)</title><rect x="511.0" y="421" width="9.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="513.97" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (4 samples, 0.08%; 0.00%)</title><rect x="1019.2" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.17" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.67" y="495.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%; +0.02%)</title><rect x="931.5" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="934.49" y="559.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.68" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1054.0" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1056.97" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="327.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.71" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; -0.04%)</title><rect x="649.9" y="613" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="652.94" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (14 samples, 0.27%; +0.02%)</title><rect x="945.1" y="581" width="3.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="948.05" y="591.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="74.2" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="77.17" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="648.6" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="651.58" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1163.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.11" y="607.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (2 samples, 0.04%; -0.02%)</title><rect x="690.2" y="661" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="693.16" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (3 samples, 0.06%; +0.02%)</title><rect x="1018.5" y="373" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1021.49" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="294.9" y="421" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="297.94" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; -0.06%)</title><rect x="827.1" y="485" width="0.9" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="830.10" y="495.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; 0.00%)</title><rect x="862.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="639.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (6 samples, 0.11%; 0.00%)</title><rect x="78.2" y="517" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.24" y="527.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="26.5" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.50" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; 0.00%)</title><rect x="671.9" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="674.86" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%; -0.02%)</title><rect x="1061.2" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1064.20" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="287.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1149.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1152.55" y="575.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%; 0.00%)</title><rect x="833.6" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="836.65" y="607.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (11 samples, 0.21%; +0.04%)</title><rect x="1101.9" y="581" width="2.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1104.87" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; +0.02%)</title><rect x="52.5" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="55.48" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="845.4" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.40" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="796.1" y="373" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="799.14" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (51 samples, 0.98%; -0.04%)</title><rect x="741.5" y="565" width="11.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="744.46" y="575.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="37.8" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="40.79" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="140.2" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="143.16" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; 0.00%)</title><rect x="857.2" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.15" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (10 samples, 0.19%; +0.04%)</title><rect x="193.0" y="437" width="2.3" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="196.03" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.04%)</title><rect x="315.5" y="501" width="0.5" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="318.51" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.73" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="527.0" y="437" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="530.01" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (29 samples, 0.56%; +0.02%)</title><rect x="351.9" y="389" width="6.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="354.89" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; -0.02%)</title><rect x="621.9" y="581" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="624.92" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="758.2" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="761.18" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (25 samples, 0.48%; -0.04%)</title><rect x="1127.9" y="517" width="5.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="1130.86" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="265.3" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.34" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (4 samples, 0.08%; 0.00%)</title><rect x="73.7" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.06%)</title><rect x="957.5" y="565" width="1.3" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="960.48" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="986.4" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="989.40" y="527.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.14" y="495.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%; -0.02%)</title><rect x="922.7" y="549" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="925.68" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.11%)</title><rect x="513.9" y="357" width="1.4" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="516.91" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%; +0.02%)</title><rect x="1167.0" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1169.95" y="639.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row_view::key (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.36" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; +0.04%)</title><rect x="586.4" y="581" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="589.44" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; -0.02%)</title><rect x="814.2" y="469" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="817.22" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1133.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="421" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="1102.8" y="565" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1105.78" y="575.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; +0.02%)</title><rect x="1132.8" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1135.83" y="367.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="867.3" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="870.32" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; 0.00%)</title><rect x="261.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.73" y="335.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%; +0.02%)</title><rect x="1049.2" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1052.22" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="1030.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1033.92" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; -0.04%)</title><rect x="974.9" y="517" width="1.8" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="977.88" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.72" y="559.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; +0.02%)</title><rect x="840.2" y="613" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="843.20" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1036.8" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1039.79" y="415.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash2_64 (1 samples, 0.02%; +0.02%)</title><rect x="83.9" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="86.89" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="45.0" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.02" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (5 samples, 0.10%; +0.04%)</title><rect x="660.1" y="661" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="663.11" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%; 0.00%)</title><rect x="198.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.91" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="52.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.48" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (2 samples, 0.04%; 0.00%)</title><rect x="111.0" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;char [], seastar::mmap_deleter&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="795.5" y="325" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="798.46" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_fd1596171e2adf1d6a1bd2abbc1d76b17b98ea7c] (1 samples, 0.02%; +0.02%)</title><rect x="234.4" y="277" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="237.39" y="287.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1041.8" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1044.77" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="585.5" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.54" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="73.9" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="76.95" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%; 0.00%)</title><rect x="731.5" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="734.51" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="447.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="415.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="652.9" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.88" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1086.5" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1089.51" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="367.3" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="370.25" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.84" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="797.5" y="357" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="800.50" y="367.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.11%; +0.02%)</title><rect x="686.3" y="517" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="689.32" y="527.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.85" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="609.5" y="613" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.49" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="852.4" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="855.41" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="872.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.29" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_super (1 samples, 0.02%; +0.02%)</title><rect x="28.3" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="31.30" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1033.0" y="405" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1035.95" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::row_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.8" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1126.79" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1123.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.57" y="399.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="638.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.41" y="671.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="466.7" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="469.68" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.0" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1127.02" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="911.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="914.61" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.02%)</title><rect x="363.2" y="357" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="366.19" y="367.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::drop_aggregate_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="66.3" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="69.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="872.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.06" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="941.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.98" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="71.9" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="74.91" y="559.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; -0.02%)</title><rect x="536.1" y="469" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="539.05" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; +0.02%)</title><rect x="358.4" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="361.44" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.08%)</title><rect x="1160.9" y="629" width="0.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1163.85" y="639.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="803.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.82" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (4 samples, 0.08%; 0.00%)</title><rect x="70.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.79" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (3 samples, 0.06%; +0.02%)</title><rect x="910.0" y="469" width="0.7" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="913.03" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="588.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="591.48" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="649.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.03" y="607.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="557.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.74" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="46.6" y="309" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="49.61" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="84.8" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="87.80" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; -0.02%)</title><rect x="59.7" y="501" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="62.71" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="343.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.30" y="271.5" ></text>
</g>
<g >
<title>seastar::logger::do_log (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.58" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (18 samples, 0.34%; +0.08%)</title><rect x="638.9" y="677" width="4.0" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="641.87" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (11 samples, 0.21%; -0.02%)</title><rect x="983.9" y="501" width="2.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="986.92" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="99.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.93" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="61.5" y="293" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="64.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (1 samples, 0.02%; 0.00%)</title><rect x="53.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.39" y="399.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="560.2" y="485" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="563.23" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="50.0" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="53.00" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="956.1" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="959.12" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="862.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="575.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="25.4" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="28.37" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.44" y="367.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (22 samples, 0.42%; 0.00%)</title><rect x="868.7" y="501" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.67" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%; +0.02%)</title><rect x="355.5" y="341" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="358.50" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="859.9" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="862.86" y="671.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="642.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.26" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; 0.00%)</title><rect x="206.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.14" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="947.5" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.54" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::grant_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="67.6" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="70.62" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; +0.02%)</title><rect x="268.7" y="389" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="271.73" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (7 samples, 0.13%; +0.04%)</title><rect x="459.9" y="485" width="1.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="462.90" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="56.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.32" y="383.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="215.9" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.86" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="569.7" y="485" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="572.72" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; +0.02%)</title><rect x="530.4" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="533.40" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%; -0.02%)</title><rect x="877.3" y="629" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="880.26" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; +0.02%)</title><rect x="74.9" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="77.85" y="511.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%; +0.04%)</title><rect x="510.3" y="437" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="513.29" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; 0.00%)</title><rect x="709.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.14" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (15 samples, 0.29%; -0.06%)</title><rect x="243.6" y="213" width="3.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="246.65" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.91" y="367.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (1 samples, 0.02%; +0.02%)</title><rect x="980.8" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="983.75" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="846.8" y="549" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="849.76" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="723.8" y="597" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="726.83" y="607.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="383.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%; +0.02%)</title><rect x="70.6" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="73.56" y="591.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="431.4" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="434.43" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="862.3" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.35" y="687.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;&amp;, seastar::bool_class&lt;continuous_tag&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.89" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.04%)</title><rect x="544.2" y="581" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="547.19" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="871.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.84" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="54.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.29" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="662.4" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="665.37" y="671.5" ></text>
</g>
<g >
<title>memtable::apply (19 samples, 0.36%; 0.00%)</title><rect x="1120.9" y="437" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="447.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; 0.00%)</title><rect x="279.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.80" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="572.7" y="517" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="575.66" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; +0.02%)</title><rect x="53.2" y="405" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="56.16" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.10%; 0.00%)</title><rect x="47.1" y="341" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.06" y="351.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (8 samples, 0.15%; +0.02%)</title><rect x="1075.9" y="469" width="1.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1078.89" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.04%)</title><rect x="562.9" y="469" width="1.2" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="565.94" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (13 samples, 0.25%; -0.06%)</title><rect x="353.0" y="357" width="3.0" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="356.02" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="25.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.59" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%; 0.00%)</title><rect x="571.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.08" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="145.6" y="629" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="148.58" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="779.4" y="469" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="782.42" y="479.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%; 0.00%)</title><rect x="19.0" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.04" y="735.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (29 samples, 0.56%; 0.00%)</title><rect x="987.3" y="517" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.31" y="527.5" ></text>
</g>
<g >
<title>row::external_memory_usage (20 samples, 0.38%; 0.00%)</title><rect x="256.1" y="325" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="259.08" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (1 samples, 0.02%; -0.08%)</title><rect x="433.2" y="533" width="0.3" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="436.24" y="543.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,792 samples, 91.77%; 0.00%)</title><rect x="85.2" y="741" width="1082.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.25" y="751.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%; +0.02%)</title><rect x="356.6" y="357" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="359.63" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1100.3" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1103.29" y="543.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; 0.00%)</title><rect x="709.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.37" y="607.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="450.2" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="453.18" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (5 samples, 0.10%; +0.02%)</title><rect x="1076.6" y="453" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1079.56" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (2 samples, 0.04%; 0.00%)</title><rect x="111.7" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.69" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; 0.00%)</title><rect x="681.3" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.35" y="655.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (1 samples, 0.02%; +0.02%)</title><rect x="914.8" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="917.77" y="559.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.04%)</title><rect x="509.8" y="405" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="512.84" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="368.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="371.84" y="367.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (111 samples, 2.13%; +0.02%)</title><rect x="788.7" y="453" width="25.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="791.68" y="463.5" >a..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%; -0.06%)</title><rect x="830.9" y="501" width="1.6" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="833.94" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; +0.02%)</title><rect x="285.5" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="288.45" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::ensure_last_dummy (1 samples, 0.02%; 0.00%)</title><rect x="17.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.46" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="632.5" y="661" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="635.54" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (12 samples, 0.23%; -0.04%)</title><rect x="216.8" y="405" width="2.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="219.76" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (4 samples, 0.08%; -0.02%)</title><rect x="538.8" y="453" width="0.9" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="541.76" y="463.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (9 samples, 0.17%; 0.00%)</title><rect x="742.8" y="485" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.81" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (51 samples, 0.98%; 0.00%)</title><rect x="674.8" y="677" width="11.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.80" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1143.2" y="645" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1146.22" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="519.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="522.78" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (5 samples, 0.10%; +0.02%)</title><rect x="844.9" y="597" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="847.95" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (213 samples, 4.08%; -0.04%)</title><rect x="993.9" y="517" width="48.1" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="996.86" y="527.5" >serv..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1112.9" y="549" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1115.95" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (431 samples, 8.25%; -0.04%)</title><rect x="335.2" y="533" width="97.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="338.17" y="543.5" >flat_mutati..</text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; +0.02%)</title><rect x="76.0" y="581" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="78.98" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.99" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="1091.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1094.25" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="701.7" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="704.69" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="687.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.45" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.03" y="271.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="974.0" y="533" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="976.98" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.68" y="703.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (45 samples, 0.86%; 0.00%)</title><rect x="864.2" y="661" width="10.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.16" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="803.8" y="309" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="806.82" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="83.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.99" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (10 samples, 0.19%; -0.02%)</title><rect x="667.3" y="661" width="2.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="670.34" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::recalculate_schema_version (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="639.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.02%)</title><rect x="569.9" y="501" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="572.95" y="511.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (22 samples, 0.42%; -0.02%)</title><rect x="747.8" y="533" width="5.0" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="750.78" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1026.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.17" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="53.6" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="56.61" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1149.8" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1152.78" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1144.1" y="661" width="0.3" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1147.13" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.41" y="383.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.08%; 0.00%)</title><rect x="868.9" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.90" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (3 samples, 0.06%; +0.04%)</title><rect x="270.3" y="357" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="273.31" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="686.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.77" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (54 samples, 1.03%; +0.02%)</title><rect x="190.5" y="453" width="12.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="193.55" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="619.0" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="621.98" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; -0.10%)</title><rect x="560.5" y="485" width="0.2" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="563.46" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.59" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (2 samples, 0.04%; 0.00%)</title><rect x="110.3" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="623.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.89" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="938.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.50" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="950.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.47" y="543.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; +0.02%)</title><rect x="1122.9" y="341" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1125.89" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="872.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.29" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="293.4" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="296.36" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="865.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.29" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (61 samples, 1.17%; +0.02%)</title><rect x="556.8" y="517" width="13.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="559.84" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (2 samples, 0.04%; +0.04%)</title><rect x="752.3" y="501" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="755.30" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="45.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.70" y="495.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.2" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.22" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1035.9" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1038.89" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="950.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.70" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (27 samples, 0.52%; -0.06%)</title><rect x="418.1" y="405" width="6.1" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="421.10" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="649.3" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="652.26" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="38.7" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="41.70" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="42.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="45.09" y="319.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (3 samples, 0.06%; 0.00%)</title><rect x="1120.0" y="645" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.95" y="655.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.92" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%; 0.00%)</title><rect x="57.0" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.00" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%; -0.06%)</title><rect x="211.1" y="405" width="0.2" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="214.11" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="520.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.01" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="621.7" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="624.69" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="781.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.00" y="463.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%; +0.02%)</title><rect x="866.9" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="869.87" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="715.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.02" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="466.9" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="469.91" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="848.3" y="533" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="851.34" y="543.5" ></text>
</g>
<g >
<title>from_hex (1 samples, 0.02%; -0.08%)</title><rect x="70.8" y="517" width="0.2" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="73.79" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="978.3" y="501" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="981.27" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (275 samples, 5.27%; 0.00%)</title><rect x="19.3" y="741" width="62.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.26" y="751.5" >std::_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (5 samples, 0.10%; +0.04%)</title><rect x="664.9" y="613" width="1.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="667.85" y="623.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1041.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1044.09" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="111.9" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="114.91" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (27 samples, 0.52%; -0.02%)</title><rect x="50.7" y="485" width="6.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="53.67" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (5 samples, 0.10%; +0.02%)</title><rect x="19.9" y="677" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="22.94" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (16 samples, 0.31%; 0.00%)</title><rect x="59.0" y="533" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.03" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (47 samples, 0.90%; +0.11%)</title><rect x="283.0" y="405" width="10.6" height="15.0" fill="rgb(255,120,120)" rx="2" ry="2" />
<text  x="285.97" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="463.3" y="437" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="466.29" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1160.6" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1163.62" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="111.7" y="405" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="114.69" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (5 samples, 0.10%; +0.02%)</title><rect x="588.7" y="565" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="591.70" y="575.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; +0.02%)</title><rect x="110.1" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="113.10" y="463.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; -0.04%)</title><rect x="866.6" y="501" width="0.3" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="869.64" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="539.9" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="542.89" y="511.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (3 samples, 0.06%; 0.00%)</title><rect x="83.2" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.21" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="872.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.29" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.25" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (2 samples, 0.04%; 0.00%)</title><rect x="1128.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (2 samples, 0.04%; 0.00%)</title><rect x="73.3" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.27" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; -0.02%)</title><rect x="531.1" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="534.08" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%; 0.00%)</title><rect x="868.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.22" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (2 samples, 0.04%; 0.00%)</title><rect x="1133.5" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.51" y="479.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="800.7" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.66" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (45 samples, 0.86%; +0.02%)</title><rect x="318.4" y="517" width="10.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="321.45" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; +0.02%)</title><rect x="862.3" y="437" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="865.35" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.10" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%; +0.02%)</title><rect x="22.7" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="25.65" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="261.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.73" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; -0.04%)</title><rect x="383.7" y="325" width="0.7" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="386.75" y="335.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%; -0.02%)</title><rect x="562.0" y="469" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="565.04" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (7 samples, 0.13%; 0.00%)</title><rect x="856.9" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.92" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.11%; 0.00%)</title><rect x="1148.6" y="613" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.65" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (37 samples, 0.71%; +0.02%)</title><rect x="666.4" y="677" width="8.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="669.43" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (6 samples, 0.11%; -0.06%)</title><rect x="1114.5" y="597" width="1.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="1117.53" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1108.4" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1111.43" y="591.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%; +0.02%)</title><rect x="814.0" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="816.99" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (295 samples, 5.65%; 0.00%)</title><rect x="348.0" y="421" width="66.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="351.05" y="431.5" >flat_mu..</text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%; +0.02%)</title><rect x="26.5" y="373" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="29.50" y="383.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%; 0.00%)</title><rect x="987.5" y="501" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.53" y="511.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="29.9" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="32.89" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="447.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%; 0.00%)</title><rect x="1051.5" y="501" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.48" y="511.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; +0.02%)</title><rect x="581.9" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="584.92" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (8 samples, 0.15%; -0.02%)</title><rect x="856.7" y="645" width="1.8" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="859.70" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1108.7" y="597" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1111.65" y="607.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="689.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.71" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="934.7" y="517" width="0.6" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="937.66" y="527.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="962.0" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="965.00" y="575.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (45 samples, 0.86%; 0.00%)</title><rect x="1169.4" y="805" width="10.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.44" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (80 samples, 1.53%; +0.04%)</title><rect x="892.9" y="517" width="18.0" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="895.85" y="527.5" ></text>
</g>
<g >
<title>[[vdso]] (24 samples, 0.46%; -0.08%)</title><rect x="1170.1" y="789" width="5.4" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1173.11" y="799.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (23 samples, 0.44%; -0.04%)</title><rect x="302.6" y="469" width="5.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="305.63" y="479.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; +0.02%)</title><rect x="416.7" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="419.74" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mA (1 samples, 0.02%; +0.02%)</title><rect x="30.1" y="437" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="33.11" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; 0.00%)</title><rect x="299.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="302.46" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%; 0.00%)</title><rect x="1030.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.24" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.04%)</title><rect x="685.2" y="661" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="688.19" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::alter_table_statement*, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.68" y="511.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1077.2" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1080.24" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="1128.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.76" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="816.3" y="485" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="819.25" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (2 samples, 0.04%; +0.02%)</title><rect x="1082.2" y="533" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1085.21" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; +0.02%)</title><rect x="572.4" y="533" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="575.43" y="543.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="713.2" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="716.21" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.46" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; 0.00%)</title><rect x="1121.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.31" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (197 samples, 3.77%; -0.02%)</title><rect x="224.0" y="373" width="44.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="226.99" y="383.5" >part..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="203.0" y="453" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="205.98" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::semaphore_units&lt;db::commitlog::segment_manager::request_controller_timeout_exception_factory, seastar::lowres_clock&gt; &gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="1126.7" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1129.73" y="479.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="489.7" y="389" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="492.73" y="399.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::set_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="21.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.52" y="655.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; +0.02%)</title><rect x="945.7" y="549" width="1.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="948.73" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="60.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.62" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (33 samples, 0.63%; +0.06%)</title><rect x="417.0" y="437" width="7.4" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="419.97" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%; -0.02%)</title><rect x="913.0" y="533" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="915.96" y="543.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%; +0.02%)</title><rect x="598.2" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="601.19" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="42.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="71.9" y="565" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="74.91" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (13 samples, 0.25%; +0.02%)</title><rect x="287.5" y="389" width="2.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="290.49" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; +0.02%)</title><rect x="867.1" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="870.09" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="41.2" y="517" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="44.18" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="42.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="829.1" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.13" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="88.0" y="693" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="90.96" y="703.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; +0.02%)</title><rect x="330.0" y="533" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="332.97" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="108.1" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.07" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (10 samples, 0.19%; -0.02%)</title><rect x="819.9" y="517" width="2.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="822.87" y="527.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (1 samples, 0.02%; 0.00%)</title><rect x="494.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.47" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="311.7" y="501" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="314.67" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (1 samples, 0.02%; +0.02%)</title><rect x="852.6" y="565" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="855.63" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="642.5" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="645.48" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="42.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.31" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (10 samples, 0.19%; +0.06%)</title><rect x="324.5" y="469" width="2.3" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="327.55" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%; 0.00%)</title><rect x="873.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="876.65" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.07" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="581.7" y="549" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="584.70" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="97.0" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="100.00" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="108.3" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="111.30" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%; -0.08%)</title><rect x="1046.7" y="485" width="2.3" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1049.74" y="495.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (22 samples, 0.42%; 0.00%)</title><rect x="12.3" y="789" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.26" y="799.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="934.2" y="517" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="937.21" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="889.0" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="892.01" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="781.2" y="469" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="784.23" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="635.0" y="645" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="638.02" y="655.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="508.9" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="511.94" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="749.1" y="453" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="752.14" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="351.5" ></text>
</g>
<g >
<title>database::has_keyspace (15 samples, 0.29%; +0.02%)</title><rect x="846.5" y="581" width="3.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="849.53" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1047.4" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.41" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1134.6" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.64" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::grant_statement*, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.62" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;partition_key, clustering_key_prefix&gt;, std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt;, cql3::update_parameters::prefetch_data::key_less, std::allocator&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt; &gt;::_Rb_tree_impl&lt;cql3::update_parameters::prefetch_data::key_less, false&gt;::_Rb_tree_impl (1 samples, 0.02%; +0.02%)</title><rect x="874.1" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="877.10" y="591.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="842.9" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.91" y="559.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="527.0" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="530.01" y="463.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (8 samples, 0.15%; +0.06%)</title><rect x="32.1" y="421" width="1.9" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="35.14" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.06%)</title><rect x="529.0" y="485" width="1.2" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="532.05" y="495.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%; +0.02%)</title><rect x="57.7" y="469" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="60.68" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (2 samples, 0.04%; +0.02%)</title><rect x="608.6" y="613" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="611.59" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.10%; +0.02%)</title><rect x="207.5" y="421" width="1.1" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="210.50" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (284 samples, 5.44%; 0.00%)</title><rect x="17.2" y="773" width="64.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="783.5" >seastar..</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%; 0.00%)</title><rect x="697.2" y="613" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.17" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (2 samples, 0.04%; 0.00%)</title><rect x="687.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.68" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.11%; +0.02%)</title><rect x="761.8" y="549" width="1.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="764.79" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="613.8" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="616.78" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.75" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="868.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.45" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="695.1" y="629" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="698.13" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; -0.06%)</title><rect x="770.8" y="517" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="773.83" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="276.6" y="405" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="279.64" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="694.9" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="697.91" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.27" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (3 samples, 0.06%; +0.04%)</title><rect x="293.6" y="405" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="296.59" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="937.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.14" y="575.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="786.4" y="453" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.42" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="297.9" y="373" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="300.88" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; -0.04%)</title><rect x="657.4" y="661" width="0.9" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="660.40" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%; -0.11%)</title><rect x="374.9" y="341" width="0.9" height="15.0" fill="rgb(120,120,255)" rx="2" ry="2" />
<text  x="377.94" y="351.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1128.8" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1131.76" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="601.8" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="604.81" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (112 samples, 2.14%; -0.10%)</title><rect x="1138.0" y="677" width="25.3" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="1141.03" y="687.5" >s..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="71.2" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.24" y="559.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (278 samples, 5.32%; +0.08%)</title><rect x="468.9" y="517" width="62.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="471.94" y="527.5" >memtab..</text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (9 samples, 0.17%; 0.00%)</title><rect x="679.3" y="645" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.31" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1142.8" y="645" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1145.77" y="655.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.13%)</title><rect x="457.2" y="453" width="1.8" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="460.19" y="463.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;gms::gossiper&gt;::start&lt;std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;netw::messaging_service&gt; &gt;, std::reference_wrapper&lt;db::config&gt;, gms::gossip_config&gt; (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="963.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="966.36" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="413.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.58" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (70 samples, 1.34%; -0.08%)</title><rect x="1061.9" y="501" width="15.8" height="15.0" fill="rgb(150,150,255)" rx="2" ry="2" />
<text  x="1064.88" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="55.6" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.65" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (4 samples, 0.08%; +0.08%)</title><rect x="716.4" y="677" width="0.9" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="719.37" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1129.4" y="437" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.44" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="22.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.20" y="495.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; 0.00%)</title><rect x="888.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.56" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="60.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.16" y="495.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (13 samples, 0.25%; +0.02%)</title><rect x="990.7" y="485" width="2.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="993.70" y="495.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="43.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.99" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.06%)</title><rect x="579.4" y="501" width="0.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="582.44" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="673.0" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="675.99" y="639.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="1004.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.48" y="447.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%; 0.00%)</title><rect x="79.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (2 samples, 0.04%; -0.02%)</title><rect x="1128.8" y="373" width="0.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="1131.76" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (28 samples, 0.54%; -0.13%)</title><rect x="453.6" y="485" width="6.3" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="456.57" y="495.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (4 samples, 0.08%; 0.00%)</title><rect x="110.8" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.78" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="57.5" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="60.45" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.34" y="591.5" ></text>
</g>
<g >
<title>do_with_cql_env_thread (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="60.6" y="421" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="63.62" y="431.5" ></text>
</g>
<g >
<title>query::result::builder::builder (14 samples, 0.27%; 0.00%)</title><rect x="592.5" y="597" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.54" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (20 samples, 0.38%; 0.00%)</title><rect x="763.4" y="549" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.37" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="65.6" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="68.59" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="280.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="283.03" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (1 samples, 0.02%; +0.02%)</title><rect x="423.5" y="389" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="426.52" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%; 0.00%)</title><rect x="221.5" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.51" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="667.1" y="661" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="670.11" y="671.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%; -0.02%)</title><rect x="826.9" y="517" width="1.1" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="829.87" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="698.1" y="661" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="701.07" y="671.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.02" y="271.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="336.1" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="339.07" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; -0.04%)</title><rect x="460.8" y="469" width="0.2" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="463.80" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; +0.04%)</title><rect x="621.9" y="565" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="624.92" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="702.4" y="645" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="705.36" y="655.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.11%; -0.02%)</title><rect x="820.5" y="485" width="1.4" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="823.54" y="495.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (7 samples, 0.13%; +0.02%)</title><rect x="1153.6" y="645" width="1.6" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1156.62" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="157.8" y="613" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="160.78" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="463.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="581" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="56.1" y="229" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="59.10" y="239.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (101 samples, 1.93%; -0.15%)</title><rect x="369.1" y="357" width="22.8" height="15.0" fill="rgb(90,90,255)" rx="2" ry="2" />
<text  x="372.06" y="367.5" >w..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="45.7" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.70" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1044.9" y="501" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1047.93" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1026.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.85" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (13 samples, 0.25%; +0.04%)</title><rect x="933.3" y="533" width="2.9" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="936.30" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="206.1" y="421" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="209.14" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%; 0.00%)</title><rect x="354.6" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="357.60" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%; 0.00%)</title><rect x="1167.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.86" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (12 samples, 0.23%; +0.06%)</title><rect x="464.0" y="453" width="2.7" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="466.97" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (3 samples, 0.06%; -0.02%)</title><rect x="797.3" y="389" width="0.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="800.27" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="42.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.09" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; 0.00%)</title><rect x="805.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.95" y="303.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.02%)</title><rect x="489.3" y="389" width="0.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="492.28" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%; 0.00%)</title><rect x="688.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.58" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%; 0.00%)</title><rect x="295.8" y="421" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="298.85" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%; -0.02%)</title><rect x="918.4" y="549" width="1.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="921.39" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (9 samples, 0.17%; +0.02%)</title><rect x="526.1" y="469" width="2.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="529.11" y="479.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="922.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="925.00" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="888.3" y="581" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="891.33" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="167.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="170.05" y="607.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="82.1" y="533" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="85.08" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (2 samples, 0.04%; 0.00%)</title><rect x="110.3" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="64.2" y="549" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="67.23" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="649.5" y="613" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="652.49" y="623.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1024.6" y="357" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1027.59" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; 0.00%)</title><rect x="686.3" y="533" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.32" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (60 samples, 1.15%; -0.02%)</title><rect x="130.9" y="613" width="13.6" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="133.89" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.54%; 0.00%)</title><rect x="1120.9" y="597" width="6.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (14 samples, 0.27%; +0.02%)</title><rect x="234.6" y="277" width="3.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="237.61" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; 0.00%)</title><rect x="753.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.66" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; -0.02%)</title><rect x="850.4" y="629" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="853.37" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; 0.00%)</title><rect x="842.5" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.46" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="215.4" y="373" width="0.5" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="218.40" y="383.5" ></text>
</g>
<g >
<title>service::client_state::has_access (205 samples, 3.93%; +0.06%)</title><rect x="775.8" y="549" width="46.3" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="778.80" y="559.5" >serv..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="111.0" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.01" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (3 samples, 0.06%; 0.00%)</title><rect x="54.5" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.52" y="447.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="821.4" y="453" width="0.5" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="824.45" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.23" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="44.6" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.57" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="55.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.65" y="399.5" ></text>
</g>
<g >
<title>database::find_uuid (22 samples, 0.42%; +0.02%)</title><rect x="763.1" y="565" width="5.0" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="766.15" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="723.4" y="581" width="0.4" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="726.38" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%; -0.02%)</title><rect x="17.9" y="741" width="0.7" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="20.91" y="751.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.94" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.86" y="559.5" ></text>
</g>
<g >
<title>query::querier&lt; (5 samples, 0.10%; +0.08%)</title><rect x="127.3" y="629" width="1.1" height="15.0" fill="rgb(255,150,150)" rx="2" ry="2" />
<text  x="130.28" y="639.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (6 samples, 0.11%; +0.02%)</title><rect x="910.9" y="501" width="1.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="913.93" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.27" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="442.5" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="445.50" y="575.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; -0.02%)</title><rect x="108.5" y="661" width="0.2" height="15.0" fill="rgb(195,195,255)" rx="2" ry="2" />
<text  x="111.52" y="671.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%; +0.02%)</title><rect x="1087.2" y="533" width="0.9" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1090.18" y="543.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.56" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,062 samples, 20.34%; 0.00%)</title><rect x="880.0" y="629" width="240.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="882.97" y="639.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1124.2" y="405" width="0.3" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1127.24" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (59 samples, 1.13%; -0.10%)</title><rect x="510.7" y="437" width="13.4" height="15.0" fill="rgb(135,135,255)" rx="2" ry="2" />
<text  x="513.74" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.02%)</title><rect x="438.4" y="581" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="441.43" y="591.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="639.8" y="661" width="0.4" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="642.77" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="758.0" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="760.95" y="591.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%; 0.00%)</title><rect x="1013.7" y="421" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.75" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (17 samples, 0.33%; +0.02%)</title><rect x="732.2" y="501" width="3.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="735.19" y="511.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="757" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1192.77" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (255 samples, 4.88%; -0.04%)</title><rect x="219.7" y="421" width="57.6" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="222.70" y="431.5" >partit..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="44.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.12" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="56.3" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="59.32" y="319.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.33" y="527.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="263.8" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="266.76" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="525.0" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="527.98" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (7 samples, 0.13%; 0.00%)</title><rect x="73.7" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.72" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (1 samples, 0.02%; +0.02%)</title><rect x="111.5" y="293" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="114.46" y="303.5" ></text>
</g>
<g >
<title>query::querier_base::close (127 samples, 2.43%; 0.00%)</title><rect x="553.9" y="613" width="28.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="556.90" y="623.5" >qu..</text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%; 0.00%)</title><rect x="688.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.35" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="438.0" y="581" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="440.98" y="591.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (12 samples, 0.23%; 0.00%)</title><rect x="1129.7" y="389" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.67" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.8" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.76" y="607.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.66" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%; -0.06%)</title><rect x="840.4" y="597" width="0.5" height="15.0" fill="rgb(165,165,255)" rx="2" ry="2" />
<text  x="843.43" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1097.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.13" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="570.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.40" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%; 0.00%)</title><rect x="24.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.69" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (15 samples, 0.29%; +0.02%)</title><rect x="1159.9" y="645" width="3.4" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1162.95" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (12 samples, 0.23%; +0.04%)</title><rect x="212.0" y="373" width="2.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="215.01" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="27.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.85" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="56.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.10" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.38" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_lock (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.81" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="55.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.42" y="351.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.10" y="575.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.61" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (9 samples, 0.17%; +0.04%)</title><rect x="128.6" y="629" width="2.1" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="131.63" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="76.9" y="565" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="79.89" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%; +0.04%)</title><rect x="1031.1" y="421" width="0.7" height="15.0" fill="rgb(255,180,180)" rx="2" ry="2" />
<text  x="1034.15" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="60.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.39" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="993.4" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="996.41" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.11" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.89" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (3 samples, 0.06%; 0.00%)</title><rect x="40.5" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.51" y="527.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%; +0.06%)</title><rect x="546.4" y="533" width="1.6" height="15.0" fill="rgb(255,165,165)" rx="2" ry="2" />
<text  x="549.45" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.24" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (57 samples, 1.09%; +0.02%)</title><rect x="282.1" y="437" width="12.8" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="285.06" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; 0.00%)</title><rect x="392.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="395.56" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,051 samples, 20.13%; +0.02%)</title><rect x="882.2" y="613" width="237.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="885.23" y="623.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="604.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="607.07" y="623.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="873.4" y="453" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="876.42" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.59" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.04%)</title><rect x="584.9" y="581" width="0.4" height="15.0" fill="rgb(180,180,255)" rx="2" ry="2" />
<text  x="587.86" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="61.1" y="309" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="64.07" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1153.2" y="629" width="0.2" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="1156.17" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; +0.02%)</title><rect x="991.8" y="437" width="0.5" height="15.0" fill="rgb(255,195,195)" rx="2" ry="2" />
<text  x="994.83" y="447.5" ></text>
</g>
</g>
</svg>
