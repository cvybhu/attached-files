<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="463.5" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="466.52" y="287.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (3 samples, 0.06%; 0.00%)</title><rect x="116.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; +0.06%)</title><rect x="886.2" y="277" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="889.22" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1017.8" y="165" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1020.84" y="175.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1037.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.09" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="309" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.50" y="95.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (2 samples, 0.04%; +0.02%)</title><rect x="93.8" y="517" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="96.82" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.02%)</title><rect x="618.7" y="437" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="621.69" y="447.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="10.9" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (14 samples, 0.27%; 0.00%)</title><rect x="1022.4" y="229" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.37" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="138.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.44" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (258 samples, 4.95%; +0.08%)</title><rect x="980.7" y="341" width="58.4" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="983.69" y="351.5" >servic..</text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; +0.02%)</title><rect x="300.6" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="303.64" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%; -0.02%)</title><rect x="1157.2" y="485" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1160.15" y="495.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (23 samples, 0.44%; +0.02%)</title><rect x="491.6" y="261" width="5.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="494.60" y="271.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.08%)</title><rect x="386.5" y="149" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="389.49" y="159.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; -0.04%)</title><rect x="345.7" y="165" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="348.72" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="795.2" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.16" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="90.0" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="92.97" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="447.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="71.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.62" y="335.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="143.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (16 samples, 0.31%; -0.04%)</title><rect x="484.4" y="277" width="3.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="487.36" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="351.5" ></text>
</g>
<g >
<title>seastar::deferred_stop&lt;seastar::sharded&lt;sstables::sstable_directory&gt; &gt;::do_stop (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="261.2" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.22" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.29" y="287.5" ></text>
</g>
<g >
<title>seastar::file::dma_write_impl (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="680.8" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="683.76" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%; +0.02%)</title><rect x="1121.6" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1124.59" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="289.3" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="292.31" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.02%)</title><rect x="919.3" y="325" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="922.30" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%; 0.00%)</title><rect x="679.6" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.63" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (9 samples, 0.17%; -0.06%)</title><rect x="532.6" y="309" width="2.0" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="535.61" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="65.3" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (10 samples, 0.19%; -0.02%)</title><rect x="216.6" y="229" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="219.60" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1056.3" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1059.35" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="131.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.19" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (4 samples, 0.08%; 0.00%)</title><rect x="32.2" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="415.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%; 0.00%)</title><rect x="116.7" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%; -0.04%)</title><rect x="530.3" y="261" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="533.34" y="271.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="971.2" y="293" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.17" y="303.5" ></text>
</g>
<g >
<title>[[vdso]] (29 samples, 0.56%; -0.04%)</title><rect x="1168.7" y="613" width="6.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1171.71" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (9 samples, 0.17%; +0.06%)</title><rect x="750.5" y="373" width="2.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="753.53" y="383.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (8 samples, 0.15%; -0.04%)</title><rect x="1117.7" y="245" width="1.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1120.74" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (32 samples, 0.61%; -0.06%)</title><rect x="932.9" y="421" width="7.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="935.89" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="704.3" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="707.32" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%; 0.00%)</title><rect x="160.6" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="163.64" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (10 samples, 0.19%; +0.02%)</title><rect x="933.8" y="389" width="2.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="936.79" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="70.7" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="73.71" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%; +0.02%)</title><rect x="497.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="500.27" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="91.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.32" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; +0.06%)</title><rect x="545.1" y="389" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="548.07" y="399.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="565.0" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="568.00" y="287.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="56.4" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="586.3" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="589.29" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%; +0.02%)</title><rect x="56.2" y="309" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="59.21" y="319.5" ></text>
</g>
<g >
<title>service::storage_service::maybe_start_sys_dist_ks (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (3 samples, 0.06%; +0.04%)</title><rect x="832.1" y="421" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="835.08" y="431.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="606.2" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="609.23" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (5 samples, 0.10%; +0.08%)</title><rect x="949.4" y="389" width="1.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="952.42" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="853.6" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="856.60" y="287.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; 0.00%)</title><rect x="273.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.91" y="255.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; 0.00%)</title><rect x="16.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.80" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="261.2" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.22" y="143.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="319.5" ></text>
</g>
<g >
<title>seastar::io_queue::poll_io_queue (1 samples, 0.02%; 0.00%)</title><rect x="1163.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.50" y="495.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1018.7" y="165" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1021.74" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.08%; +0.04%)</title><rect x="526.3" y="341" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="529.26" y="351.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%; 0.00%)</title><rect x="1178.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1181.90" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%; 0.00%)</title><rect x="25.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.63" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="51.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.91" y="191.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="12.3" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="15.27" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="26.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="29.76" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (2 samples, 0.04%; 0.00%)</title><rect x="39.0" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.00" y="223.5" ></text>
</g>
<g >
<title>tracing::add_table_name (2 samples, 0.04%; 0.00%)</title><rect x="1114.1" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.11" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="626.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.62" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_channel (1 samples, 0.02%; +0.02%)</title><rect x="39.9" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="42.90" y="271.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (1 samples, 0.02%; -0.02%)</title><rect x="89.1" y="357" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="92.06" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="239.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.02%)</title><rect x="808.3" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="811.30" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="92.7" y="517" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="95.68" y="527.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="1048.9" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1051.87" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="682.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="685.80" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="1094.0" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1096.95" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_head (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="746.0" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="749.00" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::submit_io_write (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="473.9" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="476.94" y="319.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (11 samples, 0.21%; -0.02%)</title><rect x="407.6" y="149" width="2.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="410.56" y="159.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="1049.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.55" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (4 samples, 0.08%; +0.02%)</title><rect x="556.8" y="421" width="1.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="559.85" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; -0.04%)</title><rect x="1060.4" y="309" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1063.42" y="319.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (1 samples, 0.02%; +0.02%)</title><rect x="527.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="530.17" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::has_supporting_index (1 samples, 0.02%; +0.02%)</title><rect x="83.8" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="86.85" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="383.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="1089.0" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1091.97" y="399.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="710.7" y="501" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="713.66" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (7 samples, 0.13%; +0.02%)</title><rect x="679.4" y="469" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="682.40" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.04%; +0.04%)</title><rect x="34.0" y="149" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="37.01" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="25.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.95" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (4 samples, 0.08%; +0.04%)</title><rect x="174.0" y="373" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="177.01" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="513.6" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="516.58" y="207.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="463.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="893.5" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.47" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="75.9" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="78.92" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (6 samples, 0.12%; +0.04%)</title><rect x="431.6" y="277" width="1.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="434.57" y="287.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::revoke_role_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="73.2" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="76.20" y="303.5" ></text>
</g>
<g >
<title>query::result::result (2 samples, 0.04%; -0.06%)</title><rect x="595.6" y="421" width="0.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="598.58" y="431.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="202.8" y="261" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="205.78" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (5 samples, 0.10%; +0.04%)</title><rect x="624.1" y="485" width="1.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="627.13" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,737 samples, 90.94%; 0.00%)</title><rect x="91.8" y="597" width="1073.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="607.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="255.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1026.4" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1029.44" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="33.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.11" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="33.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.11" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="143.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%; +0.02%)</title><rect x="909.1" y="341" width="3.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="912.10" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="51.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.91" y="175.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (2 samples, 0.04%; 0.00%)</title><rect x="30.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="657.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="660.20" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (20 samples, 0.38%; +0.06%)</title><rect x="286.4" y="261" width="4.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="289.37" y="271.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::to_internal_name (1 samples, 0.02%; 0.00%)</title><rect x="31.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.07" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (6 samples, 0.12%; 0.00%)</title><rect x="922.9" y="389" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="925.92" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="809.7" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="812.65" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="814.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.86" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.04%)</title><rect x="100.4" y="485" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="103.39" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="424.3" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="427.33" y="175.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.02%)</title><rect x="1147.6" y="421" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1150.64" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::initialize (1 samples, 0.02%; +0.02%)</title><rect x="1164.6" y="533" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1167.63" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="351.8" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="354.84" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="186.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="189.01" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (194 samples, 3.72%; 0.00%)</title><rect x="33.3" y="421" width="44.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="431.5" >seas..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (1 samples, 0.02%; +0.02%)</title><rect x="424.6" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="427.55" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="111.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (39 samples, 0.75%; +0.04%)</title><rect x="1053.4" y="341" width="8.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1056.40" y="351.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%; +0.02%)</title><rect x="1051.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1054.82" y="335.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%; 0.00%)</title><rect x="1133.1" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.14" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="255.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="720.6" y="405" width="1.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="723.63" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="63.9" y="133" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.91" y="143.5" ></text>
</g>
<g >
<title>database::find_keyspace (25 samples, 0.48%; +0.02%)</title><rect x="1045.0" y="341" width="5.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1048.02" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="426.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="429.36" y="271.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%; +0.02%)</title><rect x="966.4" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="969.41" y="351.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="175.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (1 samples, 0.02%; +0.02%)</title><rect x="1158.1" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1161.06" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="117.6" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="120.60" y="255.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (9 samples, 0.17%; -0.02%)</title><rect x="305.4" y="325" width="2.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="308.40" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="845.0" y="469" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="847.99" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;clustering_row, std::allocator&lt;clustering_row&gt; &gt;::pop_front (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="191.5" ></text>
</g>
<g >
<title>db::system_keyspace::local (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (9 samples, 0.17%; 0.00%)</title><rect x="68.4" y="357" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.44" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="332.1" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="335.13" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="526.0" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="529.04" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="55.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="58.76" y="303.5" ></text>
</g>
<g >
<title>row_tombstone::apply (3 samples, 0.06%; -0.04%)</title><rect x="413.7" y="213" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="416.68" y="223.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="213.4" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="216.42" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="52.6" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.59" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (10 samples, 0.19%; +0.08%)</title><rect x="803.3" y="325" width="2.3" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="806.31" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%; +0.04%)</title><rect x="193.0" y="245" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="196.04" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="86.1" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.11" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.06%)</title><rect x="978.0" y="261" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="980.97" y="271.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="1096.9" y="357" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.90" y="367.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (3 samples, 0.06%; 0.00%)</title><rect x="1120.9" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.91" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::file_data_sink_impl::put (1 samples, 0.02%; +0.02%)</title><rect x="683.9" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="686.93" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.87" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="471.2" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="474.22" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="85.4" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.43" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="113.3" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="116.30" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (25 samples, 0.48%; +0.21%)</title><rect x="1072.4" y="261" width="5.7" height="15.0" fill="rgb(255,32,32)" rx="2" ry="2" />
<text  x="1075.43" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.12%; 0.00%)</title><rect x="54.4" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.40" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="649.7" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="652.72" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;reconcilable_result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="635.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.91" y="495.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; 0.00%)</title><rect x="478.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="481.92" y="335.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%; +0.02%)</title><rect x="48.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="51.06" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (3 samples, 0.06%; 0.00%)</title><rect x="556.2" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="559.17" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="57.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="613.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.03" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (5 samples, 0.10%; 0.00%)</title><rect x="762.8" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.76" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="756.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.19" y="319.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (2 samples, 0.04%; 0.00%)</title><rect x="444.3" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.26" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (3 samples, 0.06%; +0.04%)</title><rect x="445.2" y="373" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="448.17" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (39 samples, 0.75%; +0.02%)</title><rect x="132.6" y="421" width="8.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="135.55" y="431.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="854.5" y="357" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="857.51" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="853.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="646.1" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="649.10" y="383.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="590.4" y="405" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="593.37" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%; +0.02%)</title><rect x="333.7" y="293" width="2.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="336.71" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="350.9" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="353.93" y="191.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (6 samples, 0.12%; 0.00%)</title><rect x="334.6" y="277" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="337.62" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; -0.04%)</title><rect x="173.8" y="373" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="176.78" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; +0.08%)</title><rect x="1086.9" y="389" width="1.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1089.93" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (113 samples, 2.17%; -0.04%)</title><rect x="229.1" y="133" width="25.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="232.06" y="143.5" >c..</text>
</g>
<g >
<title>row::~row (2 samples, 0.04%; +0.04%)</title><rect x="290.9" y="261" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="293.90" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="801.0" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="804.05" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="32.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.65" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="821.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.98" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1021.7" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1024.69" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="966.9" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="969.87" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (31 samples, 0.60%; +0.04%)</title><rect x="547.3" y="405" width="7.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="550.33" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="714.5" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="717.51" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="646.8" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="649.78" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="818.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.26" y="303.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; +0.02%)</title><rect x="683.0" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="686.02" y="271.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="657.2" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="660.20" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="654.3" y="437" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="657.25" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="632.3" y="469" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="635.28" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (38 samples, 0.73%; +0.04%)</title><rect x="311.5" y="341" width="8.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="314.51" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (2 samples, 0.04%; 0.00%)</title><rect x="703.6" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.64" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; -0.04%)</title><rect x="1084.9" y="357" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1087.89" y="367.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1145.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.83" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%; -0.02%)</title><rect x="811.9" y="341" width="1.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="814.92" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (3 samples, 0.06%; 0.00%)</title><rect x="80.7" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%; +0.04%)</title><rect x="323.3" y="373" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="326.29" y="383.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::work_item, 128ul&gt;::emplace_back&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="854.5" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="857.51" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="626.6" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="629.62" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="836.6" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="839.61" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%; +0.06%)</title><rect x="1011.9" y="165" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1014.95" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="71.4" y="373" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="74.39" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="784.5" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="787.51" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (10 samples, 0.19%; 0.00%)</title><rect x="971.2" y="341" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.17" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (23 samples, 0.44%; 0.00%)</title><rect x="643.2" y="469" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.15" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1120.9" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1123.91" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (10 samples, 0.19%; 0.00%)</title><rect x="856.5" y="389" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.55" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (6 samples, 0.12%; 0.00%)</title><rect x="715.2" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.19" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="109.7" y="437" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="112.67" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%; 0.00%)</title><rect x="271.0" y="197" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.96" y="207.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; -0.02%)</title><rect x="830.7" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="833.72" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="90.9" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="93.87" y="463.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (2 samples, 0.04%; +0.02%)</title><rect x="702.5" y="421" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="705.51" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="605.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.10" y="447.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; -0.02%)</title><rect x="672.2" y="469" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="675.15" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%; +0.02%)</title><rect x="1111.8" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1114.85" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="227.9" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="230.92" y="143.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%; 0.00%)</title><rect x="1021.5" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.46" y="223.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (202 samples, 3.88%; -0.02%)</title><rect x="31.5" y="437" width="45.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="34.52" y="447.5" >cql3..</text>
</g>
<g >
<title>cql3::query_processor::execute_direct (266 samples, 5.11%; 0.00%)</title><rect x="30.4" y="501" width="60.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="511.5" >cql3::..</text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (2 samples, 0.04%; +0.04%)</title><rect x="707.3" y="485" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="710.26" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="620.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.27" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (6 samples, 0.12%; +0.02%)</title><rect x="32.0" y="421" width="1.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="34.97" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="1158.5" y="453" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1161.51" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="685.5" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.52" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="290.7" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="293.67" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%; 0.00%)</title><rect x="505.6" y="261" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.65" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%; 0.00%)</title><rect x="932.0" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.98" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="157.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.25" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (4 samples, 0.08%; 0.00%)</title><rect x="648.8" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.82" y="431.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="112.6" y="485" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="115.62" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1017.6" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.61" y="143.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1103.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1106.92" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="271.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; 0.00%)</title><rect x="830.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.27" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="1132.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.69" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="709.8" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="712.75" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; -0.04%)</title><rect x="533.7" y="293" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="536.74" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="55.3" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="58.31" y="111.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="1145.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1148.37" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.63" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="1048.6" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1051.64" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="59.6" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.61" y="287.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%; -0.06%)</title><rect x="575.6" y="373" width="0.3" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="578.65" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%; -0.02%)</title><rect x="263.7" y="181" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="266.71" y="191.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (3 samples, 0.06%; 0.00%)</title><rect x="344.8" y="165" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="347.81" y="175.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="351.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (22 samples, 0.42%; 0.00%)</title><rect x="1116.6" y="325" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.60" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%; -0.04%)</title><rect x="242.6" y="53" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="245.65" y="63.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="1124.3" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1127.31" y="191.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (7 samples, 0.13%; +0.02%)</title><rect x="778.6" y="261" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="781.62" y="271.5" ></text>
</g>
<g >
<title>ser::column__c__variant&lt;bytes_ostream&gt;::start_variant_live_cell (1 samples, 0.02%; +0.02%)</title><rect x="1126.3" y="101" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1129.34" y="111.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="973.2" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="976.21" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (58 samples, 1.11%; 0.00%)</title><rect x="669.7" y="501" width="13.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.66" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (2 samples, 0.04%; +0.02%)</title><rect x="1163.7" y="453" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1166.72" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.15%; -0.13%)</title><rect x="235.2" y="101" width="1.8" height="15.0" fill="rgb(96,96,255)" rx="2" ry="2" />
<text  x="238.17" y="111.5" ></text>
</g>
<g >
<title>sstables::sstable::rename_new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="626.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.62" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.97" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="626.4" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="629.39" y="367.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="91.6" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="94.55" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%; +0.02%)</title><rect x="77.7" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="80.73" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1060.7" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1063.65" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="667.8" y="469" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="670.85" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%; 0.00%)</title><rect x="129.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.38" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (2 samples, 0.04%; +0.04%)</title><rect x="802.9" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="805.86" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (5 samples, 0.10%; 0.00%)</title><rect x="12.0" y="453" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="463.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (42 samples, 0.81%; +0.02%)</title><rect x="132.1" y="437" width="9.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="135.10" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (7 samples, 0.13%; +0.10%)</title><rect x="28.8" y="469" width="1.6" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="31.80" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="84.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.76" y="383.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="271.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="157.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.70" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="64.1" y="69" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.14" y="79.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.12%)</title><rect x="406.9" y="149" width="0.7" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="409.88" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%; +0.02%)</title><rect x="105.8" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="108.82" y="415.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (11 samples, 0.21%; -0.02%)</title><rect x="1159.4" y="453" width="2.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1162.42" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%; 0.00%)</title><rect x="1011.9" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.95" y="191.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="1161.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.91" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="521.1" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="524.05" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="974.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.57" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%; +0.02%)</title><rect x="84.3" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="87.30" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (9 samples, 0.17%; 0.00%)</title><rect x="856.8" y="357" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="367.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (14 samples, 0.27%; +0.06%)</title><rect x="345.9" y="181" width="3.2" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="348.95" y="191.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; -0.02%)</title><rect x="55.1" y="165" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="58.08" y="175.5" ></text>
</g>
<g >
<title>database::find_uuid (19 samples, 0.36%; -0.04%)</title><rect x="755.1" y="389" width="4.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="758.06" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%; +0.02%)</title><rect x="32.2" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="35.20" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="239.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="87.2" y="453" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="90.25" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; 0.00%)</title><rect x="649.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.04" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.06%)</title><rect x="121.7" y="469" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="124.68" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="49.6" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="223.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (32 samples, 0.61%; -0.02%)</title><rect x="662.0" y="501" width="7.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="664.96" y="511.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="528.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.30" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="825.3" y="437" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="828.29" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (8 samples, 0.15%; -0.02%)</title><rect x="619.1" y="437" width="1.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="622.14" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;managed_bytes&gt;::_M_reset (2 samples, 0.04%; -0.04%)</title><rect x="896.2" y="373" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="899.19" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="239.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.3" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1122.32" y="143.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="949.0" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="951.97" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%; +0.06%)</title><rect x="937.2" y="341" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="940.19" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (19 samples, 0.36%; -0.08%)</title><rect x="699.8" y="453" width="4.3" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="702.79" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="654.0" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="657.03" y="431.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="952.6" y="373" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.60" y="383.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%; 0.00%)</title><rect x="857.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.45" y="303.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; +0.02%)</title><rect x="53.5" y="181" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="56.49" y="191.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (4 samples, 0.08%; 0.00%)</title><rect x="1128.8" y="197" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.84" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; 0.00%)</title><rect x="557.3" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.30" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (18 samples, 0.35%; 0.00%)</title><rect x="976.6" y="293" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="979.61" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="266.2" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="269.21" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (6 samples, 0.12%; 0.00%)</title><rect x="616.4" y="389" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.42" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="98.8" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="101.80" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (25 samples, 0.48%; +0.02%)</title><rect x="1093.5" y="405" width="5.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1096.50" y="415.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%; +0.02%)</title><rect x="666.7" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="669.71" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="191.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; 0.00%)</title><rect x="430.2" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="433.22" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="926.8" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="929.77" y="415.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="1132.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.69" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; +0.02%)</title><rect x="425.9" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="428.91" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="606.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="609.46" y="447.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="855.4" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="858.41" y="335.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (5 samples, 0.10%; 0.00%)</title><rect x="1163.5" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.50" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (75 samples, 1.44%; -0.06%)</title><rect x="186.9" y="309" width="17.0" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="189.92" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (298 samples, 5.72%; -0.06%)</title><rect x="24.0" y="581" width="67.6" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="27.04" y="591.5" >seastar..</text>
</g>
<g >
<title>operator new (8 samples, 0.15%; -0.02%)</title><rect x="316.3" y="277" width="1.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="319.27" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="771.4" y="293" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="774.37" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (7 samples, 0.13%; -0.04%)</title><rect x="51.7" y="341" width="1.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="54.68" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; -0.02%)</title><rect x="703.4" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="706.41" y="431.5" ></text>
</g>
<g >
<title>database::find_schema (11 samples, 0.21%; +0.08%)</title><rect x="811.0" y="357" width="2.5" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="814.01" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (26 samples, 0.50%; +0.02%)</title><rect x="974.8" y="325" width="5.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="977.80" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.02%)</title><rect x="823.9" y="357" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="826.93" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="913.6" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="916.63" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (18 samples, 0.35%; 0.00%)</title><rect x="643.8" y="453" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.83" y="463.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (5 samples, 0.10%; 0.00%)</title><rect x="78.9" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.87" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="200.5" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="203.51" y="239.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (11 samples, 0.21%; -0.04%)</title><rect x="838.4" y="405" width="2.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="841.42" y="415.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%; 0.00%)</title><rect x="520.8" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.83" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%; -0.04%)</title><rect x="777.5" y="293" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="780.49" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; +0.02%)</title><rect x="51.5" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="54.46" y="351.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (185 samples, 3.55%; +0.08%)</title><rect x="222.9" y="213" width="41.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="225.94" y="223.5" >log..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="751.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.66" y="351.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="434.1" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="437.07" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (4 samples, 0.08%; +0.04%)</title><rect x="548.7" y="357" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="551.69" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (42 samples, 0.81%; -0.08%)</title><rect x="101.7" y="485" width="9.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="104.75" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (5 samples, 0.10%; -0.02%)</title><rect x="665.8" y="485" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="668.81" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (65 samples, 1.25%; 0.00%)</title><rect x="33.6" y="373" width="14.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%; +0.02%)</title><rect x="208.7" y="245" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="211.67" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="338.5" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="341.47" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="63.7" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="111.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="663.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.54" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; +0.02%)</title><rect x="452.2" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="455.19" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.08%)</title><rect x="536.7" y="277" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="539.68" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (3 samples, 0.06%; +0.04%)</title><rect x="142.3" y="453" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="145.29" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="833.7" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="836.67" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="608.0" y="437" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="611.04" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="987.0" y="293" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="990.03" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="617.8" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="620.78" y="383.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="287.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="399.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="263.9" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.94" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1147.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1150.41" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="315.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="318.82" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.59" y="191.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (9 samples, 0.17%; +0.02%)</title><rect x="28.3" y="485" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="31.35" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="66.0" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.95" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.04%)</title><rect x="977.7" y="277" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="980.74" y="287.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (186 samples, 3.57%; -0.15%)</title><rect x="766.6" y="389" width="42.1" height="15.0" fill="rgb(80,80,255)" rx="2" ry="2" />
<text  x="769.61" y="399.5" >std..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="495.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::init_from_unsigned_long (1 samples, 0.02%; 0.00%)</title><rect x="86.3" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.34" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="85.2" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="88.21" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="517.9" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="520.88" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (6 samples, 0.12%; +0.02%)</title><rect x="792.0" y="133" width="1.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="794.99" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="582.7" y="325" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="585.67" y="335.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.10%)</title><rect x="831.2" y="405" width="0.4" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="834.17" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="647.2" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="650.23" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="611.9" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="614.89" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (11 samples, 0.21%; +0.02%)</title><rect x="644.1" y="437" width="2.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="647.06" y="447.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (2 samples, 0.04%; +0.02%)</title><rect x="1119.1" y="229" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1122.10" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="1038.2" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1041.22" y="303.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%; -0.02%)</title><rect x="1016.7" y="149" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1019.70" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.02%)</title><rect x="1085.1" y="373" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1088.12" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (29 samples, 0.56%; -0.08%)</title><rect x="482.3" y="293" width="6.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="485.32" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%; -0.06%)</title><rect x="689.6" y="453" width="0.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="692.59" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="637.3" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="640.26" y="479.5" ></text>
</g>
<g >
<title>query::result::builder::builder (17 samples, 0.33%; 0.00%)</title><rect x="597.4" y="421" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.39" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="716.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.55" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="858.4" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="861.36" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; +0.02%)</title><rect x="804.9" y="293" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="807.90" y="303.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="127.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="918.2" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="921.16" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.02%)</title><rect x="228.1" y="133" width="1.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="231.15" y="143.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (4 samples, 0.08%; 0.00%)</title><rect x="32.2" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%; 0.00%)</title><rect x="856.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.32" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,736 samples, 90.92%; 0.00%)</title><rect x="91.8" y="549" width="1072.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="559.5" >seastar::reactor::run</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="839.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.10" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="87.53" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (2 samples, 0.04%; -0.04%)</title><rect x="308.8" y="357" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="311.79" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="107.2" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="110.18" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (4 samples, 0.08%; +0.02%)</title><rect x="611.7" y="421" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="614.67" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; +0.02%)</title><rect x="1117.5" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1120.51" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1017.4" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1020.38" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="214.6" y="165" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="217.56" y="175.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1161.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.91" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (4 samples, 0.08%; +0.02%)</title><rect x="818.7" y="277" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="821.72" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (214 samples, 4.11%; 0.00%)</title><rect x="988.8" y="293" width="48.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="991.84" y="303.5" >serv..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="90.4" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="93.42" y="351.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (53 samples, 1.02%; -0.04%)</title><rect x="736.0" y="389" width="12.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="739.03" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.1" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="79.15" y="399.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%; +0.04%)</title><rect x="514.7" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="517.71" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="753.0" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="756.02" y="415.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::push_static_row (1 samples, 0.02%; 0.00%)</title><rect x="11.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.81" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (4 samples, 0.08%; +0.04%)</title><rect x="414.6" y="213" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="417.58" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="58.3" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="61.25" y="303.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="103.3" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="106.33" y="447.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (2 samples, 0.04%; 0.00%)</title><rect x="303.6" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="306.58" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="765.9" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="768.93" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="827.6" y="389" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="830.55" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1059.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1062.52" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (5 samples, 0.10%; -0.06%)</title><rect x="271.0" y="213" width="1.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="273.96" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="572.9" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.93" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (66 samples, 1.27%; -0.02%)</title><rect x="53.3" y="341" width="14.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="56.27" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="56.7" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.67" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="113.8" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="116.75" y="495.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="1033.9" y="245" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.92" y="255.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1096.4" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1099.44" y="383.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (31 samples, 0.60%; 0.00%)</title><rect x="741.0" y="373" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.02" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%; +0.02%)</title><rect x="473.3" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="476.26" y="303.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; +0.02%)</title><rect x="737.2" y="341" width="1.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="740.16" y="351.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; -0.12%)</title><rect x="494.1" y="197" width="1.4" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="497.10" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; 0.00%)</title><rect x="795.8" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.84" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="245" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="255.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="756.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.87" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; -0.02%)</title><rect x="779.3" y="245" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="782.30" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.02%)</title><rect x="568.6" y="277" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="571.63" y="287.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="929.0" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.04" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (3 samples, 0.06%; +0.04%)</title><rect x="987.7" y="293" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="990.71" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="446.1" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="449.07" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%; -0.02%)</title><rect x="692.3" y="469" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="695.31" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="34.0" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.01" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; +0.02%)</title><rect x="447.2" y="421" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="450.20" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (65 samples, 1.25%; 0.00%)</title><rect x="33.6" y="341" width="14.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="814.6" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="817.64" y="287.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%; +0.02%)</title><rect x="623.2" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="626.22" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24 samples, 0.46%; 0.00%)</title><rect x="1116.4" y="437" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.38" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="771.4" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="774.37" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%; 0.00%)</title><rect x="785.6" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.64" y="207.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="983.6" y="261" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.63" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="89.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.74" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="34.0" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.01" y="191.5" ></text>
</g>
<g >
<title>database::do_apply (23 samples, 0.44%; 0.00%)</title><rect x="1116.6" y="341" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.60" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (15 samples, 0.29%; +0.08%)</title><rect x="550.5" y="373" width="3.4" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="553.50" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1124.8" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.76" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.04%)</title><rect x="786.1" y="165" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="789.10" y="175.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%; 0.00%)</title><rect x="938.1" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.10" y="351.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (1 samples, 0.02%; -0.02%)</title><rect x="31.5" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="34.52" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="239.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (7 samples, 0.13%; +0.06%)</title><rect x="918.4" y="341" width="1.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="921.39" y="351.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="383.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,749 samples, 33.58%; +0.04%)</title><rect x="162.5" y="437" width="396.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="165.46" y="447.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; 0.00%)</title><rect x="701.8" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.83" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="207.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="12.0" y="309" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="15.04" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%; 0.00%)</title><rect x="603.7" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.74" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="782.2" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="785.24" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="319.4" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="322.44" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1161.7" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1164.68" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="818.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.26" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%; 0.00%)</title><rect x="796.7" y="261" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.74" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="259.9" y="149" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="262.86" y="159.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (9 samples, 0.17%; +0.02%)</title><rect x="139.3" y="405" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="142.35" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; 0.00%)</title><rect x="842.5" y="421" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.50" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; +0.02%)</title><rect x="280.7" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="283.70" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="931.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.53" y="367.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%; 0.00%)</title><rect x="362.7" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="365.71" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%; -0.02%)</title><rect x="583.1" y="357" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="586.12" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="546.0" y="405" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="548.97" y="415.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%; +0.02%)</title><rect x="891.0" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="893.98" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.02%)</title><rect x="705.5" y="405" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="708.45" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="856.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.09" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="434.7" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="437.75" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="524.9" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="527.90" y="335.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (9 samples, 0.17%; 0.00%)</title><rect x="520.4" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.37" y="335.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="794.0" y="117" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.02" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="677.6" y="469" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="680.59" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="87.9" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="90.93" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (10 samples, 0.19%; +0.04%)</title><rect x="838.7" y="389" width="2.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="841.65" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; 0.00%)</title><rect x="725.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.38" y="335.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_role_statement, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="71.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.39" y="367.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="175.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%; -0.02%)</title><rect x="602.2" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="605.15" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.95" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="64.4" y="245" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (49 samples, 0.94%; -0.02%)</title><rect x="562.1" y="341" width="11.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="565.06" y="351.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.04%)</title><rect x="889.8" y="309" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="892.85" y="319.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="307.4" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="310.44" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1014.9" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1017.89" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%; +0.02%)</title><rect x="287.7" y="245" width="3.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="290.73" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="808.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.07" y="287.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.10%; 0.00%)</title><rect x="880.3" y="309" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.33" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="199.4" y="213" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="202.38" y="223.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%; +0.02%)</title><rect x="562.5" y="325" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="565.51" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="111.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="740.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.56" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (3 samples, 0.06%; 0.00%)</title><rect x="854.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="223.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1121.8" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1124.81" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1037.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1040.77" y="303.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="438.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.60" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1136.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1139.09" y="479.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="239.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (125 samples, 2.40%; -0.04%)</title><rect x="227.0" y="165" width="28.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="230.02" y="175.5" >c..</text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; -0.02%)</title><rect x="131.2" y="405" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="134.19" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="932.2" y="309" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="935.21" y="319.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (4 samples, 0.08%; +0.04%)</title><rect x="653.1" y="437" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="656.12" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (4 samples, 0.08%; +0.08%)</title><rect x="253.5" y="101" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="256.52" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="1152.6" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1155.62" y="479.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (1 samples, 0.02%; +0.02%)</title><rect x="1122.7" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1125.72" y="303.5" ></text>
</g>
<g >
<title>query::digester::digester (1 samples, 0.02%; -0.02%)</title><rect x="597.8" y="405" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="600.85" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="56.4" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="207.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1021.7" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.69" y="191.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; -0.02%)</title><rect x="788.8" y="117" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="791.81" y="127.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="921.3" y="373" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="924.33" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.02%)</title><rect x="495.5" y="197" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="498.46" y="207.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="680.3" y="437" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="683.31" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (1 samples, 0.02%; +0.02%)</title><rect x="142.1" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="145.07" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="62.8" y="261" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="65.78" y="271.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.21%; +0.13%)</title><rect x="427.0" y="245" width="2.5" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="430.04" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="1157.6" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.61" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="562.7" y="277" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="565.74" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1019.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.88" y="175.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.02%)</title><rect x="681.9" y="485" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="684.89" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1101.7" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1104.65" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_service_level_statement, std::default_delete&lt;cql3::statements::drop_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="72.1" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="75.07" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (3 samples, 0.06%; -0.02%)</title><rect x="576.3" y="357" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="579.33" y="367.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="431.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="351.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (12 samples, 0.23%; 0.00%)</title><rect x="1125.9" y="181" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; 0.00%)</title><rect x="100.8" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.84" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1158.3" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1161.29" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (3 samples, 0.06%; 0.00%)</title><rect x="32.2" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="332.4" y="293" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="335.35" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="67.1" y="309" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="70.09" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.97" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="667.6" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="670.62" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="123.0" y="469" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="126.04" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="600.3" y="357" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="603.34" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (6 samples, 0.12%; +0.12%)</title><rect x="954.2" y="373" width="1.3" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="957.18" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="754.8" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="757.83" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.10%; -0.02%)</title><rect x="206.4" y="245" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="209.40" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (2 samples, 0.04%; +0.02%)</title><rect x="39.0" y="197" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="42.00" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9 samples, 0.17%; -0.06%)</title><rect x="704.5" y="437" width="2.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="707.54" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.04%)</title><rect x="322.8" y="357" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="325.84" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="78.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.19" y="399.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="159.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="772.1" y="277" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="775.05" y="287.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24 samples, 0.46%; -0.02%)</title><rect x="1116.4" y="469" width="5.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1119.38" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="784.3" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="787.28" y="223.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%; 0.00%)</title><rect x="682.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (65 samples, 1.25%; +0.02%)</title><rect x="780.7" y="245" width="14.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="783.66" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="756.2" y="341" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.19" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.02%)</title><rect x="798.1" y="245" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="801.10" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (2 samples, 0.04%; 0.00%)</title><rect x="86.1" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.11" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (9 samples, 0.17%; +0.02%)</title><rect x="845.9" y="469" width="2.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="848.90" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%; -0.06%)</title><rect x="795.8" y="229" width="0.9" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="798.84" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="99.9" y="485" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="102.93" y="495.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="761.4" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.40" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (3 samples, 0.06%; 0.00%)</title><rect x="708.2" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.17" y="495.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (86 samples, 1.65%; -0.04%)</title><rect x="500.4" y="325" width="19.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="503.44" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1141.1" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1144.07" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (10 samples, 0.19%; 0.00%)</title><rect x="78.4" y="405" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.41" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%; 0.00%)</title><rect x="683.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.25" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="779.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.75" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="467.1" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="470.14" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="60.5" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="271.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="627.5" y="485" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="630.52" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="203.5" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="206.46" y="287.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.5" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.55" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="815.5" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="818.54" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (28 samples, 0.54%; +0.04%)</title><rect x="467.6" y="309" width="6.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="470.59" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (3 samples, 0.06%; +0.06%)</title><rect x="691.0" y="453" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="693.95" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="1161.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.91" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="584.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.03" y="383.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (2 samples, 0.04%; -0.04%)</title><rect x="703.0" y="421" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="705.96" y="431.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,737 samples, 90.94%; 0.00%)</title><rect x="91.8" y="565" width="1073.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="575.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.08%)</title><rect x="634.8" y="485" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="637.77" y="495.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (12 samples, 0.23%; +0.06%)</title><rect x="833.9" y="421" width="2.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="836.89" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="815.3" y="293" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="818.32" y="303.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="686.2" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="689.20" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="252.2" y="117" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="255.16" y="127.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (83 samples, 1.59%; +0.04%)</title><rect x="876.9" y="373" width="18.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="879.93" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1103.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1106.69" y="431.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%; +0.06%)</title><rect x="904.8" y="373" width="2.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="907.80" y="383.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; +0.02%)</title><rect x="52.8" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="55.81" y="175.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="207.5" ></text>
</g>
<g >
<title>query_state::query_state (3 samples, 0.06%; +0.06%)</title><rect x="128.2" y="453" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="131.25" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (7 samples, 0.13%; +0.02%)</title><rect x="648.4" y="469" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="651.36" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (5 samples, 0.10%; -0.04%)</title><rect x="931.5" y="373" width="1.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="934.53" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (8 samples, 0.15%; +0.13%)</title><rect x="320.3" y="357" width="1.9" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="323.35" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (443 samples, 8.50%; -0.02%)</title><rect x="333.0" y="309" width="100.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="336.03" y="319.5" >std::__invok..</text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1021.5" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1024.46" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (173 samples, 3.32%; -0.06%)</title><rect x="224.8" y="197" width="39.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="227.75" y="207.5" >par..</text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (2 samples, 0.04%; 0.00%)</title><rect x="30.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="303.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; 0.00%)</title><rect x="532.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="535.15" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%; +0.02%)</title><rect x="33.8" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="36.79" y="175.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="1125.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="175.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (1 samples, 0.02%; 0.00%)</title><rect x="116.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.24" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (298 samples, 5.72%; 0.00%)</title><rect x="24.0" y="597" width="67.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.04" y="607.5" >seastar..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="744.4" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="747.41" y="303.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (1 samples, 0.02%; 0.00%)</title><rect x="570.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.89" y="287.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1036.9" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1039.87" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (121 samples, 2.32%; -0.10%)</title><rect x="559.1" y="405" width="27.4" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="562.11" y="415.5" >f..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,209 samples, 42.41%; 0.00%)</title><rect x="123.3" y="469" width="500.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="126.27" y="479.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.12%)</title><rect x="578.1" y="357" width="1.9" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="581.14" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.08%)</title><rect x="1105.1" y="389" width="2.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1108.05" y="399.5" ></text>
</g>
<g >
<title>_asn1_delete_structure (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="607.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_schema_version_known (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.91" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="1098.0" y="325" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1101.03" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="223.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_nextChar (1 samples, 0.02%; +0.02%)</title><rect x="35.8" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="38.82" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="605.8" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="608.78" y="447.5" ></text>
</g>
<g >
<title>query::result_set_row::get_ptr&lt;std::vector&lt;std::pair&lt;data_value, data_value&gt;, std::allocator&lt;std::pair&lt;data_value, data_value&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1113.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.98" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="160.0" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="162.96" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::get_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="272.8" y="229" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="275.78" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="261" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1020.1" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1023.10" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1129.3" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1132.29" y="159.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; +0.04%)</title><rect x="109.2" y="453" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="112.22" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (8 samples, 0.15%; -0.02%)</title><rect x="846.1" y="453" width="1.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="849.13" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;reconcilable_result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="635.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.91" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,222 samples, 42.66%; 0.00%)</title><rect x="120.8" y="485" width="503.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="123.77" y="495.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="935.6" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="938.61" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="87.0" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="90.02" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.9" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="69.86" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="457.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="460.17" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="250.1" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="253.12" y="111.5" ></text>
</g>
<g >
<title>sstables::mc::writer::close_data_writer (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="511.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (28 samples, 0.54%; +0.06%)</title><rect x="881.5" y="309" width="6.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="884.46" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; -0.04%)</title><rect x="1140.8" y="421" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1143.84" y="431.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; -0.02%)</title><rect x="1054.5" y="325" width="1.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1057.53" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="549" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="559.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (1 samples, 0.02%; 0.00%)</title><rect x="456.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="459.49" y="351.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%; -0.02%)</title><rect x="28.1" y="453" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="31.12" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (1 samples, 0.02%; -0.02%)</title><rect x="340.5" y="229" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="343.51" y="239.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.08%)</title><rect x="631.1" y="469" width="0.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="634.15" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="91.1" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="94.10" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="638.2" y="485" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="641.17" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="64.8" y="133" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.82" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="983.6" y="245" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="986.63" y="255.5" ></text>
</g>
<g >
<title>utils::array_search_gt (3 samples, 0.06%; +0.04%)</title><rect x="488.0" y="277" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="490.98" y="287.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (4 samples, 0.08%; +0.02%)</title><rect x="358.9" y="181" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="361.86" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="296.1" y="261" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="299.11" y="271.5" ></text>
</g>
<g >
<title>seastar::validate (1 samples, 0.02%; 0.00%)</title><rect x="1167.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.12" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="687.3" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="690.33" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (2 samples, 0.04%; 0.00%)</title><rect x="84.1" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="383.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="819.8" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.85" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.12%)</title><rect x="752.6" y="389" width="0.2" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="755.57" y="399.5" ></text>
</g>
<g >
<title>row::row (123 samples, 2.36%; -0.02%)</title><rect x="227.5" y="149" width="27.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="230.47" y="159.5" >r..</text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (19 samples, 0.36%; 0.00%)</title><rect x="749.2" y="421" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="752.17" y="431.5" ></text>
</g>
<g >
<title>logalloc::region_group::update (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="90.0" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.97" y="399.5" ></text>
</g>
<g >
<title>auth::get_permissions (1 samples, 0.02%; 0.00%)</title><rect x="89.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.06" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; +0.02%)</title><rect x="647.9" y="453" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="650.91" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (3 samples, 0.06%; +0.06%)</title><rect x="310.2" y="341" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="313.15" y="351.5" ></text>
</g>
<g >
<title>schema_registry::get (18 samples, 0.35%; +0.02%)</title><rect x="962.6" y="357" width="4.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="965.56" y="367.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.9" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.93" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1131.1" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1134.10" y="239.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="30.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="33.39" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="47.8" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="50.83" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (23 samples, 0.44%; 0.00%)</title><rect x="265.8" y="229" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.75" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (2 samples, 0.04%; 0.00%)</title><rect x="127.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="130.80" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="255.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; +0.02%)</title><rect x="16.3" y="581" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="19.34" y="591.5" ></text>
</g>
<g >
<title>std::allocator&lt;cql3::expr::expression&gt;::allocator (1 samples, 0.02%; +0.02%)</title><rect x="60.3" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="63.29" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1118.0" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1120.96" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="129.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.61" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="1126.3" y="133" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.34" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (2 samples, 0.04%; 0.00%)</title><rect x="84.1" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.04" y="575.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="79.5" ></text>
</g>
<g >
<title>std::move&lt;std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="59.2" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="62.16" y="111.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="432.9" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="435.93" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.02%)</title><rect x="847.7" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="850.71" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="203.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.23" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="78.2" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="81.19" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (22 samples, 0.42%; -0.04%)</title><rect x="421.4" y="229" width="5.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="424.38" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="675.3" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="678.32" y="495.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1117.5" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.51" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%; +0.02%)</title><rect x="947.6" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="950.61" y="415.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="27.7" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.67" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (12 samples, 0.23%; -0.04%)</title><rect x="421.8" y="197" width="2.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="424.83" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="429.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.31" y="239.5" ></text>
</g>
<g >
<title>seastar::smp::poll_queues (1 samples, 0.02%; +0.02%)</title><rect x="1164.4" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1167.40" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="621.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.63" y="399.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="938.3" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="941.32" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.33" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6 samples, 0.12%; -0.04%)</title><rect x="1139.9" y="437" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1142.94" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="51.0" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="54.00" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1104.8" y="421" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1107.82" y="431.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; -0.02%)</title><rect x="463.7" y="277" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="466.74" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="442.4" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="445.45" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.43" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="51.2" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.23" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (6 samples, 0.12%; +0.06%)</title><rect x="298.8" y="293" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="301.83" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1126.3" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.34" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::_M_insert_unique&lt;unsigned int const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1167.1" y="597" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1170.12" y="607.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="819.6" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="822.62" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (2 samples, 0.04%; +0.04%)</title><rect x="726.3" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="729.29" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; +0.02%)</title><rect x="11.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="14.81" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="64.1" y="85" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.14" y="95.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="383.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="159.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; 0.00%)</title><rect x="218.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="221.86" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="63.5" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="66.46" y="255.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (8 samples, 0.15%; 0.00%)</title><rect x="856.8" y="309" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1112.1" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1115.07" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::begin (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.38" y="271.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (31 samples, 0.60%; -0.08%)</title><rect x="344.8" y="197" width="7.0" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="347.81" y="207.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.10%; +0.02%)</title><rect x="251.0" y="117" width="1.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="254.03" y="127.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.50" y="143.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%; 0.00%)</title><rect x="601.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.25" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="606.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="609.00" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (20 samples, 0.38%; +0.06%)</title><rect x="837.5" y="421" width="4.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="840.52" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="63.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.46" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="744.2" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="747.19" y="303.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (11 samples, 0.21%; -0.04%)</title><rect x="535.1" y="293" width="2.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="538.10" y="303.5" ></text>
</g>
<g >
<title>posix_memalign (3 samples, 0.06%; +0.04%)</title><rect x="250.3" y="85" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="253.35" y="95.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="591.5" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="594.51" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1189.3" y="613" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1192.32" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="608.3" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.27" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="304.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="307.04" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="506.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="509.56" y="271.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="169.0" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="172.02" y="431.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; -0.02%)</title><rect x="1062.5" y="325" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1065.46" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (38 samples, 0.73%; -0.02%)</title><rect x="78.2" y="453" width="8.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="81.19" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1021.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.91" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%; +0.02%)</title><rect x="439.0" y="357" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="442.05" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (2 samples, 0.04%; 0.00%)</title><rect x="708.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.40" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="271.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (2 samples, 0.04%; 0.00%)</title><rect x="39.0" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.00" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="668.5" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.53" y="447.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="383.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="857.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.00" y="223.5" ></text>
</g>
<g >
<title>auth::resource::parent (10 samples, 0.19%; +0.02%)</title><rect x="772.3" y="325" width="2.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="775.28" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%; 0.00%)</title><rect x="1124.1" y="213" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.08" y="223.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="738.8" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="741.75" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="945.3" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="948.35" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="53.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="56.27" y="335.5" ></text>
</g>
<g >
<title>table::make_reader (400 samples, 7.68%; -0.13%)</title><rect x="452.6" y="357" width="90.7" height="15.0" fill="rgb(96,96,255)" rx="2" ry="2" />
<text  x="455.64" y="367.5" >table::mak..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="223.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%; 0.00%)</title><rect x="823.5" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.47" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (15 samples, 0.29%; +0.04%)</title><rect x="632.5" y="501" width="3.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="635.51" y="511.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_charPositionInLine (1 samples, 0.02%; +0.02%)</title><rect x="35.6" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="38.60" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="50.1" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (11 samples, 0.21%; +0.06%)</title><rect x="288.0" y="229" width="2.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="290.95" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (572 samples, 10.98%; -0.02%)</title><rect x="179.2" y="357" width="129.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="182.22" y="367.5" >mutation_fragmen..</text>
</g>
<g >
<title>freeze (12 samples, 0.23%; 0.00%)</title><rect x="1125.9" y="197" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="623.7" y="469" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="626.67" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="668.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.53" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="69.4" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="72.35" y="239.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (18 samples, 0.35%; -0.04%)</title><rect x="255.3" y="165" width="4.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="258.33" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (2 samples, 0.04%; +0.04%)</title><rect x="840.5" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="843.46" y="367.5" ></text>
</g>
<g >
<title>__sigsetjmp (1 samples, 0.02%; 0.00%)</title><rect x="27.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.99" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (16 samples, 0.31%; -0.02%)</title><rect x="461.0" y="293" width="3.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="464.02" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%; -0.02%)</title><rect x="621.6" y="405" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="624.63" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (2 samples, 0.04%; -0.12%)</title><rect x="518.1" y="277" width="0.5" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="521.11" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (5 samples, 0.10%; +0.06%)</title><rect x="1101.9" y="405" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1104.88" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (359 samples, 6.89%; -0.08%)</title><rect x="338.7" y="261" width="81.3" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="341.70" y="271.5" >mutation_..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; 0.00%)</title><rect x="562.7" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.74" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="710.4" y="501" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="713.43" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.21%; 0.00%)</title><rect x="248.5" y="117" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="251.54" y="127.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="214.1" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="217.10" y="207.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (11 samples, 0.21%; 0.00%)</title><rect x="198.5" y="245" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.47" y="255.5" ></text>
</g>
<g >
<title>[unknown] (17 samples, 0.33%; 0.00%)</title><rect x="10.0" y="613" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="939.7" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="942.68" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="75.2" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="78.24" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="86.1" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.11" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="612.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.57" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; +0.02%)</title><rect x="143.0" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="145.97" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (3 samples, 0.06%; +0.04%)</title><rect x="598.5" y="405" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="601.53" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="58.9" y="229" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="61.93" y="239.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (5 samples, 0.10%; +0.02%)</title><rect x="1149.7" y="453" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1152.68" y="463.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1107.3" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1110.32" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%; +0.02%)</title><rect x="301.5" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="304.55" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="810.1" y="373" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="813.11" y="383.5" ></text>
</g>
<g >
<title>std::transform&lt;__gnu_cxx::__normal_iterator&lt;data_value*, std::vector&lt;data_value, std::allocator&lt;data_value&gt; &gt; &gt;, std::back_insert_iterator&lt;std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt; &gt;, cql3::untyped_result_set_row::get_list_data&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::back_insert_iterator&lt;std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (480 samples, 9.21%; 0.00%)</title><rect x="329.9" y="357" width="108.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="332.86" y="367.5" >flat_mutation..</text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="40.4" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="43.36" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="71.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.62" y="367.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%; -0.04%)</title><rect x="921.6" y="405" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="924.56" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="49.2" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.19" y="239.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.02%)</title><rect x="207.3" y="229" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="210.31" y="239.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (76 samples, 1.46%; -0.02%)</title><rect x="51.2" y="357" width="17.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="54.23" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1124.8" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1127.76" y="175.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.12%; +0.06%)</title><rect x="1164.9" y="629" width="1.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1167.86" y="639.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%; +0.02%)</title><rect x="820.3" y="405" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="823.30" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="1113.7" y="405" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1116.66" y="415.5" ></text>
</g>
<g >
<title>dht::shard_of (4 samples, 0.08%; -0.04%)</title><rect x="992.2" y="277" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="995.24" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="173.6" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="176.56" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (7 samples, 0.13%; -0.02%)</title><rect x="839.3" y="373" width="1.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="842.33" y="383.5" ></text>
</g>
<g >
<title>database::query (116 samples, 2.23%; +0.06%)</title><rect x="1000.2" y="261" width="26.2" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1003.17" y="271.5" >d..</text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%; +0.04%)</title><rect x="525.1" y="325" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="528.13" y="335.5" ></text>
</g>
<g >
<title>row::compact_and_expire (72 samples, 1.38%; +0.02%)</title><rect x="397.4" y="213" width="16.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="400.37" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1125.9" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1128.89" y="143.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (6 samples, 0.12%; -0.02%)</title><rect x="424.6" y="213" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="427.55" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; 0.00%)</title><rect x="88.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.15" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; +0.04%)</title><rect x="263.3" y="133" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="266.26" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unimplemented::cause, std::pair&lt;unimplemented::cause const, bool&gt;, std::allocator&lt;std::pair&lt;unimplemented::cause const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unimplemented::cause&gt;, std::hash&lt;unimplemented::cause&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="854.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.73" y="367.5" ></text>
</g>
<g >
<title>from_hex (5 samples, 0.10%; 0.00%)</title><rect x="78.9" y="341" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.87" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (5 samples, 0.10%; +0.02%)</title><rect x="429.8" y="245" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="432.76" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.06%)</title><rect x="587.9" y="405" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="590.88" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;4ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="669.2" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="672.21" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="698.4" y="453" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="701.43" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.06%)</title><rect x="925.4" y="389" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="928.41" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; -0.02%)</title><rect x="1135.6" y="485" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1138.63" y="495.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%; +0.02%)</title><rect x="413.7" y="197" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="416.68" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%; +0.06%)</title><rect x="479.6" y="309" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="482.60" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%; 0.00%)</title><rect x="1066.3" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1069.31" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; +0.02%)</title><rect x="466.0" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="469.01" y="303.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.65" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="40.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.36" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; +0.02%)</title><rect x="514.0" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="517.03" y="223.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; +0.02%)</title><rect x="926.5" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="929.54" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="88.2" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="91.15" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.2" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.16" y="191.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; 0.00%)</title><rect x="635.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.45" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="839.6" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.56" y="367.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="670.3" y="485" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="673.34" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="258.5" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="261.50" y="111.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.12%; -0.08%)</title><rect x="418.4" y="213" width="1.4" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="421.44" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="319.5" ></text>
</g>
<g >
<title>_setjmp (1 samples, 0.02%; +0.02%)</title><rect x="625.9" y="485" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="628.94" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (297 samples, 5.70%; +0.04%)</title><rect x="207.5" y="261" width="67.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="210.54" y="271.5" >partiti..</text>
</g>
<g >
<title>__strlen_avx2 (11 samples, 0.21%; +0.12%)</title><rect x="1002.2" y="245" width="2.5" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="1005.21" y="255.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="481.9" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="484.86" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (12 samples, 0.23%; 0.00%)</title><rect x="943.1" y="389" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="946.08" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="49.9" y="181" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="52.87" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::constant const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="84.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="87.76" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="604.6" y="437" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="607.64" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (15 samples, 0.29%; 0.00%)</title><rect x="434.1" y="309" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="437.07" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1116.2" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1119.15" y="479.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="554.6" y="405" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.58" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="602.6" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="605.61" y="431.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="13.6" y="597" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="16.62" y="607.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%; +0.06%)</title><rect x="433.4" y="309" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="436.39" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (36 samples, 0.69%; -0.02%)</title><rect x="292.0" y="309" width="8.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="295.03" y="319.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (14 samples, 0.27%; -0.02%)</title><rect x="744.4" y="325" width="3.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="747.41" y="335.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1122.5" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1125.49" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="72.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="75.30" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; -0.04%)</title><rect x="815.8" y="309" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="818.77" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="56.4" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="191.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="472.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="475.58" y="287.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (1 samples, 0.02%; +0.02%)</title><rect x="1125.4" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1128.44" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%; +0.02%)</title><rect x="189.9" y="277" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="192.87" y="287.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (44 samples, 0.84%; 0.00%)</title><rect x="131.6" y="453" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.65" y="463.5" ></text>
</g>
<g >
<title>schema::get_column_definition (2 samples, 0.04%; 0.00%)</title><rect x="85.4" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.43" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="754.6" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.61" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="574.3" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="577.29" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="650.9" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.86" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (25 samples, 0.48%; 0.00%)</title><rect x="810.3" y="373" width="5.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.33" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%; -0.02%)</title><rect x="689.1" y="453" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="692.14" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="463.3" y="229" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="466.29" y="239.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="511.8" y="197" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="514.77" y="207.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.02%)</title><rect x="924.7" y="405" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="927.73" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (3 samples, 0.06%; +0.06%)</title><rect x="145.9" y="453" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="148.92" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%; +0.02%)</title><rect x="607.4" y="437" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="610.36" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="223.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="30.6" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="33.61" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="447.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="12.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.72" y="447.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="488.9" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="491.89" y="303.5" ></text>
</g>
<g >
<title>database::has_keyspace (18 samples, 0.35%; 0.00%)</title><rect x="816.0" y="357" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.00" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%; -0.02%)</title><rect x="1159.0" y="453" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1161.97" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="89.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.74" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="159.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (49 samples, 0.94%; 0.00%)</title><rect x="36.5" y="277" width="11.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.50" y="287.5" ></text>
</g>
<g >
<title>abstract_type::from_string (5 samples, 0.10%; 0.00%)</title><rect x="78.9" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.87" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="52.6" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.59" y="303.5" ></text>
</g>
<g >
<title>query::result_set_row::get&lt;std::vector&lt;std::pair&lt;data_value, data_value&gt;, std::allocator&lt;std::pair&lt;data_value, data_value&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="383.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%; -0.02%)</title><rect x="602.4" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="605.38" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (9 samples, 0.17%; +0.04%)</title><rect x="934.0" y="373" width="2.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="937.02" y="383.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (1 samples, 0.02%; 0.00%)</title><rect x="86.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.34" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="431.1" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="434.12" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="143.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="287.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="261.0" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.00" y="159.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; +0.02%)</title><rect x="572.0" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="575.02" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="285.7" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.69" y="239.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; -0.04%)</title><rect x="782.5" y="181" width="1.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="785.47" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="59.2" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.16" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (527 samples, 10.12%; +0.06%)</title><rect x="182.4" y="325" width="119.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="185.39" y="335.5" >mutation_reade..</text>
</g>
<g >
<title>make_combined_reader (79 samples, 1.52%; -0.04%)</title><rect x="457.4" y="341" width="17.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="460.40" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%; 0.00%)</title><rect x="1025.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1028.31" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="858.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.36" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.6" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="79.60" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%; +0.02%)</title><rect x="587.7" y="421" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="590.65" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="616.0" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="618.97" y="399.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (14 samples, 0.27%; +0.02%)</title><rect x="27.2" y="501" width="3.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="30.22" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1033.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.01" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (3 samples, 0.06%; 0.00%)</title><rect x="622.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.31" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.87" y="175.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (10 samples, 0.19%; -0.02%)</title><rect x="1159.6" y="437" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1162.64" y="447.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="769.3" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="772.33" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (59 samples, 1.13%; +0.02%)</title><rect x="877.8" y="341" width="13.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="880.84" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="239.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="111.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; +0.02%)</title><rect x="34.9" y="213" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="37.92" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="223.5" ></text>
</g>
<g >
<title>free (3 samples, 0.06%; +0.02%)</title><rect x="103.8" y="421" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="106.78" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="447.7" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="450.66" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="780.0" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="782.98" y="255.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="744.4" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="747.41" y="319.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%; +0.02%)</title><rect x="50.5" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="53.55" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (2 samples, 0.04%; 0.00%)</title><rect x="853.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (533 samples, 10.23%; -0.02%)</title><rect x="325.3" y="389" width="120.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="328.33" y="399.5" >query::consume_..</text>
</g>
<g >
<title>reader_permit::mark_unused (1 samples, 0.02%; 0.00%)</title><rect x="131.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.42" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="815.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="818.09" y="303.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1127.3" y="165" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.25" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%; 0.00%)</title><rect x="563.2" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.19" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="845.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="848.67" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (29 samples, 0.56%; +0.02%)</title><rect x="508.1" y="245" width="6.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="511.14" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="378.3" y="149" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="381.34" y="159.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%; +0.02%)</title><rect x="601.0" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="604.02" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.08%)</title><rect x="663.8" y="469" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="666.77" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (16 samples, 0.31%; +0.02%)</title><rect x="651.3" y="469" width="3.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="654.31" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="59.6" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.61" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%; 0.00%)</title><rect x="116.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.24" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="59.2" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.16" y="127.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (70 samples, 1.34%; +0.06%)</title><rect x="188.1" y="293" width="15.8" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="191.05" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (6 samples, 0.12%; 0.00%)</title><rect x="33.6" y="293" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%; +0.06%)</title><rect x="934.5" y="357" width="1.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="937.47" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="523.1" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="526.09" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="527.5" ></text>
</g>
<g >
<title>dirty_memory_manager::setup_collectd (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="335.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1127.7" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.70" y="159.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1019.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.88" y="191.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; -0.04%)</title><rect x="435.2" y="261" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="438.20" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (25 samples, 0.48%; -0.04%)</title><rect x="459.4" y="309" width="5.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="462.44" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="255.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="672.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.38" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="876.0" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="879.03" y="383.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="351.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="815.3" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="818.32" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (4 samples, 0.08%; 0.00%)</title><rect x="737.4" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.39" y="335.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (14 samples, 0.27%; -0.21%)</title><rect x="375.6" y="165" width="3.2" height="15.0" fill="rgb(32,32,255)" rx="2" ry="2" />
<text  x="378.62" y="175.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%; +0.02%)</title><rect x="48.3" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="51.28" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%; -0.02%)</title><rect x="657.4" y="485" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="660.43" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="271.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.2" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.16" y="175.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="500.9" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="503.89" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.13%; 0.00%)</title><rect x="435.2" y="277" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.20" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="207.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (13 samples, 0.25%; 0.00%)</title><rect x="1122.9" y="293" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.95" y="303.5" ></text>
</g>
<g >
<title>seastar::priority_class_data::register_stats (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="159.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1021.0" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1024.01" y="207.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="930.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.40" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="795.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.61" y="271.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (12 samples, 0.23%; 0.00%)</title><rect x="1125.9" y="213" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="223.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="191.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;&amp;, seastar::bool_class&lt;continuous_tag&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1118.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.42" y="207.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="820.8" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="823.75" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (6 samples, 0.12%; +0.02%)</title><rect x="762.5" y="373" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="765.54" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="320.1" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="323.12" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%; 0.00%)</title><rect x="1163.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.72" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (23 samples, 0.44%; -0.02%)</title><rect x="211.4" y="229" width="5.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="214.39" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%; 0.00%)</title><rect x="1132.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.69" y="495.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (24 samples, 0.46%; 0.00%)</title><rect x="1116.4" y="405" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.38" y="415.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; +0.04%)</title><rect x="794.0" y="85" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="797.02" y="95.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%; 0.00%)</title><rect x="799.9" y="293" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.91" y="303.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (133 samples, 2.55%; +0.12%)</title><rect x="364.1" y="181" width="30.1" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="367.07" y="191.5" >wr..</text>
</g>
<g >
<title>validation::validate_keyspace (18 samples, 0.35%; 0.00%)</title><rect x="816.0" y="373" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.00" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="65.3" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="191.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (78 samples, 1.50%; +0.02%)</title><rect x="501.8" y="309" width="17.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="504.80" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="187.8" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="190.83" y="303.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%; +0.02%)</title><rect x="91.8" y="517" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="94.78" y="527.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="48.7" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="51.74" y="207.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="485" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (5 samples, 0.10%; -0.02%)</title><rect x="289.1" y="213" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="292.09" y="223.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%; -0.02%)</title><rect x="902.5" y="373" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="905.53" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main (4,737 samples, 90.94%; 0.00%)</title><rect x="91.8" y="629" width="1073.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1021.7" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.69" y="207.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="49.6" y="165" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="52.64" y="175.5" ></text>
</g>
<g >
<title>table::set_hit_rate (9 samples, 0.17%; -0.04%)</title><rect x="704.5" y="453" width="2.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="707.54" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.53" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="984.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="987.76" y="303.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (6 samples, 0.12%; +0.04%)</title><rect x="106.0" y="405" width="1.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="109.05" y="415.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (16 samples, 0.31%; +0.02%)</title><rect x="550.3" y="389" width="3.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="553.28" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (2 samples, 0.04%; +0.04%)</title><rect x="92.9" y="517" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="95.91" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="646.6" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="649.55" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="444.0" y="357" width="0.3" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="447.03" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (57 samples, 1.09%; +0.10%)</title><rect x="190.3" y="277" width="12.9" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="193.32" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="54.9" y="149" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="57.85" y="159.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (42 samples, 0.81%; 0.00%)</title><rect x="77.7" y="469" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.73" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%; -0.04%)</title><rect x="942.4" y="405" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="945.40" y="415.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%; +0.06%)</title><rect x="461.0" y="277" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="464.02" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="425.5" y="181" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="428.46" y="191.5" ></text>
</g>
<g >
<title>all (5,209 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1164.2" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1167.18" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="71.2" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="74.16" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="440.9" y="325" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="443.86" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (2 samples, 0.04%; 0.00%)</title><rect x="88.8" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.83" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="100.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.16" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="830.0" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="833.04" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%; +0.02%)</title><rect x="871.5" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="874.50" y="431.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1115.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1118.70" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="351.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="216.6" y="213" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="219.60" y="223.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; -0.06%)</title><rect x="277.5" y="197" width="0.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="280.53" y="207.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="928.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="931.36" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="695.5" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="698.48" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="264.4" y="197" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="267.39" y="207.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (265 samples, 5.09%; 0.00%)</title><rect x="760.0" y="405" width="60.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.04" y="415.5" >servic..</text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="383.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="303.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="1147.6" y="437" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.64" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="705.9" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="708.90" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.12%; +0.02%)</title><rect x="284.1" y="213" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="287.10" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="68.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="71.22" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (18 samples, 0.35%; -0.02%)</title><rect x="103.3" y="453" width="4.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="106.33" y="463.5" ></text>
</g>
<g >
<title>auth::resource::resource (6 samples, 0.12%; +0.06%)</title><rect x="764.1" y="373" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="767.12" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%; 0.00%)</title><rect x="117.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.38" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="223.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%; 0.00%)</title><rect x="708.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.17" y="479.5" ></text>
</g>
<g >
<title>read_context::create_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="143.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="437.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="440.92" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="303.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="505.2" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="508.20" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="947.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.16" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.53" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (191 samples, 3.67%; +0.04%)</title><rect x="222.5" y="229" width="43.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="225.49" y="239.5" >part..</text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="620.5" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="623.50" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (1 samples, 0.02%; +0.02%)</title><rect x="601.5" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="604.47" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="795.2" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="798.16" y="207.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="816.5" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="819.45" y="335.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::on_released (1 samples, 0.02%; +0.02%)</title><rect x="708.6" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="711.62" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="136.4" y="389" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="139.40" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="514.5" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="517.48" y="239.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="858.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.36" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="271.4" y="181" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="274.42" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (28 samples, 0.54%; +0.04%)</title><rect x="420.0" y="261" width="6.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="423.02" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="824.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.83" y="447.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="926.1" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="929.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (9 samples, 0.17%; 0.00%)</title><rect x="1147.6" y="453" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.64" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; -0.02%)</title><rect x="447.0" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="449.98" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="582.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="585.90" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (10 samples, 0.19%; 0.00%)</title><rect x="1123.6" y="261" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.63" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="706.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="709.81" y="495.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.04%)</title><rect x="531.7" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="534.70" y="303.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="303.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%; +0.04%)</title><rect x="134.4" y="405" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="137.37" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (4 samples, 0.08%; +0.02%)</title><rect x="82.7" y="325" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="85.72" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="54.6" y="101" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="57.63" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="511.8" y="181" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="514.77" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="55.3" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.31" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="689.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.37" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="935.4" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="938.38" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1017.6" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1020.61" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="82.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="85.26" y="335.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%; +0.02%)</title><rect x="86.3" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="89.34" y="335.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%; -0.13%)</title><rect x="491.2" y="261" width="0.4" height="15.0" fill="rgb(96,96,255)" rx="2" ry="2" />
<text  x="494.15" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (14 samples, 0.27%; 0.00%)</title><rect x="629.3" y="485" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="632.34" y="495.5" ></text>
</g>
<g >
<title>partition_entry::read (2 samples, 0.04%; +0.02%)</title><rect x="524.0" y="325" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="527.00" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="818.3" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="821.26" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="207.5" ></text>
</g>
<g >
<title>perf_simple_que (5,208 samples, 99.98%; 0.00%)</title><rect x="10.0" y="645" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="946.9" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="949.93" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="922.0" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="925.01" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="955.5" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="958.54" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.43" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="430.4" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="433.44" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="450.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="453.38" y="399.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (204 samples, 3.92%; +0.02%)</title><rect x="31.3" y="453" width="46.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="34.29" y="463.5" >cql3..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="34.5" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="37.47" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="781.3" y="229" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="784.34" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (45 samples, 0.86%; 0.00%)</title><rect x="275.9" y="245" width="10.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="278.95" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="110.4" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="113.35" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::optional&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt; &gt;::invoke&lt;cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="711.6" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="714.57" y="511.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; +0.02%)</title><rect x="83.2" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="86.17" y="319.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (10 samples, 0.19%; +0.12%)</title><rect x="913.9" y="373" width="2.2" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="916.86" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="851.1" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="854.11" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="1024.2" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.18" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.5" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="70.54" y="287.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (27 samples, 0.52%; 0.00%)</title><rect x="1065.4" y="277" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1068.41" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (15 samples, 0.29%; +0.10%)</title><rect x="678.0" y="485" width="3.4" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="681.04" y="495.5" ></text>
</g>
<g >
<title>database::find_uuid (11 samples, 0.21%; 0.00%)</title><rect x="813.5" y="357" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.51" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (3 samples, 0.06%; +0.04%)</title><rect x="584.3" y="373" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="587.26" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (1 samples, 0.02%; +0.02%)</title><rect x="1039.1" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1042.13" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (18 samples, 0.35%; -0.08%)</title><rect x="304.3" y="341" width="4.0" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="307.26" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.43" y="351.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; +0.02%)</title><rect x="116.5" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="119.47" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; 0.00%)</title><rect x="744.6" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="747.64" y="287.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="87.5" y="453" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="90.47" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%; -0.02%)</title><rect x="435.0" y="277" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="437.97" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (11 samples, 0.21%; +0.04%)</title><rect x="278.0" y="181" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="280.99" y="191.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (4 samples, 0.08%; +0.06%)</title><rect x="349.1" y="181" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="352.12" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="239.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%; 0.00%)</title><rect x="856.8" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="49.0" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_for_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="1018.1" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1021.06" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.53" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="82.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.26" y="399.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (34 samples, 0.65%; +0.17%)</title><rect x="402.4" y="165" width="7.7" height="15.0" fill="rgb(255,64,64)" rx="2" ry="2" />
<text  x="405.35" y="175.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%; +0.06%)</title><rect x="790.2" y="117" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="793.17" y="127.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="835.9" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.93" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%; +0.04%)</title><rect x="521.7" y="309" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="524.73" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="506.3" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="509.33" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (23 samples, 0.44%; 0.00%)</title><rect x="726.1" y="341" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="729.06" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="519.9" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="522.92" y="335.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="853.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.60" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="287.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="159.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="367.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (20 samples, 0.38%; -0.08%)</title><rect x="1056.6" y="325" width="4.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1059.57" y="335.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%; -0.02%)</title><rect x="1082.4" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1085.40" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="715.6" y="421" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.64" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="668.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.75" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="64.8" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.82" y="159.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="301.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.77" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="521.1" y="261" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="524.05" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="857.5" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.45" y="271.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (3 samples, 0.06%; 0.00%)</title><rect x="30.4" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="647.5" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="650.46" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::update_normal_tokens (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1160.8" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1163.78" y="431.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%; +0.02%)</title><rect x="857.9" y="293" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="860.91" y="303.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%; +0.02%)</title><rect x="89.3" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="92.29" y="447.5" ></text>
</g>
<g >
<title>malloc (3 samples, 0.06%; 0.00%)</title><rect x="600.3" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.34" y="383.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%; 0.00%)</title><rect x="1026.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.22" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (69 samples, 1.32%; -0.02%)</title><rect x="733.5" y="421" width="15.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="736.54" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (6 samples, 0.12%; 0.00%)</title><rect x="33.6" y="277" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="287.5" ></text>
</g>
<g >
<title>service::migration_manager::announce_new_column_family (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="463.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%; -0.02%)</title><rect x="1124.1" y="181" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1127.08" y="191.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1146.3" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.28" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (13 samples, 0.25%; +0.08%)</title><rect x="40.8" y="261" width="3.0" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="43.81" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (97 samples, 1.86%; +0.02%)</title><rect x="48.5" y="373" width="22.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="51.51" y="383.5" >c..</text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="25.4" y="533" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="28.40" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="50.3" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="53.32" y="175.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (17 samples, 0.33%; -0.10%)</title><rect x="727.4" y="309" width="3.9" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="730.42" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="923.6" y="373" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="926.60" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="906.4" y="341" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="909.38" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="541.4" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.44" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="649.0" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="652.04" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.12%; +0.06%)</title><rect x="809.0" y="389" width="1.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="811.97" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="716.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.32" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="859.0" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="862.04" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="752.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.57" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="116.0" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="119.02" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (3 samples, 0.06%; +0.04%)</title><rect x="849.5" y="485" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="852.52" y="495.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; +0.04%)</title><rect x="282.3" y="181" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="285.29" y="191.5" ></text>
</g>
<g >
<title>__GI___fstatfs64 (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="549" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1192.77" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (14 samples, 0.27%; +0.02%)</title><rect x="277.3" y="213" width="3.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="280.31" y="223.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%; +0.02%)</title><rect x="799.7" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="802.69" y="303.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1132.52" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="511.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::resize (1 samples, 0.02%; 0.00%)</title><rect x="91.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.32" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.15%; -0.04%)</title><rect x="435.0" y="293" width="1.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="437.97" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="53" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="63.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="25.6" y="533" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="28.63" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="779.8" y="213" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="782.75" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::get (1 samples, 0.02%; +0.02%)</title><rect x="72.5" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="75.52" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="303.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%; 0.00%)</title><rect x="856.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.09" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.10%; -0.02%)</title><rect x="1048.0" y="293" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1050.97" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="318.5" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="321.54" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="217.7" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="220.73" y="223.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="73.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.20" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="24.5" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="27.50" y="431.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%; +0.02%)</title><rect x="754.4" y="373" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="757.38" y="383.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="616.7" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.65" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (39 samples, 0.75%; 0.00%)</title><rect x="564.3" y="325" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="567.32" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="628.7" y="469" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="631.66" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="271.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.10%; -0.04%)</title><rect x="318.8" y="309" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="321.76" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (18 samples, 0.35%; +0.15%)</title><rect x="468.5" y="277" width="4.1" height="15.0" fill="rgb(255,80,80)" rx="2" ry="2" />
<text  x="471.50" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1123.2" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1126.17" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="145.5" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="148.47" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="650.4" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="653.40" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (14 samples, 0.27%; 0.00%)</title><rect x="260.5" y="165" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.54" y="175.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (56 samples, 1.08%; 0.00%)</title><rect x="505.4" y="277" width="12.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.42" y="287.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (4 samples, 0.08%; -0.02%)</title><rect x="737.4" y="309" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="740.39" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="1004.7" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.70" y="239.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="670.1" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="673.11" y="495.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (5 samples, 0.10%; +0.08%)</title><rect x="848.2" y="453" width="1.1" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="851.16" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%; 0.00%)</title><rect x="116.7" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="682.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="383.5" ></text>
</g>
<g >
<title>seastar::metrics::make_queue_length&lt;unsigned int&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (5 samples, 0.10%; +0.04%)</title><rect x="396.0" y="181" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="399.01" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="821.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.98" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1084.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.44" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%; +0.04%)</title><rect x="314.0" y="293" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="317.00" y="303.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; 0.00%)</title><rect x="682.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.57" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; 0.00%)</title><rect x="40.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.36" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="891.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.21" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (22 samples, 0.42%; 0.00%)</title><rect x="854.3" y="469" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="479.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%; +0.02%)</title><rect x="610.3" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="613.31" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="549.6" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="552.60" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="287.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (9 samples, 0.17%; +0.02%)</title><rect x="789.7" y="149" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="792.72" y="159.5" ></text>
</g>
<g >
<title>seastar::posix_file_real_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="255.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="858.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.36" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="635.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.23" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (9 samples, 0.17%; 0.00%)</title><rect x="806.7" y="341" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.71" y="351.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%; 0.00%)</title><rect x="818.7" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.72" y="303.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="13.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.17" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="937.9" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="940.87" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="338.0" y="245" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="341.02" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (58 samples, 1.11%; -0.06%)</title><rect x="641.8" y="485" width="13.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="644.79" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="625.3" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="628.26" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (674 samples, 12.94%; +0.06%)</title><rect x="171.3" y="405" width="152.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="174.29" y="415.5" >flat_mutation_reade..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (36 samples, 0.69%; 0.00%)</title><rect x="1122.7" y="325" width="8.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.72" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (30 samples, 0.58%; -0.08%)</title><rect x="313.1" y="325" width="6.8" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="316.10" y="335.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (2 samples, 0.04%; +0.04%)</title><rect x="1101.2" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1104.20" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (3 samples, 0.06%; 0.00%)</title><rect x="1128.8" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.84" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="704.1" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="707.09" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%; +0.02%)</title><rect x="32.7" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="35.65" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="813.5" y="341" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.51" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="985.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.99" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1100.1" y="373" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1103.07" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="1118.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.42" y="223.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="1060.0" y="293" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1062.97" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%; +0.04%)</title><rect x="464.0" y="277" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="466.97" y="287.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (44 samples, 0.84%; -0.04%)</title><rect x="826.6" y="437" width="10.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="829.64" y="447.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="1157.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.83" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="287.3" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="290.27" y="255.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (4 samples, 0.08%; +0.02%)</title><rect x="88.4" y="421" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="91.38" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="798.3" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="801.33" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (1 samples, 0.02%; +0.02%)</title><rect x="1189.1" y="629" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1192.09" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.35" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="927.2" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="930.22" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="510.2" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="513.18" y="207.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%; +0.02%)</title><rect x="873.5" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="876.54" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="559.5" ></text>
</g>
<g >
<title>seastar::io_queue::find_or_create_class (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="207.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (22 samples, 0.42%; -0.02%)</title><rect x="726.3" y="325" width="5.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="729.29" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="538.9" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="541.95" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (4 samples, 0.08%; -0.02%)</title><rect x="978.0" y="277" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="980.97" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (7 samples, 0.13%; -0.08%)</title><rect x="461.9" y="277" width="1.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="464.93" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%; -0.02%)</title><rect x="916.4" y="389" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="919.35" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (2 samples, 0.04%; 0.00%)</title><rect x="58.9" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.93" y="255.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="89.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.06" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="143.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="511.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%; 0.00%)</title><rect x="117.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.38" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::token&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::token&gt; &gt; &gt;::_M_realloc_insert&lt;nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="669.4" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="672.43" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (5 samples, 0.10%; +0.10%)</title><rect x="537.6" y="293" width="1.1" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="540.59" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="945.6" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="948.57" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="717.9" y="453" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="720.91" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unimplemented::cause, std::pair&lt;unimplemented::cause const, bool&gt;, std::allocator&lt;std::pair&lt;unimplemented::cause const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unimplemented::cause&gt;, std::hash&lt;unimplemented::cause&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="854.7" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="857.73" y="351.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (11 samples, 0.21%; -0.06%)</title><rect x="243.3" y="69" width="2.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="246.33" y="79.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1062.0" y="325" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1065.01" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="73.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.66" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (6 samples, 0.12%; -0.06%)</title><rect x="192.8" y="261" width="1.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="195.81" y="271.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%; +0.04%)</title><rect x="416.4" y="245" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="419.40" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (4 samples, 0.08%; +0.06%)</title><rect x="967.3" y="357" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="970.32" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (542 samples, 10.41%; -0.06%)</title><rect x="324.0" y="405" width="122.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="326.97" y="415.5" >seastar::future..</text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1114.6" y="421" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1117.57" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; -0.02%)</title><rect x="853.4" y="325" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="856.37" y="335.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (653 samples, 12.54%; +0.12%)</title><rect x="175.1" y="373" width="148.0" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="178.14" y="383.5" >seastar::repeat&lt;me..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="618.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.46" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="223.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; -0.02%)</title><rect x="495.2" y="181" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="498.23" y="191.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; -0.08%)</title><rect x="482.1" y="277" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="485.09" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%; 0.00%)</title><rect x="617.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.78" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="53.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.04" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (8 samples, 0.15%; +0.08%)</title><rect x="882.6" y="293" width="1.8" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="885.60" y="303.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%; -0.04%)</title><rect x="254.7" y="133" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="257.65" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="34.5" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.47" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="610.5" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="613.53" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.35" y="271.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="13.91" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (402 samples, 7.72%; -0.08%)</title><rect x="732.0" y="437" width="91.0" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="734.95" y="447.5" >cql3::quer..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (6 samples, 0.12%; 0.00%)</title><rect x="33.6" y="309" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="801.7" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="804.73" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (4 samples, 0.08%; +0.02%)</title><rect x="268.5" y="165" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="271.47" y="175.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="117.8" y="501" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="120.83" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (6 samples, 0.12%; +0.02%)</title><rect x="539.6" y="341" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="542.63" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (2 samples, 0.04%; 0.00%)</title><rect x="84.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (544 samples, 10.44%; +0.02%)</title><rect x="180.8" y="341" width="123.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="183.80" y="351.5" >mutation_fragme..</text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="62.1" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.10" y="255.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.31%; +0.02%)</title><rect x="1005.4" y="245" width="3.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1008.38" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="122.8" y="469" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="125.81" y="479.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%; 0.00%)</title><rect x="708.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.17" y="447.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (10 samples, 0.19%; +0.02%)</title><rect x="129.2" y="453" width="2.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="132.16" y="463.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%; 0.00%)</title><rect x="103.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="106.56" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%; +0.04%)</title><rect x="373.1" y="165" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="376.13" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="287.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="415.5" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="418.49" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.08%; +0.04%)</title><rect x="395.1" y="181" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="398.10" y="191.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; +0.02%)</title><rect x="722.9" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="725.89" y="431.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (4 samples, 0.08%; +0.08%)</title><rect x="517.0" y="229" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="519.98" y="239.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.33%; -0.02%)</title><rect x="994.7" y="277" width="3.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="997.73" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="1048.0" y="277" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1050.97" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="174.9" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="177.91" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="597" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="607.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%; +0.04%)</title><rect x="789.0" y="133" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="792.04" y="143.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%; +0.04%)</title><rect x="122.1" y="469" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="125.13" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1159.4" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1162.42" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (5 samples, 0.10%; +0.10%)</title><rect x="1015.1" y="149" width="1.2" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="1018.12" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (7 samples, 0.13%; -0.08%)</title><rect x="159.1" y="421" width="1.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="162.06" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="793.8" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="796.80" y="127.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; 0.00%)</title><rect x="1025.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1028.54" y="255.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; 0.00%)</title><rect x="514.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="517.26" y="223.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="81.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="84.36" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="127.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (2 samples, 0.04%; +0.04%)</title><rect x="873.8" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="876.76" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%; +0.02%)</title><rect x="32.4" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="35.43" y="319.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%; +0.02%)</title><rect x="648.6" y="437" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="651.59" y="447.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_error (1 samples, 0.02%; +0.02%)</title><rect x="40.1" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="43.13" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1032.1" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1035.11" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="143.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (11 samples, 0.21%; +0.08%)</title><rect x="885.3" y="293" width="2.5" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="888.32" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; -0.06%)</title><rect x="973.9" y="341" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="976.89" y="351.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="35.4" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="38.37" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="223.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result&lt;int&gt; &gt;::process (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; -0.02%)</title><rect x="812.8" y="293" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="815.83" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl_nrvo&lt;flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="323.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="326.75" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (10 samples, 0.19%; +0.10%)</title><rect x="1107.5" y="405" width="2.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="1110.54" y="415.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (4 samples, 0.08%; -0.02%)</title><rect x="1153.3" y="453" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1156.30" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (8 samples, 0.15%; 0.00%)</title><rect x="68.7" y="341" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.67" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="930.6" y="357" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="933.62" y="367.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_or_view_to_schema_mutation (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="640.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.89" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%; +0.02%)</title><rect x="51.7" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="54.68" y="191.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,737 samples, 90.94%; 0.00%)</title><rect x="91.8" y="581" width="1073.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="591.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="73.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.20" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="591.3" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.28" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%; +0.02%)</title><rect x="722.7" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="725.67" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (3 samples, 0.06%; +0.06%)</title><rect x="978.2" y="261" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="981.19" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="742.6" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="745.60" y="287.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (8 samples, 0.15%; +0.04%)</title><rect x="599.2" y="405" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="602.21" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%; -0.02%)</title><rect x="58.7" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="61.70" y="271.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.10%; +0.02%)</title><rect x="211.6" y="197" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="214.61" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (327 samples, 6.28%; +0.10%)</title><rect x="341.6" y="229" width="74.1" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="344.64" y="239.5" >compact_..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1 samples, 0.02%; -0.02%)</title><rect x="1132.2" y="485" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1135.23" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_bound_terms (1 samples, 0.02%; +0.02%)</title><rect x="90.6" y="501" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="93.65" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::parallel_for_each_state (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.95" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (15 samples, 0.29%; 0.00%)</title><rect x="591.7" y="421" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.73" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%; 0.00%)</title><rect x="1164.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1167.63" y="559.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (10 samples, 0.19%; -0.04%)</title><rect x="673.1" y="469" width="2.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="676.06" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (521 samples, 10.00%; -0.10%)</title><rect x="718.8" y="453" width="118.0" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="721.82" y="463.5" >single_node_cq..</text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (23 samples, 0.44%; +0.06%)</title><rect x="975.5" y="309" width="5.2" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="978.48" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="378.8" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="381.79" y="175.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="615.1" y="421" width="0.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="618.06" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="1089.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.87" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (2 samples, 0.04%; 0.00%)</title><rect x="58.9" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.93" y="271.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.79%; 0.00%)</title><rect x="1122.0" y="469" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.04" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.06%)</title><rect x="905.7" y="341" width="0.7" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="908.70" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (194 samples, 3.72%; 0.00%)</title><rect x="33.3" y="405" width="44.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="415.5" >cql3..</text>
</g>
<g >
<title>mutation_partition::lower_bound (11 samples, 0.21%; 0.00%)</title><rect x="278.0" y="197" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="280.99" y="207.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%; +0.02%)</title><rect x="1120.2" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1123.23" y="287.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="143.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (407 samples, 7.81%; -0.02%)</title><rect x="451.1" y="373" width="92.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="454.06" y="383.5" >std::_Funct..</text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="607.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::work_item, 128ul&gt;::pop_front (1 samples, 0.02%; +0.02%)</title><rect x="1115.9" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1118.92" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="336.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="338.98" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::populate_slot (1 samples, 0.02%; 0.00%)</title><rect x="858.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.36" y="271.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.13%; 0.00%)</title><rect x="676.0" y="453" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.00" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (3 samples, 0.06%; 0.00%)</title><rect x="24.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="511.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="684.6" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="687.61" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (1 samples, 0.02%; +0.02%)</title><rect x="474.8" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="477.84" y="335.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.10%)</title><rect x="569.3" y="277" width="1.6" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="572.31" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="893.5" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.47" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="765.5" y="373" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="768.48" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="512.7" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="515.67" y="175.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="71.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.62" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; -0.02%)</title><rect x="1088.3" y="405" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1091.29" y="415.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%; +0.02%)</title><rect x="849.3" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="852.30" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="79.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.20" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="63.9" y="101" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.91" y="111.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (4 samples, 0.08%; +0.06%)</title><rect x="273.0" y="245" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="276.00" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (3 samples, 0.06%; 0.00%)</title><rect x="87.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.25" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (8 samples, 0.15%; +0.13%)</title><rect x="851.3" y="501" width="1.8" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="854.34" y="511.5" ></text>
</g>
<g >
<title>_Unwind_IteratePhdrCallback (1 samples, 0.02%; +0.02%)</title><rect x="13.9" y="597" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="16.85" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%; -0.04%)</title><rect x="834.8" y="373" width="1.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="837.80" y="383.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="64.1" y="53" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="67.14" y="63.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="757.1" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="760.10" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%; -0.06%)</title><rect x="1135.6" y="469" width="0.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1138.63" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="809.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.65" y="383.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (4 samples, 0.08%; +0.08%)</title><rect x="560.5" y="341" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="563.47" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="513.8" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="516.80" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="64.8" y="117" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.82" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; 0.00%)</title><rect x="782.5" y="165" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.47" y="175.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (20 samples, 0.38%; -0.06%)</title><rect x="908.4" y="357" width="4.6" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="911.42" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="37.2" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="40.18" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="625.7" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="628.71" y="463.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="662.0" y="485" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="664.96" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (4 samples, 0.08%; +0.04%)</title><rect x="1024.6" y="213" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1027.63" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (55 samples, 1.06%; 0.00%)</title><rect x="35.4" y="293" width="12.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.37" y="303.5" ></text>
</g>
<g >
<title>checked_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="820.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.07" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (7 samples, 0.13%; +0.02%)</title><rect x="590.1" y="421" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="593.15" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (100 samples, 1.92%; 0.00%)</title><rect x="876.3" y="405" width="22.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.25" y="415.5" >c..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_write_response_handler&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1130.2" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1133.20" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; -0.02%)</title><rect x="782.5" y="197" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="785.47" y="207.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="91.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.32" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="799.5" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="802.46" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (23 samples, 0.44%; 0.00%)</title><rect x="1116.6" y="373" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.60" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="988.4" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="991.39" y="303.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (7 samples, 0.13%; +0.08%)</title><rect x="993.1" y="277" width="1.6" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="996.14" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%; +0.02%)</title><rect x="795.8" y="213" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="798.84" y="223.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="497.7" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="500.72" y="335.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="223.5" ></text>
</g>
<g >
<title>schema::column_at (9 samples, 0.17%; +0.06%)</title><rect x="360.7" y="181" width="2.0" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="363.67" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (9 samples, 0.17%; -0.04%)</title><rect x="1079.7" y="325" width="2.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1082.68" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; +0.02%)</title><rect x="1037.3" y="293" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1040.32" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="144.8" y="453" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="147.79" y="463.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (6 samples, 0.12%; -0.02%)</title><rect x="1152.8" y="469" width="1.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1155.85" y="479.5" ></text>
</g>
<g >
<title>auth::resource::resource (10 samples, 0.19%; -0.02%)</title><rect x="764.1" y="389" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="767.12" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="639.1" y="485" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="642.08" y="495.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; +0.02%)</title><rect x="218.6" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="221.64" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.02%)</title><rect x="638.6" y="485" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="641.62" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="85.4" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.43" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="322.4" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="325.39" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;seastar::file_data_sink_impl::put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="383.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="870.1" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="873.14" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%; +0.04%)</title><rect x="741.9" y="309" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="744.92" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="175.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (92 samples, 1.77%; +0.02%)</title><rect x="777.9" y="277" width="20.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="780.94" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (3 samples, 0.06%; +0.06%)</title><rect x="201.4" y="245" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="204.42" y="255.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (2 samples, 0.04%; 0.00%)</title><rect x="857.5" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.45" y="287.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="700.5" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.47" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; 0.00%)</title><rect x="761.4" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.40" y="367.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="932.7" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="935.66" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.13" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="821.4" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="824.43" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="677.8" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="680.81" y="463.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%; -0.02%)</title><rect x="1079.0" y="309" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1082.00" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::deletable_row_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.32" y="175.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="814.6" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.64" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="223.5" ></text>
</g>
<g >
<title>database::query (18 samples, 0.35%; -0.02%)</title><rect x="111.3" y="501" width="4.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="114.26" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="308.3" y="341" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="311.34" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="75.7" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="78.69" y="399.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (3 samples, 0.06%; 0.00%)</title><rect x="1163.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.72" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="33.6" y="261" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="271.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1166.2" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="639.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="748.0" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.04" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="207.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24 samples, 0.46%; 0.00%)</title><rect x="1116.4" y="421" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.38" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="683.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.48" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="854.1" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="857.05" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="441.3" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="444.32" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (8 samples, 0.15%; -0.06%)</title><rect x="806.7" y="325" width="1.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="809.71" y="335.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="447.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%; 0.00%)</title><rect x="413.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.90" y="191.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%; 0.00%)</title><rect x="646.6" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.55" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="939.9" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="942.91" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="896.9" y="373" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="899.87" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.04%)</title><rect x="903.2" y="357" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="906.21" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (2 samples, 0.04%; +0.04%)</title><rect x="870.4" y="421" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="873.36" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="955.8" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="958.77" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="493.2" y="181" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="496.19" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="463.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%; -0.02%)</title><rect x="887.8" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="890.81" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.04%)</title><rect x="102.4" y="453" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="105.42" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="319.5" ></text>
</g>
<g >
<title>db::view::node_update_backlog::add_fetch (1 samples, 0.02%; 0.00%)</title><rect x="707.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.94" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1082.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1085.17" y="351.5" ></text>
</g>
<g >
<title>do_cql_test (285 samples, 5.47%; 0.00%)</title><rect x="27.0" y="549" width="64.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.99" y="559.5" >do_cql_..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%; +0.02%)</title><rect x="662.6" y="485" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="665.64" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.02%)</title><rect x="631.6" y="469" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="634.60" y="479.5" ></text>
</g>
<g >
<title>locator::local_strategy::get_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="54.9" y="277" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="57.85" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="255.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="798.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.78" y="287.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (38 samples, 0.73%; +0.02%)</title><rect x="723.3" y="405" width="8.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="726.35" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (9 samples, 0.17%; 0.00%)</title><rect x="57.6" y="309" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.57" y="319.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; +0.02%)</title><rect x="1071.5" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1074.52" y="287.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="649.3" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="652.27" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="684.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.38" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; +0.02%)</title><rect x="114.4" y="485" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="117.43" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; -0.04%)</title><rect x="260.3" y="165" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="263.32" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="290.2" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="293.22" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="824.2" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="827.15" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="1084.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (4 samples, 0.08%; +0.02%)</title><rect x="661.1" y="437" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="664.05" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="11.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.81" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="935.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="938.15" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1050.2" y="325" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1053.23" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="642.5" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="645.47" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="935.8" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="938.83" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (2 samples, 0.04%; +0.02%)</title><rect x="585.2" y="389" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="588.16" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;frozen_mutation const&gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="708.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.40" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (21 samples, 0.40%; -0.02%)</title><rect x="102.9" y="469" width="4.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="105.88" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1060.9" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1063.88" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="416.2" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="419.17" y="223.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%; -0.04%)</title><rect x="131.9" y="437" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="134.87" y="447.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; +0.02%)</title><rect x="564.5" y="309" width="1.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="567.55" y="319.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (4 samples, 0.08%; +0.06%)</title><rect x="571.1" y="277" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="574.12" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="814.4" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.41" y="319.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (31 samples, 0.60%; -0.08%)</title><rect x="489.8" y="293" width="7.0" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="492.79" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;database&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="431.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="303.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (2 samples, 0.04%; -0.02%)</title><rect x="535.6" y="261" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="538.55" y="271.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="846.4" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.35" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; -0.02%)</title><rect x="362.5" y="165" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="365.48" y="175.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="565" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="575.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (15 samples, 0.29%; +0.04%)</title><rect x="1014.4" y="165" width="3.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1017.44" y="175.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (14 samples, 0.27%; +0.06%)</title><rect x="917.0" y="373" width="3.2" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="920.03" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; +0.02%)</title><rect x="430.9" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="433.89" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="587.2" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="590.20" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,242 samples, 43.04%; -0.15%)</title><rect x="118.1" y="501" width="507.8" height="15.0" fill="rgb(80,80,255)" rx="2" ry="2" />
<text  x="121.06" y="511.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt; &gt;::then_impl_nrvo&lt;seastar::file_data_sink_impl::put (1 samples, 0.02%; 0.00%)</title><rect x="683.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.93" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.29" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.52%; -0.04%)</title><rect x="741.5" y="357" width="6.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="744.47" y="367.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; 0.00%)</title><rect x="702.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.73" y="415.5" ></text>
</g>
<g >
<title>database::has_keyspace (8 samples, 0.15%; 0.00%)</title><rect x="834.6" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.57" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="847.3" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="850.26" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="591.1" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="594.05" y="399.5" ></text>
</g>
<g >
<title>min_max_tracker&lt;int&gt;::update (1 samples, 0.02%; +0.02%)</title><rect x="13.2" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="16.17" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="654.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.71" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="110.1" y="453" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="113.13" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%; 0.00%)</title><rect x="648.8" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.82" y="415.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="1161.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.91" y="511.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%; +0.02%)</title><rect x="414.1" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="417.13" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%; +0.02%)</title><rect x="438.1" y="341" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="441.14" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="847.7" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="850.71" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; -0.02%)</title><rect x="505.0" y="277" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="507.97" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="798.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.55" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="456.7" y="341" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="459.72" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (3 samples, 0.06%; +0.06%)</title><rect x="735.4" y="389" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="738.35" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; -0.02%)</title><rect x="1005.2" y="197" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1008.15" y="207.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="807.6" y="293" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="810.62" y="303.5" ></text>
</g>
<g >
<title>row_cache::make_reader (2 samples, 0.04%; +0.04%)</title><rect x="451.7" y="357" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="454.74" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="824.4" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="827.38" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="101.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.52" y="495.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="1189.5" y="629" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1192.55" y="639.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%; 0.00%)</title><rect x="117.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.38" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%; +0.02%)</title><rect x="573.8" y="341" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="576.84" y="351.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%; +0.02%)</title><rect x="36.1" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="39.05" y="287.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (1 samples, 0.02%; +0.02%)</title><rect x="855.6" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="858.64" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::file_data_sink_impl::put (1 samples, 0.02%; 0.00%)</title><rect x="683.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.93" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; +0.02%)</title><rect x="43.5" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="46.53" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="255.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="523.3" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.32" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="438.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="441.82" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="383.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1161.2" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1164.23" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="1059.5" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1062.52" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="358.4" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="361.40" y="191.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::priority_class_data, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::lw_shared_ptr&lt;seastar::priority_class&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="609.4" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="612.40" y="447.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="447.0" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="449.98" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (1 samples, 0.02%; +0.02%)</title><rect x="865.2" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="868.15" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (2 samples, 0.04%; -0.02%)</title><rect x="50.8" y="357" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="53.78" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="30.8" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="33.84" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (22 samples, 0.42%; 0.00%)</title><rect x="1045.2" y="325" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.25" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="536.0" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.00" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; 0.00%)</title><rect x="834.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.57" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; +0.04%)</title><rect x="257.6" y="101" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="260.60" y="111.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (12 samples, 0.23%; -0.04%)</title><rect x="569.3" y="293" width="2.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="572.31" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="90.0" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.97" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="431.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="434.35" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="69.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.80" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.08%)</title><rect x="1022.4" y="197" width="2.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1025.37" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="748.9" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="751.94" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="1120.7" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1123.68" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.50" y="79.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%; +0.02%)</title><rect x="37.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="40.41" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%; -0.02%)</title><rect x="856.3" y="373" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="859.32" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="789.5" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="792.49" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (8 samples, 0.15%; -0.06%)</title><rect x="1007.0" y="213" width="1.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1009.96" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="517" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (11 samples, 0.21%; -0.06%)</title><rect x="750.1" y="405" width="2.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="753.08" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1036.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.41" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (2 samples, 0.04%; -0.02%)</title><rect x="39.0" y="229" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="42.00" y="239.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="744.4" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="747.41" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (7 samples, 0.13%; +0.08%)</title><rect x="278.9" y="165" width="1.6" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="281.89" y="175.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="141.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="144.84" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="929.0" y="357" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="932.04" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="904.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="907.57" y="351.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (5 samples, 0.10%; -0.04%)</title><rect x="45.3" y="245" width="1.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="48.34" y="255.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (16 samples, 0.31%; -0.12%)</title><rect x="314.9" y="309" width="3.6" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="317.91" y="319.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::truncate_statement*, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="73.7" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="76.66" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="939.0" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="942.00" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (10 samples, 0.19%; +0.04%)</title><rect x="943.3" y="373" width="2.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="946.31" y="383.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="27.4" y="485" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="30.44" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="102.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="105.65" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (15 samples, 0.29%; -0.02%)</title><rect x="511.1" y="229" width="3.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="514.09" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="1044.6" y="293" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1047.57" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; +0.02%)</title><rect x="275.9" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="278.95" y="239.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%; 0.00%)</title><rect x="49.0" y="357" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="1145.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.60" y="415.5" ></text>
</g>
<g >
<title>utils::filter::bloom_filter::add (1 samples, 0.02%; +0.02%)</title><rect x="12.9" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="15.94" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.04%)</title><rect x="1094.2" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1097.18" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (55 samples, 1.06%; 0.00%)</title><rect x="35.4" y="309" width="12.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.37" y="319.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="101.7" y="469" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.75" y="479.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.02%)</title><rect x="492.7" y="213" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="495.74" y="223.5" ></text>
</g>
<g >
<title>db::schema_tables::with_merge_lock (1 samples, 0.02%; 0.00%)</title><rect x="116.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.24" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (38 samples, 0.73%; +0.02%)</title><rect x="1122.3" y="341" width="8.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1125.27" y="351.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="563.6" y="325" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="566.64" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (6 samples, 0.12%; 0.00%)</title><rect x="855.0" y="389" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.96" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::do_wait (1 samples, 0.02%; 0.00%)</title><rect x="27.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.99" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%; +0.02%)</title><rect x="855.2" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="858.19" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_users_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="77.1" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="80.05" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="998.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.58" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="853.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%; +0.02%)</title><rect x="218.0" y="213" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="220.96" y="223.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (90 samples, 1.73%; -0.02%)</title><rect x="876.9" y="389" width="20.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="879.93" y="399.5" ></text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%; +0.02%)</title><rect x="34.7" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="37.69" y="223.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1117.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.51" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (3 samples, 0.06%; +0.04%)</title><rect x="546.4" y="421" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="549.43" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (37 samples, 0.71%; +0.04%)</title><rect x="210.7" y="245" width="8.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="213.71" y="255.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1124.5" y="165" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1127.53" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="1099.8" y="389" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1102.84" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; 0.00%)</title><rect x="607.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.14" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="88.6" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="91.61" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,116 samples, 21.42%; 0.00%)</title><rect x="862.9" y="469" width="252.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.89" y="479.5" >seastar::noncopyable_function&lt;sea..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="201.0" y="245" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="203.97" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="335.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; -0.02%)</title><rect x="1059.1" y="293" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1062.07" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="255.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="89.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.74" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; 0.00%)</title><rect x="573.8" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.84" y="367.5" ></text>
</g>
<g >
<title>sstables::file_writer::close (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="479.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="581" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (2 samples, 0.04%; +0.02%)</title><rect x="419.3" y="197" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="422.34" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="698.7" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="701.65" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="69.1" y="117" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="72.12" y="127.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="564.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="567.32" y="319.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%; +0.04%)</title><rect x="249.4" y="85" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="252.44" y="95.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="831.2" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.17" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="89.7" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="92.74" y="383.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="1081.7" y="325" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1084.72" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.17" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%; +0.12%)</title><rect x="816.7" y="325" width="3.1" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="819.68" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="640.2" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="643.21" y="463.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1079.5" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1082.45" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="286.1" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="289.14" y="255.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%; 0.00%)</title><rect x="281.6" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.61" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="62.6" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="65.56" y="191.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="626.2" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="629.16" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="239.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.23%; +0.12%)</title><rect x="154.5" y="437" width="2.7" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="157.53" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="642.9" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="645.93" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%; +0.04%)</title><rect x="350.2" y="181" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="353.25" y="191.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; 0.00%)</title><rect x="823.2" y="421" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.25" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="647.7" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="650.68" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="114.0" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="116.98" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (3 samples, 0.06%; 0.00%)</title><rect x="1163.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.72" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="705.9" y="405" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="708.90" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="577.7" y="341" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="580.69" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.35" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="239.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%; 0.00%)</title><rect x="211.6" y="213" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="214.61" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="772.7" y="309" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="775.73" y="319.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="301.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.32" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="229" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="239.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="493.2" y="197" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="496.19" y="207.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (2 samples, 0.04%; +0.04%)</title><rect x="1094.6" y="357" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1097.63" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="108.5" y="437" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="111.54" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; 0.00%)</title><rect x="546.0" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="548.97" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="456.0" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="459.04" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24 samples, 0.46%; 0.00%)</title><rect x="1116.4" y="389" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.38" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1130.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (71 samples, 1.36%; +0.04%)</title><rect x="1063.6" y="325" width="16.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1066.60" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="53.7" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="56.72" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="1122.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.49" y="319.5" ></text>
</g>
<g >
<title>row::apply_monotonically (3 samples, 0.06%; 0.00%)</title><rect x="24.7" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (3 samples, 0.06%; 0.00%)</title><rect x="197.8" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="200.79" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (3 samples, 0.06%; 0.00%)</title><rect x="1130.2" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.20" y="207.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (63 samples, 1.21%; 0.00%)</title><rect x="559.1" y="389" width="14.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="562.11" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1123.6" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1126.63" y="255.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="399.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; +0.02%)</title><rect x="714.3" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="717.28" y="479.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="25.0" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="27.95" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (9 samples, 0.17%; +0.15%)</title><rect x="326.7" y="373" width="2.0" height="15.0" fill="rgb(255,80,80)" rx="2" ry="2" />
<text  x="329.69" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="303.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.13%; -0.08%)</title><rect x="530.1" y="293" width="1.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="533.12" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (238 samples, 4.57%; +0.08%)</title><rect x="219.1" y="245" width="53.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="222.09" y="255.5" >parti..</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%; +0.02%)</title><rect x="498.2" y="325" width="2.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="501.17" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="414.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="417.36" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="657.9" y="485" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="660.88" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (9 samples, 0.17%; 0.00%)</title><rect x="930.6" y="389" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.62" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (41 samples, 0.79%; -0.10%)</title><rect x="276.2" y="229" width="9.3" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="279.17" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%; +0.06%)</title><rect x="1052.0" y="325" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1055.04" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="63.7" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="143.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (21 samples, 0.40%; -0.04%)</title><rect x="492.1" y="229" width="4.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="495.06" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (100 samples, 1.92%; +0.06%)</title><rect x="898.9" y="405" width="22.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="901.91" y="415.5" >c..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="617.6" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="620.56" y="383.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="59.2" y="197" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="62.16" y="207.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="127.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (8 samples, 0.15%; +0.08%)</title><rect x="1154.2" y="469" width="1.8" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1157.21" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.13%; -0.04%)</title><rect x="746.0" y="277" width="1.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="749.00" y="287.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="853.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="287.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="37" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="47.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="143.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (1 samples, 0.02%; 0.00%)</title><rect x="690.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.73" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="260.1" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.09" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; +0.02%)</title><rect x="467.4" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="470.37" y="319.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="239.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.87" y="207.5" ></text>
</g>
<g >
<title>executor&lt;test_read (597 samples, 11.46%; -0.06%)</title><rect x="714.1" y="485" width="135.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="717.06" y="495.5" >executor&lt;test_read</text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__199 (1 samples, 0.02%; 0.00%)</title><rect x="44.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.66" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="573.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.16" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="271.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="832.8" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.76" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="59.2" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.16" y="143.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%; +0.02%)</title><rect x="574.7" y="357" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="577.74" y="367.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%; +0.02%)</title><rect x="672.8" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="675.83" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="285.2" y="181" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="288.24" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (14 samples, 0.27%; 0.00%)</title><rect x="514.7" y="245" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="517.71" y="255.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (154 samples, 2.96%; -0.12%)</title><rect x="770.7" y="341" width="34.9" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="773.69" y="351.5" >se..</text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="572.5" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="575.48" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (39 samples, 0.75%; 0.00%)</title><rect x="684.8" y="501" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.84" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="335.5" y="245" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="338.53" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; 0.00%)</title><rect x="90.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.87" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (123 samples, 2.36%; 0.00%)</title><rect x="558.9" y="421" width="27.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.88" y="431.5" >s..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="131.6" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="134.65" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.30" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (15 samples, 0.29%; 0.00%)</title><rect x="260.3" y="181" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.32" y="191.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="259.6" y="165" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="262.64" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (87 samples, 1.67%; 0.00%)</title><rect x="1062.5" y="341" width="19.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1065.46" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="52.1" y="117" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="55.13" y="127.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="35.1" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.14" y="191.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="809.9" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="812.88" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (17 samples, 0.33%; 0.00%)</title><rect x="266.7" y="197" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="269.66" y="207.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (2 samples, 0.04%; +0.02%)</title><rect x="360.2" y="181" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="363.22" y="191.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="66.0" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.95" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.04%)</title><rect x="1054.5" y="309" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1057.53" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%; +0.04%)</title><rect x="415.7" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="418.72" y="239.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="510.4" y="197" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="513.41" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; +0.04%)</title><rect x="650.0" y="469" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="652.95" y="479.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; +0.02%)</title><rect x="949.2" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="952.20" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; -0.02%)</title><rect x="33.6" y="245" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="36.56" y="255.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (2 samples, 0.04%; +0.02%)</title><rect x="394.2" y="213" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="397.20" y="223.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (52 samples, 1.00%; -0.02%)</title><rect x="720.2" y="437" width="11.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="723.17" y="447.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; -0.04%)</title><rect x="318.8" y="293" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="321.76" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%; +0.02%)</title><rect x="853.1" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="856.15" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="539.4" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="542.40" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="1106.6" y="373" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1109.64" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="896.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.96" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (50 samples, 0.96%; +0.02%)</title><rect x="275.0" y="261" width="11.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="278.04" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="602.8" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="605.83" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.04%)</title><rect x="720.9" y="389" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="723.85" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (4 samples, 0.08%; +0.02%)</title><rect x="295.7" y="277" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="298.66" y="287.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (3 samples, 0.06%; 0.00%)</title><rect x="980.0" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="983.01" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="1158.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.74" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="962.3" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="965.34" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="621.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.95" y="447.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (19 samples, 0.36%; -0.17%)</title><rect x="1067.2" y="245" width="4.3" height="15.0" fill="rgb(64,64,255)" rx="2" ry="2" />
<text  x="1070.22" y="255.5" ></text>
</g>
<g >
<title>database::find_column_family (10 samples, 0.19%; +0.02%)</title><rect x="1042.8" y="341" width="2.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1045.75" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="88.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.15" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (1 samples, 0.02%; 0.00%)</title><rect x="1189.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.32" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="1134.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.05" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (8 samples, 0.15%; +0.02%)</title><rect x="675.8" y="469" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="678.77" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.02%)</title><rect x="709.1" y="501" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="712.07" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="291.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="294.35" y="271.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (3 samples, 0.06%; +0.06%)</title><rect x="1038.5" y="293" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1041.45" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.06%)</title><rect x="1146.3" y="373" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1149.28" y="383.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.32" y="223.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%; +0.04%)</title><rect x="938.6" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="941.55" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="1020.6" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1023.55" y="207.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%; -0.02%)</title><rect x="313.8" y="309" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="316.78" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.08%)</title><rect x="1103.5" y="421" width="0.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1106.47" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::deletable_row_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.32" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (4 samples, 0.08%; +0.02%)</title><rect x="620.0" y="421" width="1.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="623.05" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (19 samples, 0.36%; +0.10%)</title><rect x="755.1" y="357" width="4.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="758.06" y="367.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="853.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="501.3" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="504.35" y="319.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="116.9" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="119.92" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (2 samples, 0.04%; 0.00%)</title><rect x="751.9" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.89" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.12%; +0.06%)</title><rect x="337.1" y="261" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="340.11" y="271.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="585.6" y="389" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="588.62" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (407 samples, 7.81%; 0.00%)</title><rect x="451.1" y="389" width="92.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.06" y="399.5" >std::functi..</text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="303.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="463.3" y="245" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="466.29" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="59.8" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="62.84" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.02%)</title><rect x="55.1" y="149" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="58.08" y="159.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%; 0.00%)</title><rect x="1119.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.55" y="255.5" ></text>
</g>
<g >
<title>dht::tri_compare (10 samples, 0.19%; -0.08%)</title><rect x="1069.3" y="229" width="2.2" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1072.26" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.12%; -0.02%)</title><rect x="739.0" y="357" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="741.98" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (5 samples, 0.10%; +0.06%)</title><rect x="894.2" y="325" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="897.15" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; +0.02%)</title><rect x="895.7" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="898.74" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="351.5" ></text>
</g>
<g >
<title>query_result_builder::consume (186 samples, 3.57%; +0.02%)</title><rect x="352.1" y="213" width="42.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="355.06" y="223.5" >que..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%; +0.02%)</title><rect x="823.0" y="437" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="826.02" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%; +0.04%)</title><rect x="737.8" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="740.84" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="785.0" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="787.96" y="207.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.51" y="223.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="511.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (15 samples, 0.29%; +0.02%)</title><rect x="1175.3" y="613" width="3.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1178.28" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="63.7" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="159.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; 0.00%)</title><rect x="107.9" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.86" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; -0.02%)</title><rect x="52.1" y="309" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="55.13" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="1084.2" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1087.21" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="549.4" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="552.37" y="351.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="63.7" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="127.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%; 0.00%)</title><rect x="34.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.69" y="255.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="887.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="890.81" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="853.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.42" y="191.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; +0.04%)</title><rect x="225.9" y="181" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="228.88" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="264.2" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="267.17" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1130.6" y="133" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1133.65" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.35" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; -0.10%)</title><rect x="754.6" y="341" width="0.5" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="757.61" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="798.6" y="229" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="801.55" y="239.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1036.2" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.19" y="207.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (97 samples, 1.86%; +0.02%)</title><rect x="777.7" y="293" width="22.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="780.71" y="303.5" >s..</text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::deletable_row_view&gt;::doit&lt;seastar::simple_memory_input_stream, utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.32" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (37 samples, 0.71%; 0.00%)</title><rect x="78.2" y="437" width="8.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.19" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.04%)</title><rect x="887.4" y="261" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="890.35" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="67.3" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="70.31" y="207.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="591.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Lexer (1 samples, 0.02%; +0.02%)</title><rect x="31.7" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="34.75" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="415.5" ></text>
</g>
<g >
<title>row::external_memory_usage (18 samples, 0.35%; +0.02%)</title><rect x="255.3" y="149" width="4.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="258.33" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (485 samples, 9.31%; 0.00%)</title><rect x="329.6" y="373" width="109.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="332.64" y="383.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%; 0.00%)</title><rect x="628.2" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="631.20" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="663.3" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="666.32" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%; +0.02%)</title><rect x="270.7" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="273.74" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="447.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;single_fragment_range&lt; (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="60.5" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%; -0.02%)</title><rect x="158.8" y="421" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="161.83" y="431.5" ></text>
</g>
<g >
<title>posix_memalign (11 samples, 0.21%; 0.00%)</title><rect x="243.3" y="53" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="246.33" y="63.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="255.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (6 samples, 0.12%; +0.06%)</title><rect x="729.9" y="293" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="732.92" y="303.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="49.2" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.19" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (12 samples, 0.23%; +0.02%)</title><rect x="1144.9" y="421" width="2.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1147.92" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.98" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="954.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.95" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="1025.3" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1028.31" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; -0.04%)</title><rect x="492.5" y="213" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="495.51" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="692.1" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="695.08" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.06%)</title><rect x="524.7" y="325" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="527.68" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::reactor::open_directory (1 samples, 0.02%; 0.00%)</title><rect x="669.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.21" y="511.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (310 samples, 5.95%; +0.10%)</title><rect x="968.9" y="357" width="70.2" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="971.91" y="367.5" >service..</text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (34 samples, 0.65%; -0.02%)</title><rect x="481.4" y="309" width="7.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="484.41" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.08%; +0.08%)</title><rect x="1029.6" y="261" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1032.62" y="271.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.08%)</title><rect x="802.0" y="309" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="804.95" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (14 samples, 0.27%; +0.04%)</title><rect x="1096.0" y="389" width="3.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1098.99" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; 0.00%)</title><rect x="110.6" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.58" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.12%)</title><rect x="554.6" y="389" width="1.6" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="557.58" y="399.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%; +0.02%)</title><rect x="1115.2" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1118.24" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.04%)</title><rect x="796.7" y="245" width="1.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="799.74" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="709.5" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="712.53" y="511.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1052.9" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1055.95" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="835.5" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.48" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="701.6" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="704.60" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%; +0.02%)</title><rect x="61.9" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="64.88" y="255.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; +0.02%)</title><rect x="520.1" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="523.15" y="335.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (10 samples, 0.19%; -0.02%)</title><rect x="529.4" y="309" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="532.44" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="594.9" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="597.90" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::stats (9 samples, 0.17%; +0.08%)</title><rect x="498.4" y="309" width="2.0" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="501.40" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (5 samples, 0.10%; +0.06%)</title><rect x="296.6" y="277" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="299.56" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="11.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="319.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="11.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="14.36" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (29 samples, 0.56%; 0.00%)</title><rect x="974.1" y="341" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.12" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (2 samples, 0.04%; +0.04%)</title><rect x="450.6" y="389" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="453.60" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.84" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="319.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="693.2" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="696.22" y="495.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%; +0.02%)</title><rect x="596.3" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="599.26" y="447.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.91" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="239.5" ></text>
</g>
<g >
<title>evictable_reader::recreate_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="207.5" ></text>
</g>
<g >
<title>memtable::apply (13 samples, 0.25%; 0.00%)</title><rect x="1117.1" y="261" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.06" y="271.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (1 samples, 0.02%; +0.02%)</title><rect x="535.1" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="538.10" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="255.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="959.4" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="962.39" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; -0.02%)</title><rect x="49.6" y="309" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="52.64" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (297 samples, 5.70%; 0.00%)</title><rect x="753.5" y="421" width="67.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.47" y="431.5" >cql3::s..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="58.5" y="293" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.48" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="764.8" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="767.80" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="647.0" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="650.01" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.02%)</title><rect x="1113.4" y="421" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1116.43" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="60.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.06" y="287.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="744.0" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="746.96" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (4 samples, 0.08%; -0.04%)</title><rect x="1016.9" y="149" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1019.93" y="159.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; +0.02%)</title><rect x="835.9" y="341" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="838.93" y="351.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="80.0" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="83.00" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%; 0.00%)</title><rect x="952.8" y="341" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.82" y="351.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%; +0.06%)</title><rect x="44.0" y="245" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="46.98" y="255.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (13 samples, 0.25%; 0.00%)</title><rect x="1122.9" y="277" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.95" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="421.2" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="424.15" y="239.5" ></text>
</g>
<g >
<title>db::filter_for_query (7 samples, 0.13%; +0.04%)</title><rect x="1051.1" y="341" width="1.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1054.14" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="708.4" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="711.40" y="447.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (23 samples, 0.44%; -0.02%)</title><rect x="854.1" y="485" width="5.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="857.05" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (24 samples, 0.46%; 0.00%)</title><rect x="1116.4" y="453" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.38" y="463.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="945.8" y="405" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.80" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="711.3" y="501" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="714.34" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="53.0" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="56.04" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="888.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.03" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%; -0.04%)</title><rect x="352.3" y="197" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="355.29" y="207.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (6 samples, 0.12%; -0.04%)</title><rect x="386.7" y="149" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="389.72" y="159.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%; +0.04%)</title><rect x="198.9" y="229" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="201.93" y="239.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1124.5" y="181" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1127.53" y="191.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::operation&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="640.7" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="643.66" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%; +0.04%)</title><rect x="944.7" y="309" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="947.67" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="891.2" y="357" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="894.21" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%; 0.00%)</title><rect x="348.4" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="351.44" y="175.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; -0.02%)</title><rect x="618.2" y="421" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="621.24" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="505.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.42" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;database, false&gt;::make&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="84.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.76" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="792.0" y="149" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.99" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (9 samples, 0.17%; 0.00%)</title><rect x="659.9" y="453" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.92" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; 0.00%)</title><rect x="822.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.11" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="69.6" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="72.58" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.10%)</title><rect x="974.3" y="309" width="0.5" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="977.34" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; +0.04%)</title><rect x="437.5" y="325" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="440.46" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="479.5" ></text>
</g>
<g >
<title>database::has_keyspace (19 samples, 0.36%; +0.02%)</title><rect x="826.9" y="421" width="4.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="829.87" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (2 samples, 0.04%; +0.04%)</title><rect x="759.6" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="762.59" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (150 samples, 2.88%; 0.00%)</title><rect x="226.3" y="181" width="34.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="229.34" y="191.5" >mu..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="271.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="141.6" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="144.61" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (25 samples, 0.48%; +0.02%)</title><rect x="61.2" y="293" width="5.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="64.20" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="554.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="557.35" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%; 0.00%)</title><rect x="11.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="271.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (2 samples, 0.04%; 0.00%)</title><rect x="12.0" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="11.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="303.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%; +0.06%)</title><rect x="746.9" y="261" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="749.91" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (7 samples, 0.13%; +0.04%)</title><rect x="515.2" y="229" width="1.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="518.16" y="239.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%; 0.00%)</title><rect x="669.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.21" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (389 samples, 7.47%; 0.00%)</title><rect x="203.9" y="309" width="88.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="206.91" y="319.5" >partition_..</text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; +0.04%)</title><rect x="598.1" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="601.07" y="415.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; -0.02%)</title><rect x="642.2" y="469" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="645.25" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="472.8" y="277" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="475.80" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (3 samples, 0.06%; 0.00%)</title><rect x="856.8" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (11 samples, 0.21%; +0.02%)</title><rect x="745.1" y="293" width="2.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="748.09" y="303.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (3 samples, 0.06%; -0.02%)</title><rect x="351.2" y="181" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="354.16" y="191.5" ></text>
</g>
<g >
<title>main (4,737 samples, 90.94%; 0.00%)</title><rect x="91.8" y="613" width="1073.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="623.5" >main</text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; +0.02%)</title><rect x="1117.3" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1120.28" y="127.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%; +0.04%)</title><rect x="351.2" y="165" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="354.16" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="126.9" y="437" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="129.89" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (9 samples, 0.17%; 0.00%)</title><rect x="714.7" y="453" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.74" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="804.4" y="309" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="807.44" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="413.0" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="416.00" y="159.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="30.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.15%; 0.00%)</title><rect x="781.8" y="229" width="13.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.79" y="239.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::operator new (1 samples, 0.02%; +0.02%)</title><rect x="32.9" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="35.88" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="916.1" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="919.12" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1100.5" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1103.52" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="280.5" y="213" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="283.48" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.27%; -0.10%)</title><rect x="1005.6" y="229" width="3.2" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="1008.60" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.10%; 0.00%)</title><rect x="24.7" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="207.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="303.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%; 0.00%)</title><rect x="295.2" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="298.20" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; -0.06%)</title><rect x="609.6" y="437" width="0.7" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="612.63" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (3 samples, 0.06%; +0.06%)</title><rect x="470.5" y="261" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="473.54" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="293" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (4 samples, 0.08%; +0.04%)</title><rect x="302.7" y="325" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="305.68" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="738.5" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="741.52" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%; 0.00%)</title><rect x="12.0" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="785.4" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="788.42" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%; 0.00%)</title><rect x="968.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.68" y="367.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="65.7" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="68.73" y="223.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%; 0.00%)</title><rect x="838.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.42" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="191.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (37 samples, 0.71%; 0.00%)</title><rect x="586.7" y="437" width="8.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="589.75" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="85.9" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="88.89" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; -0.06%)</title><rect x="309.0" y="341" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="312.02" y="351.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="1128.6" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1131.61" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="972.5" y="261" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="975.53" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="546.9" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="549.88" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; -0.02%)</title><rect x="348.9" y="165" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="351.89" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.04%)</title><rect x="825.7" y="421" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="828.74" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="259.4" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.41" y="175.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="479.1" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="482.15" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.13%; +0.02%)</title><rect x="129.8" y="437" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="132.83" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (8 samples, 0.15%; -0.04%)</title><rect x="922.5" y="405" width="1.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="925.47" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1130.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (22 samples, 0.42%; 0.00%)</title><rect x="854.3" y="421" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="431.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="463.5" ></text>
</g>
<g >
<title>query_state::query_state (22 samples, 0.42%; -0.06%)</title><rect x="596.7" y="437" width="5.0" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="599.72" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.74" y="239.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (1 samples, 0.02%; +0.02%)</title><rect x="850.9" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="853.88" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="50.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="53.78" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1030.7" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1033.75" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (2 samples, 0.04%; +0.02%)</title><rect x="1139.5" y="453" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1142.48" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (39 samples, 0.75%; -0.21%)</title><rect x="237.0" y="101" width="8.8" height="15.0" fill="rgb(32,32,255)" rx="2" ry="2" />
<text  x="239.98" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1109.4" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1112.35" y="383.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::create_table_statement::raw_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="71.6" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="74.62" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="49.0" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (57 samples, 1.09%; +0.10%)</title><rect x="1090.1" y="421" width="12.9" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="1093.10" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="223.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="821.7" y="421" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="824.66" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="642.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="645.70" y="479.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (2 samples, 0.04%; 0.00%)</title><rect x="88.8" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.83" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="27.7" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="30.67" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1095.8" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1098.76" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="53.7" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.72" y="175.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (10 samples, 0.19%; +0.02%)</title><rect x="673.1" y="453" width="2.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="676.06" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="175.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%; -0.04%)</title><rect x="186.5" y="309" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="189.47" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="464.6" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="467.65" y="303.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (2 samples, 0.04%; +0.04%)</title><rect x="1081.3" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1084.27" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="640.0" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="642.98" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="159.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%; -0.02%)</title><rect x="577.0" y="357" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="580.01" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.35" y="287.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::query_partition_key_range_concurrent_result&gt;, service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="511.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%; +0.02%)</title><rect x="319.9" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="322.89" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="82.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.26" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="816.0" y="325" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="819.00" y="335.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (9 samples, 0.17%; 0.00%)</title><rect x="381.7" y="165" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="384.74" y="175.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (4 samples, 0.08%; +0.04%)</title><rect x="721.8" y="405" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="724.76" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="973.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.98" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="287.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.02%)</title><rect x="138.7" y="405" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="141.67" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="846.4" y="421" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="849.35" y="431.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%; +0.02%)</title><rect x="992.0" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="995.01" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1109.6" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1112.58" y="399.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; 0.00%)</title><rect x="920.2" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="923.20" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1018.5" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1021.52" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="618.0" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="621.01" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%; +0.06%)</title><rect x="874.2" y="405" width="2.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="877.22" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (10 samples, 0.19%; -0.02%)</title><rect x="465.1" y="309" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="468.10" y="319.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="115.8" y="53" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="118.79" y="63.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (10 samples, 0.19%; +0.15%)</title><rect x="14.1" y="581" width="2.2" height="15.0" fill="rgb(255,80,80)" rx="2" ry="2" />
<text  x="17.08" y="591.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (2 samples, 0.04%; +0.04%)</title><rect x="458.3" y="325" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="461.30" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="84.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.76" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="50.1" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="53.10" y="159.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="646.3" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="649.33" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="65.3" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="207.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="807.2" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="810.16" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (562 samples, 10.79%; 0.00%)</title><rect x="717.0" y="469" width="127.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.00" y="479.5" >single_node_cql..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (472 samples, 9.06%; +0.04%)</title><rect x="330.5" y="325" width="107.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="333.54" y="335.5" >seastar::inte..</text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%; 0.00%)</title><rect x="40.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.36" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="85" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="71.90" y="95.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="323.7" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="326.75" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="54.4" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.40" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%; +0.02%)</title><rect x="1029.2" y="261" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1032.16" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; +0.02%)</title><rect x="1129.1" y="165" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1132.06" y="175.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="511.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%; +0.02%)</title><rect x="1032.3" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1035.33" y="287.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (6 samples, 0.12%; 0.00%)</title><rect x="38.5" y="261" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.54" y="271.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (5 samples, 0.10%; -0.02%)</title><rect x="983.4" y="277" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="986.40" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (52 samples, 1.00%; 0.00%)</title><rect x="56.0" y="325" width="11.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.99" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (146 samples, 2.80%; +0.02%)</title><rect x="999.0" y="277" width="33.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1002.03" y="287.5" >se..</text>
</g>
<g >
<title>logalloc::region_group::top_region_evictable_space (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="14.13" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.0" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="61.02" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="215.5" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="218.46" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="11.1" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (11 samples, 0.21%; -0.02%)</title><rect x="316.0" y="293" width="2.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="319.04" y="303.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%; +0.02%)</title><rect x="340.3" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="343.28" y="239.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="383.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.84%; +0.08%)</title><rect x="1179.1" y="629" width="10.0" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1182.13" y="639.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="383.5" ></text>
</g>
<g >
<title>utils::filter::bloom_filter::add (1 samples, 0.02%; +0.02%)</title><rect x="12.7" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="15.72" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (3 samples, 0.06%; +0.04%)</title><rect x="46.7" y="261" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="49.70" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="856.5" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="859.55" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="857.0" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="860.00" y="207.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="456.3" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="459.27" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="843.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.86" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="652.0" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="654.99" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="11.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.06%)</title><rect x="144.1" y="453" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="147.11" y="463.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (42 samples, 0.81%; 0.00%)</title><rect x="14.1" y="613" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.08" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (48 samples, 0.92%; +0.08%)</title><rect x="309.2" y="357" width="10.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="312.25" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="265.5" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="268.53" y="223.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (2 samples, 0.04%; +0.04%)</title><rect x="496.8" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="499.82" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="1112.5" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1115.53" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (9 samples, 0.17%; +0.02%)</title><rect x="893.2" y="341" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="896.24" y="351.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="243.1" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="246.10" y="79.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; 0.00%)</title><rect x="1122.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.49" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (13 samples, 0.25%; 0.00%)</title><rect x="388.1" y="165" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="391.08" y="175.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="215.9" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.92" y="223.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (8 samples, 0.15%; 0.00%)</title><rect x="139.6" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="191.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="1021.2" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1024.23" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1162.4" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1165.36" y="511.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; 0.00%)</title><rect x="601.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.70" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.30" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="637.5" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="640.49" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="239.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.59" y="239.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; -0.02%)</title><rect x="807.4" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="810.39" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (4 samples, 0.08%; 0.00%)</title><rect x="69.6" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%; -0.06%)</title><rect x="663.3" y="469" width="0.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="666.32" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (2 samples, 0.04%; +0.02%)</title><rect x="1099.2" y="405" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1102.16" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%; 0.00%)</title><rect x="258.7" y="117" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.73" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (2 samples, 0.04%; +0.02%)</title><rect x="799.0" y="277" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="802.01" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; -0.02%)</title><rect x="788.4" y="149" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="791.36" y="159.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="1126.1" y="165" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.12" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.23%; +0.04%)</title><rect x="245.8" y="117" width="2.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="248.82" y="127.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (19 samples, 0.36%; 0.00%)</title><rect x="1116.6" y="309" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.60" y="319.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="602.4" y="405" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="605.38" y="415.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.55" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (2 samples, 0.04%; -0.02%)</title><rect x="84.1" y="325" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="87.08" y="335.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (3 samples, 0.06%; -0.02%)</title><rect x="1120.9" y="293" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1123.91" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="1108.9" y="373" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1111.90" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.15%; 0.00%)</title><rect x="252.6" y="117" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="255.61" y="127.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="505.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.42" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%; 0.00%)</title><rect x="396.7" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="399.69" y="175.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (16 samples, 0.31%; 0.00%)</title><rect x="103.8" y="437" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="106.78" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (65 samples, 1.25%; 0.00%)</title><rect x="780.7" y="261" width="14.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="783.66" y="271.5" ></text>
</g>
<g >
<title>compare_row_marker_for_merge (1 samples, 0.02%; +0.02%)</title><rect x="1118.2" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1121.19" y="223.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="778.8" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.85" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="61.4" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="64.42" y="159.5" ></text>
</g>
<g >
<title>database::find_schema (23 samples, 0.44%; -0.02%)</title><rect x="754.2" y="405" width="5.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="757.15" y="415.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="63.7" y="85" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="66.69" y="95.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="658.6" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="661.56" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (2 samples, 0.04%; 0.00%)</title><rect x="605.3" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.32" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%; -0.02%)</title><rect x="1124.1" y="197" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1127.08" y="207.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="686.4" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="689.42" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="479.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; -0.02%)</title><rect x="263.3" y="149" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="266.26" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (12 samples, 0.23%; 0.00%)</title><rect x="511.1" y="213" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="514.09" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (285 samples, 5.47%; 0.00%)</title><rect x="27.0" y="565" width="64.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.99" y="575.5" >std::_F..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="584.9" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="587.94" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="71.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.39" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (11 samples, 0.21%; +0.04%)</title><rect x="652.4" y="453" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="655.44" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="722.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.44" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (2 samples, 0.04%; 0.00%)</title><rect x="210.3" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.25" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="31.1" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="34.07" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (5 samples, 0.10%; +0.02%)</title><rect x="928.6" y="389" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="931.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%; -0.04%)</title><rect x="37.6" y="261" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="40.64" y="271.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,133 samples, 21.75%; -0.02%)</title><rect x="859.3" y="485" width="256.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="862.26" y="495.5" >seastar::concrete_execution_stage&lt;..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="725.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.61" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="466.2" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="469.23" y="287.5" ></text>
</g>
<g >
<title>query::result::builder::builder (1 samples, 0.02%; +0.02%)</title><rect x="596.0" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="599.04" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (2 samples, 0.04%; -0.10%)</title><rect x="210.3" y="229" width="0.4" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="213.25" y="239.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (3 samples, 0.06%; 0.00%)</title><rect x="159.5" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.51" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_service_level_statement, std::default_delete&lt;cql3::statements::drop_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_service_level_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.07" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_group::update_maximal_rg (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="303.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.15%; 0.00%)</title><rect x="588.3" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="591.33" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%; +0.02%)</title><rect x="66.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="69.41" y="271.5" ></text>
</g>
<g >
<title>set_value&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="857.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.00" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1086.7" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1089.70" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (19 samples, 0.36%; 0.00%)</title><rect x="855.0" y="405" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.96" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%; +0.02%)</title><rect x="1125.2" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1128.21" y="191.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="552.8" y="325" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="555.77" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="484.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="487.36" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="503.2" y="277" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="506.16" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="213" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.59" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%; 0.00%)</title><rect x="32.2" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (27 samples, 0.52%; +0.02%)</title><rect x="933.3" y="405" width="6.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="936.34" y="415.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (1 samples, 0.02%; +0.02%)</title><rect x="107.4" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="110.41" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (11 samples, 0.21%; +0.02%)</title><rect x="1096.7" y="373" width="2.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1099.67" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.43" y="335.5" ></text>
</g>
<g >
<title>db::schema_tables::make_create_table_mutations (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1130.0" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1132.97" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="649.5" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="652.50" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="436.3" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="439.33" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (9 samples, 0.17%; 0.00%)</title><rect x="1043.0" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.98" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1026.0" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1028.99" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="645.9" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="648.87" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (2 samples, 0.04%; +0.02%)</title><rect x="417.8" y="229" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="420.76" y="239.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (20 samples, 0.38%; +0.04%)</title><rect x="787.5" y="165" width="4.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="790.45" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="127.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="63.9" y="117" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.91" y="127.5" ></text>
</g>
<g >
<title>service::shared_mutation::is_shared (1 samples, 0.02%; +0.02%)</title><rect x="1123.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1126.40" y="271.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; 0.00%)</title><rect x="1128.8" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.84" y="159.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;long&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.1" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1129.12" y="159.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.04%)</title><rect x="1098.7" y="357" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1101.71" y="367.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="808.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.30" y="287.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1140.8" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1143.84" y="415.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (11 samples, 0.21%; 0.00%)</title><rect x="88.2" y="485" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.15" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (5 samples, 0.10%; +0.02%)</title><rect x="978.9" y="277" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="981.87" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="763.9" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="766.90" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%; +0.02%)</title><rect x="120.3" y="485" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="123.32" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;db::commitlog::segment&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1121.4" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1124.36" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="474.4" y="309" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="477.39" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; +0.04%)</title><rect x="1020.6" y="181" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1023.55" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="432.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="435.71" y="271.5" ></text>
</g>
<g >
<title>database::find_uuid (2 samples, 0.04%; 0.00%)</title><rect x="90.0" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.97" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (380 samples, 7.30%; -0.04%)</title><rect x="205.5" y="277" width="86.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="208.50" y="287.5" >logalloc::..</text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; -0.08%)</title><rect x="594.2" y="389" width="0.7" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="597.22" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.36" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%; -0.08%)</title><rect x="160.2" y="405" width="0.4" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="163.19" y="415.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (15 samples, 0.29%; -0.02%)</title><rect x="916.8" y="389" width="3.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="919.80" y="399.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%; +0.04%)</title><rect x="460.3" y="293" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="463.34" y="303.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="283.6" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="286.65" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="567.3" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="570.27" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="777.3" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="780.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;dht::token, gms::inet_address&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="271.5" ></text>
</g>
<g >
<title>sstables::sstable::write_digest (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (3 samples, 0.06%; +0.06%)</title><rect x="603.1" y="437" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="606.06" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="800.1" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.14" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1030.5" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1033.52" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="289.5" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="292.54" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="572.2" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.25" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="63.9" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.91" y="159.5" ></text>
</g>
<g >
<title>mutation_querier::consume (181 samples, 3.47%; -0.25%)</title><rect x="353.2" y="197" width="41.0" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="356.19" y="207.5" >mut..</text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="806.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.48" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="116.7" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="119.70" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_view_statement*, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.30" y="351.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (41 samples, 0.79%; +0.02%)</title><rect x="1122.0" y="405" width="9.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1125.04" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; -0.02%)</title><rect x="263.0" y="149" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="266.04" y="159.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.12%; 0.00%)</title><rect x="54.4" y="309" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.40" y="319.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="473.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="476.48" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="466.2" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.23" y="303.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; +0.02%)</title><rect x="700.9" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="703.92" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="319.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; 0.00%)</title><rect x="823.7" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.70" y="383.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="175.5" ></text>
</g>
<g >
<title>table::query (2,105 samples, 40.41%; -0.21%)</title><rect x="146.8" y="453" width="476.9" height="15.0" fill="rgb(32,32,255)" rx="2" ry="2" />
<text  x="149.82" y="463.5" >table::query</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%; -0.02%)</title><rect x="785.9" y="181" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="788.87" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; -0.04%)</title><rect x="932.0" y="325" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="934.98" y="335.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="399.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (7 samples, 0.13%; 0.00%)</title><rect x="691.6" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="694.63" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="102.9" y="453" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="105.88" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="583.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.80" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="367.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (3 samples, 0.06%; 0.00%)</title><rect x="80.7" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (6 samples, 0.12%; -0.04%)</title><rect x="1099.6" y="405" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1102.61" y="415.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (24 samples, 0.46%; -0.08%)</title><rect x="907.5" y="373" width="5.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="910.52" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="968.2" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.23" y="367.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (28 samples, 0.54%; +0.06%)</title><rect x="1012.9" y="181" width="6.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1015.85" y="191.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_allocate_node (1 samples, 0.02%; 0.00%)</title><rect x="34.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.47" y="255.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.06%)</title><rect x="627.8" y="485" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="630.75" y="495.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="260.1" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="263.09" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.02%)</title><rect x="385.8" y="149" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="388.81" y="159.5" ></text>
</g>
<g >
<title>seastar::data_sink::put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="193.9" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="196.94" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (35 samples, 0.67%; +0.04%)</title><rect x="787.0" y="181" width="7.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="790.00" y="191.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%; +0.02%)</title><rect x="862.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="865.66" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (65 samples, 1.25%; -0.02%)</title><rect x="33.6" y="325" width="14.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="36.56" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="756.2" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="759.19" y="303.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="551.9" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.86" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="896.6" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="899.64" y="383.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="116.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="836.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="839.39" y="415.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (8 samples, 0.15%; +0.02%)</title><rect x="331.0" y="309" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="333.99" y="319.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%; +0.02%)</title><rect x="218.2" y="197" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="221.18" y="207.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="136.6" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="139.63" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="49.0" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="255.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="855.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.41" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="143.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="334.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="337.62" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (7 samples, 0.13%; 0.00%)</title><rect x="1150.8" y="453" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.81" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (14 samples, 0.27%; -0.10%)</title><rect x="421.4" y="213" width="3.2" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="424.38" y="223.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (50 samples, 0.96%; +0.08%)</title><rect x="506.8" y="261" width="11.3" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="509.78" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="77.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.28" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%; +0.02%)</title><rect x="270.1" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="273.06" y="191.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; -0.02%)</title><rect x="1079.5" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1082.45" y="271.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="534.4" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="537.42" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="785.2" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="788.19" y="191.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; 0.00%)</title><rect x="464.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="467.87" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (2 samples, 0.04%; -0.04%)</title><rect x="650.9" y="469" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="653.86" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; 0.00%)</title><rect x="138.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.22" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.02%)</title><rect x="282.1" y="181" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="285.06" y="191.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="191.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="300.9" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="303.87" y="319.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="1125.9" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="159.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="924.3" y="405" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="927.28" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="303.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="30.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%; +0.04%)</title><rect x="1032.6" y="277" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1035.56" y="287.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="1132.9" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1135.91" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="215.7" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="218.69" y="223.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; 0.00%)</title><rect x="988.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="991.61" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="634.3" y="469" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="637.32" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="300.2" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="303.19" y="319.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (3 samples, 0.06%; 0.00%)</title><rect x="250.3" y="101" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="253.35" y="111.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::token&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::token&gt; &gt; &gt;::emplace_back&lt;nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="415.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (29 samples, 0.56%; +0.04%)</title><rect x="490.2" y="277" width="6.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="493.25" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="1036.6" y="277" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1039.64" y="287.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (63 samples, 1.21%; +0.04%)</title><rect x="1064.7" y="309" width="14.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1067.73" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1038.0" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1041.00" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (7 samples, 0.13%; +0.02%)</title><rect x="139.8" y="373" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="142.80" y="383.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="99.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.71" y="495.5" ></text>
</g>
<g >
<title>validation::validate_column_family (5 samples, 0.10%; 0.00%)</title><rect x="89.5" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.51" y="463.5" ></text>
</g>
<g >
<title>database::apply_in_memory (17 samples, 0.33%; +0.02%)</title><rect x="1116.6" y="293" width="3.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1119.60" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="71.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.62" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="844.1" y="453" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="847.09" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%; 0.00%)</title><rect x="792.0" y="165" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.99" y="175.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="474.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="477.39" y="335.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1152.4" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1155.40" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%; -0.02%)</title><rect x="284.8" y="197" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="287.78" y="207.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.06%)</title><rect x="656.3" y="485" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="659.29" y="495.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (16 samples, 0.31%; +0.06%)</title><rect x="135.0" y="405" width="3.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="138.05" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="222.0" y="213" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="225.03" y="223.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="11.6" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="14.59" y="271.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="878.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="881.07" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (4 samples, 0.08%; 0.00%)</title><rect x="297.9" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.92" y="287.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.32" y="159.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="783.6" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="786.60" y="175.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%; 0.00%)</title><rect x="856.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.09" y="367.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::update_normal_tokens (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1112.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.30" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="254.4" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.43" y="127.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (615 samples, 11.81%; 0.00%)</title><rect x="711.8" y="501" width="139.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.79" y="511.5" >seastar::internal..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; -0.02%)</title><rect x="606.7" y="437" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="609.68" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (23 samples, 0.44%; +0.02%)</title><rect x="468.0" y="293" width="5.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="471.05" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="984.5" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="987.54" y="287.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%; 0.00%)</title><rect x="1163.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.50" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="839.6" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.56" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.84" y="271.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="149" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.42" y="159.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (54 samples, 1.04%; +0.02%)</title><rect x="99.0" y="501" width="12.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="102.03" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%; +0.08%)</title><rect x="1028.0" y="229" width="1.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1031.03" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (6 samples, 0.12%; 0.00%)</title><rect x="785.0" y="213" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.96" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="695.3" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="698.26" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (11 samples, 0.21%; -0.04%)</title><rect x="280.9" y="213" width="2.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="283.93" y="223.5" ></text>
</g>
<g >
<title>make_combined_reader (68 samples, 1.31%; -0.02%)</title><rect x="458.8" y="325" width="15.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="461.76" y="335.5" ></text>
</g>
<g >
<title>__tls_init (4 samples, 0.08%; +0.06%)</title><rect x="532.6" y="293" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="535.61" y="303.5" ></text>
</g>
<g >
<title>stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%; 0.00%)</title><rect x="115.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.56" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="73.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.20" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="143.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (36 samples, 0.69%; +0.04%)</title><rect x="489.1" y="309" width="8.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="492.11" y="319.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (4 samples, 0.08%; +0.02%)</title><rect x="790.9" y="117" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="793.85" y="127.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (40 samples, 0.77%; 0.00%)</title><rect x="1122.3" y="357" width="9.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.27" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1086.5" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1089.48" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; +0.02%)</title><rect x="146.6" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="149.60" y="143.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (1 samples, 0.02%; +0.02%)</title><rect x="837.3" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="840.29" y="431.5" ></text>
</g>
<g >
<title>create_partitions (285 samples, 5.47%; 0.00%)</title><rect x="27.0" y="533" width="64.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.99" y="543.5" >create_..</text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%; +0.02%)</title><rect x="38.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="41.77" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (2 samples, 0.04%; +0.02%)</title><rect x="24.7" y="453" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="27.72" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="274.1" y="245" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="277.14" y="255.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="930.6" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.62" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (3 samples, 0.06%; -0.04%)</title><rect x="189.2" y="277" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="192.19" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (7 samples, 0.13%; +0.04%)</title><rect x="757.8" y="325" width="1.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="760.78" y="335.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (46 samples, 0.88%; -0.21%)</title><rect x="528.5" y="325" width="10.4" height="15.0" fill="rgb(32,32,255)" rx="2" ry="2" />
<text  x="531.53" y="335.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; +0.02%)</title><rect x="830.5" y="357" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="833.50" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; -0.04%)</title><rect x="518.8" y="277" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="521.79" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%; +0.02%)</title><rect x="33.6" y="197" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="36.56" y="207.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (6 samples, 0.12%; 0.00%)</title><rect x="847.9" y="469" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.94" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (2 samples, 0.04%; 0.00%)</title><rect x="1079.9" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.91" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;seastar::internal::invoke_func_with_gate&lt;database::apply_in_memory (1 samples, 0.02%; +0.02%)</title><rect x="1120.5" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1123.45" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="65.0" y="53" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="68.05" y="63.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="442.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="445.22" y="351.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%; 0.00%)</title><rect x="754.2" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.15" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="72.7" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="75.75" y="383.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (5 samples, 0.10%; -0.12%)</title><rect x="599.9" y="389" width="1.1" height="15.0" fill="rgb(113,113,255)" rx="2" ry="2" />
<text  x="602.89" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%; 0.00%)</title><rect x="708.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.85" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="906.8" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="909.84" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (7 samples, 0.13%; 0.00%)</title><rect x="639.5" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="495.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (3 samples, 0.06%; 0.00%)</title><rect x="32.2" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (2 samples, 0.04%; +0.04%)</title><rect x="73.9" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="76.88" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="223.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="175.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="926.3" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="929.32" y="415.5" ></text>
</g>
<g >
<title>boost::program_options::store (1 samples, 0.02%; 0.00%)</title><rect x="1167.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.12" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.79%; 0.00%)</title><rect x="1122.0" y="453" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.04" y="463.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%; +0.02%)</title><rect x="1137.0" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1139.99" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="115.3" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="118.34" y="319.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (13 samples, 0.25%; +0.02%)</title><rect x="212.7" y="213" width="3.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="215.75" y="223.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="627.8" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="630.75" y="479.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.91" y="287.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="756.6" y="325" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="759.65" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%; +0.02%)</title><rect x="861.8" y="469" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="864.76" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (19 samples, 0.36%; 0.00%)</title><rect x="266.4" y="213" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="269.43" y="223.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (65 samples, 1.25%; +0.08%)</title><rect x="398.5" y="181" width="14.7" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="401.50" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1061.8" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1064.78" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="632.3" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="635.28" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%; -0.06%)</title><rect x="436.6" y="261" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="439.56" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (17 samples, 0.33%; +0.04%)</title><rect x="1143.8" y="453" width="3.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1146.79" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="853.4" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="856.37" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="84.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.76" y="399.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.06%)</title><rect x="907.3" y="373" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="910.29" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="127.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.10%; 0.00%)</title><rect x="88.4" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.38" y="463.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="421.6" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="424.61" y="207.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="55.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.76" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.12%; 0.00%)</title><rect x="69.1" y="325" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="335.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="24.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="829.8" y="373" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="832.82" y="383.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; 0.00%)</title><rect x="187.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="190.60" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; 0.00%)</title><rect x="270.3" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.28" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="774.5" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="777.54" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (9 samples, 0.17%; 0.00%)</title><rect x="930.6" y="405" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.62" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.02%)</title><rect x="1033.9" y="229" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1036.92" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (270 samples, 5.18%; +0.08%)</title><rect x="871.7" y="421" width="61.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="874.72" y="431.5" >cql3::..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="652.2" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="655.22" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (19 samples, 0.36%; +0.04%)</title><rect x="426.6" y="261" width="4.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="429.59" y="271.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="559.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="1118.6" y="165" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1121.64" y="175.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%; +0.02%)</title><rect x="26.1" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="29.08" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; 0.00%)</title><rect x="497.9" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="500.95" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="115.6" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="118.56" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1045.2" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1048.25" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="947.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="950.39" y="415.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="10.2" y="581" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="13.23" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="647.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.01" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="862.4" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.44" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="628.0" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="630.98" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (13 samples, 0.25%; 0.00%)</title><rect x="580.0" y="357" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="582.95" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1161.0" y="421" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1164.00" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (48 samples, 0.92%; -0.15%)</title><rect x="1010.6" y="213" width="10.9" height="15.0" fill="rgb(80,80,255)" rx="2" ry="2" />
<text  x="1013.59" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="54.2" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="57.17" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="801.5" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="804.50" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%; +0.02%)</title><rect x="128.9" y="453" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="131.93" y="463.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="335.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%; -0.02%)</title><rect x="672.6" y="469" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="675.60" y="479.5" ></text>
</g>
<g >
<title>free (5 samples, 0.10%; -0.04%)</title><rect x="424.8" y="197" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="427.78" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="539.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="542.18" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,111 samples, 21.33%; 0.00%)</title><rect x="864.0" y="453" width="251.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.02" y="463.5" >seastar::noncopyable_function&lt;sea..</text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="159.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="202.3" y="261" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="205.32" y="271.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%; 0.00%)</title><rect x="512.4" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.45" y="191.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="938.1" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="941.10" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="60.1" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.06" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.04%)</title><rect x="661.3" y="421" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="664.28" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (14 samples, 0.27%; 0.00%)</title><rect x="1122.7" y="309" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.72" y="319.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; +0.02%)</title><rect x="527.8" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="530.85" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="588.1" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="591.11" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (15 samples, 0.29%; +0.04%)</title><rect x="1033.2" y="277" width="3.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1036.24" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="797.9" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="800.87" y="255.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (32 samples, 0.61%; +0.02%)</title><rect x="344.6" y="213" width="7.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="347.59" y="223.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (9 samples, 0.17%; 0.00%)</title><rect x="856.8" y="341" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%; 0.00%)</title><rect x="967.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="970.09" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (8 samples, 0.15%; -0.02%)</title><rect x="789.9" y="133" width="1.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="792.95" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.10%; -0.02%)</title><rect x="928.6" y="405" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="931.58" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="115.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; -0.02%)</title><rect x="690.0" y="453" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="693.05" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="297.7" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="300.69" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%; +0.02%)</title><rect x="94.3" y="517" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="97.27" y="527.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::revoke_role_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="73.4" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="76.43" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.63" y="255.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%; -0.02%)</title><rect x="512.4" y="197" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="515.45" y="207.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="205.7" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="208.72" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (2 samples, 0.04%; +0.02%)</title><rect x="86.1" y="373" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="89.11" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="332.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.81" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::setter, false&gt;::make&lt;column_definition const&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; +0.02%)</title><rect x="81.6" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="84.58" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="165" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.59" y="175.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (8 samples, 0.15%; +0.02%)</title><rect x="44.9" y="261" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="47.89" y="271.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (4 samples, 0.08%; 0.00%)</title><rect x="855.2" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.19" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; +0.04%)</title><rect x="889.2" y="309" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="892.17" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.79%; 0.00%)</title><rect x="1122.0" y="437" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.04" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; 0.00%)</title><rect x="51.2" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.23" y="319.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.7" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1132.74" y="207.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="783.2" y="133" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="786.15" y="143.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="350.0" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="353.02" y="191.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (22 samples, 0.42%; 0.00%)</title><rect x="1125.9" y="277" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.89" y="287.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%; 0.00%)</title><rect x="708.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.17" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="212.5" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="215.52" y="191.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="116.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.24" y="495.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; +0.02%)</title><rect x="564.8" y="293" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="567.77" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (47 samples, 0.90%; +0.06%)</title><rect x="695.9" y="469" width="10.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="698.94" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="720.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="723.40" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%; +0.04%)</title><rect x="1011.3" y="181" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1014.27" y="191.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; +0.02%)</title><rect x="759.4" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="762.36" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; -0.02%)</title><rect x="47.4" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="50.38" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="442.9" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="445.90" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="69.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.80" y="287.5" ></text>
</g>
<g >
<title>__start_context (298 samples, 5.72%; 0.00%)</title><rect x="24.0" y="613" width="67.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.04" y="623.5" >__start..</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (9 samples, 0.17%; +0.02%)</title><rect x="983.0" y="309" width="2.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="985.95" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="64.8" y="101" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.82" y="111.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="80.2" y="341" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="83.22" y="351.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="880.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="883.11" y="303.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,226 samples, 23.54%; 0.00%)</title><rect x="169.3" y="421" width="277.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="172.25" y="431.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; -0.02%)</title><rect x="554.1" y="389" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="557.13" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="953.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.73" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="127.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="794.0" y="101" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.02" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (44 samples, 0.84%; 0.00%)</title><rect x="1142.4" y="469" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.43" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="807.6" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.62" y="319.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%; +0.02%)</title><rect x="1019.2" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1022.20" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="64.6" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.59" y="207.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (5 samples, 0.10%; -0.06%)</title><rect x="261.9" y="133" width="1.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="264.90" y="143.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%; 0.00%)</title><rect x="646.6" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.55" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="854.3" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="857.28" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="65.3" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="223.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (4 samples, 0.08%; -0.10%)</title><rect x="1110.9" y="389" width="0.9" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="1113.94" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="973.7" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="976.66" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1115.0" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1118.02" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%; +0.04%)</title><rect x="324.2" y="389" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="327.20" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; 0.00%)</title><rect x="945.8" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.80" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; 0.00%)</title><rect x="262.1" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="265.13" y="127.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="662.4" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="665.41" y="479.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="774.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="777.77" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; 0.00%)</title><rect x="606.9" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="609.91" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="804.7" y="309" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="807.67" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; -0.04%)</title><rect x="161.5" y="437" width="1.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="164.55" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="196.9" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="199.89" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="162.2" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="165.23" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1025.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1028.77" y="255.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="595.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.81" y="415.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.17" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (32 samples, 0.61%; +0.02%)</title><rect x="836.8" y="453" width="7.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="839.84" y="463.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="1050.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.00" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.08%)</title><rect x="608.3" y="405" width="1.1" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="611.27" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="1127.0" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.02" y="143.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (13 samples, 0.25%; 0.00%)</title><rect x="82.3" y="405" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.26" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%; -0.02%)</title><rect x="493.4" y="213" width="2.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="496.42" y="223.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="718.4" y="453" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="721.36" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.36" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="1061.1" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.10" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="621.6" y="373" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="624.63" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="623.4" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="626.45" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%; +0.02%)</title><rect x="953.7" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="956.73" y="319.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (429 samples, 8.24%; -0.06%)</title><rect x="336.2" y="293" width="97.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="339.20" y="303.5" >seastar::re..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="10.9" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; +0.02%)</title><rect x="302.0" y="325" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="305.00" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="473.5" y="277" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="476.48" y="287.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (20 samples, 0.38%; +0.13%)</title><rect x="1137.9" y="469" width="4.5" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="1140.90" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (8 samples, 0.15%; +0.08%)</title><rect x="610.8" y="437" width="1.8" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="613.76" y="447.5" ></text>
</g>
<g >
<title>cdc::cdc_service::needs_cdc_augmentation (1 samples, 0.02%; 0.00%)</title><rect x="854.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="33.3" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="36.33" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (7 samples, 0.13%; +0.02%)</title><rect x="1146.1" y="405" width="1.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1149.05" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="207.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (434 samples, 8.33%; 0.00%)</title><rect x="448.1" y="421" width="98.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="451.11" y="431.5" >query::quer..</text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="943.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="946.76" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="888.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.26" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1104.6" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1107.60" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="661.7" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="664.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="961.9" y="325" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="964.88" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="1142.0" y="421" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1144.98" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="159.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="52.4" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="55.36" y="111.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; 0.00%)</title><rect x="516.7" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="519.75" y="239.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%; 0.00%)</title><rect x="91.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.32" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="856.8" y="245" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="859.77" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="695.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="698.71" y="479.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; +0.02%)</title><rect x="531.0" y="277" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="534.02" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="645.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="648.42" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (23 samples, 0.44%; 0.00%)</title><rect x="1116.6" y="357" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.60" y="367.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; +0.02%)</title><rect x="830.9" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="833.95" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%; -0.02%)</title><rect x="62.1" y="277" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="65.10" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="444.7" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="447.71" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; -0.04%)</title><rect x="1134.3" y="485" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1137.27" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; 0.00%)</title><rect x="90.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.87" y="511.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (11 samples, 0.21%; -0.02%)</title><rect x="394.6" y="213" width="2.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="397.65" y="223.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%; 0.00%)</title><rect x="1110.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.03" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="766.2" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="769.16" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_super (1 samples, 0.02%; +0.02%)</title><rect x="59.6" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="62.61" y="271.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%; +0.02%)</title><rect x="89.5" y="437" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="92.51" y="447.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (4 samples, 0.08%; -0.02%)</title><rect x="242.2" y="69" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="245.19" y="79.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%; +0.02%)</title><rect x="272.5" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="275.55" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; +0.04%)</title><rect x="888.5" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="891.49" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%; -0.02%)</title><rect x="136.2" y="389" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="139.18" y="399.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1049.3" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.32" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.98" y="367.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="70.99" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%; +0.02%)</title><rect x="892.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="895.79" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;mutation_fragment*&gt;, flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="626.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.16" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (5 samples, 0.10%; -0.02%)</title><rect x="832.8" y="421" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="835.76" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1017.2" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1020.16" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%; -0.02%)</title><rect x="160.9" y="421" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="163.87" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.02%)</title><rect x="788.4" y="117" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="791.36" y="127.5" ></text>
</g>
<g >
<title>query::result::builder::build (4 samples, 0.08%; +0.04%)</title><rect x="595.1" y="437" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="598.13" y="447.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%; 0.00%)</title><rect x="289.8" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="292.77" y="207.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%; +0.02%)</title><rect x="187.1" y="277" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="190.15" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="271.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="591.7" y="405" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="594.73" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="538.7" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="541.72" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%; 0.00%)</title><rect x="1035.7" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.73" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (9 samples, 0.17%; +0.04%)</title><rect x="243.8" y="37" width="2.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="246.78" y="47.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (15 samples, 0.29%; -0.04%)</title><rect x="1116.8" y="277" width="3.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1119.83" y="287.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (4 samples, 0.08%; +0.08%)</title><rect x="840.9" y="405" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="843.92" y="415.5" ></text>
</g>
<g >
<title>evictable_reader::resume_or_create_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.02%)</title><rect x="1096.9" y="341" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1099.90" y="351.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,230 samples, 23.61%; -0.02%)</title><rect x="853.8" y="501" width="278.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="856.83" y="511.5" >seastar::lambda_task&lt;seastar::executi..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="654.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.03" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="891.4" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="894.43" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="462.2" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="465.16" y="271.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (23 samples, 0.44%; 0.00%)</title><rect x="837.1" y="437" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.06" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; -0.04%)</title><rect x="602.6" y="437" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="605.61" y="447.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="284.3" y="197" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="287.33" y="207.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="640.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.89" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (22 samples, 0.42%; 0.00%)</title><rect x="854.3" y="437" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="447.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::list_directory (1 samples, 0.02%; +0.02%)</title><rect x="683.7" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="686.70" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; 0.00%)</title><rect x="531.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.47" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1162.1" y="501" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1165.14" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (11 samples, 0.21%; 0.00%)</title><rect x="592.6" y="405" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.64" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="945.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="948.12" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.02%; +0.02%)</title><rect x="85.0" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="87.98" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="594.4" y="373" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="597.45" y="383.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; +0.02%)</title><rect x="249.9" y="101" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="252.90" y="111.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="434.5" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="437.52" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="54.6" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.63" y="223.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="351.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; -0.04%)</title><rect x="23.6" y="613" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="26.59" y="623.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.08%)</title><rect x="636.1" y="485" width="1.4" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="639.13" y="495.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (15 samples, 0.29%; -0.15%)</title><rect x="963.0" y="341" width="3.4" height="15.0" fill="rgb(80,80,255)" rx="2" ry="2" />
<text  x="966.02" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (53 samples, 1.02%; -0.02%)</title><rect x="878.3" y="325" width="12.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="881.29" y="335.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="270.5" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="273.51" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; 0.00%)</title><rect x="664.2" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.22" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="950.6" y="389" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="953.56" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="54.9" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="57.85" y="127.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%; -0.02%)</title><rect x="131.0" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="133.97" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="1162.6" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1165.59" y="127.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="657.0" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="659.97" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%; 0.00%)</title><rect x="646.6" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="649.55" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; -0.04%)</title><rect x="1049.6" y="277" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1052.55" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="779.5" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="782.53" y="239.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="880.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.11" y="319.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.10%; 0.00%)</title><rect x="137.3" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.31" y="399.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%; -0.02%)</title><rect x="745.3" y="277" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="748.32" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%; -0.08%)</title><rect x="185.6" y="309" width="0.9" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="188.56" y="319.5" ></text>
</g>
<g >
<title>db::commitlog::segment::is_still_allocating (1 samples, 0.02%; +0.02%)</title><rect x="1121.1" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1124.13" y="287.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="684.4" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="687.38" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (417 samples, 8.01%; +0.02%)</title><rect x="336.4" y="277" width="94.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="339.43" y="287.5" >flat_mutati..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (4 samples, 0.08%; -0.04%)</title><rect x="33.6" y="213" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="36.56" y="223.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; -0.02%)</title><rect x="65.5" y="53" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="68.50" y="63.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="51.9" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="54.91" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (10 samples, 0.19%; 0.00%)</title><rect x="971.2" y="325" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="974.17" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1103.0" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1106.01" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; 0.00%)</title><rect x="734.4" y="373" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.45" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (476 samples, 9.14%; +0.02%)</title><rect x="330.1" y="341" width="107.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="333.09" y="351.5" >seastar::futu..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="65.3" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="239.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%; +0.02%)</title><rect x="698.9" y="453" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="701.88" y="463.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="795.4" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="798.38" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="774.1" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="777.09" y="303.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="762.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.76" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.10%; +0.04%)</title><rect x="508.6" y="229" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="511.59" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="575.4" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="578.42" y="335.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, clustering_key_prefix&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.0" y="101" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1130.02" y="111.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="858.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.36" y="255.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="527.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%; +0.02%)</title><rect x="36.3" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="39.28" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;cql3::update_parameters::prefetch_data, false&gt;::uninitialized_set&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="858.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.81" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="736.9" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="739.94" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.12%; +0.06%)</title><rect x="1148.3" y="405" width="1.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1151.32" y="415.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (5 samples, 0.10%; 0.00%)</title><rect x="510.0" y="213" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="512.95" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="894.8" y="309" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="897.83" y="319.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="271.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.10%; +0.04%)</title><rect x="869.0" y="421" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="872.01" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="55.3" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.31" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1136.8" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1139.77" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="648.8" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="651.82" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="70.9" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="73.94" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%; -0.02%)</title><rect x="658.8" y="485" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="661.78" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1103.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1106.24" y="431.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1128.8" y="133" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1131.84" y="143.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="431.5" ></text>
</g>
<g >
<title>ser::mutation_view::table_id (1 samples, 0.02%; +0.02%)</title><rect x="1124.1" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1127.08" y="159.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="367.5" ></text>
</g>
<g >
<title>hwloc_x86_add_cpuinfos.lto_priv.0 (1 samples, 0.02%; +0.02%)</title><rect x="10.0" y="581" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (1 samples, 0.02%; +0.02%)</title><rect x="1163.0" y="517" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1166.04" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="774.1" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="777.09" y="319.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%; -0.10%)</title><rect x="746.2" y="261" width="0.7" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="749.23" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (24 samples, 0.46%; -0.04%)</title><rect x="420.9" y="245" width="5.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="423.93" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; +0.04%)</title><rect x="639.5" y="325" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="642.53" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (5 samples, 0.10%; -0.04%)</title><rect x="344.8" y="181" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="347.81" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9 samples, 0.17%; 0.00%)</title><rect x="659.9" y="469" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.92" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; +0.02%)</title><rect x="858.1" y="277" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="861.13" y="287.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (10 samples, 0.19%; +0.04%)</title><rect x="78.4" y="389" width="2.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="81.41" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="856.3" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="859.32" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="725.8" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="728.84" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="90.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.19" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="772.1" y="293" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="775.05" y="303.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.12%; 0.00%)</title><rect x="1124.1" y="245" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.08" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::constant const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="84.1" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="87.08" y="191.5" ></text>
</g>
<g >
<title>cql3::update_parameters::prefetch_data::prefetch_data (1 samples, 0.02%; 0.00%)</title><rect x="858.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.81" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="1109.8" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1112.81" y="431.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; 0.00%)</title><rect x="530.3" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="533.34" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::lw_shared_ptr&lt;query::result_set&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::lw_shared_ptr&lt;query::result_set&gt; &gt; &gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="116.2" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="119.24" y="447.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (3 samples, 0.06%; 0.00%)</title><rect x="32.2" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.20" y="367.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="431.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (16 samples, 0.31%; 0.00%)</title><rect x="78.2" y="421" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.19" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="694.8" y="485" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="697.80" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="60.7" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="63.74" y="223.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="647.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="650.01" y="383.5" ></text>
</g>
<g >
<title>[unknown] (361 samples, 6.93%; 0.00%)</title><rect x="10.0" y="629" width="81.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >[unknown]</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="68.7" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="71.67" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="895.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="898.06" y="303.5" ></text>
</g>
<g >
<title>seastar::io_queue::queue_request (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="223.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (2 samples, 0.04%; -0.02%)</title><rect x="1079.2" y="293" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1082.23" y="303.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="11.1" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (12 samples, 0.23%; -0.02%)</title><rect x="761.4" y="389" width="2.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="764.40" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="684.2" y="85" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="687.16" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="550.0" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="553.05" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::prepared_statement (1 samples, 0.02%; +0.02%)</title><rect x="78.0" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="80.96" y="463.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="1132.5" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1135.46" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="127.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="239.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (334 samples, 6.41%; +0.06%)</title><rect x="340.7" y="245" width="75.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="343.74" y="255.5" >flat_mut..</text>
</g>
<g >
<title>seastar::reactor::do_run (4,736 samples, 90.92%; 0.00%)</title><rect x="91.8" y="533" width="1072.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.78" y="543.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (5 samples, 0.10%; -0.02%)</title><rect x="479.4" y="325" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="482.37" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="331.4" y="277" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="334.45" y="287.5" ></text>
</g>
<g >
<title>query::querier_base::close (124 samples, 2.38%; 0.00%)</title><rect x="558.7" y="437" width="28.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.66" y="447.5" >q..</text>
</g>
<g >
<title>query::partition_slice::partition_slice (16 samples, 0.31%; -0.04%)</title><rect x="157.9" y="437" width="3.6" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="160.92" y="447.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (3 samples, 0.06%; -0.02%)</title><rect x="856.8" y="293" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="859.77" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; -0.04%)</title><rect x="911.6" y="325" width="1.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="914.59" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="332.6" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="335.58" y="303.5" ></text>
</g>
<g >
<title>dirty_memory_manager::account_potentially_cleaned_up_memory (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.13%; 0.00%)</title><rect x="811.9" y="309" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.92" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1019.4" y="181" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1022.42" y="191.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (35 samples, 0.67%; +0.06%)</title><rect x="194.2" y="261" width="7.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="197.17" y="271.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; -0.02%)</title><rect x="49.6" y="197" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="52.64" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,103 samples, 21.17%; -0.04%)</title><rect x="865.4" y="437" width="249.8" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="868.38" y="447.5" >cql3::statements::select_statemen..</text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (14 samples, 0.27%; 0.00%)</title><rect x="27.2" y="517" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.22" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (3 samples, 0.06%; +0.02%)</title><rect x="197.1" y="245" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="200.11" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="89.1" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="92.06" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="716.8" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="719.78" y="463.5" ></text>
</g>
<g >
<title>_Unwind_Find_FDE (1 samples, 0.02%; 0.00%)</title><rect x="13.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.85" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="285.5" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="288.46" y="239.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_deleter (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.98" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%; 0.00%)</title><rect x="62.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.78" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (7 samples, 0.13%; +0.04%)</title><rect x="261.4" y="149" width="1.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="264.45" y="159.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%; +0.02%)</title><rect x="855.0" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="857.96" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (18 samples, 0.35%; +0.04%)</title><rect x="687.6" y="469" width="4.0" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="690.55" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.17%; -0.13%)</title><rect x="917.9" y="357" width="2.1" height="15.0" fill="rgb(96,96,255)" rx="2" ry="2" />
<text  x="920.94" y="367.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt;::_M_realloc_insert&lt;cdc::stream_id&gt; (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.20" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="752.3" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="755.34" y="367.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%; 0.00%)</title><rect x="854.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.73" y="383.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="303.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.02" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1143.6" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1146.56" y="463.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::file&gt;, seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="626.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.62" y="511.5" ></text>
</g>
<g >
<title>table::as_mutation_source (9 samples, 0.17%; +0.02%)</title><rect x="621.2" y="437" width="2.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="624.18" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="331.9" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="334.90" y="303.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="49.4" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="52.42" y="143.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (569 samples, 10.92%; -0.17%)</title><rect x="956.2" y="373" width="128.9" height="15.0" fill="rgb(64,64,255)" rx="2" ry="2" />
<text  x="959.22" y="383.5" >service::storage..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%; +0.02%)</title><rect x="541.7" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="544.67" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="511.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (2 samples, 0.04%; +0.04%)</title><rect x="168.6" y="421" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="171.57" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (3 samples, 0.06%; +0.06%)</title><rect x="436.8" y="293" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="439.78" y="303.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="958.9" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="961.94" y="367.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; 0.00%)</title><rect x="986.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.58" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::member_hook::attach_first (1 samples, 0.02%; +0.02%)</title><rect x="857.7" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="860.68" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="650.6" y="469" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="653.63" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (83 samples, 1.59%; +0.06%)</title><rect x="1137.2" y="485" width="18.8" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1140.22" y="495.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; +0.02%)</title><rect x="131.0" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="133.97" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="794.9" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="797.93" y="207.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="49.0" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::create_local_service&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="415.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (14 samples, 0.27%; +0.06%)</title><rect x="1057.3" y="309" width="3.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1060.25" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; -0.02%)</title><rect x="782.5" y="213" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="785.47" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (6 samples, 0.12%; +0.02%)</title><rect x="552.5" y="357" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="555.54" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::has_unrestricted_clustering_columns (2 samples, 0.04%; +0.04%)</title><rect x="81.8" y="421" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="84.81" y="431.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (16 samples, 0.31%; -0.06%)</title><rect x="439.5" y="373" width="3.6" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="442.50" y="383.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.7" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1130.70" y="127.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::shared_ptr_count_for&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="322.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="325.16" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="52.1" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="335.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="117.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.15" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="681.4" y="485" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="684.44" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%; 0.00%)</title><rect x="1079.2" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.23" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="496.1" y="213" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="499.14" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="1133.6" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1136.59" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.49" y="303.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="319.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; 0.00%)</title><rect x="844.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.31" y="479.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (12 samples, 0.23%; +0.06%)</title><rect x="379.0" y="165" width="2.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="382.02" y="175.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="558.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="561.43" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="111.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="215.9" y="197" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="218.92" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="511.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%; 0.00%)</title><rect x="91.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.32" y="527.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="640.9" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="643.89" y="415.5" ></text>
</g>
<g >
<title>__start_context (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="104.5" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="107.46" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (28 samples, 0.54%; -0.10%)</title><rect x="1071.8" y="277" width="6.3" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="1074.75" y="287.5" ></text>
</g>
<g >
<title>write_tombstones&lt;ser::mutation_partition__range_tombstones&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="1127.9" y="165" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1130.93" y="175.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (8 samples, 0.15%; +0.12%)</title><rect x="728.1" y="293" width="1.8" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="731.10" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (4 samples, 0.08%; -0.04%)</title><rect x="133.5" y="405" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="136.46" y="415.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_type_statement*, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="71.8" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="74.84" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; 0.00%)</title><rect x="871.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.27" y="431.5" ></text>
</g>
<g >
<title>crc32_eth_init_lut (1 samples, 0.02%; +0.02%)</title><rect x="1178.7" y="629" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1181.67" y="639.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (11 samples, 0.21%; -0.04%)</title><rect x="913.9" y="389" width="2.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="916.86" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; 0.00%)</title><rect x="1049.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.78" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_write_response_handler&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1123.9" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1126.85" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.06%)</title><rect x="557.8" y="421" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="560.75" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (3 samples, 0.06%; -0.02%)</title><rect x="1031.0" y="261" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1033.98" y="271.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.83" y="319.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%; 0.00%)</title><rect x="1161.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.91" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="31.5" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="34.52" y="415.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%; +0.06%)</title><rect x="580.6" y="341" width="2.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="583.63" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.06%)</title><rect x="216.6" y="197" width="1.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="219.60" y="207.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (6 samples, 0.12%; +0.10%)</title><rect x="541.9" y="341" width="1.4" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="544.89" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (5 samples, 0.10%; 0.00%)</title><rect x="668.1" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.07" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%; -0.04%)</title><rect x="773.2" y="293" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="776.18" y="303.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="575.0" y="341" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="577.97" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.27%; +0.08%)</title><rect x="828.0" y="389" width="3.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="831.00" y="399.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.06%)</title><rect x="439.5" y="357" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="442.50" y="367.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="25.2" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="28.18" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; -0.02%)</title><rect x="821.2" y="421" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="824.21" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1101.0" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1103.97" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="862.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.21" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; +0.02%)</title><rect x="535.6" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="538.55" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="207.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (7 samples, 0.13%; +0.02%)</title><rect x="548.5" y="373" width="1.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="551.46" y="383.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (50 samples, 0.96%; -0.02%)</title><rect x="695.5" y="485" width="11.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="698.48" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.84" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="466.7" y="277" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="469.69" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (1 samples, 0.02%; 0.00%)</title><rect x="856.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.32" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="776.6" y="277" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="779.58" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::prepare_builder_from_table_row (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="606.7" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="609.68" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; 0.00%)</title><rect x="92.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="95.00" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="587.4" y="421" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="590.43" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="667.2" y="469" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="670.17" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="85.4" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.43" y="399.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (9 samples, 0.17%; 0.00%)</title><rect x="1093.7" y="389" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.72" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="69" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.05" y="79.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%; -0.04%)</title><rect x="268.9" y="149" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="271.92" y="159.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="175.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (23 samples, 0.44%; +0.08%)</title><rect x="613.3" y="437" width="5.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="616.25" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; -0.02%)</title><rect x="501.6" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="504.57" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="223.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (2 samples, 0.04%; +0.04%)</title><rect x="619.6" y="421" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="622.59" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="446.5" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="449.53" y="399.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (2 samples, 0.04%; 0.00%)</title><rect x="67.3" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.31" y="303.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1118.6" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.64" y="207.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="116.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (4 samples, 0.08%; +0.02%)</title><rect x="323.1" y="389" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="326.07" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="680.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.08" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="771.6" y="309" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="774.60" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (10 samples, 0.19%; -0.02%)</title><rect x="714.7" y="469" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="717.74" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="643.6" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="646.61" y="463.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; -0.02%)</title><rect x="525.8" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="528.81" y="351.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::set_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="31.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.07" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="223.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (2 samples, 0.04%; 0.00%)</title><rect x="84.1" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (9 samples, 0.17%; -0.02%)</title><rect x="616.0" y="405" width="2.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="618.97" y="415.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1022.4" y="213" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.37" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="207.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; 0.00%)</title><rect x="80.2" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.22" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="56.7" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.67" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (3 samples, 0.06%; 0.00%)</title><rect x="24.7" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="706.4" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="709.36" y="431.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%; -0.04%)</title><rect x="363.2" y="181" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="366.16" y="191.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (46 samples, 0.88%; 0.00%)</title><rect x="902.5" y="389" width="10.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="905.53" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="70.5" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="73.48" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="580.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.41" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="13.68" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="794.7" y="85" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="797.70" y="95.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1156.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1159.93" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="73.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.66" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="767.3" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="770.29" y="383.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.3" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1130.25" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="143.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.20" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.10%)</title><rect x="350.7" y="181" width="0.2" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="353.70" y="191.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%; +0.02%)</title><rect x="942.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="945.40" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.77%; -0.02%)</title><rect x="1122.3" y="373" width="9.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1125.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; -0.02%)</title><rect x="1004.7" y="213" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1007.70" y="223.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="57.8" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="60.80" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (3 samples, 0.06%; -0.02%)</title><rect x="209.6" y="245" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="212.57" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="207.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="682.3" y="485" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="685.34" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; 0.00%)</title><rect x="99.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.25" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (15 samples, 0.29%; -0.04%)</title><rect x="1158.5" y="469" width="3.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1161.51" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.04%)</title><rect x="807.8" y="277" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="810.84" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="825.7" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.74" y="447.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (4 samples, 0.08%; 0.00%)</title><rect x="24.7" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.72" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="426.1" y="213" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="429.14" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="86.8" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="89.79" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="274.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.59" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%; -0.02%)</title><rect x="466.5" y="293" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="469.46" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.90" y="271.5" ></text>
</g>
<g >
<title>seastar::with_file_close_on_failure&lt;sstables::sstable::new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="626.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.62" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="637.7" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="640.72" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="659.7" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="662.69" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (14 samples, 0.27%; 0.00%)</title><rect x="82.3" y="421" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.26" y="431.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (9 samples, 0.17%; +0.02%)</title><rect x="548.2" y="389" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="551.24" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="710.2" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="713.21" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (39 samples, 0.75%; +0.02%)</title><rect x="723.1" y="421" width="8.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="726.12" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.10%; +0.02%)</title><rect x="944.4" y="325" width="1.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="947.44" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%; +0.02%)</title><rect x="347.8" y="165" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="350.76" y="175.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (3 samples, 0.06%; +0.06%)</title><rect x="898.2" y="389" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="901.23" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="906.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="909.61" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; -0.02%)</title><rect x="49.0" y="293" width="0.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="51.96" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; +0.02%)</title><rect x="858.6" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="861.59" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="444.5" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="447.49" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.10%; +0.10%)</title><rect x="874.9" y="373" width="1.1" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="877.90" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="660.6" y="437" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="663.60" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="700.7" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="703.69" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.8" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="79.83" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; -0.04%)</title><rect x="1036.2" y="213" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1039.19" y="223.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (26 samples, 0.50%; -0.02%)</title><rect x="1065.6" y="261" width="5.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1068.63" y="271.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%; +0.04%)</title><rect x="699.3" y="437" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="702.33" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%; 0.00%)</title><rect x="91.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.10" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="668.8" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="671.75" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="519.5" y="309" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="522.47" y="319.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="511.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.25%; 0.00%)</title><rect x="959.6" y="357" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.62" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="444.9" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="447.94" y="383.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%; 0.00%)</title><rect x="895.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.51" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (20 samples, 0.38%; -0.08%)</title><rect x="241.3" y="85" width="4.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="244.29" y="95.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (415 samples, 7.97%; -0.02%)</title><rect x="449.2" y="405" width="94.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="452.24" y="415.5" >mutation_so..</text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1033.7" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1036.69" y="271.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%; 0.00%)</title><rect x="397.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.14" y="223.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; 0.00%)</title><rect x="1128.8" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.84" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="1109.1" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1112.13" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="586.1" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="589.07" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="69.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="72.80" y="255.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (29 samples, 0.56%; +0.13%)</title><rect x="17.0" y="581" width="6.6" height="15.0" fill="rgb(255,96,96)" rx="2" ry="2" />
<text  x="20.02" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="255.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (27 samples, 0.52%; -0.02%)</title><rect x="741.5" y="341" width="6.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="744.47" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="510.4" y="181" width="0.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="513.41" y="191.5" ></text>
</g>
<g >
<title>cql3::update_parameters::prefetch_data::key_less::key_less (1 samples, 0.02%; +0.02%)</title><rect x="858.8" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="861.81" y="351.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%; 0.00%)</title><rect x="348.2" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="351.21" y="175.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (74 samples, 1.42%; +0.02%)</title><rect x="480.5" y="325" width="16.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="483.50" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; +0.02%)</title><rect x="1043.0" y="309" width="2.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1045.98" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (4 samples, 0.08%; +0.06%)</title><rect x="1131.3" y="485" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1134.33" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%; +0.02%)</title><rect x="47.6" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="50.60" y="287.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="784.7" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.74" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (92 samples, 1.77%; 0.00%)</title><rect x="641.1" y="501" width="20.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.12" y="511.5" ></text>
</g>
<g >
<title>std::addressof&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="66.6" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="69.63" y="239.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (61 samples, 1.17%; -0.02%)</title><rect x="559.6" y="357" width="13.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="562.56" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.59" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; 0.00%)</title><rect x="737.2" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.16" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="583.3" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.35" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="929.5" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="932.49" y="383.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (1 samples, 0.02%; -0.02%)</title><rect x="145.2" y="453" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="148.24" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (5 samples, 0.10%; -0.02%)</title><rect x="608.3" y="437" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="611.27" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="441.3" y="325" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="444.32" y="335.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (4 samples, 0.08%; -0.02%)</title><rect x="82.7" y="373" width="0.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="85.72" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="49.6" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="191.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; +0.04%)</title><rect x="927.7" y="405" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="930.68" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.06%)</title><rect x="316.3" y="261" width="1.8" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="319.27" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="175.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="69.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.80" y="303.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="939.2" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="942.23" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="533" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="747.6" y="357" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="750.58" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="351.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; -0.02%)</title><rect x="513.1" y="181" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="516.13" y="191.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="752.8" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="755.80" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="856.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.09" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (19 samples, 0.36%; -0.02%)</title><rect x="755.1" y="373" width="4.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="758.06" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.04%)</title><rect x="1026.9" y="245" width="2.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1029.90" y="255.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="956.0" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="958.99" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%; +0.02%)</title><rect x="413.2" y="181" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="416.23" y="191.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="99.5" y="485" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="102.48" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (9 samples, 0.17%; +0.02%)</title><rect x="573.6" y="373" width="2.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="576.61" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="62.1" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="65.10" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="525.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.58" y="335.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::do_put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="351.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (11 samples, 0.21%; +0.04%)</title><rect x="701.1" y="437" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="704.15" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="319.5" ></text>
</g>
<g >
<title>cql3::untyped_result_set_row::get_list_data&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::back_insert_iterator&lt;std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="399.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; +0.02%)</title><rect x="543.3" y="405" width="1.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="546.25" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="855.9" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="858.87" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="528.1" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="531.08" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="921.1" y="389" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="924.11" y="399.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (4 samples, 0.08%; +0.06%)</title><rect x="1062.7" y="325" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1065.69" y="335.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (35 samples, 0.67%; 0.00%)</title><rect x="575.9" y="373" width="7.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.87" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="351.6" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="354.61" y="175.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (3 samples, 0.06%; +0.02%)</title><rect x="665.1" y="485" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="668.13" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="622.3" y="373" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="625.31" y="383.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="30.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="856.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="859.09" y="303.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="191.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (386 samples, 7.41%; +0.06%)</title><rect x="204.6" y="293" width="87.4" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="207.59" y="303.5" >seastar::d..</text>
</g>
<g >
<title>cql3::expr::make_conjunction (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.08" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%; -0.02%)</title><rect x="1062.2" y="341" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1065.24" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (5 samples, 0.10%; +0.04%)</title><rect x="1141.3" y="453" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1144.30" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="452.4" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="455.42" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1117.7" y="213" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1120.74" y="223.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; 0.00%)</title><rect x="855.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.41" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (9 samples, 0.17%; -0.06%)</title><rect x="971.2" y="309" width="2.0" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="974.17" y="319.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (73 samples, 1.40%; 0.00%)</title><rect x="1009.0" y="245" width="16.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.00" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (3 samples, 0.06%; +0.06%)</title><rect x="143.4" y="453" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="146.43" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; -0.06%)</title><rect x="567.0" y="293" width="0.3" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="570.04" y="303.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%; 0.00%)</title><rect x="88.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.15" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%; 0.00%)</title><rect x="854.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="53.9" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="56.95" y="303.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="536.0" y="245" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="539.00" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1057.0" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1060.03" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (4 samples, 0.08%; +0.02%)</title><rect x="43.8" y="261" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="46.75" y="271.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="919.5" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.52" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; 0.00%)</title><rect x="737.2" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.16" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="415.3" y="197" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="418.26" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="1033.0" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1036.01" y="271.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (2 samples, 0.04%; +0.04%)</title><rect x="85.4" y="357" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="88.43" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="191.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="74.3" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="77.33" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (52 samples, 1.00%; 0.00%)</title><rect x="573.4" y="389" width="11.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.38" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.04%)</title><rect x="283.0" y="197" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="285.97" y="207.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (39 samples, 0.75%; -0.04%)</title><rect x="547.3" y="421" width="8.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="550.33" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="440.2" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="443.18" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="259.2" y="133" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="262.18" y="143.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (664 samples, 12.75%; 0.00%)</title><rect x="172.6" y="389" width="150.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.65" y="399.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="1095.1" y="373" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1098.08" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1125.0" y="69" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1127.99" y="79.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="522.4" y="325" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="525.41" y="335.5" ></text>
</g>
<g >
<title>row_cache::make_reader (52 samples, 1.00%; -0.06%)</title><rect x="527.4" y="341" width="11.8" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="530.40" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; +0.02%)</title><rect x="958.5" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="961.49" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; 0.00%)</title><rect x="90.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.87" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="981.8" y="325" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="984.82" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::emplace_back&lt;char const  (1 samples, 0.02%; +0.02%)</title><rect x="1125.7" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1128.67" y="255.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (6 samples, 0.12%; +0.02%)</title><rect x="944.2" y="341" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="947.21" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (2 samples, 0.04%; -0.04%)</title><rect x="689.6" y="437" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="692.59" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (22 samples, 0.42%; 0.00%)</title><rect x="686.6" y="485" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.65" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::future_state&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="858.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.81" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (4 samples, 0.08%; 0.00%)</title><rect x="743.1" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.05" y="303.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (62 samples, 1.19%; +0.10%)</title><rect x="693.7" y="501" width="14.0" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="696.67" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="26.5" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="29.54" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="287.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%; +0.02%)</title><rect x="907.1" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="910.06" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.19%; +0.12%)</title><rect x="964.1" y="309" width="2.3" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="967.15" y="319.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%; -0.02%)</title><rect x="121.9" y="469" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="124.91" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (14 samples, 0.27%; -0.04%)</title><rect x="805.6" y="357" width="3.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="808.58" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="1020.3" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1023.33" y="207.5" ></text>
</g>
<g >
<title>validation::validate_column_family (43 samples, 0.83%; -0.02%)</title><rect x="810.3" y="389" width="9.8" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="813.33" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (70 samples, 1.34%; -0.21%)</title><rect x="397.8" y="197" width="15.9" height="15.0" fill="rgb(32,32,255)" rx="2" ry="2" />
<text  x="400.82" y="207.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; -0.02%)</title><rect x="808.7" y="389" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="811.75" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="596.5" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="599.49" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="541.4" y="309" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="544.44" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (15 samples, 0.29%; -0.04%)</title><rect x="255.8" y="133" width="3.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="258.79" y="143.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="824.6" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="827.61" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="138.4" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="141.44" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="239.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="644.3" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="647.29" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="612.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.35" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%; -0.04%)</title><rect x="531.7" y="309" width="0.5" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="534.70" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1130.9" y="197" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1133.88" y="207.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; 0.00%)</title><rect x="66.0" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.95" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10 samples, 0.19%; -0.02%)</title><rect x="659.7" y="485" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="662.69" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (5 samples, 0.10%; 0.00%)</title><rect x="25.9" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="783.8" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="786.83" y="223.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::flush (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="853.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="319.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.12%; 0.00%)</title><rect x="1124.1" y="229" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.08" y="239.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="785.2" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.19" y="207.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.95" y="319.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%; 0.00%)</title><rect x="116.7" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (32 samples, 0.61%; -0.02%)</title><rect x="59.6" y="309" width="7.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="62.61" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="973.4" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="976.44" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (13 samples, 0.25%; +0.02%)</title><rect x="936.1" y="389" width="2.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="939.06" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="831.6" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.63" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (7 samples, 0.13%; +0.02%)</title><rect x="793.3" y="149" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="796.34" y="159.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (27 samples, 0.52%; -0.10%)</title><rect x="292.7" y="293" width="6.1" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="295.71" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (11 samples, 0.21%; +0.04%)</title><rect x="440.4" y="357" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="443.41" y="367.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (12 samples, 0.23%; +0.06%)</title><rect x="417.1" y="245" width="2.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="420.08" y="255.5" ></text>
</g>
<g >
<title>service::client_state::has_access (4 samples, 0.08%; 0.00%)</title><rect x="88.4" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.38" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (59 samples, 1.13%; 0.00%)</title><rect x="877.8" y="357" width="13.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.84" y="367.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="800.8" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="803.82" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="159.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.28" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.15%; 0.00%)</title><rect x="834.6" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.57" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="297.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.69" y="287.5" ></text>
</g>
<g >
<title>seastar::fair_queue::dispatch_requests (1 samples, 0.02%; 0.00%)</title><rect x="1163.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.50" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (7 samples, 0.13%; +0.02%)</title><rect x="10.5" y="453" width="1.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="13.45" y="463.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%; +0.02%)</title><rect x="625.5" y="485" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="628.48" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (2 samples, 0.04%; -0.06%)</title><rect x="562.7" y="309" width="0.5" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="565.74" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="765.0" y="341" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="768.03" y="351.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (252 samples, 4.84%; 0.00%)</title><rect x="31.1" y="485" width="57.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.07" y="495.5" >cql3::..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; +0.02%)</title><rect x="49.0" y="245" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="51.96" y="255.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%; 0.00%)</title><rect x="959.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.16" y="367.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (7 samples, 0.13%; 0.00%)</title><rect x="621.6" y="421" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.63" y="431.5" ></text>
</g>
<g >
<title>seastar::file_impl::write_dma (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="920.0" y="357" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="922.98" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="175.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="719.9" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="722.95" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="847.5" y="437" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="850.49" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; +0.02%)</title><rect x="47.2" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="50.15" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="61.0" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="63.97" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%; 0.00%)</title><rect x="505.9" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.88" y="255.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%; +0.02%)</title><rect x="359.3" y="165" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="362.31" y="175.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%; +0.02%)</title><rect x="499.8" y="293" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="502.76" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="810.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.79" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%; +0.02%)</title><rect x="418.2" y="229" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="421.21" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="751.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.66" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (3 samples, 0.06%; +0.02%)</title><rect x="269.4" y="165" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="272.38" y="175.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (6 samples, 0.12%; 0.00%)</title><rect x="775.7" y="293" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.67" y="303.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%; 0.00%)</title><rect x="1124.1" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.08" y="175.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (50 samples, 0.96%; -0.08%)</title><rect x="1167.3" y="629" width="11.4" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="1170.35" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::fstat (1 samples, 0.02%; 0.00%)</title><rect x="669.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.21" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="551.9" y="341" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="554.86" y="351.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::index_impl (2 samples, 0.04%; +0.04%)</title><rect x="39.4" y="229" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="42.45" y="239.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="324.9" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="327.88" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (620 samples, 11.90%; +0.04%)</title><rect x="947.8" y="405" width="140.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="950.84" y="415.5" >service::storage_..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.50" y="127.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="207.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="89.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.06" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="791.8" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="794.76" y="159.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="80.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.22" y="383.5" ></text>
</g>
<g >
<title>cql3::prepare_context::prepare_context (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.73" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="255.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_clone_visitor&gt; (1 samples, 0.02%; +0.02%)</title><rect x="83.4" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="86.40" y="319.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (14 samples, 0.27%; -0.02%)</title><rect x="391.0" y="165" width="3.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="394.03" y="175.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; +0.02%)</title><rect x="141.4" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="144.39" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="70.3" y="85" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="73.26" y="95.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (4 samples, 0.08%; +0.06%)</title><rect x="1080.4" y="309" width="0.9" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="1083.36" y="319.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_7cabed9ebfe4f22a70f01ba2653108c0ad10a7d1] (1 samples, 0.02%; +0.02%)</title><rect x="372.9" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="375.90" y="175.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%; 0.00%)</title><rect x="856.8" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.77" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (2 samples, 0.04%; +0.02%)</title><rect x="70.0" y="293" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="73.03" y="303.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="154.3" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="157.30" y="447.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="117.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.60" y="319.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; 0.00%)</title><rect x="488.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.66" y="287.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (42 samples, 0.81%; 0.00%)</title><rect x="1121.8" y="485" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.81" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="114.2" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="117.20" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="267.3" y="181" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="270.34" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="635.0" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="638.00" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="35.1" y="149" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="38.14" y="159.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (59 samples, 1.13%; +0.19%)</title><rect x="232.5" y="117" width="13.3" height="15.0" fill="rgb(255,48,48)" rx="2" ry="2" />
<text  x="235.45" y="127.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (599 samples, 11.50%; -0.25%)</title><rect x="951.0" y="389" width="135.7" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="954.01" y="399.5" >service::storage_..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1036.0" y="229" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1038.96" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (10 samples, 0.19%; 0.00%)</title><rect x="666.9" y="485" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.94" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="223.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (25 samples, 0.48%; +0.06%)</title><rect x="626.8" y="501" width="5.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="629.84" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="289.3" y="197" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="292.31" y="207.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (3 samples, 0.06%; -0.02%)</title><rect x="249.2" y="101" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="252.22" y="111.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1103.9" y="421" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1106.92" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%; -0.04%)</title><rect x="139.1" y="405" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="142.12" y="415.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="272.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.32" y="239.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (4 samples, 0.08%; 0.00%)</title><rect x="771.4" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.37" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1034.8" y="213" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1037.83" y="223.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="319.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,717 samples, 90.55%; -0.02%)</title><rect x="94.5" y="517" width="1068.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="97.50" y="527.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%; 0.00%)</title><rect x="61.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.88" y="271.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (2 samples, 0.04%; 0.00%)</title><rect x="1118.6" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.64" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="669.0" y="453" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="671.98" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="263.7" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.71" y="175.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.65" y="271.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="920.9" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="923.88" y="399.5" ></text>
</g>
<g >
<title>locator::token_metadata::update_normal_tokens (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="209.3" y="245" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="212.35" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%; +0.02%)</title><rect x="657.4" y="469" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="660.43" y="479.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="533.5" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="536.51" y="303.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%; +0.08%)</title><rect x="901.4" y="389" width="1.1" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="904.40" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="927.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.45" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (2 samples, 0.04%; 0.00%)</title><rect x="1118.6" y="181" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.64" y="191.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.13%; +0.02%)</title><rect x="944.0" y="357" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="946.99" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="968.5" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="971.45" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="495.7" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.68" y="191.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="856.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.09" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; -0.02%)</title><rect x="416.2" y="229" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="419.17" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%; +0.04%)</title><rect x="1078.1" y="277" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1081.09" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="664.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.00" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="136.9" y="389" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="139.86" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="82.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.26" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="915.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="918.90" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="623.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.99" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cdc::stream_id, std::allocator&lt;cdc::stream_id&gt; &gt;::emplace_back&lt;cdc::stream_id&gt; (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="415.5" ></text>
</g>
<g >
<title>column_mapping::regular_column_at (1 samples, 0.02%; +0.02%)</title><rect x="1117.1" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1120.06" y="255.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.12%; 0.00%)</title><rect x="509.7" y="229" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="512.73" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="764.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="767.80" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="95.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="521.1" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="524.05" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; +0.02%)</title><rect x="52.6" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="55.59" y="271.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%; 0.00%)</title><rect x="541.0" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.99" y="351.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (2 samples, 0.04%; 0.00%)</title><rect x="39.4" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.45" y="255.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="494.8" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.78" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="822.8" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="825.79" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="113.5" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.52" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (178 samples, 3.42%; -0.02%)</title><rect x="33.6" y="389" width="40.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="36.56" y="399.5" >cql..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%; 0.00%)</title><rect x="811.9" y="325" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.92" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="65.3" y="69" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="68.27" y="79.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; +0.02%)</title><rect x="274.8" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="277.81" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="90.2" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="93.19" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%; 0.00%)</title><rect x="408.5" y="133" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="411.47" y="143.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1100.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.75" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (15 samples, 0.29%; +0.04%)</title><rect x="484.6" y="261" width="3.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="487.58" y="271.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; 0.00%)</title><rect x="318.1" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="321.08" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="63.7" y="165" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.69" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (4 samples, 0.08%; +0.02%)</title><rect x="929.7" y="405" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="932.72" y="415.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; +0.02%)</title><rect x="1026.7" y="261" width="2.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1029.67" y="271.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.04%)</title><rect x="263.7" y="149" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="266.71" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%; 0.00%)</title><rect x="33.8" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.79" y="191.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="145.7" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="148.69" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="549.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="552.82" y="367.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="27.7" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.67" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; 0.00%)</title><rect x="788.4" y="133" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.36" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.08%)</title><rect x="775.7" y="261" width="0.9" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="778.67" y="271.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.42" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="669.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.43" y="431.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="56.7" y="149" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="59.67" y="159.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="35.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.14" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; 0.00%)</title><rect x="773.0" y="309" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.96" y="319.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (158 samples, 3.03%; +0.02%)</title><rect x="769.8" y="357" width="35.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="772.78" y="367.5" >ser..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (10 samples, 0.19%; +0.02%)</title><rect x="813.7" y="325" width="2.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="816.73" y="335.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="753.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.93" y="415.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; -0.02%)</title><rect x="552.8" y="341" width="1.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="555.77" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="49.6" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; +0.04%)</title><rect x="681.0" y="469" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="683.98" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;reconcilable_result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="635.9" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="638.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="159.5" y="373" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="162.51" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="503.2" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="506.16" y="303.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; +0.02%)</title><rect x="1119.5" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1122.55" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="650.9" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.86" y="447.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; -0.04%)</title><rect x="1049.6" y="261" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1052.55" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="68.4" y="341" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="71.44" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.08%)</title><rect x="778.8" y="229" width="0.5" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="781.85" y="239.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%; +0.02%)</title><rect x="330.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="333.31" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="853.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="239.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="24.0" y="549" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="27.04" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%; +0.02%)</title><rect x="773.4" y="277" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="776.41" y="287.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.08%)</title><rect x="443.1" y="373" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="446.13" y="383.5" ></text>
</g>
<g >
<title>auth::get_permissions (117 samples, 2.25%; -0.08%)</title><rect x="775.4" y="309" width="26.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="778.45" y="319.5" >a..</text>
</g>
<g >
<title>std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt;::allocator (1 samples, 0.02%; +0.02%)</title><rect x="33.1" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="36.11" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (2 samples, 0.04%; +0.04%)</title><rect x="359.8" y="181" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="362.76" y="191.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (2 samples, 0.04%; +0.02%)</title><rect x="1031.7" y="261" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1034.65" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.10%; 0.00%)</title><rect x="334.8" y="261" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="337.85" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="239.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (6 samples, 0.12%; +0.02%)</title><rect x="707.7" y="501" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="710.72" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="203.7" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="206.68" y="287.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; +0.02%)</title><rect x="842.3" y="437" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="845.27" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="34.7" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.69" y="239.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.12%; -0.06%)</title><rect x="1093.7" y="373" width="1.4" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1096.72" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (22 samples, 0.42%; -0.04%)</title><rect x="636.1" y="501" width="5.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="639.13" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; +0.02%)</title><rect x="277.1" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="280.08" y="223.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (268 samples, 5.14%; 0.00%)</title><rect x="30.4" y="517" width="60.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.39" y="527.5" >single..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="64.8" y="85" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="67.82" y="95.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (3 samples, 0.06%; 0.00%)</title><rect x="26.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (3 samples, 0.06%; 0.00%)</title><rect x="116.7" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1035.3" y="245" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1038.28" y="255.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (33 samples, 0.63%; +0.02%)</title><rect x="1012.6" y="197" width="7.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1015.63" y="207.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (5 samples, 0.10%; +0.10%)</title><rect x="712.9" y="485" width="1.2" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="715.93" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.06%)</title><rect x="715.6" y="405" width="1.0" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="718.64" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%; +0.02%)</title><rect x="757.3" y="341" width="2.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="760.33" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.12%; +0.04%)</title><rect x="104.7" y="421" width="1.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="107.69" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="815.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="818.77" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (14 samples, 0.27%; +0.04%)</title><rect x="963.2" y="325" width="3.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="966.24" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; +0.02%)</title><rect x="13.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="16.40" y="399.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (2 samples, 0.04%; 0.00%)</title><rect x="743.5" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.51" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="49.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.87" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (10 samples, 0.19%; 0.00%)</title><rect x="893.0" y="357" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.02" y="367.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="830.5" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.50" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (1 samples, 0.02%; 0.00%)</title><rect x="13.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.17" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="95.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (8 samples, 0.15%; +0.04%)</title><rect x="936.7" y="357" width="1.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="939.74" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="287.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="199.8" y="229" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="202.83" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="998.8" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1001.81" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::prepared_statement (1 samples, 0.02%; +0.02%)</title><rect x="77.5" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="80.51" y="479.5" ></text>
</g>
<g >
<title>boost::range_detail::transformed_range&lt;service::abstract_write_response_handler::max_backlog (1 samples, 0.02%; +0.02%)</title><rect x="708.2" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="711.17" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="805.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.12" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="622.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.09" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.6" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="64.65" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%; +0.06%)</title><rect x="792.2" y="117" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="795.21" y="127.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (5 samples, 0.10%; 0.00%)</title><rect x="271.0" y="229" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.96" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.2" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="54.23" y="303.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="62.1" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.10" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="765.0" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="768.03" y="367.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.5" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1130.48" y="159.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="808.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.30" y="303.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="847.0" y="405" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="850.03" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="191.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="55.5" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.53" y="127.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="91.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="94.55" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="931.8" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.75" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="769.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.56" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="49.2" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.19" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="34.5" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.47" y="239.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (1 samples, 0.02%; 0.00%)</title><rect x="1117.3" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.28" y="239.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%; +0.04%)</title><rect x="57.1" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="60.12" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%; +0.02%)</title><rect x="25.9" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="28.86" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8 samples, 0.15%; +0.08%)</title><rect x="1082.6" y="357" width="1.8" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="1085.62" y="367.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (1 samples, 0.02%; 0.00%)</title><rect x="116.0" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.02" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.10%)</title><rect x="543.5" y="389" width="1.3" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="546.48" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%; +0.02%)</title><rect x="738.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="741.30" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="11.1" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="383.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="1116.8" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1119.83" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (12 samples, 0.23%; -0.04%)</title><rect x="1033.9" y="261" width="2.7" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1036.92" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="52.4" y="149" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="55.36" y="159.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.02%)</title><rect x="633.6" y="485" width="1.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="636.64" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="818.5" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="821.49" y="319.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="12.5" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="15.49" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="56.0" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="58.99" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.98" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="74.8" y="389" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="77.79" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (4 samples, 0.08%; +0.04%)</title><rect x="891.9" y="357" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="894.89" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1054.3" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1057.31" y="335.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="447.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; 0.00%)</title><rect x="1026.2" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.22" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1019.9" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1022.88" y="159.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; +0.02%)</title><rect x="82.9" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="85.94" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="206.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.18" y="255.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="884.9" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="887.86" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="117.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.38" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="80.7" y="309" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="83.68" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.02%)</title><rect x="686.9" y="469" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="689.87" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="157.2" y="421" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="160.25" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="740.8" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="743.79" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1147.0" y="357" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1149.96" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%; +0.02%)</title><rect x="895.5" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="898.51" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (32 samples, 0.61%; 0.00%)</title><rect x="724.0" y="357" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.03" y="367.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1050.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.68" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (1 samples, 0.02%; +0.02%)</title><rect x="1022.1" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1025.14" y="239.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1105.1" y="405" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.05" y="415.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1127.7" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.70" y="143.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="127.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1127.0" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.02" y="127.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="645.6" y="389" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="648.65" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="56.4" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="159.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%; 0.00%)</title><rect x="1117.7" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.74" y="239.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%; 0.00%)</title><rect x="512.9" y="197" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.90" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="842.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.05" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (10 samples, 0.19%; -0.02%)</title><rect x="615.7" y="421" width="2.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="618.74" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; 0.00%)</title><rect x="823.2" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.25" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.02%)</title><rect x="629.1" y="485" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="632.11" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="115.1" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="118.11" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="202.1" y="261" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="205.10" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="303.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="214.6" y="181" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.56" y="191.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%; 0.00%)</title><rect x="116.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.70" y="479.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (18 samples, 0.35%; +0.04%)</title><rect x="534.6" y="309" width="4.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="537.65" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.10%; +0.04%)</title><rect x="704.8" y="421" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="707.77" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="275.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="278.72" y="255.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="683.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.70" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; 0.00%)</title><rect x="397.1" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="400.14" y="207.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (17 samples, 0.33%; +0.02%)</title><rect x="827.3" y="405" width="3.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="830.32" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="335.8" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="338.75" y="239.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="223.5" ></text>
</g>
<g >
<title>database::find_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="958.7" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="961.71" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (2 samples, 0.04%; +0.02%)</title><rect x="908.0" y="357" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="910.97" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="106.0" y="421" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.05" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="303.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (2 samples, 0.04%; 0.00%)</title><rect x="115.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="727.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.88" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="65.3" y="149" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="535.8" y="245" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="538.78" y="255.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%; 0.00%)</title><rect x="1118.2" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.19" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (7 samples, 0.13%; 0.00%)</title><rect x="1110.3" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.26" y="431.5" ></text>
</g>
<g >
<title>abstract_type::compare (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.12%; +0.02%)</title><rect x="214.3" y="197" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="217.33" y="207.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="444.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.03" y="383.5" ></text>
</g>
<g >
<title>seastar::metrics::make_gauge&lt;unsigned int&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="24.3" y="117" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="27.27" y="127.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="54.6" y="133" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="57.63" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (13 samples, 0.25%; -0.02%)</title><rect x="1144.7" y="437" width="2.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1147.69" y="447.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="625.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.94" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="780.2" y="261" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="783.21" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="612.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.80" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="95.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (12 samples, 0.23%; 0.00%)</title><rect x="741.7" y="325" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.70" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (6 samples, 0.12%; 0.00%)</title><rect x="1011.3" y="197" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.27" y="207.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="115.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.34" y="335.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.12%; 0.00%)</title><rect x="874.9" y="389" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="877.90" y="399.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1126.3" y="149" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.34" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="445.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.85" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%; -0.06%)</title><rect x="474.2" y="325" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="477.16" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (11 samples, 0.21%; +0.02%)</title><rect x="720.2" y="421" width="2.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="723.17" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="679.6" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.63" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%; -0.06%)</title><rect x="710.0" y="501" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="712.98" y="511.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.04%)</title><rect x="567.5" y="293" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="570.49" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="464.4" y="277" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="467.42" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; 0.00%)</title><rect x="680.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.31" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="707.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.04" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%; +0.04%)</title><rect x="363.6" y="181" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="366.61" y="191.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1052.7" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1055.72" y="351.5" ></text>
</g>
<g >
<title>seastar::priority_class_data::priority_class_data (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="175.5" ></text>
</g>
<g >
<title>query::querier_base::close (2 samples, 0.04%; +0.04%)</title><rect x="127.3" y="453" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="130.34" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true, false, false&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.78" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1141.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.07" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%; 0.00%)</title><rect x="959.6" y="341" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.62" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="345.5" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="348.49" y="175.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.04%)</title><rect x="158.2" y="421" width="0.6" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="161.15" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.50" y="111.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.79%; 0.00%)</title><rect x="1122.0" y="421" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.04" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (238 samples, 4.57%; +0.12%)</title><rect x="985.2" y="309" width="53.9" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="988.22" y="319.5" >servi..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; -0.04%)</title><rect x="396.9" y="149" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="399.91" y="159.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (2 samples, 0.04%; 0.00%)</title><rect x="440.9" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="443.86" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="383.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%; +0.02%)</title><rect x="1095.5" y="373" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1098.54" y="383.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.27" y="111.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="211.4" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="214.39" y="223.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="34.5" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.47" y="207.5" ></text>
</g>
<g >
<title>database::apply (1 samples, 0.02%; 0.00%)</title><rect x="1125.0" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.99" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.02%; 0.00%)</title><rect x="57.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.57" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="585.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.84" y="383.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%; +0.06%)</title><rect x="726.7" y="309" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="729.74" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="111.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.04%)</title><rect x="810.1" y="357" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="813.11" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="56.7" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.67" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="191.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="227.2" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="230.24" y="159.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="939.5" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="942.46" y="415.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="1104.4" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1107.37" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (8 samples, 0.15%; +0.04%)</title><rect x="281.2" y="197" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="284.16" y="207.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::start (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="213.7" y="197" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="216.65" y="207.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1008.8" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1011.78" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.68" y="415.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (60 samples, 1.15%; 0.00%)</title><rect x="1065.4" y="293" width="13.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1068.41" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="683.5" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="686.48" y="495.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (222 samples, 4.26%; +0.12%)</title><rect x="475.5" y="341" width="50.3" height="15.0" fill="rgb(255,113,113)" rx="2" ry="2" />
<text  x="478.52" y="351.5" >memta..</text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="734.2" y="389" width="1.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="737.22" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="831.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.85" y="431.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%; +0.02%)</title><rect x="586.5" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="589.52" y="415.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; +0.04%)</title><rect x="333.3" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="336.26" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="640.4" y="453" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="643.44" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (26 samples, 0.50%; 0.00%)</title><rect x="1115.9" y="485" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.92" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.06%)</title><rect x="832.8" y="389" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="835.76" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="780.9" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="783.89" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="272.1" y="229" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="275.10" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="49.2" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.19" y="175.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.04%)</title><rect x="518.6" y="277" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="521.56" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.04%)</title><rect x="857.7" y="245" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="860.68" y="255.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (204 samples, 3.92%; 0.00%)</title><rect x="31.3" y="469" width="46.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.29" y="479.5" >cql3..</text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="986.8" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="989.80" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="53.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.49" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; -0.02%)</title><rect x="260.1" y="149" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="263.09" y="159.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="70.77" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%; 0.00%)</title><rect x="862.0" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.98" y="463.5" ></text>
</g>
<g >
<title>service::client_state::has_access (182 samples, 3.49%; +0.10%)</title><rect x="767.5" y="373" width="41.2" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="770.52" y="383.5" >ser..</text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; 0.00%)</title><rect x="836.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.16" y="335.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (3 samples, 0.06%; +0.06%)</title><rect x="890.3" y="325" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="893.30" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%; 0.00%)</title><rect x="206.2" y="261" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.18" y="271.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%; +0.04%)</title><rect x="745.5" y="277" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="748.55" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="655.8" y="469" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="658.84" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (6 samples, 0.12%; 0.00%)</title><rect x="12.0" y="469" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="49.2" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.19" y="223.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="319.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="283.4" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="286.42" y="223.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%; 0.00%)</title><rect x="64.4" y="261" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (13 samples, 0.25%; +0.02%)</title><rect x="107.6" y="469" width="3.0" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="110.63" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1130.9" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.88" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="255.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="115.8" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.79" y="159.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (21 samples, 0.40%; -0.02%)</title><rect x="492.1" y="245" width="4.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="495.06" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; -0.02%)</title><rect x="1089.4" y="389" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1092.42" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; +0.04%)</title><rect x="763.0" y="341" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="765.99" y="351.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (1 samples, 0.02%; -0.02%)</title><rect x="966.6" y="357" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="969.64" y="367.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%; -0.10%)</title><rect x="274.4" y="245" width="0.2" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="277.36" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="255.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%; +0.02%)</title><rect x="91.3" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="94.32" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="463.5" ></text>
</g>
<g >
<title>__pthread_once (1 samples, 0.02%; +0.02%)</title><rect x="27.9" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="30.90" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (4 samples, 0.08%; 0.00%)</title><rect x="795.8" y="261" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.84" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (63 samples, 1.21%; +0.02%)</title><rect x="559.1" y="373" width="14.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="562.11" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="82.7" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.72" y="367.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; -0.04%)</title><rect x="782.5" y="149" width="1.1" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="785.47" y="159.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.33" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="205.9" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="208.95" y="271.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (2 samples, 0.04%; +0.04%)</title><rect x="92.2" y="517" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="95.23" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="690.5" y="453" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="693.50" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (31 samples, 0.60%; +0.10%)</title><rect x="565.5" y="309" width="7.0" height="15.0" fill="rgb(255,129,129)" rx="2" ry="2" />
<text  x="568.45" y="319.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="775.7" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.67" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="1086.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1089.25" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; +0.02%)</title><rect x="54.4" y="261" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="57.40" y="271.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (124 samples, 2.38%; -0.06%)</title><rect x="1133.8" y="501" width="28.1" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1136.82" y="511.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; -0.04%)</title><rect x="657.2" y="469" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="660.20" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1135.4" y="485" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1138.41" y="495.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="794.7" y="101" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="797.70" y="111.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (6 samples, 0.12%; +0.02%)</title><rect x="535.3" y="277" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="538.33" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.6" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.56" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="946.5" y="373" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="949.48" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (6 samples, 0.12%; -0.02%)</title><rect x="648.6" y="453" width="1.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="651.59" y="463.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (11 samples, 0.21%; +0.04%)</title><rect x="750.1" y="389" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="753.08" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1119.5" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.55" y="223.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (10 samples, 0.19%; +0.17%)</title><rect x="996.3" y="245" width="2.3" height="15.0" fill="rgb(255,64,64)" rx="2" ry="2" />
<text  x="999.32" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1113.2" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1116.21" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (16 samples, 0.31%; 0.00%)</title><rect x="1158.3" y="485" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1161.29" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.04%)</title><rect x="748.0" y="389" width="0.9" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="751.04" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; +0.02%)</title><rect x="179.0" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="181.99" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1049.1" y="293" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1052.10" y="303.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; +0.06%)</title><rect x="262.4" y="117" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="265.36" y="127.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; -0.02%)</title><rect x="1157.2" y="469" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1160.15" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="1135.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.95" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (19 samples, 0.36%; +0.06%)</title><rect x="671.0" y="485" width="4.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="674.02" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (2 samples, 0.04%; +0.02%)</title><rect x="352.7" y="197" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="355.74" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; 0.00%)</title><rect x="645.9" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.87" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="711.1" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="714.11" y="511.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.12%; 0.00%)</title><rect x="739.0" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="741.98" y="383.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; +0.02%)</title><rect x="429.5" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="432.54" y="255.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="49.0" y="341" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="351.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%; 0.00%)</title><rect x="117.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.38" y="447.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.02" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="591.3" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="594.28" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="689.1" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="692.14" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="853.1" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="844.5" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.54" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="840.2" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="843.24" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="446.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.75" y="415.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="784.1" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="787.06" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; +0.04%)</title><rect x="976.2" y="293" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="979.15" y="303.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="777.0" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="780.03" y="303.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="706.6" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="709.58" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (3 samples, 0.06%; +0.06%)</title><rect x="310.8" y="341" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="313.83" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::__normal_iterator (1 samples, 0.02%; +0.02%)</title><rect x="59.4" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="62.38" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;seastar::future&lt;void&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1122.9" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1125.95" y="255.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (4 samples, 0.08%; +0.08%)</title><rect x="897.3" y="389" width="0.9" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="900.32" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.68" y="367.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="159.5" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.51" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="81.1" y="357" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="84.13" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="419.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="422.79" y="255.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="51.2" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.23" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (2 samples, 0.04%; +0.04%)</title><rect x="93.4" y="517" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="96.36" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; 0.00%)</title><rect x="743.1" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.05" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="895.3" y="357" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="898.28" y="367.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="853.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.37" y="255.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.06%)</title><rect x="592.6" y="389" width="1.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="595.64" y="399.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.15%; +0.04%)</title><rect x="411.4" y="165" width="1.8" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="414.41" y="175.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; -0.06%)</title><rect x="1088.1" y="389" width="0.2" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="1091.06" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%; +0.04%)</title><rect x="645.0" y="405" width="1.3" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="647.97" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (3 samples, 0.06%; +0.02%)</title><rect x="740.3" y="373" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="743.34" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="10.5" y="501" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="857.2" y="261" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="860.23" y="271.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="331.4" y="293" width="0.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="334.45" y="303.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1112.8" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1115.75" y="431.5" ></text>
</g>
<g >
<title>free (10 samples, 0.19%; +0.06%)</title><rect x="422.3" y="181" width="2.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="425.29" y="191.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (2 samples, 0.04%; +0.04%)</title><rect x="291.6" y="277" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="294.58" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (12 samples, 0.23%; +0.04%)</title><rect x="936.3" y="373" width="2.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="939.29" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="75.5" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="78.47" y="399.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="271.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; -0.06%)</title><rect x="871.0" y="421" width="0.3" height="15.0" fill="rgb(161,161,255)" rx="2" ry="2" />
<text  x="874.04" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="736.7" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="739.71" y="383.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (63 samples, 1.21%; -0.04%)</title><rect x="733.8" y="405" width="14.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="736.77" y="415.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1118.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.42" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="475.1" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="478.07" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.08" y="191.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="34.9" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.92" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (14 samples, 0.27%; +0.04%)</title><rect x="942.6" y="405" width="3.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="945.63" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="205.9" y="245" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="208.95" y="255.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="825.1" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="828.06" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_role_statement*, std::default_delete&lt;cql3::statements::create_role_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="71.4" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="74.39" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.04%)</title><rect x="637.9" y="485" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="640.94" y="495.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (11 samples, 0.21%; 0.00%)</title><rect x="88.2" y="469" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.15" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="564.1" y="309" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="567.09" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_5asyncIZZN3gms8gossiper27add_local_application_stateENSt7__cxx114listISt4pairINS5_17application_stateENS5_15versioned_valueEESaISC_EEEEN4$_35clERS6_EUlvE_JEEENS_8futurizeINSt9result_ofIFNSt5decayIT_E4typeEDpNSK_IT0_E4typeEEE4typeEE4typeENS_17thread_attributesEOSL_DpOSO_EUlvE0_ZNS_6futureIvE14then_impl_nrvoIS11_S13_EET0_SY_EUlOS3_RS11_ONS_12future_stateINS1_9monostateEEEE_vE15run_and_disposeEv (1 samples, 0.02%; 0.00%)</title><rect x="98.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.80" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="870.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.82" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="683.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.02" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (7 samples, 0.13%; -0.02%)</title><rect x="983.2" y="293" width="1.6" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="986.18" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="63.0" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="66.01" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="442.7" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="445.67" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.02%)</title><rect x="971.2" y="277" width="1.8" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="974.17" y="287.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (4 samples, 0.08%; +0.02%)</title><rect x="915.2" y="357" width="0.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="918.22" y="367.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (3 samples, 0.06%; +0.04%)</title><rect x="577.0" y="341" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="580.01" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="51.7" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.68" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (1 samples, 0.02%; +0.02%)</title><rect x="553.9" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="556.90" y="399.5" ></text>
</g>
<g >
<title>[unknown] (42 samples, 0.81%; 0.00%)</title><rect x="14.1" y="597" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.08" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="751.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.44" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="51.9" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.91" y="159.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="973.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.98" y="303.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="1118.4" y="165" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1121.42" y="175.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; +0.02%)</title><rect x="46.5" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="49.47" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (7 samples, 0.13%; 0.00%)</title><rect x="639.5" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; 0.00%)</title><rect x="952.6" y="357" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.60" y="367.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; -0.02%)</title><rect x="126.0" y="453" width="1.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="128.98" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%; +0.06%)</title><rect x="913.0" y="389" width="0.6" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="915.95" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="90.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.97" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; -0.04%)</title><rect x="250.8" y="69" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="253.80" y="79.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="191.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; 0.00%)</title><rect x="328.7" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="331.73" y="383.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (7 samples, 0.13%; 0.00%)</title><rect x="10.5" y="469" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="33.6" y="229" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="523.3" y="309" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="526.32" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1019.6" y="181" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1022.65" y="191.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="61.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.88" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="35.1" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.14" y="175.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.10%; 0.00%)</title><rect x="544.8" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="547.84" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mE (1 samples, 0.02%; +0.02%)</title><rect x="40.6" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="43.58" y="271.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="116.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.47" y="303.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%; +0.06%)</title><rect x="731.3" y="357" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="734.27" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (11 samples, 0.21%; 0.00%)</title><rect x="675.5" y="485" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.55" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%; 0.00%)</title><rect x="1004.7" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.70" y="255.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="682.8" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.80" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (68 samples, 1.31%; 0.00%)</title><rect x="504.1" y="293" width="15.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.06" y="303.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%; +0.02%)</title><rect x="693.4" y="485" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="696.44" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.04%)</title><rect x="1136.3" y="485" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1139.31" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (54 samples, 1.04%; +0.04%)</title><rect x="1009.9" y="229" width="12.2" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1012.91" y="239.5" ></text>
</g>
<g >
<title>database::database (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (4 samples, 0.08%; 0.00%)</title><rect x="82.7" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.72" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="974.3" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.34" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; -0.02%)</title><rect x="82.3" y="341" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="85.26" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="56.4" y="133" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="59.44" y="143.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; +0.02%)</title><rect x="742.4" y="293" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="745.37" y="303.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1079.7" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1082.68" y="319.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="808.5" y="325" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="811.52" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="13.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.40" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%; -0.02%)</title><rect x="42.8" y="245" width="0.7" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="45.85" y="255.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.02%)</title><rect x="654.9" y="485" width="1.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="657.93" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="99.3" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="102.25" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1108.7" y="389" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1111.68" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="475.3" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="478.29" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%; +0.06%)</title><rect x="724.3" y="341" width="1.5" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="727.25" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="524.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.45" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (5 samples, 0.10%; +0.08%)</title><rect x="471.4" y="261" width="1.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="474.44" y="271.5" ></text>
</g>
<g >
<title>row::append_cell (2 samples, 0.04%; 0.00%)</title><rect x="1118.6" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.64" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="239.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="841.8" y="405" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="844.82" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.85" y="191.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (3 samples, 0.06%; +0.06%)</title><rect x="561.4" y="341" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="564.38" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::_Tuple_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.49" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="287.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="751.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.66" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.02%)</title><rect x="1018.3" y="165" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1021.29" y="175.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (191 samples, 3.67%; +0.02%)</title><rect x="1039.4" y="357" width="43.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1042.36" y="367.5" >serv..</text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="887.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.58" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (5 samples, 0.10%; +0.04%)</title><rect x="462.4" y="261" width="1.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="465.38" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (4 samples, 0.08%; -0.04%)</title><rect x="186.9" y="293" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="189.92" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="625.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.71" y="479.5" ></text>
</g>
<g >
<title>database::setup_metrics (1 samples, 0.02%; 0.00%)</title><rect x="26.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (11 samples, 0.21%; 0.00%)</title><rect x="745.1" y="309" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.09" y="319.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.75%; -0.02%)</title><rect x="786.3" y="213" width="8.9" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="789.32" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="186.2" y="293" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="189.24" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="891.7" y="357" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="894.66" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="756.2" y="325" width="0.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="759.19" y="335.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="666.0" y="469" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="669.03" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="64.6" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="67.59" y="159.5" ></text>
</g>
<g >
<title>cql3::constants::value::~value (1 samples, 0.02%; 0.00%)</title><rect x="78.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.19" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="34.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.47" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%; -0.04%)</title><rect x="994.3" y="261" width="0.4" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="997.28" y="271.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.04" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; -0.04%)</title><rect x="620.3" y="405" width="0.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="623.27" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (5 samples, 0.10%; +0.02%)</title><rect x="58.5" y="277" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="61.48" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="850.2" y="485" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="853.20" y="495.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%; -0.02%)</title><rect x="1163.9" y="437" width="0.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1166.95" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="49.9" y="149" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="52.87" y="159.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="844.8" y="469" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="847.77" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="79.37" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (10 samples, 0.19%; +0.08%)</title><rect x="256.5" y="117" width="2.2" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="259.47" y="127.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="57.1" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.12" y="319.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (2 samples, 0.04%; 0.00%)</title><rect x="854.3" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.28" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="223.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (37 samples, 0.71%; +0.02%)</title><rect x="723.6" y="373" width="8.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="726.57" y="383.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="357.5" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.50" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="684.2" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.16" y="159.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="55.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.76" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (22 samples, 0.42%; -0.02%)</title><rect x="854.3" y="453" width="5.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="857.28" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="307.7" y="325" width="0.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="310.66" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; +0.02%)</title><rect x="287.5" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="290.50" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="1085.8" y="373" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1088.80" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="60.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="191.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="904.1" y="357" width="0.7" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="907.12" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1162.8" y="501" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1165.82" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="1048.4" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.42" y="287.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="497.5" y="325" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="500.49" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.74" y="351.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (6 samples, 0.12%; -0.02%)</title><rect x="1139.9" y="453" width="1.4" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1142.94" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%; +0.02%)</title><rect x="1053.2" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1056.18" y="351.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (37 samples, 0.71%; 0.00%)</title><rect x="723.6" y="389" width="8.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.57" y="399.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="415.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; -0.04%)</title><rect x="224.5" y="197" width="0.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="227.52" y="207.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (2 samples, 0.04%; +0.02%)</title><rect x="1016.3" y="149" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1019.25" y="159.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%; 0.00%)</title><rect x="818.7" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.72" y="319.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%; +0.02%)</title><rect x="1050.9" y="341" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1053.91" y="351.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (2 samples, 0.04%; -0.08%)</title><rect x="602.2" y="437" width="0.4" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="605.15" y="447.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (252 samples, 4.84%; -0.02%)</title><rect x="982.0" y="325" width="57.1" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="985.04" y="335.5" >servic..</text>
</g>
<g >
<title>cql3::relation::to_restriction (5 samples, 0.10%; +0.02%)</title><rect x="82.5" y="389" width="1.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="85.49" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%; -0.02%)</title><rect x="666.7" y="469" width="0.2" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="669.71" y="479.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.02" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="835.5" y="341" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="838.48" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="884.4" y="293" width="0.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="887.41" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="640.7" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.66" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="50.1" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="11.1" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::has_supporting_index (2 samples, 0.04%; +0.02%)</title><rect x="83.6" y="389" width="0.5" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="86.62" y="399.5" ></text>
</g>
<g >
<title>seastar::output_stream&lt;char&gt;::put (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="146.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="149.60" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="66.0" y="213" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="68.95" y="223.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.50" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%; +0.02%)</title><rect x="1088.5" y="405" width="1.6" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1091.51" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%; -0.04%)</title><rect x="905.5" y="357" width="1.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="908.48" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (17 samples, 0.33%; 0.00%)</title><rect x="816.0" y="341" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.00" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; -0.10%)</title><rect x="394.6" y="197" width="0.3" height="15.0" fill="rgb(129,129,255)" rx="2" ry="2" />
<text  x="397.65" y="207.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (662 samples, 12.71%; -0.04%)</title><rect x="940.1" y="421" width="150.0" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="943.14" y="431.5" >cql3::statements::s..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;seastar::sharded&lt;db::system_distributed_keyspace&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="26.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.54" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="55.5" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.53" y="143.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="1061.6" y="325" width="0.4" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1064.56" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="86.6" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="89.57" y="447.5" ></text>
</g>
<g >
<title>mutation_partition_view::accept (1 samples, 0.02%; +0.02%)</title><rect x="1120.0" y="261" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1123.00" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (65 samples, 1.25%; 0.00%)</title><rect x="33.6" y="357" width="14.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="367.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="463.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (7 samples, 0.13%; -0.02%)</title><rect x="1110.3" y="405" width="1.5" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1113.26" y="415.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.12%; +0.06%)</title><rect x="410.1" y="165" width="1.3" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="413.05" y="175.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="302.5" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="305.45" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (6 samples, 0.12%; -0.04%)</title><rect x="793.6" y="133" width="1.3" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="796.57" y="143.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (10 samples, 0.19%; 0.00%)</title><rect x="1128.6" y="213" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.61" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="117.4" y="373" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="120.38" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%; -0.04%)</title><rect x="1156.0" y="485" width="0.9" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="1159.02" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="1136.5" y="485" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1139.54" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="49.4" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.42" y="159.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.42" y="239.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1115.5" y="437" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1118.47" y="447.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.69%; +0.02%)</title><rect x="786.8" y="197" width="8.1" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="789.77" y="207.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (17 samples, 0.33%; +0.02%)</title><rect x="994.7" y="261" width="3.9" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="997.73" y="271.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="1162.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.59" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="54.4" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.40" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="639.5" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.53" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="56.4" y="229" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.44" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="60.5" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.52" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (3 samples, 0.06%; +0.02%)</title><rect x="692.5" y="469" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="695.54" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; +0.02%)</title><rect x="766.4" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="769.39" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; 0.00%)</title><rect x="1163.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.27" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (9 samples, 0.17%; +0.04%)</title><rect x="644.5" y="421" width="2.1" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="647.51" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (10 samples, 0.19%; 0.00%)</title><rect x="856.5" y="373" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.55" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="805.4" y="309" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="808.35" y="319.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="165" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.42" y="175.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="511.5" y="197" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="514.54" y="207.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.46" y="479.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (16 samples, 0.31%; +0.02%)</title><rect x="63.2" y="277" width="3.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="66.23" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="797.6" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="800.65" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; +0.02%)</title><rect x="1119.8" y="245" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1122.78" y="255.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (125 samples, 2.40%; -0.02%)</title><rect x="775.0" y="325" width="28.3" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="778.00" y="335.5" >s..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (19 samples, 0.36%; +0.15%)</title><rect x="1045.5" y="309" width="4.3" height="15.0" fill="rgb(255,80,80)" rx="2" ry="2" />
<text  x="1048.47" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="290.4" y="229" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="293.45" y="239.5" ></text>
</g>
<g >
<title>ser::column__c__variant&lt;bytes_ostream&gt;::start_variant_live_cell (2 samples, 0.04%; +0.04%)</title><rect x="1126.6" y="117" width="0.4" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="1129.57" y="127.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="547.1" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="550.11" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.10%; +0.06%)</title><rect x="221.4" y="229" width="1.1" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="224.35" y="239.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="496.6" y="213" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="499.59" y="223.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_type_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="74.6" y="389" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="77.56" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; 0.00%)</title><rect x="850.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="853.66" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="622.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.31" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.12" y="271.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (19 samples, 0.36%; +0.08%)</title><rect x="383.8" y="165" width="4.3" height="15.0" fill="rgb(255,145,145)" rx="2" ry="2" />
<text  x="386.78" y="175.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="116.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="119.92" y="303.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="690.7" y="437" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="693.73" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.77%; -0.02%)</title><rect x="1122.3" y="389" width="9.0" height="15.0" fill="rgb(193,193,255)" rx="2" ry="2" />
<text  x="1125.27" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="888.9" y="309" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="891.94" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (11 samples, 0.21%; +0.04%)</title><rect x="267.6" y="181" width="2.5" height="15.0" fill="rgb(255,177,177)" rx="2" ry="2" />
<text  x="270.57" y="191.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%; 0.00%)</title><rect x="357.7" y="181" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.73" y="191.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="1141.7" y="437" width="0.7" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1144.75" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1161.9" y="421" width="0.2" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="1164.91" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="25.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.86" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="117.1" y="325" width="0.3" height="15.0" fill="rgb(255,193,193)" rx="2" ry="2" />
<text  x="120.15" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%; +0.06%)</title><rect x="264.8" y="213" width="0.7" height="15.0" fill="rgb(255,161,161)" rx="2" ry="2" />
<text  x="267.85" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (10 samples, 0.19%; -0.04%)</title><rect x="394.9" y="197" width="2.2" height="15.0" fill="rgb(177,177,255)" rx="2" ry="2" />
<text  x="397.88" y="207.5" ></text>
</g>
<g >
<title>cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="626.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.39" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.37" y="111.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%; -0.08%)</title><rect x="340.1" y="245" width="0.6" height="15.0" fill="rgb(145,145,255)" rx="2" ry="2" />
<text  x="343.06" y="255.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1017.4" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.38" y="143.5" ></text>
</g>
</g>
</svg>
