<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1062.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1045" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1045" > </text>
<g id="frames">
<g >
<title>data_value::~data_value (1 samples, 0.02%; 0.00%)</title><rect x="73.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.94" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="271.7" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="274.71" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="145.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="148.21" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; +0.02%)</title><rect x="53.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.08" y="655.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="101" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="111.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="871.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.91" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; +0.02%)</title><rect x="40.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.48" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="647.6" y="837" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="650.55" y="847.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="464.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="467.67" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (17 samples, 0.33%; -0.08%)</title><rect x="279.7" y="581" width="3.9" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="282.73" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="527.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="693" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1167.5" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.54" y="847.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1167.3" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.31" y="831.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="655.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (7 samples, 0.14%; 0.00%)</title><rect x="55.6" y="613" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.60" y="623.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="655.1" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="658.12" y="847.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1098.8" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1101.79" y="735.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_local_host_id (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="863.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="719.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="552.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.68" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_initial_partition_key_restrictions (1 samples, 0.02%; +0.02%)</title><rect x="75.3" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.31" y="735.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="550.2" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.16" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (5 samples, 0.10%; +0.08%)</title><rect x="543.3" y="629" width="1.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="546.28" y="639.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::column_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.39" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="1080.2" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1083.23" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="857.2" y="757" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="860.24" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; 0.00%)</title><rect x="623.3" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.26" y="799.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="54.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.46" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (2 samples, 0.04%; +0.04%)</title><rect x="248.1" y="437" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="251.11" y="447.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="1128.4" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.35" y="527.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="981" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="991.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="200.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="203.67" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="973.7" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.66" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="462.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.15" y="703.5" ></text>
</g>
<g >
<title>schema::get_sharder (1 samples, 0.02%; +0.02%)</title><rect x="1126.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.06" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (51 samples, 0.99%; -0.02%)</title><rect x="289.6" y="597" width="11.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="292.59" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1130.9" y="549" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.87" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="819.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.66" y="703.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (17 samples, 0.33%; 0.00%)</title><rect x="739.5" y="757" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.45" y="767.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (15 samples, 0.29%; 0.00%)</title><rect x="868.2" y="677" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.24" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.83" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="858.8" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="861.85" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="687.5" ></text>
</g>
<g >
<title>table::mutation_query (2 samples, 0.04%; 0.00%)</title><rect x="145.0" y="805" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="815.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="600.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.80" y="703.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="560.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="563.01" y="639.5" ></text>
</g>
<g >
<title>sstables::sstable::get_writer (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="113.8" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="116.81" y="815.5" ></text>
</g>
<g >
<title>database::query (110 samples, 2.14%; 0.00%)</title><rect x="1001.2" y="613" width="25.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1004.16" y="623.5" >d..</text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.08%)</title><rect x="617.5" y="709" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="620.53" y="719.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="826.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="829.76" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="301.3" y="597" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="304.28" y="607.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="572.2" y="693" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.16" y="703.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="112.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.67" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="821" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="831.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (11 samples, 0.21%; +0.02%)</title><rect x="1162.0" y="789" width="2.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1165.04" y="799.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; +0.02%)</title><rect x="384.9" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="387.92" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="698.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.66" y="815.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; -0.02%)</title><rect x="976.6" y="677" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="979.64" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="598.5" y="709" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="601.51" y="719.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (5 samples, 0.10%; +0.08%)</title><rect x="1028.0" y="613" width="1.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1030.98" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="639.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="767.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (1 samples, 0.02%; 0.00%)</title><rect x="720.4" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.43" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (9 samples, 0.17%; -0.02%)</title><rect x="741.3" y="677" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="744.28" y="687.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="335.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.08%; +0.06%)</title><rect x="119.1" y="821" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="122.09" y="831.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="623.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.72" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="144.5" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="147.52" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; +0.04%)</title><rect x="946.6" y="709" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="949.62" y="719.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (14 samples, 0.27%; 0.00%)</title><rect x="571.2" y="741" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.24" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="685.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.60" y="815.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="85" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="95.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%; +0.04%)</title><rect x="212.1" y="565" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="215.13" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="431.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.33%; 0.00%)</title><rect x="826.8" y="709" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.76" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="692.2" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="695.24" y="847.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="653.7" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.74" y="847.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="831.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; +0.02%)</title><rect x="1104.7" y="757" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1107.75" y="767.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (6 samples, 0.12%; -0.02%)</title><rect x="790.1" y="645" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="793.10" y="655.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.16%; -0.04%)</title><rect x="558.4" y="661" width="1.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="561.41" y="671.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="761.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.68" y="751.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%; -0.04%)</title><rect x="1061.9" y="597" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1064.89" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="943.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="946.41" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1116.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.21" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::single_column_relation&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.2" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.23" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, std::pair&lt;unsigned int const, unsigned int&gt;, std::_Select1st&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="36.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="39.35" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; -0.10%)</title><rect x="805.9" y="437" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="808.91" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="831.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.81" y="655.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::update_parameters::make_cell (2 samples, 0.04%; -0.02%)</title><rect x="868.2" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="871.24" y="639.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%; +0.02%)</title><rect x="712.6" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.64" y="831.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%; +0.02%)</title><rect x="702.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="705.55" y="831.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.02%)</title><rect x="322.8" y="709" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.82" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="465.1" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="468.13" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="709" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="719.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (266 samples, 5.17%; +0.02%)</title><rect x="18.7" y="853" width="61.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.71" y="863.5" >cql3::..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; +0.02%)</title><rect x="815.1" y="645" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="818.08" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="830.0" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="832.97" y="655.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (20 samples, 0.39%; 0.00%)</title><rect x="1052.7" y="677" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.73" y="687.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (36 samples, 0.70%; +0.08%)</title><rect x="444.7" y="597" width="8.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="447.74" y="607.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="687.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (1 samples, 0.02%; 0.00%)</title><rect x="72.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.56" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.19" y="543.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (5 samples, 0.10%; 0.00%)</title><rect x="1110.7" y="757" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.71" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="543.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="767.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (1 samples, 0.02%; +0.02%)</title><rect x="110.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.61" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="62.0" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.02" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="707.1" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="710.14" y="831.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="647.3" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="650.32" y="847.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; 0.00%)</title><rect x="736.2" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.24" y="815.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1116.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="278.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="281.59" y="559.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="639.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="1047.5" y="693" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.46" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="1188.9" y="965" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1191.85" y="975.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="700.7" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.72" y="831.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="816.0" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="818.99" y="639.5" ></text>
</g>
<g >
<title>__libc_start_main (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="981" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="991.5" >__libc_start_main</text>
</g>
<g >
<title>partition_snapshot::static_row (8 samples, 0.16%; +0.08%)</title><rect x="302.4" y="565" width="1.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="305.42" y="575.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%; 0.00%)</title><rect x="685.8" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.82" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="901.9" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.93" y="687.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%; +0.02%)</title><rect x="15.7" y="965" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="18.73" y="975.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="696.6" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.60" y="847.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::feature_service&gt;::start&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="799.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1132.0" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.02" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="757" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.06%)</title><rect x="117.0" y="837" width="0.3" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="120.02" y="847.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; -0.08%)</title><rect x="698.4" y="789" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="701.43" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (54 samples, 1.05%; +0.02%)</title><rect x="288.9" y="613" width="12.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.90" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1084.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1087.58" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="549.5" y="613" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="552.47" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="22.8" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.83" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="39.8" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (4 samples, 0.08%; 0.00%)</title><rect x="57.2" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.21" y="607.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="701.2" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="704.18" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1112.3" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.31" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1128.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="62.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.48" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::emplace_back&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="815.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (9 samples, 0.17%; +0.04%)</title><rect x="1014.2" y="549" width="2.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1017.23" y="559.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="1024.5" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.54" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="865.5" y="629" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="868.49" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (7 samples, 0.14%; +0.04%)</title><rect x="636.6" y="789" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="639.55" y="799.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (5 samples, 0.10%; +0.06%)</title><rect x="1079.1" y="693" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1082.08" y="703.5" ></text>
</g>
<g >
<title>boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;::distance_to (1 samples, 0.02%; +0.02%)</title><rect x="1127.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.67" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="214.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="217.19" y="543.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1118.7" y="597" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.73" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="778.9" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.87" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="911.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; -0.06%)</title><rect x="761.9" y="725" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="764.91" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (3 samples, 0.06%; -0.04%)</title><rect x="1149.9" y="805" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1152.90" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="460.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="463.09" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.08" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="823.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.79" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="568.0" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.03" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="671.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.10%; -0.06%)</title><rect x="594.8" y="725" width="1.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="597.84" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="677.8" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="680.80" y="847.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; -0.02%)</title><rect x="215.8" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="218.80" y="559.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (57 samples, 1.11%; +0.02%)</title><rect x="908.8" y="741" width="13.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="911.81" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%; -0.14%)</title><rect x="626.2" y="789" width="0.5" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="629.24" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="867.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.10" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (35 samples, 0.68%; -0.02%)</title><rect x="1050.2" y="693" width="8.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1053.21" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="772.2" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.22" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="54.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.92" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (4 samples, 0.08%; 0.00%)</title><rect x="1168.5" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.46" y="847.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.02%; +0.02%)</title><rect x="50.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.10" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (21 samples, 0.41%; 0.00%)</title><rect x="1069.7" y="629" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.69" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="879.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (15 samples, 0.29%; +0.04%)</title><rect x="217.9" y="581" width="3.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="220.86" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="725.0" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.01" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="17.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.56" y="575.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (2 samples, 0.04%; +0.02%)</title><rect x="625.8" y="789" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="628.78" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (5 samples, 0.10%; 0.00%)</title><rect x="1166.2" y="821" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="831.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (13 samples, 0.25%; +0.08%)</title><rect x="280.4" y="533" width="3.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="283.42" y="543.5" ></text>
</g>
<g >
<title>__start_context (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="933" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="943.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; 0.00%)</title><rect x="813.9" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.93" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="483.9" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="486.93" y="607.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; +0.02%)</title><rect x="111.3" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.29" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.10%; 0.00%)</title><rect x="43.9" y="677" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="687.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (1 samples, 0.02%; +0.02%)</title><rect x="86.3" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.31" y="879.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; +0.02%)</title><rect x="721.3" y="805" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="724.35" y="815.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%; +0.02%)</title><rect x="118.6" y="821" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="121.63" y="831.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (31 samples, 0.60%; +0.04%)</title><rect x="517.6" y="629" width="7.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="520.61" y="639.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous&gt; (1 samples, 0.02%; 0.00%)</title><rect x="814.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.85" y="655.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (1 samples, 0.02%; 0.00%)</title><rect x="78.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (7 samples, 0.14%; 0.00%)</title><rect x="1110.7" y="773" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.71" y="783.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%; +0.02%)</title><rect x="665.4" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="668.43" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (4 samples, 0.08%; 0.00%)</title><rect x="658.1" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="847.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%; +0.02%)</title><rect x="462.6" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.61" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="687.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="541.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.68" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="786.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.66" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="633.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="636.34" y="735.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="47.1" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.13" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="228.6" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="231.63" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1118.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.04" y="543.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (3 samples, 0.06%; -0.02%)</title><rect x="277.2" y="485" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="280.21" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="61.6" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.56" y="671.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="821.7" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.72" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="769.9" y="693" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.93" y="703.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="668.2" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.18" y="815.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="533.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="536.88" y="639.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (3 samples, 0.06%; +0.04%)</title><rect x="852.4" y="741" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="855.43" y="751.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="843.5" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="846.49" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; +0.02%)</title><rect x="56.8" y="325" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.75" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.04%)</title><rect x="1159.5" y="805" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1162.52" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="841.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="844.20" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="53.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.77" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="809.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.58" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (2 samples, 0.04%; +0.04%)</title><rect x="1117.4" y="517" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1120.35" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (15 samples, 0.29%; +0.04%)</title><rect x="943.6" y="773" width="3.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="946.64" y="783.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (23 samples, 0.45%; +0.06%)</title><rect x="1016.7" y="533" width="5.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1019.75" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%; 0.00%)</title><rect x="22.8" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="735.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="1026.6" y="613" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.60" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="789" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; -0.14%)</title><rect x="837.1" y="741" width="1.1" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="840.08" y="751.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="871.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="109.9" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.92" y="847.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (6 samples, 0.12%; 0.00%)</title><rect x="1125.4" y="597" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="993.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="996.14" y="655.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%; +0.02%)</title><rect x="451.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="454.38" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; 0.00%)</title><rect x="718.6" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.60" y="783.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; 0.00%)</title><rect x="49.0" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="11.6" y="933" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.60" y="943.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="678.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.72" y="815.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (5 samples, 0.10%; +0.02%)</title><rect x="1019.7" y="501" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1022.73" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="1057.3" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1060.31" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%; -0.02%)</title><rect x="485.8" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="488.76" y="639.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1076.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1079.56" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="835.2" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.24" y="783.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%; 0.00%)</title><rect x="1124.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.00" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.39" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="44.1" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1018.1" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1021.12" y="511.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="844.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.41" y="751.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (6 samples, 0.12%; +0.02%)</title><rect x="55.8" y="581" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.83" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="283.6" y="565" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="286.63" y="575.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="1148.5" y="789" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.52" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="703.5" ></text>
</g>
<g >
<title>schema::get_column_definition (2 samples, 0.04%; 0.00%)</title><rect x="75.5" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.54" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="863.0" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.97" y="863.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.00" y="879.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; -0.04%)</title><rect x="662.4" y="789" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="665.45" y="799.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="639.8" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.76" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; 0.00%)</title><rect x="1131.6" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.56" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="866.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.95" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="317.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="320.55" y="687.5" ></text>
</g>
<g >
<title>service::client_state::has_access (4 samples, 0.08%; 0.00%)</title><rect x="78.1" y="789" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="978.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="981.70" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (592 samples, 11.50%; -0.02%)</title><rect x="182.1" y="693" width="135.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="185.11" y="703.5" >mutation_fragment..</text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="24.0" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.98" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1088.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1091.02" y="751.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="789" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="991.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="994.08" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="623.5" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.49" y="799.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="511.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.20" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="59.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="724.3" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="727.33" y="831.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%; +0.02%)</title><rect x="1123.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.08" y="607.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (7 samples, 0.14%; 0.00%)</title><rect x="538.2" y="581" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.24" y="591.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (29 samples, 0.56%; +0.04%)</title><rect x="489.9" y="645" width="6.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="492.88" y="655.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (5 samples, 0.10%; -0.04%)</title><rect x="408.1" y="501" width="1.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="411.07" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (1 samples, 0.02%; 0.00%)</title><rect x="35.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="38.21" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="860.7" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="863.68" y="767.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (1 samples, 0.02%; +0.02%)</title><rect x="1164.6" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1167.56" y="863.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; 0.00%)</title><rect x="272.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.17" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%; +0.02%)</title><rect x="627.6" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="630.62" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="671.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (8 samples, 0.16%; 0.00%)</title><rect x="294.4" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.40" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.02%)</title><rect x="573.5" y="661" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="576.53" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (3 samples, 0.06%; 0.00%)</title><rect x="725.2" y="853" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.24" y="863.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="772.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.99" y="719.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="943.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="72.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.79" y="687.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="723.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="725.95" y="783.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (8 samples, 0.16%; 0.00%)</title><rect x="212.6" y="565" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="215.59" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%; +0.02%)</title><rect x="1138.9" y="837" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1141.89" y="847.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="1117.1" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.12" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="57.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.67" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (17 samples, 0.33%; 0.00%)</title><rect x="1033.7" y="613" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.71" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (3 samples, 0.06%; 0.00%)</title><rect x="637.5" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.47" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (3 samples, 0.06%; +0.04%)</title><rect x="950.7" y="757" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="953.75" y="767.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%; 0.00%)</title><rect x="868.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.47" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1127.2" y="645" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.21" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.71" y="655.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%; 0.00%)</title><rect x="387.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="390.21" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; -0.04%)</title><rect x="641.8" y="837" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="644.82" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="904.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.45" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="696.4" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.37" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="336.3" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="339.34" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (45 samples, 0.87%; 0.00%)</title><rect x="25.8" y="645" width="10.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.81" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="527.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%; -0.04%)</title><rect x="138.8" y="741" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="141.79" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (4 samples, 0.08%; -0.02%)</title><rect x="492.6" y="613" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="495.63" y="623.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.02%)</title><rect x="494.7" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="497.70" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.81" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; +0.02%)</title><rect x="54.0" y="597" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.00" y="607.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="681.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="684.70" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; +0.02%)</title><rect x="574.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="577.22" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="511.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="732.6" y="773" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="735.58" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::void_message&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="79.9" y="885" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.90" y="895.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::_M_head (2 samples, 0.04%; +0.04%)</title><rect x="67.1" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="70.06" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="752.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.05" y="735.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.14%; 0.00%)</title><rect x="825.2" y="693" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.16" y="703.5" ></text>
</g>
<g >
<title>auth::get_permissions (117 samples, 2.27%; -0.04%)</title><rect x="789.6" y="661" width="26.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="792.64" y="671.5" >a..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.23%; -0.08%)</title><rect x="301.5" y="581" width="2.8" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="304.51" y="591.5" ></text>
</g>
<g >
<title>query::digester::digester (2 samples, 0.04%; 0.00%)</title><rect x="615.7" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="618.70" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="104.6" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="107.65" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1083.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.44" y="735.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (43 samples, 0.84%; +0.02%)</title><rect x="659.9" y="837" width="9.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="662.93" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="607.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (15 samples, 0.29%; +0.04%)</title><rect x="706.2" y="837" width="3.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="709.22" y="847.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; 0.00%)</title><rect x="720.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.20" y="783.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (20 samples, 0.39%; +0.02%)</title><rect x="520.1" y="581" width="4.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="523.13" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.02%)</title><rect x="608.1" y="757" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="611.14" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.29%; 0.00%)</title><rect x="811.2" y="613" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.18" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (5 samples, 0.10%; +0.02%)</title><rect x="455.7" y="597" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="458.74" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (3 samples, 0.06%; -0.04%)</title><rect x="673.2" y="837" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="676.22" y="847.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.12" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="676.0" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.97" y="783.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1120.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.10" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="78.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="703.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%; 0.00%)</title><rect x="1119.0" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.96" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; +0.02%)</title><rect x="46.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.90" y="687.5" ></text>
</g>
<g >
<title>sstables::mc::row_has_complex_deletion (2 samples, 0.04%; 0.00%)</title><rect x="83.3" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.33" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="583.8" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="586.84" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; 0.00%)</title><rect x="672.5" y="837" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.53" y="847.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.54" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; -0.04%)</title><rect x="750.7" y="725" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="753.68" y="735.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="751.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%; -0.02%)</title><rect x="911.3" y="725" width="3.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="914.33" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="511.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.22" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="664.3" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="667.28" y="799.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="623.3" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.26" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;scanning_and_populating_reader::read_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="351.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%; +0.06%)</title><rect x="997.3" y="613" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1000.27" y="623.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (3 samples, 0.06%; +0.02%)</title><rect x="1121.7" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.71" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (10 samples, 0.19%; 0.00%)</title><rect x="853.6" y="725" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.58" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (16 samples, 0.31%; +0.06%)</title><rect x="491.0" y="629" width="3.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="494.03" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="21.2" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.23" y="767.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%; +0.02%)</title><rect x="363.4" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="366.38" y="559.5" ></text>
</g>
<g >
<title>canonical_mutation::canonical_mutation (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1141.0" y="821" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.96" y="831.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="815.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="54.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.23" y="463.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; -0.02%)</title><rect x="855.9" y="789" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="858.87" y="799.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; -0.02%)</title><rect x="75.5" y="757" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="78.54" y="767.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%; -0.02%)</title><rect x="1165.2" y="853" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1168.25" y="863.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="290.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="293.50" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="853" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="863.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="978.2" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="981.25" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1086.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1088.96" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="775.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.43" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::_M_ptr (2 samples, 0.04%; 0.00%)</title><rect x="67.1" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.06" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="23.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.29" y="719.5" ></text>
</g>
<g >
<title>query_result_builder::consume (2 samples, 0.04%; 0.00%)</title><rect x="701.2" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.18" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; -0.06%)</title><rect x="941.6" y="757" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="944.58" y="767.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (237 samples, 4.60%; -0.04%)</title><rect x="498.8" y="693" width="54.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="501.82" y="703.5" >memta..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="75.5" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.54" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="498.4" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="501.36" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="789.0" y="677" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="791.95" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.06%)</title><rect x="763.3" y="725" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="766.28" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="60.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.19" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (3 samples, 0.06%; 0.00%)</title><rect x="73.0" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (6 samples, 0.12%; +0.04%)</title><rect x="945.2" y="741" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="948.25" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="778.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.18" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1141.6" y="821" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1144.64" y="831.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="899.4" y="661" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="902.41" y="671.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (6 samples, 0.12%; -0.04%)</title><rect x="527.7" y="661" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="530.70" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="687.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; +0.02%)</title><rect x="79.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.67" y="847.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="844.9" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.87" y="783.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (26 samples, 0.50%; 0.00%)</title><rect x="1016.3" y="549" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1019.29" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (10 samples, 0.19%; +0.02%)</title><rect x="457.8" y="661" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="460.80" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="65.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.69" y="703.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.10%; +0.06%)</title><rect x="688.3" y="821" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="691.35" y="831.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="983.7" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="986.75" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="658.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.55" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="1085.7" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1088.73" y="735.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; 0.00%)</title><rect x="417.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.47" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="700.9" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.95" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (2 samples, 0.04%; -0.02%)</title><rect x="208.7" y="597" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="211.69" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; 0.00%)</title><rect x="985.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.35" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (31 samples, 0.60%; 0.00%)</title><rect x="1124.5" y="693" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.46" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (3 samples, 0.06%; +0.02%)</title><rect x="698.2" y="821" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="701.20" y="831.5" ></text>
</g>
<g >
<title>posix_memalign (5 samples, 0.10%; +0.02%)</title><rect x="258.0" y="437" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="260.96" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="853.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="856.35" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="798.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.35" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; +0.02%)</title><rect x="39.3" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.33" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (6 samples, 0.12%; -0.04%)</title><rect x="1096.0" y="725" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1099.04" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%; +0.02%)</title><rect x="793.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="796.76" y="623.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="802.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.70" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; +0.02%)</title><rect x="543.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="546.05" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (1 samples, 0.02%; +0.02%)</title><rect x="985.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="988.81" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (15 samples, 0.29%; +0.04%)</title><rect x="800.6" y="517" width="3.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="803.64" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="1095.1" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1098.12" y="735.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.02%)</title><rect x="485.3" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="488.30" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::drain_cross_cpu_freelist (1 samples, 0.02%; +0.02%)</title><rect x="89.8" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="92.75" y="879.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="574.9" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="577.91" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="82.0" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.96" y="799.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.04%)</title><rect x="330.2" y="645" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="333.15" y="655.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.10%; +0.04%)</title><rect x="787.8" y="661" width="1.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="790.81" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="566.9" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="569.88" y="767.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="75.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.77" y="767.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="1049.1" y="693" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1052.06" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="486.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="489.22" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="702.8" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="705.78" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="575.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.82" y="783.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="483.2" y="597" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="486.24" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (4 samples, 0.08%; +0.04%)</title><rect x="195.4" y="613" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="198.40" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; 0.00%)</title><rect x="1086.4" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1089.41" y="767.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (35 samples, 0.68%; -0.02%)</title><rect x="53.1" y="661" width="8.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="56.08" y="671.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%; +0.02%)</title><rect x="565.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="568.51" y="735.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%; +0.02%)</title><rect x="11.4" y="949" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.38" y="959.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1108.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1111.87" y="735.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; -0.02%)</title><rect x="609.3" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="612.28" y="767.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (8 samples, 0.16%; 0.00%)</title><rect x="1128.1" y="533" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="543.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (2 samples, 0.04%; +0.04%)</title><rect x="554.7" y="693" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="557.74" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (6 samples, 0.12%; +0.08%)</title><rect x="105.1" y="821" width="1.4" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="108.11" y="831.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%; +0.04%)</title><rect x="1029.6" y="613" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1032.58" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="954.9" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="957.87" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="790.6" y="613" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="793.56" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="43.5" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.46" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="336.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="339.11" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%; -0.02%)</title><rect x="972.7" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="975.75" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; 0.00%)</title><rect x="16.0" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.96" y="927.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.69" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="807.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.06" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="637.9" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.93" y="751.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="524.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="527.49" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="687.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="828.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="831.37" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="926.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="929.00" y="735.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.02%)</title><rect x="822.4" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="825.41" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="24.4" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.44" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.16%; 0.00%)</title><rect x="767.2" y="741" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.18" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (9 samples, 0.17%; +0.08%)</title><rect x="696.8" y="837" width="2.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="699.82" y="847.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (31 samples, 0.60%; -0.10%)</title><rect x="305.4" y="645" width="7.1" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="308.40" y="655.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%; 0.00%)</title><rect x="685.8" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.82" y="847.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="41.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.17" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="167.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="170.67" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (5 samples, 0.10%; 0.00%)</title><rect x="21.5" y="773" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.46" y="783.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; -0.02%)</title><rect x="594.4" y="709" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="597.39" y="719.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (150 samples, 2.91%; -0.04%)</title><rect x="785.3" y="693" width="34.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="788.28" y="703.5" >se..</text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (65 samples, 1.26%; 0.00%)</title><rect x="794.2" y="597" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="797.22" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="24.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.67" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (5 samples, 0.10%; +0.04%)</title><rect x="200.9" y="581" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="203.90" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="24.2" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="27.21" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="529.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="532.30" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.17%; -0.02%)</title><rect x="1146.5" y="805" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1149.46" y="815.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.12%; 0.00%)</title><rect x="435.3" y="517" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.34" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="162.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="165.17" y="783.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.14%; -0.04%)</title><rect x="535.0" y="613" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="538.03" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (173 samples, 3.36%; +0.02%)</title><rect x="233.2" y="533" width="39.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="236.21" y="543.5" >mut..</text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.06%)</title><rect x="758.2" y="741" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="761.24" y="751.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%; +0.02%)</title><rect x="622.6" y="789" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="625.57" y="799.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="703.2" y="853" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.24" y="863.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (5 samples, 0.10%; +0.06%)</title><rect x="493.6" y="613" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="496.55" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="719.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="250.9" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="253.86" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="387.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="389.99" y="527.5" ></text>
</g>
<g >
<title>compound_type&lt; (16 samples, 0.31%; +0.06%)</title><rect x="911.6" y="709" width="3.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="914.56" y="719.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%; +0.02%)</title><rect x="602.4" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="605.41" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1021.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.79" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.04%)</title><rect x="1139.6" y="837" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1142.58" y="847.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (416 samples, 8.08%; 0.00%)</title><rect x="470.2" y="725" width="95.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="473.17" y="735.5" >std::_Funct..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="301.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="304.28" y="591.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (6 samples, 0.12%; 0.00%)</title><rect x="786.0" y="677" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.97" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (27 samples, 0.52%; +0.04%)</title><rect x="211.7" y="581" width="6.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="214.67" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="113.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.59" y="799.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.00" y="735.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; -0.06%)</title><rect x="452.5" y="549" width="0.3" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="455.53" y="559.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; +0.02%)</title><rect x="1125.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.37" y="527.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; (2 samples, 0.04%; +0.04%)</title><rect x="940.0" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="942.97" y="767.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%; 0.00%)</title><rect x="563.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.99" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; +0.08%)</title><rect x="221.3" y="581" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="224.30" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.10%; 0.00%)</title><rect x="1125.4" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="216.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="219.71" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; -0.02%)</title><rect x="207.5" y="597" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="210.55" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (7 samples, 0.14%; -0.12%)</title><rect x="642.3" y="837" width="1.6" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="645.28" y="847.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; 0.00%)</title><rect x="541.0" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.99" y="559.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%; +0.02%)</title><rect x="296.7" y="565" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="299.69" y="575.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (4 samples, 0.08%; +0.04%)</title><rect x="585.2" y="645" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="588.22" y="655.5" ></text>
</g>
<g >
<title>__tls_init (5 samples, 0.10%; +0.08%)</title><rect x="535.0" y="597" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="538.03" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (2 samples, 0.04%; +0.02%)</title><rect x="757.3" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="760.33" y="719.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (1 samples, 0.02%; +0.02%)</title><rect x="734.6" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="737.64" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (3 samples, 0.06%; +0.02%)</title><rect x="37.0" y="645" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.04" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.40" y="687.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (15 samples, 0.29%; -0.04%)</title><rect x="331.3" y="645" width="3.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="334.30" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.02%)</title><rect x="653.3" y="837" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.28" y="847.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.33%; +0.02%)</title><rect x="1007.4" y="597" width="3.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1010.35" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%; +0.02%)</title><rect x="808.0" y="565" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.97" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (31 samples, 0.60%; 0.00%)</title><rect x="70.0" y="821" width="7.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.04" y="831.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="783.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1078.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1081.16" y="671.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.02%)</title><rect x="99.4" y="821" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="102.38" y="831.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (3 samples, 0.06%; +0.04%)</title><rect x="468.3" y="741" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="471.34" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.17%; 0.00%)</title><rect x="58.6" y="597" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="607.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (72 samples, 1.40%; +0.02%)</title><rect x="577.0" y="725" width="16.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.97" y="735.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.78%; -0.08%)</title><rect x="1179.7" y="981" width="9.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1182.69" y="991.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%; +0.02%)</title><rect x="1025.9" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1028.91" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.14%; +0.02%)</title><rect x="836.6" y="773" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="839.62" y="783.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; +0.02%)</title><rect x="21.2" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.23" y="751.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~RecognizerSharedState (1 samples, 0.02%; 0.00%)</title><rect x="21.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.92" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (5 samples, 0.10%; 0.00%)</title><rect x="1144.6" y="805" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.62" y="815.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="597.8" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="600.82" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="607.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.91" y="751.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; -0.02%)</title><rect x="991.8" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="994.77" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.02%)</title><rect x="1030.5" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1033.50" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="575.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%; +0.02%)</title><rect x="995.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="998.20" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (7 samples, 0.14%; +0.06%)</title><rect x="127.3" y="789" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="130.34" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (15 samples, 0.29%; +0.21%)</title><rect x="351.0" y="613" width="3.4" height="15.0" fill="rgb(255,56,56)" rx="2" ry="2" />
<text  x="354.01" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.38" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="652.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="655.59" y="831.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="847.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e37906ae3451cbc9b5124d339938480d2e184cc3] (1 samples, 0.02%; +0.02%)</title><rect x="482.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="485.78" y="623.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, column_mapping_entry&gt;::doit&lt;std::vector&lt;column_mapping_entry, std::allocator&lt;column_mapping_entry&gt; &gt;, seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="703.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; 0.00%)</title><rect x="929.0" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.97" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (40 samples, 0.78%; -0.04%)</title><rect x="304.7" y="661" width="9.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="307.71" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%; +0.06%)</title><rect x="898.7" y="661" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="901.72" y="671.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%; 0.00%)</title><rect x="1005.7" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1008.75" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="571.7" y="693" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="574.70" y="703.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="583.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.84" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="911.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="382.9" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="385.86" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="1094.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1097.89" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1023.6" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.62" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt; &gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="863.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.75" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="797.7" y="565" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="800.66" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (13 samples, 0.25%; -0.02%)</title><rect x="769.2" y="725" width="3.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="772.24" y="735.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_List::_Impl::copy (1 samples, 0.02%; +0.02%)</title><rect x="84.9" y="965" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.94" y="975.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="50.6" y="645" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.56" y="655.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; +0.04%)</title><rect x="738.8" y="757" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="741.76" y="767.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%; 0.00%)</title><rect x="702.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.78" y="799.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (3 samples, 0.06%; +0.02%)</title><rect x="74.4" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.40" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (4 samples, 0.08%; -0.02%)</title><rect x="560.2" y="661" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="563.24" y="671.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="914.8" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="917.77" y="687.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="735.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.08%)</title><rect x="822.9" y="725" width="0.4" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="825.87" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="1026.1" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.14" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="844.9" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.87" y="767.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (3 samples, 0.06%; 0.00%)</title><rect x="20.5" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="751.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="206.6" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="209.63" y="623.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.25" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (4 samples, 0.08%; -0.02%)</title><rect x="1150.6" y="805" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1153.58" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%; 0.00%)</title><rect x="16.6" y="869" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="879.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (46 samples, 0.89%; +0.04%)</title><rect x="582.0" y="677" width="10.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="585.01" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="684.9" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.91" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (6 samples, 0.12%; 0.00%)</title><rect x="1125.4" y="613" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="594.4" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="597.39" y="703.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="703.2" y="821" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.24" y="831.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (60 samples, 1.17%; -0.10%)</title><rect x="192.0" y="645" width="13.7" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="194.96" y="655.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::column_view&gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.39" y="559.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1039.4" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1042.43" y="655.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%; +0.04%)</title><rect x="1048.4" y="693" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1051.37" y="703.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="655.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (1 samples, 0.02%; +0.02%)</title><rect x="725.5" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.47" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; 0.00%)</title><rect x="946.6" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.62" y="751.5" ></text>
</g>
<g >
<title>free (13 samples, 0.25%; +0.04%)</title><rect x="447.9" y="533" width="3.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="450.95" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.06%)</title><rect x="897.8" y="613" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="900.81" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="673.9" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="676.91" y="847.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1167.5" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.54" y="831.5" ></text>
</g>
<g >
<title>database::has_keyspace (16 samples, 0.31%; 0.00%)</title><rect x="841.2" y="773" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.20" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.04%)</title><rect x="641.8" y="821" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="644.82" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="464.4" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="467.45" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (5 samples, 0.10%; 0.00%)</title><rect x="865.3" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.27" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%; 0.00%)</title><rect x="47.4" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="67.1" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.06" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (40 samples, 0.78%; 0.00%)</title><rect x="534.1" y="629" width="9.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="537.11" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%; -0.04%)</title><rect x="525.6" y="677" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="528.63" y="687.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="616.2" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="619.16" y="767.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.52" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%; -0.02%)</title><rect x="1036.9" y="597" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1039.91" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="658.3" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.32" y="607.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.27%; 0.00%)</title><rect x="987.6" y="613" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.64" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.04%)</title><rect x="649.8" y="837" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="652.84" y="847.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; +0.02%)</title><rect x="1120.3" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.33" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="865.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.27" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; 0.00%)</title><rect x="43.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.46" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (8 samples, 0.16%; -0.04%)</title><rect x="346.4" y="645" width="1.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="349.42" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="1154.9" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1157.94" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::remove_response_handler_entry (1 samples, 0.02%; 0.00%)</title><rect x="725.7" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.70" y="831.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (8 samples, 0.16%; 0.00%)</title><rect x="1024.5" y="581" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.54" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.98" y="303.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.06%)</title><rect x="652.6" y="837" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="655.59" y="847.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,022 samples, 19.85%; -0.16%)</title><rect x="880.4" y="789" width="234.2" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="883.39" y="799.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (22 samples, 0.43%; 0.00%)</title><rect x="986.3" y="645" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.27" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; +0.02%)</title><rect x="890.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="893.02" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="529.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.53" y="671.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.25" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%; 0.00%)</title><rect x="813.7" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.70" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="298.5" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="301.53" y="543.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%; -0.04%)</title><rect x="303.8" y="549" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="306.80" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (2 samples, 0.04%; 0.00%)</title><rect x="72.6" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.56" y="719.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.81" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; +0.02%)</title><rect x="868.9" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.93" y="655.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt;::make_room (1 samples, 0.02%; +0.02%)</title><rect x="1122.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.17" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="1025.7" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1028.68" y="543.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; -0.06%)</title><rect x="803.6" y="469" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="806.62" y="479.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="917" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="927.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="706.7" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="709.68" y="831.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (62 samples, 1.20%; -0.02%)</title><rect x="745.9" y="773" width="14.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="748.87" y="783.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; -0.12%)</title><rect x="1135.0" y="853" width="0.2" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="1138.00" y="863.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,288 samples, 44.44%; -0.08%)</title><rect x="117.5" y="837" width="524.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="120.48" y="847.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%; -0.02%)</title><rect x="536.2" y="597" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="539.18" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (11 samples, 0.21%; +0.08%)</title><rect x="923.5" y="725" width="2.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="926.47" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1151.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.50" y="815.5" ></text>
</g>
<g >
<title>sstables::sstable::temp_filename (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="709.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="712.66" y="847.5" ></text>
</g>
<g >
<title>main (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="965" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="975.5" >main</text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1108.6" y="725" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1111.64" y="735.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="864.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="56.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.52" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="831.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (219 samples, 4.25%; 0.00%)</title><rect x="19.9" y="821" width="50.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.85" y="831.5" >cql3:..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (3 samples, 0.06%; -0.06%)</title><rect x="904.9" y="741" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="907.91" y="751.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="468.1" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="471.11" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="737.8" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="740.85" y="799.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="559.3" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="562.32" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (6 samples, 0.12%; +0.02%)</title><rect x="798.8" y="533" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="801.81" y="543.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="701.6" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.64" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (6 samples, 0.12%; -0.04%)</title><rect x="635.2" y="789" width="1.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="638.18" y="799.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="24.4" y="613" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.44" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.04%)</title><rect x="981.9" y="645" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="984.91" y="655.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="803.2" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.16" y="511.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.14%; +0.06%)</title><rect x="403.7" y="517" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="406.72" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="62.9" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.94" y="655.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.73" y="479.5" ></text>
</g>
<g >
<title>memtable::apply (34 samples, 0.66%; 0.00%)</title><rect x="1116.2" y="613" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.21" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1094.7" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1097.66" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="976.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.18" y="703.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="866.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.41" y="703.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;void, seastar::shared_future&lt;&gt;::shared_state::get_future (1 samples, 0.02%; 0.00%)</title><rect x="703.7" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.70" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (4 samples, 0.08%; 0.00%)</title><rect x="51.9" y="597" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.94" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (13 samples, 0.25%; +0.08%)</title><rect x="987.6" y="597" width="3.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="990.64" y="607.5" ></text>
</g>
<g >
<title>abstract_type::from_string (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%; -0.06%)</title><rect x="751.4" y="645" width="0.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="754.37" y="655.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1164.3" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1167.33" y="767.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::setupInputStream (1 samples, 0.02%; +0.02%)</title><rect x="20.1" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.08" y="767.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.0" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.04" y="399.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; +0.02%)</title><rect x="1116.4" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.44" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="922.6" y="741" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="925.56" y="751.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (30 samples, 0.58%; +0.10%)</title><rect x="556.3" y="677" width="6.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="559.34" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%; +0.04%)</title><rect x="285.5" y="581" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="288.46" y="591.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (7 samples, 0.14%; +0.14%)</title><rect x="365.2" y="517" width="1.6" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="368.21" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="64.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.31" y="639.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="108.8" y="837" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="111.77" y="847.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::reactor::open_directory (1 samples, 0.02%; 0.00%)</title><rect x="685.8" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.82" y="863.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; -0.02%)</title><rect x="700.9" y="677" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="703.95" y="687.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.14%; 0.00%)</title><rect x="1116.7" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%; -0.04%)</title><rect x="590.7" y="613" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="593.72" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="10.0" y="917" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="927.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.10%; 0.00%)</title><rect x="1155.2" y="821" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1158.17" y="831.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%; -0.04%)</title><rect x="282.9" y="517" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="285.94" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="441.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.76" y="607.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; +0.02%)</title><rect x="22.6" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.60" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="767.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%; +0.04%)</title><rect x="373.2" y="565" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="376.24" y="575.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%; +0.14%)</title><rect x="817.6" y="661" width="1.6" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="820.60" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="44.1" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="543.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="113.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="787.3" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.35" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="915.2" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="918.22" y="735.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="977.3" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.33" y="655.5" ></text>
</g>
<g >
<title>serialize_mutation_fragments (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (3 samples, 0.06%; -0.04%)</title><rect x="676.0" y="789" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="678.97" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (8 samples, 0.16%; 0.00%)</title><rect x="859.1" y="821" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.08" y="831.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.63" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="219.9" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.92" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="54.2" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.02%)</title><rect x="1105.0" y="741" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1107.98" y="751.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.04%)</title><rect x="490.8" y="613" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="493.80" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="789" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="799.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (45 samples, 0.87%; +0.02%)</title><rect x="362.9" y="565" width="10.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="365.92" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; 0.00%)</title><rect x="285.9" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.92" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (2 samples, 0.04%; 0.00%)</title><rect x="1120.3" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.33" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (8 samples, 0.16%; -0.02%)</title><rect x="664.7" y="821" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="667.74" y="831.5" ></text>
</g>
<g >
<title>query_result_builder::consume (178 samples, 3.46%; 0.00%)</title><rect x="373.7" y="565" width="40.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="376.69" y="575.5" >que..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="223.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="703.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="54.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.46" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="811.9" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="814.87" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (7 samples, 0.14%; -0.02%)</title><rect x="942.0" y="757" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="945.04" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.15" y="831.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%; -0.04%)</title><rect x="1076.1" y="645" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1079.10" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%; -0.02%)</title><rect x="788.5" y="645" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="791.49" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (3 samples, 0.06%; 0.00%)</title><rect x="21.7" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="486.0" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="488.99" y="639.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="863.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (5 samples, 0.10%; 0.00%)</title><rect x="951.4" y="757" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.43" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="48.0" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.04" y="655.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (3 samples, 0.06%; 0.00%)</title><rect x="20.5" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="703.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (8 samples, 0.16%; 0.00%)</title><rect x="700.7" y="837" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.72" y="847.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (11 samples, 0.21%; 0.00%)</title><rect x="865.3" y="741" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.27" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (7 samples, 0.14%; +0.06%)</title><rect x="934.5" y="741" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="937.47" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.32" y="671.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="815.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="580.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="583.18" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; -0.04%)</title><rect x="779.6" y="677" width="0.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="782.56" y="687.5" ></text>
</g>
<g >
<title>table::set_hit_rate (11 samples, 0.21%; 0.00%)</title><rect x="721.8" y="805" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="724.80" y="815.5" ></text>
</g>
<g >
<title>validation::validate_column_family (38 samples, 0.74%; +0.02%)</title><rect x="824.2" y="741" width="8.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="827.24" y="751.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="669.3" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="672.32" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; +0.02%)</title><rect x="663.6" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.59" y="767.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="79.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.98" y="799.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; -0.04%)</title><rect x="752.5" y="709" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="755.51" y="719.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1126.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.52" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (280 samples, 5.44%; 0.00%)</title><rect x="16.0" y="933" width="64.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.96" y="943.5" >seastar..</text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; 0.00%)</title><rect x="834.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.79" y="767.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="57.0" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.98" y="271.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="701.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="704.41" y="607.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (3 samples, 0.06%; +0.02%)</title><rect x="45.3" y="677" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.29" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (36 samples, 0.70%; 0.00%)</title><rect x="864.8" y="805" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (11 samples, 0.21%; +0.16%)</title><rect x="603.6" y="773" width="2.5" height="15.0" fill="rgb(255,98,98)" rx="2" ry="2" />
<text  x="606.55" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1108.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.42" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (66 samples, 1.28%; +0.02%)</title><rect x="190.6" y="661" width="15.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="193.59" y="671.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%; +0.04%)</title><rect x="750.0" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="752.99" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="598.1" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="601.05" y="703.5" ></text>
</g>
<g >
<title>row::compact_and_expire (90 samples, 1.75%; -0.04%)</title><rect x="417.7" y="565" width="20.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="420.69" y="575.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%; +0.02%)</title><rect x="1038.1" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1041.06" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="639.1" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="642.07" y="767.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="815.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (2 samples, 0.04%; +0.04%)</title><rect x="384.5" y="533" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="387.46" y="543.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="933" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="943.5" >seastar::app_template::run</text>
</g>
<g >
<title>evictable_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.10%)</title><rect x="1096.0" y="693" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1099.04" y="703.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; +0.04%)</title><rect x="270.1" y="469" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="273.11" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="702.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="705.10" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.39%; -0.06%)</title><rect x="205.7" y="661" width="99.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="208.71" y="671.5" >partition_s..</text>
</g>
<g >
<title>std::partition_copy&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.33" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (42 samples, 0.82%; +0.02%)</title><rect x="1012.9" y="565" width="9.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.85" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::operation::raw_update*, false&gt;::_Head_base&lt;cql3::operation::raw_update*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.40" y="415.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="551.1" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.07" y="687.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="216.3" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="219.25" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="638.2" y="789" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="641.16" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="787.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="790.58" y="671.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%; +0.02%)</title><rect x="140.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="143.40" y="815.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%; -0.02%)</title><rect x="569.6" y="709" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="572.63" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="759.8" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="762.85" y="751.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%; +0.02%)</title><rect x="83.1" y="757" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.11" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (31 samples, 0.60%; -0.02%)</title><rect x="584.5" y="661" width="7.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="587.53" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%; +0.04%)</title><rect x="1031.6" y="629" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1034.64" y="639.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="783.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%; +0.02%)</title><rect x="743.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="746.58" y="767.5" ></text>
</g>
<g >
<title>__start_context (280 samples, 5.44%; 0.00%)</title><rect x="16.0" y="965" width="64.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.96" y="975.5" >__start..</text>
</g>
<g >
<title>partition_entry::read (1 samples, 0.02%; +0.02%)</title><rect x="551.5" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="554.53" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="639.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (361 samples, 7.01%; +0.14%)</title><rect x="358.1" y="581" width="82.7" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="361.11" y="591.5" >compact_m..</text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (8 samples, 0.16%; 0.00%)</title><rect x="650.5" y="837" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.53" y="847.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (570 samples, 11.07%; +0.14%)</title><rect x="184.2" y="677" width="130.6" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="187.17" y="687.5" >mutation_reader_..</text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (3 samples, 0.06%; +0.06%)</title><rect x="747.5" y="741" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="750.47" y="751.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.14%; 0.00%)</title><rect x="1116.7" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="967.5" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="970.48" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1023.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1026.39" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="340.5" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.46" y="735.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (9 samples, 0.17%; +0.10%)</title><rect x="690.2" y="805" width="2.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="693.18" y="815.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.52" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; 0.00%)</title><rect x="45.5" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.52" y="671.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.06%)</title><rect x="257.3" y="453" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="260.28" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; -0.06%)</title><rect x="1080.7" y="709" width="2.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1083.69" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="970.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="973.91" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1148.1" y="709" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1151.06" y="719.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (2 samples, 0.04%; +0.04%)</title><rect x="369.6" y="517" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="372.57" y="527.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1116.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1132.2" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.25" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="675.1" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.05" y="831.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="22.1" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.15" y="735.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (9 samples, 0.17%; -0.04%)</title><rect x="830.9" y="725" width="2.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="833.89" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (7 samples, 0.14%; -0.04%)</title><rect x="599.2" y="709" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="602.20" y="719.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (1 samples, 0.02%; 0.00%)</title><rect x="1124.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.00" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (30 samples, 0.58%; 0.00%)</title><rect x="445.9" y="581" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.88" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="79.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.98" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="658.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.55" y="799.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (2 samples, 0.04%; +0.04%)</title><rect x="601.9" y="757" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="604.95" y="767.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.10%; 0.00%)</title><rect x="59.5" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.50" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (1 samples, 0.02%; +0.02%)</title><rect x="86.5" y="869" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.54" y="879.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::parsed_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="69.1" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.13" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%; -0.04%)</title><rect x="490.6" y="629" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="493.57" y="639.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (8 samples, 0.16%; -0.02%)</title><rect x="1097.9" y="757" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1100.87" y="767.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="511.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (10 samples, 0.19%; -0.12%)</title><rect x="409.2" y="517" width="2.3" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="412.22" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.54" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="655.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.02%)</title><rect x="561.4" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="564.38" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="435.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.11" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (9 samples, 0.17%; 0.00%)</title><rect x="414.5" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="417.49" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1037.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.37" y="543.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (3 samples, 0.06%; 0.00%)</title><rect x="78.3" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.29" y="703.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%; -0.02%)</title><rect x="261.2" y="469" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="264.17" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="82.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.42" y="575.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%; +0.02%)</title><rect x="1116.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.98" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="298.8" y="517" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="301.76" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="236.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="239.19" y="495.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%; -0.04%)</title><rect x="261.9" y="485" width="1.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="264.86" y="495.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="815.3" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.31" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="591.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.73" y="511.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="463.1" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="466.07" y="735.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="143.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="639.8" y="725" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="642.76" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="932.9" y="741" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.87" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="73.0" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.02" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment_stream_validating_filter::operator (1 samples, 0.02%; 0.00%)</title><rect x="84.3" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.25" y="783.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="700.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (4 samples, 0.08%; +0.06%)</title><rect x="314.8" y="677" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="317.80" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="29.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.94" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1125.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.60" y="479.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.73" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (39 samples, 0.76%; +0.02%)</title><rect x="364.3" y="549" width="8.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="367.30" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="687.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="98.9" y="837" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="101.92" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="574.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.99" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_p (1 samples, 0.02%; +0.02%)</title><rect x="23.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.29" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (11 samples, 0.21%; +0.02%)</title><rect x="769.5" y="709" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="772.47" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.08%)</title><rect x="952.6" y="741" width="2.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="955.58" y="751.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (7 samples, 0.14%; +0.04%)</title><rect x="984.0" y="645" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="986.98" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::create_view_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="66.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.38" y="671.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="764.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="766.97" y="767.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="57.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.90" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="606.1" y="773" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="609.07" y="783.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,275 samples, 44.18%; +0.12%)</title><rect x="120.0" y="821" width="521.4" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="123.00" y="831.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.00" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="415.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="418.17" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (7 samples, 0.14%; +0.04%)</title><rect x="337.3" y="709" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="340.26" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%; 0.00%)</title><rect x="56.3" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.29" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="53.3" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.31" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (1 samples, 0.02%; +0.02%)</title><rect x="57.4" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.44" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (11 samples, 0.21%; +0.02%)</title><rect x="571.9" y="709" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="574.93" y="719.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="580.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.41" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="570.8" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="573.78" y="719.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (3 samples, 0.06%; -0.06%)</title><rect x="616.4" y="757" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="619.39" y="767.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="75.1" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.08" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="900.3" y="709" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="903.33" y="719.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1118.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.50" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="285.0" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="288.00" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; 0.00%)</title><rect x="998.4" y="613" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.41" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1144.2" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1147.17" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="591.4" y="645" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="594.41" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (1 samples, 0.02%; +0.02%)</title><rect x="1167.8" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.77" y="879.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="64.1" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.08" y="671.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; +0.02%)</title><rect x="805.2" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="808.22" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (5 samples, 0.10%; +0.04%)</title><rect x="1032.1" y="629" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1035.10" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (28 samples, 0.54%; -0.04%)</title><rect x="196.3" y="613" width="6.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="199.32" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1099.7" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.71" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="623.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="59.0" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.04" y="431.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (1 samples, 0.02%; +0.02%)</title><rect x="667.9" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.95" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;int&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="831.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%; +0.06%)</title><rect x="136.7" y="725" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="139.73" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="757" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="767.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (10 samples, 0.19%; -0.02%)</title><rect x="267.8" y="469" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="270.82" y="479.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; +0.02%)</title><rect x="505.5" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="508.47" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; +0.02%)</title><rect x="10.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.46" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="700.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.48" y="847.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.16%; +0.06%)</title><rect x="812.8" y="597" width="1.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="815.79" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (22 samples, 0.43%; +0.04%)</title><rect x="446.6" y="549" width="5.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="449.57" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%; 0.00%)</title><rect x="47.4" y="661" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="879.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="838.9" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="841.91" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="692.5" y="837" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="695.47" y="847.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;, true&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="49.9" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.88" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.46" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="590.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.95" y="639.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; 0.00%)</title><rect x="220.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.84" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="764.2" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="767.20" y="767.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;bytes_ostream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="112.7" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="799.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.10%; +0.02%)</title><rect x="801.8" y="485" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="804.78" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.9" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.94" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (3 samples, 0.06%; +0.06%)</title><rect x="487.6" y="645" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="490.59" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="786.7" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="789.66" y="639.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (211 samples, 4.10%; -0.02%)</title><rect x="991.3" y="661" width="48.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="994.31" y="671.5" >serv..</text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="527.7" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="530.70" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (1 samples, 0.02%; +0.02%)</title><rect x="736.5" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="739.47" y="815.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="88.6" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.61" y="879.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; +0.02%)</title><rect x="945.9" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="948.93" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.10" y="911.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="1159.3" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.29" y="815.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_base::complete_one (1 samples, 0.02%; +0.02%)</title><rect x="1124.5" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.46" y="687.5" ></text>
</g>
<g >
<title>auth::resource::resource (7 samples, 0.14%; -0.02%)</title><rect x="778.9" y="725" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="781.87" y="735.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (5 samples, 0.10%; 0.00%)</title><rect x="804.1" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.08" y="511.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%; +0.02%)</title><rect x="1007.1" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1010.12" y="607.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_view_statement*, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.38" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="188.8" y="645" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="191.75" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasReachedFillbufferTarget (1 samples, 0.02%; +0.02%)</title><rect x="38.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.96" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="109.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.69" y="847.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; 0.00%)</title><rect x="505.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.70" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="896.4" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.43" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="259.1" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="262.11" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (7 samples, 0.14%; 0.00%)</title><rect x="82.9" y="805" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="815.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (5 samples, 0.10%; +0.06%)</title><rect x="709.9" y="837" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="712.89" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.06%)</title><rect x="649.6" y="837" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="652.62" y="847.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%; -0.04%)</title><rect x="133.1" y="741" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="136.06" y="751.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%; -0.08%)</title><rect x="357.0" y="565" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="359.96" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="702.3" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="705.32" y="687.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (6 samples, 0.12%; +0.06%)</title><rect x="502.9" y="677" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="505.95" y="687.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="526.6" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="529.55" y="655.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (712 samples, 13.83%; +0.02%)</title><rect x="177.1" y="741" width="163.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="180.07" y="751.5" >merging_reader&lt;mutati..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="56.5" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.52" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="53.3" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.31" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="809.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.35" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.14%; -0.04%)</title><rect x="206.9" y="613" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="209.86" y="623.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (1 samples, 0.02%; 0.00%)</title><rect x="85.4" y="965" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.40" y="975.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="696.1" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.14" y="815.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (3 samples, 0.06%; -0.02%)</title><rect x="78.3" y="709" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="81.29" y="719.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="100.8" y="821" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="103.75" y="831.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (3 samples, 0.06%; +0.06%)</title><rect x="839.4" y="789" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="842.37" y="799.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; -0.02%)</title><rect x="465.6" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="468.59" y="783.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.92" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (7 samples, 0.14%; 0.00%)</title><rect x="23.8" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.75" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1116.7" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.67" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1096.5" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1099.50" y="719.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="52.2" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.17" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (3 samples, 0.06%; +0.04%)</title><rect x="646.6" y="837" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="649.64" y="847.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="1144.2" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1147.17" y="783.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="687.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="58.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.75" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%; +0.02%)</title><rect x="302.0" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="304.96" y="575.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::feature_service&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%; 0.00%)</title><rect x="313.4" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="316.42" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="76.5" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.46" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="601.0" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.03" y="719.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (59 samples, 1.15%; +0.02%)</title><rect x="240.8" y="469" width="13.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="243.77" y="479.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (6 samples, 0.12%; 0.00%)</title><rect x="77.8" y="821" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.83" y="831.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="657.6" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="660.64" y="831.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="298.1" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="301.07" y="559.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (3 samples, 0.06%; 0.00%)</title><rect x="1168.5" y="821" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.46" y="831.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%; +0.02%)</title><rect x="1133.9" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.85" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::prepared_statement (1 samples, 0.02%; +0.02%)</title><rect x="70.3" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.27" y="815.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="55.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.60" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="543.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%; +0.02%)</title><rect x="751.8" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="754.83" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="559.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (38 samples, 0.74%; -0.12%)</title><rect x="516.2" y="661" width="8.7" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="519.24" y="671.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; +0.02%)</title><rect x="766.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="769.26" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="927.5" ></text>
</g>
<g >
<title>tracing::add_table_name (1 samples, 0.02%; +0.02%)</title><rect x="1114.8" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.83" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="303.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (35 samples, 0.68%; 0.00%)</title><rect x="1124.5" y="709" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.46" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_drop_node (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="735.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; +0.02%)</title><rect x="211.0" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="213.98" y="607.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%; 0.00%)</title><rect x="1124.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.00" y="671.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%; -0.04%)</title><rect x="478.9" y="677" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="481.88" y="687.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (3 samples, 0.06%; +0.02%)</title><rect x="719.1" y="773" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="722.05" y="783.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1144.4" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1147.40" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.02%)</title><rect x="371.9" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="374.86" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.19" y="927.5" ></text>
</g>
<g >
<title>mutation_querier::consume (169 samples, 3.28%; +0.19%)</title><rect x="375.1" y="549" width="38.7" height="15.0" fill="rgb(255,70,70)" rx="2" ry="2" />
<text  x="378.07" y="559.5" >mut..</text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (4 samples, 0.08%; -0.02%)</title><rect x="17.8" y="869" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="20.79" y="879.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="24.4" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.44" y="575.5" ></text>
</g>
<g >
<title>service::client_state::has_access (174 samples, 3.38%; +0.04%)</title><rect x="782.8" y="725" width="39.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="785.76" y="735.5" >ser..</text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="719.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.54" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (2 samples, 0.04%; +0.04%)</title><rect x="212.6" y="549" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="215.59" y="559.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (12 samples, 0.23%; +0.04%)</title><rect x="401.0" y="517" width="2.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="403.97" y="527.5" ></text>
</g>
<g >
<title>make_combined_reader (77 samples, 1.50%; +0.06%)</title><rect x="479.1" y="677" width="17.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="482.11" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="137.4" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.42" y="751.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="88.1" y="869" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.15" y="879.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="879.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="730.5" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="733.51" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="767.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="39.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.14%; +0.04%)</title><rect x="1156.3" y="837" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1159.31" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (4 samples, 0.08%; 0.00%)</title><rect x="1131.6" y="693" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.56" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="938.1" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="941.14" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; +0.06%)</title><rect x="1006.4" y="549" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1009.43" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="607.7" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="610.68" y="767.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (1 samples, 0.02%; 0.00%)</title><rect x="1011.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.25" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (8 samples, 0.16%; 0.00%)</title><rect x="700.7" y="853" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.72" y="863.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="805.9" y="453" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="808.91" y="463.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.02%)</title><rect x="335.2" y="645" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="338.19" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; -0.02%)</title><rect x="972.3" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="975.29" y="703.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (50 samples, 0.97%; +0.06%)</title><rect x="128.9" y="805" width="11.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="131.94" y="815.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%; -0.06%)</title><rect x="459.9" y="613" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="462.86" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="670.2" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.24" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.10%; -0.06%)</title><rect x="940.4" y="757" width="1.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="943.43" y="767.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="683.1" y="821" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="686.07" y="831.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; -0.06%)</title><rect x="1099.2" y="741" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1102.25" y="751.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="1189.5" y="965" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.54" y="975.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (4 samples, 0.08%; +0.04%)</title><rect x="665.7" y="773" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="668.66" y="783.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.10%; +0.10%)</title><rect x="894.8" y="645" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="897.83" y="655.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_set_pi_first_clustering (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="767.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="755.3" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.26" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="830.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.20" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%; 0.00%)</title><rect x="985.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.12" y="607.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%; +0.04%)</title><rect x="756.2" y="613" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="759.18" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%; +0.02%)</title><rect x="884.1" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="887.06" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="863.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="684.4" y="805" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="687.45" y="815.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1019.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.27" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr_count_for (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="719.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="104.2" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.19" y="815.5" ></text>
</g>
<g >
<title>cql3::selection::simple_selection::is_aggregate (1 samples, 0.02%; -0.02%)</title><rect x="880.2" y="789" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="883.16" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (15 samples, 0.29%; 0.00%)</title><rect x="775.4" y="725" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.43" y="735.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.39" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="73.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.48" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="952.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="955.12" y="703.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (45 samples, 0.87%; +0.02%)</title><rect x="505.9" y="645" width="10.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="508.93" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; +0.02%)</title><rect x="25.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.58" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; -0.04%)</title><rect x="594.2" y="709" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="597.16" y="719.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="177.8" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="180.75" y="735.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (2 samples, 0.04%; +0.04%)</title><rect x="438.3" y="565" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="441.32" y="575.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="113.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.59" y="831.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 0.35%; 0.00%)</title><rect x="11.6" y="949" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.60" y="959.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%; +0.06%)</title><rect x="1044.0" y="661" width="3.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1047.02" y="671.5" ></text>
</g>
<g >
<title>checked_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="551.1" y="661" width="0.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="554.07" y="671.5" ></text>
</g>
<g >
<title>row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="16.6" y="885" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="895.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="45.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.75" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (4 samples, 0.08%; 0.00%)</title><rect x="1166.2" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="815.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.04%)</title><rect x="910.9" y="709" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="913.87" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="416.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="419.32" y="511.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (87 samples, 1.69%; -0.04%)</title><rect x="527.0" y="677" width="19.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="530.01" y="687.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="78.5" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.52" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="613.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.18" y="751.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.02%)</title><rect x="78.5" y="661" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="81.52" y="671.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; +0.02%)</title><rect x="35.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="37.98" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (197 samples, 3.83%; -0.10%)</title><rect x="993.4" y="645" width="45.1" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="996.37" y="655.5" >serv..</text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (1 samples, 0.02%; 0.00%)</title><rect x="12.3" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.29" y="943.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; 0.00%)</title><rect x="866.4" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.41" y="719.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (102 samples, 1.98%; 0.00%)</title><rect x="791.5" y="645" width="23.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.47" y="655.5" >s..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (29 samples, 0.56%; 0.00%)</title><rect x="1124.9" y="677" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.92" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="819.4" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.43" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="837" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="847.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (216 samples, 4.19%; -0.08%)</title><rect x="229.5" y="565" width="49.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="232.55" y="575.5" >loga..</text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="767.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (2 samples, 0.04%; 0.00%)</title><rect x="1018.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.35" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (5 samples, 0.10%; +0.08%)</title><rect x="532.7" y="629" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="535.74" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1127.0" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.98" y="607.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.46" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="775.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.20" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.16%; -0.04%)</title><rect x="795.8" y="565" width="1.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="798.83" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.79" y="607.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (2 samples, 0.04%; 0.00%)</title><rect x="645.0" y="853" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.03" y="863.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="303.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="306.57" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="885" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="895.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="687.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (9 samples, 0.17%; +0.02%)</title><rect x="896.7" y="645" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.66" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%; +0.04%)</title><rect x="456.0" y="581" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="458.97" y="591.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="954.0" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.95" y="735.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (234 samples, 4.54%; 0.00%)</title><rect x="986.0" y="677" width="53.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="989.04" y="687.5" >servi..</text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.06%)</title><rect x="676.7" y="837" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="679.66" y="847.5" ></text>
</g>
<g >
<title>antlr3::RuleReturnValue&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::RuleReturnValue (1 samples, 0.02%; +0.02%)</title><rect x="45.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.06" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; +0.02%)</title><rect x="983.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="986.52" y="655.5" ></text>
</g>
<g >
<title>gms::feature::feature (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="479.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="847.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; -0.02%)</title><rect x="847.8" y="725" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="850.85" y="735.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1132.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.25" y="655.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (3 samples, 0.06%; +0.06%)</title><rect x="454.8" y="597" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="457.82" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="903.3" y="661" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="906.31" y="671.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="407.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.84" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="79.0" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.98" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="828.8" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="831.83" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.06%)</title><rect x="527.7" y="629" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="530.70" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%; 0.00%)</title><rect x="22.8" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.48" y="831.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; 0.00%)</title><rect x="984.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.66" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="900.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="903.79" y="719.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (2 samples, 0.04%; 0.00%)</title><rect x="871.9" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="140.6" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.63" y="815.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.06%)</title><rect x="748.8" y="725" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="751.85" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; -0.04%)</title><rect x="620.7" y="789" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="623.74" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="459.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="462.86" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.14%; 0.00%)</title><rect x="825.2" y="677" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.16" y="687.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (4 samples, 0.08%; 0.00%)</title><rect x="372.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="375.32" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="899.9" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="902.87" y="719.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.23" y="863.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="819.4" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.43" y="671.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; -0.02%)</title><rect x="101.9" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="104.90" y="783.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%; 0.00%)</title><rect x="20.3" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.31" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="441.3" y="581" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="444.30" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="1140.5" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.50" y="847.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (1 samples, 0.02%; +0.02%)</title><rect x="645.5" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.49" y="863.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; -0.04%)</title><rect x="465.1" y="773" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="468.13" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%; +0.08%)</title><rect x="495.2" y="629" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="498.15" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; 0.00%)</title><rect x="407.2" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.15" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="471.3" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="474.32" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="77.4" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.38" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="803.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.85" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="724.1" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.10" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="367.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="370.28" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; -0.08%)</title><rect x="567.8" y="757" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="570.80" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="322.1" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.13" y="671.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (25 samples, 0.49%; +0.06%)</title><rect x="738.1" y="789" width="5.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="741.08" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (1 samples, 0.02%; 0.00%)</title><rect x="1189.5" y="981" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.54" y="991.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.02%)</title><rect x="1046.3" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1049.31" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="591.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (280 samples, 5.44%; 0.00%)</title><rect x="16.0" y="949" width="64.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="18.96" y="959.5" >seastar..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1030.0" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.04" y="623.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1130.6" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.64" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%; +0.02%)</title><rect x="810.5" y="565" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.49" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.06%)</title><rect x="705.1" y="821" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="708.07" y="831.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (23 samples, 0.45%; 0.00%)</title><rect x="273.1" y="533" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.09" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; +0.04%)</title><rect x="876.3" y="821" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="879.27" y="831.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="708.7" y="789" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="711.74" y="799.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (32 samples, 0.62%; -0.02%)</title><rect x="427.8" y="517" width="7.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="430.78" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.04%)</title><rect x="837.8" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="840.76" y="719.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="111.8" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.75" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; -0.02%)</title><rect x="257.0" y="453" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="260.05" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (5 samples, 0.10%; +0.08%)</title><rect x="209.8" y="581" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="212.84" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; +0.02%)</title><rect x="864.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.58" y="831.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (4 samples, 0.08%; +0.04%)</title><rect x="834.1" y="773" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="837.10" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (20 samples, 0.39%; 0.00%)</title><rect x="867.8" y="725" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.79" y="735.5" ></text>
</g>
<g >
<title>cql3::cf_name::operator= (1 samples, 0.02%; -0.02%)</title><rect x="41.4" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.40" y="703.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (3 samples, 0.06%; +0.04%)</title><rect x="386.3" y="533" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="389.30" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%; +0.02%)</title><rect x="538.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="541.01" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%; +0.04%)</title><rect x="274.5" y="501" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="277.46" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::shared_future&lt;&gt;::shared_state::get_future (1 samples, 0.02%; 0.00%)</title><rect x="703.7" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.70" y="863.5" ></text>
</g>
<g >
<title>database::find_schema (27 samples, 0.52%; -0.10%)</title><rect x="766.5" y="757" width="6.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="769.49" y="767.5" ></text>
</g>
<g >
<title>seastar::async&lt;single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="751.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (14 samples, 0.27%; 0.00%)</title><rect x="655.8" y="853" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.80" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="35.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.21" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="640.7" y="789" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="643.68" y="799.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="476.8" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="479.82" y="703.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.15" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%; -0.04%)</title><rect x="779.1" y="693" width="1.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="782.10" y="703.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%; 0.00%)</title><rect x="38.4" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.42" y="719.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (8 samples, 0.16%; 0.00%)</title><rect x="1116.7" y="581" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="165.8" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="168.84" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="943.2" y="709" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="946.18" y="719.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="831.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (9 samples, 0.17%; 0.00%)</title><rect x="976.9" y="677" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="979.87" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="568.9" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.95" y="783.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%; +0.04%)</title><rect x="686.7" y="837" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="689.74" y="847.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (536 samples, 10.41%; 0.00%)</title><rect x="735.1" y="821" width="122.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.10" y="831.5" >single_node_cql..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.61" y="719.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (3 samples, 0.06%; 0.00%)</title><rect x="111.3" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (2 samples, 0.04%; +0.02%)</title><rect x="452.3" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.30" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="142.9" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="145.92" y="815.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (1 samples, 0.02%; +0.02%)</title><rect x="946.4" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="949.39" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="39.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.56" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="724.6" y="837" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="727.55" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.12%; +0.04%)</title><rect x="396.2" y="517" width="1.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="399.15" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; 0.00%)</title><rect x="851.1" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.06" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_charPositionInLine (2 samples, 0.04%; +0.04%)</title><rect x="27.6" y="613" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="30.65" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="708.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.51" y="815.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (20 samples, 0.39%; +0.06%)</title><rect x="986.5" y="629" width="4.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="989.50" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="815.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (3 samples, 0.06%; +0.06%)</title><rect x="883.4" y="773" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="886.37" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="565.7" y="741" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="568.74" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%; +0.02%)</title><rect x="64.1" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.08" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.71" y="671.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; 0.00%)</title><rect x="844.0" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.95" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="677.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.57" y="831.5" ></text>
</g>
<g >
<title>stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; -0.06%)</title><rect x="599.4" y="693" width="1.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="602.43" y="703.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="276.1" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="279.07" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="853.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="856.12" y="735.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (73 samples, 1.42%; +0.16%)</title><rect x="421.6" y="533" width="16.7" height="15.0" fill="rgb(255,98,98)" rx="2" ry="2" />
<text  x="424.59" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="1145.1" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.08" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (3 samples, 0.06%; +0.06%)</title><rect x="713.1" y="821" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="716.10" y="831.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="863.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,056 samples, 20.51%; +0.02%)</title><rect x="873.1" y="837" width="242.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="876.06" y="847.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="158.7" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="161.73" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (3 samples, 0.06%; +0.04%)</title><rect x="163.8" y="757" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="166.77" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1163.6" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.65" y="783.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="655.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (8 samples, 0.16%; -0.02%)</title><rect x="72.3" y="725" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="75.33" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (14 samples, 0.27%; +0.02%)</title><rect x="740.1" y="709" width="3.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.14" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="871.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.45" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (14 samples, 0.27%; +0.14%)</title><rect x="431.9" y="501" width="3.2" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="434.90" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; 0.00%)</title><rect x="808.2" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.20" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.75" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="239.5" ></text>
</g>
<g >
<title>mutation_fragment_stream_validator::operator (1 samples, 0.02%; +0.02%)</title><rect x="84.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.25" y="767.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="75.3" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.31" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="272.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.17" y="495.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="863.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.14%; -0.06%)</title><rect x="157.4" y="789" width="1.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="160.36" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%; +0.02%)</title><rect x="102.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="105.58" y="767.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.04%)</title><rect x="300.1" y="581" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="303.13" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="571.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.70" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="511.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%; -0.02%)</title><rect x="42.5" y="693" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="45.54" y="703.5" ></text>
</g>
<g >
<title>query::querier_base::close (6 samples, 0.12%; 0.00%)</title><rect x="1165.9" y="837" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.94" y="847.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="649.4" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.39" y="831.5" ></text>
</g>
<g >
<title>database::find_uuid (16 samples, 0.31%; 0.00%)</title><rect x="769.0" y="741" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.01" y="751.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;ser::column_view, std::allocator&lt;ser::column_view&gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.39" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (1 samples, 0.02%; +0.02%)</title><rect x="1078.6" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1081.62" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (205 samples, 3.98%; 0.00%)</title><rect x="22.6" y="773" width="47.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.60" y="783.5" >seas..</text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="126.2" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="129.19" y="815.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (115 samples, 2.23%; +0.02%)</title><rect x="576.3" y="773" width="26.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.28" y="783.5" >s..</text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="847.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="489.0" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="491.97" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%; 0.00%)</title><rect x="679.9" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.87" y="831.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; -0.04%)</title><rect x="743.3" y="741" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="746.35" y="751.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="291.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="294.65" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.40" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="917" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="927.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="1082.3" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1085.29" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="939.7" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="942.75" y="767.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (2 samples, 0.04%; 0.00%)</title><rect x="702.6" y="853" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.55" y="863.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%; +0.04%)</title><rect x="579.5" y="661" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="582.49" y="671.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::free (1 samples, 0.02%; 0.00%)</title><rect x="21.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (2 samples, 0.04%; -0.02%)</title><rect x="24.9" y="549" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="27.90" y="559.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (3 samples, 0.06%; 0.00%)</title><rect x="71.0" y="709" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.96" y="719.5" ></text>
</g>
<g >
<title>database::add_column_family (4 samples, 0.08%; 0.00%)</title><rect x="112.7" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="330.8" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="333.84" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (44 samples, 0.85%; -0.06%)</title><rect x="326.3" y="677" width="10.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="329.26" y="687.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="827.9" y="613" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="830.91" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (503 samples, 9.77%; -0.02%)</title><rect x="345.0" y="709" width="115.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="348.05" y="719.5" >flat_mutation_..</text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.75" y="671.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (4 samples, 0.08%; +0.04%)</title><rect x="902.8" y="677" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="905.85" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="979.6" y="693" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="982.62" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; -0.04%)</title><rect x="984.7" y="629" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="987.66" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="543.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.10%; 0.00%)</title><rect x="1046.3" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.31" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="575.4" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.36" y="767.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="59.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="1128.4" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.35" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="546.5" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="549.49" y="671.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="113.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.59" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%; 0.00%)</title><rect x="484.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="487.15" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%; 0.00%)</title><rect x="1131.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.10" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="46.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.67" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (6 samples, 0.12%; +0.06%)</title><rect x="307.9" y="629" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="310.92" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.16%; -0.02%)</title><rect x="1146.7" y="789" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1149.69" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="203.2" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="206.19" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="662.2" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.22" y="799.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; +0.02%)</title><rect x="801.6" y="501" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="804.56" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="76.7" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.69" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (81 samples, 1.57%; -0.08%)</title><rect x="887.7" y="757" width="18.6" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="890.72" y="767.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="700.5" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.49" y="847.5" ></text>
</g>
<g >
<title>fmt::v7::detail::formatbuf&lt;char&gt;::xsputn (1 samples, 0.02%; +0.02%)</title><rect x="85.4" y="917" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.40" y="927.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="671.8" y="837" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="674.85" y="847.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="871.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="778.4" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.41" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="857.7" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="860.70" y="815.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="552.0" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="554.99" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; 0.00%)</title><rect x="942.0" y="709" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.04" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; -0.02%)</title><rect x="674.1" y="837" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="677.14" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="54.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.46" y="527.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="287.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="863.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="952.3" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="955.35" y="703.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="965" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="975.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (4 samples, 0.08%; +0.08%)</title><rect x="372.3" y="517" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="375.32" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="106.5" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="109.48" y="831.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="221.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="224.07" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="676.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.43" y="767.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1116.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%; 0.00%)</title><rect x="754.8" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.80" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1127.2" y="629" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.21" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="50.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.79" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; +0.02%)</title><rect x="16.0" y="901" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="18.96" y="911.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (2 samples, 0.04%; -0.16%)</title><rect x="669.3" y="805" width="0.5" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="672.32" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%; -0.02%)</title><rect x="848.1" y="725" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="851.08" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="822.0" y="661" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.95" y="671.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.81" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (4 samples, 0.08%; -0.02%)</title><rect x="78.1" y="741" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="81.06" y="751.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (8 samples, 0.16%; +0.04%)</title><rect x="741.5" y="661" width="1.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="744.51" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.04%)</title><rect x="655.3" y="837" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="658.34" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="278.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="281.36" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="222.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="225.21" y="591.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.14%; -0.04%)</title><rect x="755.7" y="661" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="758.72" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1116.9" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.89" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (4 samples, 0.08%; +0.04%)</title><rect x="1074.5" y="629" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1077.50" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="734.4" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="737.41" y="799.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="539.2" y="549" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.16" y="559.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="683.8" y="821" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="686.76" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (20 samples, 0.39%; 0.00%)</title><rect x="867.8" y="741" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.79" y="751.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="993.1" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="996.14" y="639.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%; 0.00%)</title><rect x="345.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="348.05" y="687.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (28 samples, 0.54%; +0.04%)</title><rect x="1103.8" y="773" width="6.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1106.83" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="876.7" y="821" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="879.72" y="831.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%; 0.00%)</title><rect x="294.9" y="533" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.86" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="799.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (15 samples, 0.29%; 0.00%)</title><rect x="62.0" y="709" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.02" y="719.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (4 samples, 0.08%; +0.08%)</title><rect x="1014.7" y="533" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1017.68" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="831.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="867.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.79" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1022.2" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1025.25" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (1 samples, 0.02%; +0.02%)</title><rect x="882.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="885.68" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (13 samples, 0.25%; -0.04%)</title><rect x="571.5" y="725" width="2.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="574.47" y="735.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%; +0.02%)</title><rect x="833.6" y="773" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="836.64" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="97.8" y="821" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="100.77" y="831.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (6 samples, 0.12%; +0.02%)</title><rect x="34.1" y="613" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="37.06" y="623.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%; +0.02%)</title><rect x="83.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.79" y="655.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="799.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; -0.04%)</title><rect x="297.8" y="565" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="300.84" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1133.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.39" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (9 samples, 0.17%; 0.00%)</title><rect x="683.8" y="837" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.76" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; +0.08%)</title><rect x="1146.9" y="725" width="1.6" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1149.92" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="607.4" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="610.45" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.14%; 0.00%)</title><rect x="825.2" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.16" y="671.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (12 samples, 0.23%; +0.06%)</title><rect x="933.3" y="757" width="2.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="936.33" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="56.5" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.52" y="447.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%; +0.02%)</title><rect x="872.1" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.14" y="639.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.06%)</title><rect x="716.8" y="805" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="719.76" y="815.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (3 samples, 0.06%; -0.02%)</title><rect x="561.2" y="613" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="564.16" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="447.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="502.0" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="505.03" y="687.5" ></text>
</g>
<g >
<title>scanning_and_populating_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="399.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="799.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="633.8" y="725" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="636.80" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="137.6" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="140.65" y="719.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%; +0.02%)</title><rect x="868.2" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.24" y="607.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; +0.02%)</title><rect x="497.2" y="677" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="500.22" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="844.6" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.64" y="767.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (4 samples, 0.08%; 0.00%)</title><rect x="112.7" y="853" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="863.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (7 samples, 0.14%; +0.02%)</title><rect x="798.6" y="549" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="801.58" y="559.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (49 samples, 0.95%; -0.04%)</title><rect x="505.0" y="661" width="11.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="508.01" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="621.0" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.97" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="103.7" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="106.73" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1163.4" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1166.42" y="783.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (12 samples, 0.23%; -0.02%)</title><rect x="775.7" y="709" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="778.66" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; 0.00%)</title><rect x="1124.2" y="805" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.23" y="815.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (2 samples, 0.04%; -0.04%)</title><rect x="823.3" y="725" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="826.33" y="735.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result_extra&lt;stat&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="685.8" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.82" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (8 samples, 0.16%; 0.00%)</title><rect x="1146.7" y="757" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.69" y="767.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; 0.00%)</title><rect x="87.5" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.46" y="879.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (6 samples, 0.12%; -0.02%)</title><rect x="1096.0" y="741" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1099.04" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (5 samples, 0.10%; 0.00%)</title><rect x="483.0" y="613" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.01" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (2 samples, 0.04%; 0.00%)</title><rect x="61.6" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.56" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="901.0" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.02" y="719.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%; 0.00%)</title><rect x="849.2" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="852.22" y="719.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%; +0.04%)</title><rect x="502.5" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="505.49" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="992.0" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="995.00" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.40" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (12 samples, 0.23%; -0.12%)</title><rect x="1054.3" y="661" width="2.8" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="1057.33" y="671.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.04%)</title><rect x="806.6" y="421" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="809.60" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%; +0.02%)</title><rect x="1020.9" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.87" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="709" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="719.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="831.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (12 samples, 0.23%; -0.02%)</title><rect x="251.3" y="421" width="2.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="254.32" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; 0.00%)</title><rect x="726.4" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="729.39" y="863.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="65.5" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.46" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="780.5" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="783.47" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (5 samples, 0.10%; -0.02%)</title><rect x="845.8" y="773" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="848.79" y="783.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (2 samples, 0.04%; 0.00%)</title><rect x="283.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="286.63" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="727.8" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="730.76" y="863.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%; 0.00%)</title><rect x="1168.5" y="853" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.46" y="863.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="293.0" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.03" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="611.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="614.80" y="751.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (9 samples, 0.17%; -0.04%)</title><rect x="755.3" y="677" width="2.0" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="758.26" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="603.3" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.32" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="1125.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.60" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="651.9" y="805" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="654.91" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.04%)</title><rect x="600.6" y="677" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="603.57" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1123.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.77" y="607.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="559.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="562.78" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="700.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (1 samples, 0.02%; +0.02%)</title><rect x="1022.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1025.48" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="978.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="981.48" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%; -0.02%)</title><rect x="191.3" y="629" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="194.27" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.7" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.67" y="863.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="613.9" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="616.86" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="497.4" y="661" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="500.45" y="671.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%; +0.02%)</title><rect x="126.0" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="128.96" y="815.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (20 samples, 0.39%; 0.00%)</title><rect x="511.0" y="629" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.97" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; -0.02%)</title><rect x="1015.8" y="517" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1018.83" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (7 samples, 0.14%; -0.06%)</title><rect x="805.2" y="485" width="1.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="808.22" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="609.1" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.05" y="751.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e37906ae3451cbc9b5124d339938480d2e184cc3] (1 samples, 0.02%; +0.02%)</title><rect x="85.9" y="949" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.86" y="959.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%; +0.04%)</title><rect x="580.6" y="661" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="583.64" y="671.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; -0.02%)</title><rect x="637.2" y="773" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="640.24" y="783.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1122.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.39" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (4 samples, 0.08%; +0.02%)</title><rect x="439.9" y="549" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="442.92" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%; 0.00%)</title><rect x="702.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.10" y="703.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="896.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="899.20" y="655.5" ></text>
</g>
<g >
<title>do_with_cql_env_thread (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="783.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.16%; -0.02%)</title><rect x="795.8" y="549" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="798.83" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="62.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.48" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.08%)</title><rect x="263.0" y="501" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="266.00" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="451.6" y="549" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="454.61" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (12 samples, 0.23%; +0.04%)</title><rect x="632.2" y="757" width="2.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="635.20" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="901" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="911.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (536 samples, 10.41%; +0.12%)</title><rect x="341.8" y="741" width="122.9" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="344.84" y="751.5" >query::consume_..</text>
</g>
<g >
<title>compound_type&lt; (18 samples, 0.35%; -0.06%)</title><rect x="927.6" y="725" width="4.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="930.60" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="567.3" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.34" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="543.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.64" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (196 samples, 3.81%; -0.02%)</title><rect x="23.5" y="741" width="44.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="26.52" y="751.5" >cql3..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,032 samples, 20.04%; 0.00%)</title><rect x="878.6" y="805" width="236.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="881.56" y="815.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (620 samples, 12.04%; 0.00%)</title><rect x="180.7" y="709" width="142.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="183.73" y="719.5" >mutation_fragment_..</text>
</g>
<g >
<title>operator delete (7 samples, 0.14%; +0.02%)</title><rect x="704.2" y="837" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="707.16" y="847.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;seastar::promise&lt;void&gt;, seastar::promise_expiry&lt;&gt;, seastar::lowres_clock&gt;::drop_expired_front (1 samples, 0.02%; +0.02%)</title><rect x="703.7" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.70" y="815.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="559.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (20 samples, 0.39%; 0.00%)</title><rect x="760.1" y="773" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.08" y="783.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="783.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (90 samples, 1.75%; 0.00%)</title><rect x="504.3" y="677" width="20.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.32" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="696.1" y="821" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.14" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="58.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.81" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%; +0.04%)</title><rect x="436.7" y="517" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="439.72" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="858.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="861.39" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::reference_wrapper&lt;gms::feature&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, gms::feature&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (217 samples, 4.21%; 0.00%)</title><rect x="19.9" y="789" width="49.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.85" y="799.5" >cql3:..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (42 samples, 0.82%; -0.08%)</title><rect x="130.1" y="773" width="9.6" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="133.09" y="783.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::tomb (1 samples, 0.02%; 0.00%)</title><rect x="1123.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.31" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (181 samples, 3.52%; +0.02%)</title><rect x="781.2" y="741" width="41.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="784.16" y="751.5" >std..</text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.52" y="639.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="629.9" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="632.91" y="783.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.02" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (7 samples, 0.14%; +0.02%)</title><rect x="606.5" y="773" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="609.53" y="783.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (477 samples, 9.26%; +0.04%)</title><rect x="348.5" y="645" width="109.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="351.49" y="655.5" >seastar::repe..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="681.9" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="684.93" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%; +0.04%)</title><rect x="564.6" y="693" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="567.59" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_head (2 samples, 0.04%; +0.04%)</title><rect x="61.6" y="613" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="64.56" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (5 samples, 0.10%; -0.08%)</title><rect x="540.3" y="565" width="1.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="543.30" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="824.0" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="827.01" y="751.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="770.4" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="773.39" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="687.5" ></text>
</g>
<g >
<title>reconcilable_result_builder::consume_end_of_partition (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="634.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.72" y="751.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (14 samples, 0.27%; 0.00%)</title><rect x="717.4" y="789" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.45" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="562.1" y="597" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="565.07" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="104.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="107.42" y="815.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (2 samples, 0.04%; +0.04%)</title><rect x="317.1" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="320.09" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="910.9" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="913.87" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="552.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.22" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%; +0.04%)</title><rect x="279.3" y="565" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="282.28" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="504.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="507.09" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (3 samples, 0.06%; +0.02%)</title><rect x="52.2" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.17" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="717.2" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.22" y="799.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (5 samples, 0.10%; +0.08%)</title><rect x="198.6" y="597" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="201.61" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="528.8" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="531.84" y="655.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="832.7" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.72" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="543.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="607.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.64" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.10%; -0.02%)</title><rect x="346.9" y="629" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="349.88" y="639.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%; -0.04%)</title><rect x="882.2" y="773" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="885.22" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1128.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.83" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="753.4" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.43" y="735.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%; +0.02%)</title><rect x="1033.9" y="597" width="2.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1036.93" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="29.9" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.94" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="895.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (4 samples, 0.08%; -0.04%)</title><rect x="951.7" y="725" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="954.66" y="735.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; -0.02%)</title><rect x="709.4" y="805" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="712.43" y="815.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="66.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.61" y="703.5" ></text>
</g>
<g >
<title>create_partitions (271 samples, 5.26%; 0.00%)</title><rect x="17.8" y="885" width="62.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.79" y="895.5" >create..</text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%; +0.04%)</title><rect x="481.4" y="629" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="484.40" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="634.9" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.95" y="783.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="78.3" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.29" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="625.3" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.32" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="336.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="339.80" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1095.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1098.81" y="751.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; 0.00%)</title><rect x="584.1" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.07" y="655.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;gms::feature_service&gt;::start&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%; 0.00%)</title><rect x="62.9" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.94" y="687.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%; +0.02%)</title><rect x="28.8" y="613" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.79" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="847.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="794.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="797.45" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.14%; -0.02%)</title><rect x="298.1" y="565" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="301.07" y="575.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1026.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1029.37" y="623.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="959.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (8 samples, 0.16%; 0.00%)</title><rect x="976.9" y="661" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="979.87" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="58.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="54.2" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="543.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%; -0.04%)</title><rect x="870.5" y="629" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="873.54" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1050.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1052.98" y="703.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="42.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.77" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="495.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="544.4" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="547.43" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="823.6" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="826.56" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;gms::feature_service&gt;::start&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="1094.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1097.44" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1132.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.71" y="847.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="998.2" y="629" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.18" y="639.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (42 samples, 0.82%; 0.00%)</title><rect x="841.0" y="789" width="9.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.97" y="799.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="75.1" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.08" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (2 samples, 0.04%; 0.00%)</title><rect x="144.1" y="805" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.06" y="815.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="132.8" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="135.84" y="751.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.9" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.92" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="612.9" y="725" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="615.95" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (13 samples, 0.25%; +0.02%)</title><rect x="43.0" y="693" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.00" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (3 samples, 0.06%; +0.06%)</title><rect x="903.8" y="709" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="906.77" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="479.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (1 samples, 0.02%; 0.00%)</title><rect x="972.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.52" y="719.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (2 samples, 0.04%; 0.00%)</title><rect x="871.0" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.99" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%; -0.04%)</title><rect x="416.1" y="517" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="419.09" y="527.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (2 samples, 0.04%; -0.16%)</title><rect x="11.8" y="933" width="0.5" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="14.83" y="943.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="671.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (33 samples, 0.64%; -0.12%)</title><rect x="800.2" y="565" width="7.5" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="803.18" y="575.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="26.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="29.50" y="639.5" ></text>
</g>
<g >
<title>tracing::add_table_name (1 samples, 0.02%; +0.02%)</title><rect x="872.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.83" y="783.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (1 samples, 0.02%; 0.00%)</title><rect x="76.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.00" y="719.5" ></text>
</g>
<g >
<title>sstables::regular_compaction::create_compaction_writer (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="767.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%; +0.02%)</title><rect x="1146.5" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1149.46" y="799.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (2 samples, 0.04%; +0.04%)</title><rect x="496.8" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="499.76" y="687.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::drop_index_statement*, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="66.8" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.83" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.04%)</title><rect x="698.9" y="837" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="701.89" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; 0.00%)</title><rect x="550.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.61" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.14%; +0.04%)</title><rect x="249.3" y="421" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="252.25" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="220.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="223.61" y="559.5" ></text>
</g>
<g >
<title>schema_registry::get (15 samples, 0.29%; -0.02%)</title><rect x="969.1" y="709" width="3.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="972.08" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="684.9" y="789" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.91" y="799.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="51.9" y="549" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.94" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (1 samples, 0.02%; -0.06%)</title><rect x="343.7" y="725" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="346.67" y="735.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (60 samples, 1.17%; -0.04%)</title><rect x="579.3" y="693" width="13.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="582.26" y="703.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="102.8" y="773" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="105.81" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="990.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="993.85" y="623.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="835.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.01" y="783.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (221 samples, 4.29%; +0.02%)</title><rect x="229.1" y="581" width="50.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="232.09" y="591.5" >parti..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="73.7" y="709" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="76.71" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.02%)</title><rect x="791.5" y="581" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="794.47" y="591.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (16 samples, 0.31%; +0.02%)</title><rect x="731.2" y="821" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="734.20" y="831.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%; +0.02%)</title><rect x="866.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.87" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="24.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.44" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%; 0.00%)</title><rect x="44.1" y="629" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (177 samples, 3.44%; 0.00%)</title><rect x="1039.7" y="709" width="40.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.66" y="719.5" >ser..</text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="668.2" y="789" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="671.18" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="945.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="948.70" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.23%; 0.00%)</title><rect x="301.5" y="597" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.51" y="607.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="1117.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.81" y="495.5" ></text>
</g>
<g >
<title>partition_slice_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="387.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="389.99" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="164.7" y="725" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="167.69" y="735.5" ></text>
</g>
<g >
<title>frozen_mutation::unfreeze (1 samples, 0.02%; 0.00%)</title><rect x="110.8" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.84" y="847.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.16%; 0.00%)</title><rect x="1146.7" y="773" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.69" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="706.0" y="837" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="708.99" y="847.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="1143.0" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1146.02" y="847.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%; 0.00%)</title><rect x="53.8" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.77" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="941.8" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="944.81" y="767.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartLine (1 samples, 0.02%; +0.02%)</title><rect x="29.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.71" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="300.6" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="303.59" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="805" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="815.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="607.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="297.4" y="565" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="300.38" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; -0.02%)</title><rect x="540.8" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="543.76" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="188.3" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="191.29" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="58.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.36" y="415.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%; 0.00%)</title><rect x="1076.1" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.10" y="671.5" ></text>
</g>
<g >
<title>__vfprintf_internal (2 samples, 0.04%; +0.02%)</title><rect x="81.0" y="965" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.04" y="975.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="751.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="767.4" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="770.41" y="719.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (25 samples, 0.49%; +0.04%)</title><rect x="1062.6" y="597" width="5.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1065.58" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="97.3" y="821" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="100.31" y="831.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="575.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (21 samples, 0.41%; 0.00%)</title><rect x="519.9" y="597" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="522.90" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%; -0.02%)</title><rect x="982.1" y="677" width="3.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="985.14" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (17 samples, 0.33%; +0.04%)</title><rect x="162.4" y="773" width="3.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="165.40" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1097.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.19" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%; +0.04%)</title><rect x="230.0" y="549" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="233.00" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (14 samples, 0.27%; -0.04%)</title><rect x="827.0" y="677" width="3.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="829.99" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; 0.00%)</title><rect x="552.4" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.45" y="687.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.08%)</title><rect x="999.6" y="597" width="0.6" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1002.56" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="45.5" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.52" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="371.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="374.63" y="543.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; -0.02%)</title><rect x="840.1" y="789" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="843.06" y="799.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (3 samples, 0.06%; +0.06%)</title><rect x="892.5" y="661" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="895.54" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="216.3" y="517" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="219.25" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.10%; 0.00%)</title><rect x="754.1" y="677" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.12" y="687.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; 0.00%)</title><rect x="931.7" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.72" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; -0.08%)</title><rect x="563.2" y="693" width="0.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="566.22" y="703.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (18 samples, 0.35%; 0.00%)</title><rect x="753.7" y="725" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.66" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="592.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.78" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="260.9" y="469" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="263.94" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%; 0.00%)</title><rect x="1049.5" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.52" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="1113.2" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1116.23" y="783.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (205 samples, 3.98%; 0.00%)</title><rect x="22.6" y="757" width="47.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.60" y="767.5" >cql3..</text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (120 samples, 2.33%; -0.08%)</title><rect x="789.4" y="677" width="27.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="792.41" y="687.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (1 samples, 0.02%; +0.02%)</title><rect x="1189.5" y="949" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.54" y="959.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.8" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.84" y="831.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="871.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (10 samples, 0.19%; +0.02%)</title><rect x="411.5" y="517" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="414.51" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%; +0.02%)</title><rect x="816.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="819.68" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="279.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.05" y="575.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="77.1" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.15" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="464.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="467.22" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="1032.6" y="597" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.56" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::get (1 samples, 0.02%; +0.02%)</title><rect x="67.5" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.52" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="164.5" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="167.46" y="767.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="705.8" y="837" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="708.76" y="847.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; +0.02%)</title><rect x="38.4" y="677" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.42" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="868.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.70" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1128.1" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.12" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.15" y="703.5" ></text>
</g>
<g >
<title>do_lookup_x (2 samples, 0.04%; +0.04%)</title><rect x="1179.2" y="981" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1182.23" y="991.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.10%; +0.04%)</title><rect x="178.0" y="725" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="180.98" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="566.4" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="569.43" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="25.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.58" y="639.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%; 0.00%)</title><rect x="110.8" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.84" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (28 samples, 0.54%; +0.02%)</title><rect x="445.9" y="565" width="6.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="448.88" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (2 samples, 0.04%; +0.02%)</title><rect x="49.6" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.65" y="559.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="943.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="946.41" y="671.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="754.8" y="629" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="757.80" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.06%)</title><rect x="929.9" y="677" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="932.89" y="687.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="761.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.91" y="751.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (58 samples, 1.13%; -0.02%)</title><rect x="795.6" y="581" width="13.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="798.60" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%; +0.02%)</title><rect x="216.0" y="549" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="219.02" y="559.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%; +0.04%)</title><rect x="829.5" y="661" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="832.51" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="1103.1" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1106.14" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="364.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="367.07" y="543.5" ></text>
</g>
<g >
<title>fmt::v7::detail::vformat_to&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="81.5" y="965" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.50" y="975.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%; -0.12%)</title><rect x="742.4" y="645" width="0.7" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="745.43" y="655.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.19" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; 0.00%)</title><rect x="1124.2" y="741" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.23" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="1144.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.85" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; +0.02%)</title><rect x="197.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="200.92" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (6 samples, 0.12%; +0.12%)</title><rect x="310.0" y="629" width="1.4" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="312.98" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="445.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="448.65" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; 0.00%)</title><rect x="984.4" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.43" y="639.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (48 samples, 0.93%; +0.02%)</title><rect x="746.8" y="757" width="11.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="749.78" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.75" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="287.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="290.75" y="607.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (2 samples, 0.04%; +0.04%)</title><rect x="1131.6" y="661" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1134.56" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="879.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (18 samples, 0.35%; -0.06%)</title><rect x="717.2" y="805" width="4.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="720.22" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::~_Rb_tree (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="767.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (39 samples, 0.76%; -0.02%)</title><rect x="1170.3" y="981" width="8.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1173.29" y="991.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (1 samples, 0.02%; +0.02%)</title><rect x="481.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="484.17" y="655.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%; +0.02%)</title><rect x="843.7" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="846.72" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; +0.06%)</title><rect x="826.1" y="645" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="829.08" y="655.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%; +0.04%)</title><rect x="833.2" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="836.18" y="767.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%; 0.00%)</title><rect x="56.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.29" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.02%)</title><rect x="560.2" y="645" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="563.24" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="830.4" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.43" y="703.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="645.9" y="837" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.95" y="847.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="591.6" y="661" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="594.64" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; -0.02%)</title><rect x="576.1" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="579.05" y="783.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (6 samples, 0.12%; 0.00%)</title><rect x="827.2" y="661" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.22" y="671.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%; +0.06%)</title><rect x="284.1" y="581" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="287.09" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (403 samples, 7.83%; +0.02%)</title><rect x="743.8" y="789" width="92.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="746.80" y="799.5" >cql3::query..</text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (4 samples, 0.08%; 0.00%)</title><rect x="20.5" y="773" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="783.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; +0.02%)</title><rect x="251.1" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="254.09" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="20.3" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.31" y="767.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="340.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="343.69" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="973.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.89" y="719.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (6 samples, 0.12%; 0.00%)</title><rect x="258.0" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="260.96" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="983.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="986.29" y="655.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%; 0.00%)</title><rect x="113.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.81" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="98.2" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.23" y="847.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="735.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="39.8" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="671.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.16%; +0.06%)</title><rect x="1101.3" y="773" width="1.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1104.31" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%; -0.02%)</title><rect x="863.4" y="853" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="866.43" y="863.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="850.1" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.14" y="767.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (64 samples, 1.24%; +0.06%)</title><rect x="686.1" y="853" width="14.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="689.05" y="863.5" ></text>
</g>
<g >
<title>sstables::sstable::open_or_create_data (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="536.6" y="613" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="539.63" y="623.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.02%)</title><rect x="541.2" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="544.22" y="543.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.40" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="941.1" y="709" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="944.12" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; 0.00%)</title><rect x="863.2" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.20" y="863.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (10 samples, 0.19%; 0.00%)</title><rect x="944.8" y="757" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="947.79" y="767.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.14%; 0.00%)</title><rect x="39.6" y="693" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.56" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; +0.02%)</title><rect x="1168.2" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.23" y="847.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="439.7" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="442.70" y="575.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%; 0.00%)</title><rect x="216.9" y="565" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="219.94" y="575.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (36 samples, 0.70%; 0.00%)</title><rect x="1115.7" y="661" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="671.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="607.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, schema_mutations&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="783.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="591.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%; 0.00%)</title><rect x="276.5" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="279.53" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (3 samples, 0.06%; +0.06%)</title><rect x="956.0" y="741" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="959.02" y="751.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_and_populating_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="1075.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1078.64" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="793.3" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="796.31" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (3 samples, 0.06%; 0.00%)</title><rect x="57.2" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.21" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.75" y="367.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%; 0.00%)</title><rect x="113.1" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="815.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="540.5" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.53" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1020.2" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.18" y="495.5" ></text>
</g>
<g >
<title>database::create_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.71" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.04%)</title><rect x="977.3" y="629" width="1.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="980.33" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="145.0" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="147.98" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (13 samples, 0.25%; 0.00%)</title><rect x="301.3" y="613" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.28" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; -0.02%)</title><rect x="56.5" y="469" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="59.52" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="687.5" ></text>
</g>
<g >
<title>db::system_keyspace::set_local_host_id (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="64.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.54" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="860.9" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.91" y="831.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="847.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (118 samples, 2.29%; +0.08%)</title><rect x="906.3" y="757" width="27.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="909.29" y="767.5" >c..</text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (13 samples, 0.25%; 0.00%)</title><rect x="50.1" y="661" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.10" y="671.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%; 0.00%)</title><rect x="1115.5" y="821" width="8.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.52" y="831.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_perf_simple_query.cc (1 samples, 0.02%; 0.00%)</title><rect x="85.9" y="965" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.86" y="975.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="561.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="564.61" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.35%; +0.12%)</title><rect x="1070.4" y="613" width="4.1" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="1073.37" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (12 samples, 0.23%; 0.00%)</title><rect x="853.1" y="741" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.12" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; -0.04%)</title><rect x="202.7" y="613" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="205.73" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (616 samples, 11.96%; +0.02%)</title><rect x="947.1" y="773" width="141.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="950.08" y="783.5" >cql3::statements:..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::reference_wrapper&lt;gms::feature&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::reference_wrapper&lt;gms::feature&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, gms::feature&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="623.5" ></text>
</g>
<g >
<title>canonical_mutation::canonical_mutation (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::try_reap_events (1 samples, 0.02%; 0.00%)</title><rect x="1169.1" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.15" y="815.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="16.6" y="917" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="927.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (2 samples, 0.04%; 0.00%)</title><rect x="72.6" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.56" y="703.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="480.7" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="483.72" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_table_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.4" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.44" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (9 samples, 0.17%; 0.00%)</title><rect x="55.1" y="629" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.15" y="639.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="751.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="734.9" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.87" y="831.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (7 samples, 0.14%; -0.02%)</title><rect x="861.1" y="821" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="864.14" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="837.3" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.31" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.10%; +0.02%)</title><rect x="59.5" y="565" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.50" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%; +0.02%)</title><rect x="87.7" y="869" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.69" y="879.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (2 samples, 0.04%; +0.02%)</title><rect x="882.9" y="773" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="885.91" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="39.8" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%; +0.02%)</title><rect x="323.3" y="693" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="326.28" y="703.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (18 samples, 0.35%; +0.08%)</title><rect x="511.4" y="613" width="4.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="514.43" y="623.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (19 samples, 0.37%; -0.04%)</title><rect x="739.5" y="773" width="4.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="742.45" y="783.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="1111.9" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1114.85" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.21" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%; -0.04%)</title><rect x="726.6" y="853" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="729.62" y="863.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (15 samples, 0.29%; +0.06%)</title><rect x="397.5" y="517" width="3.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="400.53" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="44.1" y="645" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="82.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.19" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.08%)</title><rect x="434.4" y="485" width="0.7" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="437.42" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="309.5" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="312.53" y="639.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="833.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.95" y="767.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; +0.02%)</title><rect x="257.0" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="260.05" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (74 samples, 1.44%; -0.02%)</title><rect x="577.0" y="741" width="16.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="579.97" y="751.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (27 samples, 0.52%; 0.00%)</title><rect x="569.2" y="773" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.18" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1126.7" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.75" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; +0.02%)</title><rect x="870.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.08" y="623.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="271.7" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="274.71" y="527.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (2 samples, 0.04%; 0.00%)</title><rect x="868.2" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.24" y="655.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.14%; +0.02%)</title><rect x="558.6" y="645" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="561.63" y="655.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="59.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="775.2" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="778.20" y="719.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (3 samples, 0.06%; 0.00%)</title><rect x="658.1" y="805" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="815.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; +0.04%)</title><rect x="1024.1" y="581" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1027.08" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; +0.02%)</title><rect x="47.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.58" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="66.8" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.83" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="1126.7" y="645" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1129.75" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1042.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.41" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="559.5" ></text>
</g>
<g >
<title>executor&lt;test_read (576 samples, 11.19%; -0.06%)</title><rect x="730.7" y="837" width="132.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="733.74" y="847.5" >executor&lt;test_read</text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.02%)</title><rect x="891.8" y="661" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="894.85" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="644.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="647.57" y="831.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="77.4" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.38" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; -0.06%)</title><rect x="104.6" y="805" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="107.65" y="815.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="272.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.17" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="303.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (3 samples, 0.06%; +0.02%)</title><rect x="383.8" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="386.78" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (70 samples, 1.36%; -0.02%)</title><rect x="46.0" y="693" width="16.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="48.98" y="703.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.16%; -0.02%)</title><rect x="795.8" y="533" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="798.83" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.12%; -0.02%)</title><rect x="298.3" y="549" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="301.30" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (279 samples, 5.42%; +0.29%)</title><rect x="222.7" y="597" width="63.9" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="225.67" y="607.5" >partiti..</text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="723.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="726.87" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="679.6" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.64" y="831.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="706.9" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="709.91" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="58.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="511.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%; +0.02%)</title><rect x="973.4" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.43" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_base (1 samples, 0.02%; 0.00%)</title><rect x="20.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.77" y="655.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="1128.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="527.5" ></text>
</g>
<g >
<title>database::has_keyspace (11 samples, 0.21%; 0.00%)</title><rect x="847.6" y="757" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.62" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (1 samples, 0.02%; 0.00%)</title><rect x="299.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="302.44" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%; +0.02%)</title><rect x="263.9" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="266.92" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="22.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.38" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1142.1" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1145.10" y="815.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.10%; +0.04%)</title><rect x="827.2" y="645" width="1.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="830.22" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1103.4" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1106.37" y="767.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; -0.06%)</title><rect x="32.9" y="597" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="35.92" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="783.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; +0.02%)</title><rect x="289.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="292.82" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.40" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (430 samples, 8.35%; -0.02%)</title><rect x="206.2" y="629" width="98.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="209.17" y="639.5" >logalloc::a..</text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="791.5" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.47" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="269.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.42" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%; +0.04%)</title><rect x="269.7" y="453" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="272.65" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; -0.02%)</title><rect x="339.1" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="342.09" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="932.6" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.64" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="634.5" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.49" y="719.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%; 0.00%)</title><rect x="293.9" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.94" y="575.5" ></text>
</g>
<g >
<title>table::query (2,164 samples, 42.03%; +0.25%)</title><rect x="145.4" y="805" width="496.0" height="15.0" fill="rgb(255,28,28)" rx="2" ry="2" />
<text  x="148.44" y="815.5" >table::query</text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%; +0.02%)</title><rect x="849.2" y="693" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="852.22" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="54.2" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="591.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="18.9" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.94" y="751.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (1 samples, 0.02%; +0.02%)</title><rect x="1100.6" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1103.62" y="783.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="666.3" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="669.34" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1126.7" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.75" y="671.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="111.5" y="37" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.52" y="47.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (7 samples, 0.14%; +0.06%)</title><rect x="861.1" y="805" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="864.14" y="815.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; 0.00%)</title><rect x="750.7" y="693" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.68" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (6 samples, 0.12%; 0.00%)</title><rect x="1148.5" y="805" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.52" y="815.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (5 samples, 0.10%; 0.00%)</title><rect x="865.3" y="693" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.27" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.69" y="735.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.02%)</title><rect x="44.1" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="56.5" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.52" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="60.6" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.65" y="623.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="811.2" y="597" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="814.18" y="607.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1121.9" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.94" y="575.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="892.1" y="645" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="895.08" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="40.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.94" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (33 samples, 0.64%; +0.04%)</title><rect x="1060.7" y="613" width="7.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1063.75" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="978.9" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="981.93" y="703.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.02%)</title><rect x="656.7" y="837" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="659.72" y="847.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (2 samples, 0.04%; 0.00%)</title><rect x="973.0" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.98" y="719.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::operator= (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.40" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="1125.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.60" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (4 samples, 0.08%; 0.00%)</title><rect x="74.2" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.17" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (44 samples, 0.85%; +0.02%)</title><rect x="889.8" y="709" width="10.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="892.79" y="719.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="206.9" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="209.86" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="304.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="307.48" y="623.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (3 samples, 0.06%; -0.04%)</title><rect x="135.4" y="725" width="0.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="138.36" y="735.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (10 samples, 0.19%; +0.02%)</title><rect x="354.9" y="597" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="357.90" y="607.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="677" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="687.5" ></text>
</g>
<g >
<title>sstables::seal_statistics (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="847.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="280.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="283.19" y="543.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; 0.00%)</title><rect x="864.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%; +0.06%)</title><rect x="939.1" y="757" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="942.06" y="767.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (14 samples, 0.27%; -0.02%)</title><rect x="587.7" y="645" width="3.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="590.74" y="655.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (6 samples, 0.12%; 0.00%)</title><rect x="1125.4" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.02%)</title><rect x="868.7" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="871.70" y="607.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_charPositionInLine (2 samples, 0.04%; +0.04%)</title><rect x="26.0" y="629" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="29.04" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (6 samples, 0.12%; +0.04%)</title><rect x="273.5" y="517" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="276.55" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="734.0" y="789" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="736.95" y="799.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.69" y="783.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (9 samples, 0.17%; +0.02%)</title><rect x="667.7" y="821" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.72" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="447.5" ></text>
</g>
<g >
<title>db::validate_for_read (2 samples, 0.04%; +0.04%)</title><rect x="1100.9" y="773" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1103.85" y="783.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (1 samples, 0.02%; -0.02%)</title><rect x="1124.0" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1127.00" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (2 samples, 0.04%; 0.00%)</title><rect x="41.6" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.63" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (210 samples, 4.08%; +0.10%)</title><rect x="230.5" y="549" width="48.1" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="233.46" y="559.5" >part..</text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (42 samples, 0.82%; -0.02%)</title><rect x="714.9" y="837" width="9.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="717.93" y="847.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (1 samples, 0.02%; -0.04%)</title><rect x="743.3" y="757" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="746.35" y="767.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;1ul, std::default_delete&lt;cql3::expr::expression::impl&gt;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (16 samples, 0.31%; -0.02%)</title><rect x="1043.8" y="677" width="3.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1046.79" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="783.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (14 samples, 0.27%; -0.08%)</title><rect x="1176.0" y="965" width="3.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1179.02" y="975.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="735.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; -0.02%)</title><rect x="938.6" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="941.60" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%; +0.06%)</title><rect x="809.8" y="597" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="812.81" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="819.9" y="693" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="822.89" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.75" y="703.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; +0.02%)</title><rect x="1115.7" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.75" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="74.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.86" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1140.7" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.73" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="1052.0" y="645" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1055.04" y="655.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (4 samples, 0.08%; -0.02%)</title><rect x="619.8" y="773" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="622.82" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="62.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.48" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="968.6" y="677" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="971.62" y="687.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (4 samples, 0.08%; +0.02%)</title><rect x="70.7" y="773" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.73" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="455.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="458.51" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="671.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="674.62" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (3 samples, 0.06%; -0.02%)</title><rect x="258.4" y="421" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="261.42" y="431.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.12%; +0.02%)</title><rect x="268.3" y="453" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="271.28" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,315 samples, 44.96%; 0.00%)</title><rect x="114.5" y="853" width="530.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="117.50" y="863.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (6 samples, 0.12%; +0.04%)</title><rect x="1130.2" y="565" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1133.19" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%; +0.04%)</title><rect x="1055.0" y="645" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1058.02" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%; -0.04%)</title><rect x="712.9" y="821" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="715.87" y="831.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (39 samples, 0.76%; -0.08%)</title><rect x="715.4" y="821" width="8.9" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="718.39" y="831.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (9 samples, 0.17%; -0.04%)</title><rect x="482.3" y="629" width="2.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="485.32" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (6 samples, 0.12%; 0.00%)</title><rect x="870.3" y="661" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.31" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="822.0" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.95" y="655.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="75.5" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.54" y="751.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="650.8" y="821" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.76" y="831.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%; +0.02%)</title><rect x="918.0" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="920.97" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (7 samples, 0.14%; +0.02%)</title><rect x="414.9" y="549" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="417.94" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="894.1" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="897.14" y="655.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="64.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.77" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%; 0.00%)</title><rect x="51.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.71" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="65.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.46" y="671.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (72 samples, 1.40%; 0.00%)</title><rect x="530.0" y="661" width="16.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.99" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="50.8" y="629" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.79" y="639.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; 0.00%)</title><rect x="439.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="442.01" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (15 samples, 0.29%; 0.00%)</title><rect x="739.9" y="725" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.91" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (11 samples, 0.21%; 0.00%)</title><rect x="58.4" y="629" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="639.5" ></text>
</g>
<g >
<title>from_hex (3 samples, 0.06%; +0.04%)</title><rect x="71.0" y="693" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="73.96" y="703.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="776.3" y="693" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="779.35" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="593.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.01" y="703.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (11 samples, 0.21%; +0.04%)</title><rect x="214.4" y="565" width="2.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="217.42" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="338.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="341.86" y="719.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (4 samples, 0.08%; 0.00%)</title><rect x="644.1" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.12" y="847.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="714.9" y="821" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="717.93" y="831.5" ></text>
</g>
<g >
<title>ser::row_view::columns (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.39" y="591.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="735.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (4 samples, 0.08%; 0.00%)</title><rect x="57.2" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.21" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%; +0.04%)</title><rect x="373.9" y="549" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="376.92" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="867.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.33" y="703.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="58.6" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.58" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%; -0.06%)</title><rect x="486.9" y="661" width="2.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="489.90" y="671.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1129.5" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.50" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="53.8" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.77" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="687.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%; 0.00%)</title><rect x="1116.7" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="601.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.26" y="703.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (4 samples, 0.08%; +0.04%)</title><rect x="1107.7" y="741" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1110.73" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%; -0.02%)</title><rect x="663.1" y="789" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="666.14" y="799.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%; -0.02%)</title><rect x="518.5" y="613" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="521.53" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="488.3" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.28" y="655.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (10 samples, 0.19%; -0.04%)</title><rect x="126.6" y="805" width="2.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="129.65" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1084.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.58" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (3 samples, 0.06%; -0.02%)</title><rect x="1112.5" y="773" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1115.54" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="82.9" y="821" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="831.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (26 samples, 0.50%; 0.00%)</title><rect x="569.2" y="757" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.18" y="767.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="949" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="959.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="563.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="566.68" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="42.5" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.54" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="785.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="788.06" y="703.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="486.4" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="489.45" y="655.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="669.8" y="837" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.78" y="847.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="687.5" ></text>
</g>
<g >
<title>seastar::alien::instance::poll_queues (1 samples, 0.02%; +0.02%)</title><rect x="1168.0" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.00" y="863.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="43.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.92" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.02%)</title><rect x="450.2" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="453.24" y="527.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (13 samples, 0.25%; 0.00%)</title><rect x="1161.6" y="805" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.58" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="951.4" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="954.43" y="751.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (6 samples, 0.12%; 0.00%)</title><rect x="24.0" y="629" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="639.5" ></text>
</g>
<g >
<title>database::has_keyspace (9 samples, 0.17%; +0.02%)</title><rect x="830.9" y="709" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.89" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1122.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.85" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="795.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="798.37" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (6 samples, 0.12%; +0.02%)</title><rect x="610.4" y="741" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="613.43" y="751.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::estimated_histogram (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="831.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (4 samples, 0.08%; +0.02%)</title><rect x="553.8" y="693" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.82" y="703.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="965" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.17" y="975.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%; +0.02%)</title><rect x="553.1" y="693" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.13" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; +0.10%)</title><rect x="855.9" y="773" width="1.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="858.87" y="783.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="752.3" y="725" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="755.28" y="735.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (43 samples, 0.84%; -0.04%)</title><rect x="96.9" y="853" width="9.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="99.86" y="863.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="787.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.12" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1078.9" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1081.85" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="458.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="461.03" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (45 samples, 0.87%; +0.08%)</title><rect x="244.0" y="453" width="10.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="246.98" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, read_context::stop (1 samples, 0.02%; +0.02%)</title><rect x="112.0" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.98" y="671.5" ></text>
</g>
<g >
<title>table::query (8 samples, 0.16%; -0.04%)</title><rect x="1165.9" y="853" width="1.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1168.94" y="863.5" ></text>
</g>
<g >
<title>all (5,149 samples, 100%)</title><rect x="10.0" y="1013" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="1023.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (5 samples, 0.10%; -0.02%)</title><rect x="822.6" y="741" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="825.64" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="793.5" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="796.53" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="842.8" y="725" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="845.81" y="735.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="1125.8" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.83" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_aggregate_statement*, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="66.1" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.15" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (8 samples, 0.16%; 0.00%)</title><rect x="859.1" y="805" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.08" y="815.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="799.5" ></text>
</g>
<g >
<title>mutation::data::data (2 samples, 0.04%; 0.00%)</title><rect x="871.9" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (13 samples, 0.25%; +0.10%)</title><rect x="521.5" y="565" width="3.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="524.51" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.02%)</title><rect x="1020.4" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1023.41" y="495.5" ></text>
</g>
<g >
<title>clustering_key_prefix::clustering_key_prefix (1 samples, 0.02%; +0.02%)</title><rect x="110.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.84" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1132.2" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.25" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (64 samples, 1.24%; 0.00%)</title><rect x="23.8" y="709" width="14.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.75" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.40" y="463.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="639.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.06%)</title><rect x="581.3" y="677" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="584.32" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.21%; 0.00%)</title><rect x="256.8" y="469" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="259.82" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="646.4" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="649.41" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="67.8" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.75" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.14%; 0.00%)</title><rect x="39.6" y="709" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.56" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (54 samples, 1.05%; +0.16%)</title><rect x="1088.2" y="773" width="12.4" height="15.0" fill="rgb(255,98,98)" rx="2" ry="2" />
<text  x="1091.25" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (501 samples, 9.73%; 0.00%)</title><rect x="345.3" y="677" width="114.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="348.28" y="687.5" >seastar::inter..</text>
</g>
<g >
<title>keyspace::create_replication_strategy (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="671.4" y="837" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="674.39" y="847.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; 0.00%)</title><rect x="586.6" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="589.59" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="790.6" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.56" y="639.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; +0.06%)</title><rect x="796.1" y="501" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="799.06" y="511.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (40 samples, 0.78%; +0.02%)</title><rect x="1115.1" y="837" width="9.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.06" y="847.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (9 samples, 0.17%; +0.02%)</title><rect x="798.1" y="565" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="801.12" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="612.0" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="615.03" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="77.6" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.61" y="831.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="735.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="751.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; +0.02%)</title><rect x="137.4" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="140.42" y="735.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (12 samples, 0.23%; +0.06%)</title><rect x="13.0" y="933" width="2.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="15.98" y="943.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="322.4" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.36" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; -0.06%)</title><rect x="1055.9" y="645" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1058.94" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; +0.02%)</title><rect x="340.9" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="343.92" y="767.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="79.4" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.44" y="831.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="786.0" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="788.97" y="655.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; -0.02%)</title><rect x="524.3" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="527.26" y="543.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; +0.02%)</title><rect x="955.8" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="958.79" y="751.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="632.9" y="741" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="635.89" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.14%)</title><rect x="1034.2" y="581" width="2.5" height="15.0" fill="rgb(255,112,112)" rx="2" ry="2" />
<text  x="1037.16" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (12 samples, 0.23%; -0.02%)</title><rect x="662.0" y="821" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="664.99" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (17 samples, 0.33%; +0.02%)</title><rect x="71.6" y="773" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.65" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (6 samples, 0.12%; +0.06%)</title><rect x="136.0" y="741" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="139.04" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="936.1" y="757" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="939.08" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (35 samples, 0.68%; 0.00%)</title><rect x="864.8" y="773" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; 0.00%)</title><rect x="699.6" y="837" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.57" y="847.5" ></text>
</g>
<g >
<title>database::create_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="671.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,273 samples, 24.72%; 0.00%)</title><rect x="173.4" y="773" width="291.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="176.40" y="783.5" >query::consume_page&lt;</text>
</g>
<g >
<title>mutation::mutation (2 samples, 0.04%; 0.00%)</title><rect x="871.9" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="687.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="836.8" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="839.85" y="767.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="47.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.35" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1109.6" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1112.56" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (111 samples, 2.16%; -0.06%)</title><rect x="236.4" y="485" width="25.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="239.42" y="495.5" >c..</text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (36 samples, 0.70%; 0.00%)</title><rect x="1124.2" y="837" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.23" y="847.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="761.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="764.91" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%; +0.02%)</title><rect x="21.5" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.46" y="767.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%; +0.04%)</title><rect x="1030.7" y="629" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1033.73" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="827.9" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.91" y="639.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (5 samples, 0.10%; 0.00%)</title><rect x="82.9" y="773" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="783.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; +0.02%)</title><rect x="832.7" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.72" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.04%)</title><rect x="503.9" y="661" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="506.86" y="671.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; 0.00%)</title><rect x="864.1" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="815.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; +0.02%)</title><rect x="859.3" y="789" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.31" y="799.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (64 samples, 1.24%; -0.02%)</title><rect x="1060.7" y="645" width="14.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1063.75" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="751.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; +0.02%)</title><rect x="16.4" y="901" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.42" y="911.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="37.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.50" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator bool (2 samples, 0.04%; 0.00%)</title><rect x="67.8" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.75" y="735.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="623.9" y="773" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.95" y="783.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="515.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="518.55" y="639.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e37906ae3451cbc9b5124d339938480d2e184cc3] (1 samples, 0.02%; +0.02%)</title><rect x="806.4" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="809.37" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="725" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="735.5" ></text>
</g>
<g >
<title>database::find_schema (8 samples, 0.16%; 0.00%)</title><rect x="824.9" y="709" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.93" y="719.5" ></text>
</g>
<g >
<title>partition_entry::read (8 samples, 0.16%; +0.02%)</title><rect x="548.3" y="661" width="1.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="551.32" y="671.5" ></text>
</g>
<g >
<title>[unknown] (7 samples, 0.14%; 0.00%)</title><rect x="10.0" y="965" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="975.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (12 samples, 0.23%; +0.06%)</title><rect x="689.5" y="821" width="2.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="692.49" y="831.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%; +0.02%)</title><rect x="1046.8" y="629" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1049.77" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1057.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1060.08" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; 0.00%)</title><rect x="1033.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.48" y="639.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="847.5" ></text>
</g>
<g >
<title>sstables::sstable::sst_dir_basename (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (4 samples, 0.08%; 0.00%)</title><rect x="658.1" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1086.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1089.19" y="735.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="58.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (11 samples, 0.21%; 0.00%)</title><rect x="319.8" y="677" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="322.84" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; +0.02%)</title><rect x="1158.4" y="821" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1161.37" y="831.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="41.6" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.63" y="655.5" ></text>
</g>
<g >
<title>std::apply&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="641.4" y="821" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="644.37" y="831.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="782.5" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="785.53" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="97.5" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="100.54" y="847.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (23 samples, 0.45%; -0.02%)</title><rect x="1159.3" y="821" width="5.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1162.29" y="831.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (50 samples, 0.97%; -0.02%)</title><rect x="713.8" y="853" width="11.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="716.78" y="863.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="684.2" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.22" y="831.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="1082.7" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1085.75" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.02%)</title><rect x="235.5" y="485" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="238.50" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (16 samples, 0.31%; +0.02%)</title><rect x="71.9" y="757" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.88" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (3 samples, 0.06%; +0.04%)</title><rect x="590.3" y="629" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="593.26" y="639.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.46" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (3 samples, 0.06%; +0.02%)</title><rect x="276.3" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="279.30" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1033.2" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1036.25" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1037.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.37" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="61.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.11" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="639.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="568.3" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.26" y="783.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="830.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.66" y="735.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="58.8" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.81" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (19 samples, 0.37%; +0.06%)</title><rect x="318.5" y="693" width="4.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="321.46" y="703.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (2 samples, 0.04%; 0.00%)</title><rect x="21.7" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (4 samples, 0.08%; 0.00%)</title><rect x="951.7" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.66" y="751.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="539.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.84" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; +0.02%)</title><rect x="278.1" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="281.13" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="767.0" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="769.95" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="702.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.10" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%; +0.08%)</title><rect x="909.0" y="725" width="2.3" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="912.04" y="735.5" ></text>
</g>
<g >
<title>database::apply_in_memory (36 samples, 0.70%; 0.00%)</title><rect x="1115.7" y="645" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%; +0.04%)</title><rect x="719.3" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="722.28" y="767.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%; +0.02%)</title><rect x="1097.4" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1100.42" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="621.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.89" y="799.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (70 samples, 1.36%; +0.04%)</title><rect x="577.4" y="709" width="16.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="580.43" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="610.7" y="725" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="613.66" y="735.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.1" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="783.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (18 samples, 0.35%; +0.02%)</title><rect x="774.7" y="741" width="4.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="777.74" y="751.5" ></text>
</g>
<g >
<title>make_combined_reader (94 samples, 1.83%; +0.04%)</title><rect x="477.0" y="693" width="21.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="480.05" y="703.5" >m..</text>
</g>
<g >
<title>db::filter_for_query (1 samples, 0.02%; 0.00%)</title><rect x="1048.8" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.83" y="703.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="673.0" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.99" y="847.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1127.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.98" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (9 samples, 0.17%; -0.12%)</title><rect x="252.0" y="389" width="2.1" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="255.00" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="347.6" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="350.57" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%; 0.00%)</title><rect x="1083.7" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.66" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (1 samples, 0.02%; +0.02%)</title><rect x="76.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.00" y="703.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.22" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (2 samples, 0.04%; +0.04%)</title><rect x="661.5" y="821" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="664.53" y="831.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (42 samples, 0.82%; -0.17%)</title><rect x="290.0" y="581" width="9.7" height="15.0" fill="rgb(84,84,255)" rx="2" ry="2" />
<text  x="293.05" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="733.7" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="736.72" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.81" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (3 samples, 0.06%; 0.00%)</title><rect x="71.0" y="757" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.96" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="142.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="145.46" y="815.5" ></text>
</g>
<g >
<title>database::shard_of (4 samples, 0.08%; 0.00%)</title><rect x="1125.4" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="125.5" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="128.50" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="54.7" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.69" y="639.5" ></text>
</g>
<g >
<title>table::as_mutation_source (8 samples, 0.16%; 0.00%)</title><rect x="638.8" y="789" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.84" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="41.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.85" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="719.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="799.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%; 0.00%)</title><rect x="568.5" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="571.49" y="783.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="311.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="314.59" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.40" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="453.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.99" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (5 samples, 0.10%; 0.00%)</title><rect x="804.1" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.08" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="543.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="828.4" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="831.37" y="655.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%; -0.02%)</title><rect x="835.5" y="773" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="838.47" y="783.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%; 0.00%)</title><rect x="663.4" y="773" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.37" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%; +0.04%)</title><rect x="366.8" y="517" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="369.82" y="527.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (17 samples, 0.33%; +0.04%)</title><rect x="852.0" y="757" width="3.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="854.97" y="767.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="1125.1" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.14" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="869.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.62" y="575.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.17" y="959.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (2 samples, 0.04%; 0.00%)</title><rect x="568.5" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="571.49" y="767.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.04%)</title><rect x="540.8" y="517" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="543.76" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; -0.04%)</title><rect x="280.0" y="533" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="282.96" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="549.5" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.47" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="990.6" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="993.62" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; 0.00%)</title><rect x="276.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="279.07" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.08%)</title><rect x="657.6" y="837" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="660.64" y="847.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="496.5" y="661" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="499.53" y="671.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.04%; 0.00%)</title><rect x="10.0" y="949" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="959.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (2 samples, 0.04%; +0.04%)</title><rect x="89.3" y="869" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="92.29" y="879.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (3 samples, 0.06%; 0.00%)</title><rect x="20.5" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="51.0" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.02" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="679.2" y="821" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="682.18" y="831.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="51.0" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.02" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="943.0" y="725" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.95" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (32 samples, 0.62%; -0.04%)</title><rect x="99.4" y="837" width="7.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="102.38" y="847.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.10" y="879.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1108.6" y="741" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1111.64" y="751.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.33" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="562.5" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.53" y="623.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (35 samples, 0.68%; 0.00%)</title><rect x="1116.0" y="629" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.98" y="639.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%; 0.00%)</title><rect x="16.4" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.42" y="927.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%; 0.00%)</title><rect x="61.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.33" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="652.8" y="837" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="655.82" y="847.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; 0.00%)</title><rect x="1038.7" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.75" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_deleter (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="607.5" ></text>
</g>
<g >
<title>row_tombstone::apply (4 samples, 0.08%; -0.02%)</title><rect x="438.8" y="565" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="441.78" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1033.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.02" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="943.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="47.6" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="655.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="609.7" y="741" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.74" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; +0.04%)</title><rect x="723.2" y="773" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="726.18" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (17 samples, 0.33%; 0.00%)</title><rect x="1033.7" y="629" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.71" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="481.9" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="484.86" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="463.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="952.6" y="757" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.58" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6 samples, 0.12%; 0.00%)</title><rect x="315.7" y="677" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="318.71" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.48" y="671.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (9 samples, 0.17%; 0.00%)</title><rect x="868.2" y="661" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.24" y="671.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="1129.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.50" y="511.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (14 samples, 0.27%; -0.02%)</title><rect x="918.7" y="709" width="3.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="921.66" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.10%)</title><rect x="623.9" y="757" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="626.95" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="643.9" y="837" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="646.89" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (6 samples, 0.12%; 0.00%)</title><rect x="778.9" y="709" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.87" y="719.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="559.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="607.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="783.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (36 samples, 0.70%; 0.00%)</title><rect x="864.8" y="837" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="847.5" ></text>
</g>
<g >
<title>scanning_and_populating_reader::read_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="367.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="751.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1078.4" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1081.39" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (65 samples, 1.26%; +0.08%)</title><rect x="1011.5" y="597" width="14.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="1014.48" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; 0.00%)</title><rect x="854.5" y="693" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.49" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="546.9" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="549.95" y="687.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; +0.02%)</title><rect x="541.4" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="544.45" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.25%; +0.02%)</title><rect x="841.4" y="741" width="3.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="844.43" y="751.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; -0.02%)</title><rect x="54.9" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="57.92" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="22.1" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.15" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="527.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; +0.02%)</title><rect x="1114.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.60" y="799.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (28 samples, 0.54%; -0.06%)</title><rect x="851.3" y="805" width="6.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="854.29" y="815.5" ></text>
</g>
<g >
<title>sstables::sstable::create_data (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (4 samples, 0.08%; 0.00%)</title><rect x="104.2" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.19" y="831.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%; +0.04%)</title><rect x="596.7" y="709" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="599.68" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="547.2" y="677" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="550.18" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.10%; +0.02%)</title><rect x="327.2" y="661" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="330.17" y="671.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.08%)</title><rect x="587.7" y="629" width="1.4" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="590.74" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="46.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.21" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.06%)</title><rect x="572.2" y="677" width="2.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="575.16" y="687.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="623.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,781 samples, 34.59%; +0.10%)</title><rect x="167.9" y="789" width="408.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="170.90" y="799.5" >query::querier&lt;</text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="870.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.77" y="623.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; +0.02%)</title><rect x="1075.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1078.41" y="655.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.02%; 0.00%)</title><rect x="85.9" y="981" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.86" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="24.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.21" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="867.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.10" y="703.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="675.5" y="789" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="678.51" y="799.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%; +0.02%)</title><rect x="439.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="442.01" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="927.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; +0.02%)</title><rect x="442.0" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.99" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="717.0" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="719.99" y="815.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_descriptor::encode (1 samples, 0.02%; +0.02%)</title><rect x="17.1" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.10" y="831.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (432 samples, 8.39%; -0.02%)</title><rect x="205.7" y="645" width="99.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="208.71" y="655.5" >seastar::do..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="1139.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1142.81" y="831.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="805.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="808.68" y="479.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; +0.02%)</title><rect x="112.4" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.44" y="671.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="864.1" y="837" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="847.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="807.7" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.74" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="100.3" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.29" y="815.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%; +0.02%)</title><rect x="756.9" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="759.87" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="658.8" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.78" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (57 samples, 1.11%; 0.00%)</title><rect x="1143.2" y="837" width="13.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.25" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; +0.02%)</title><rect x="193.3" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="196.34" y="639.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (8 samples, 0.16%; 0.00%)</title><rect x="31.1" y="597" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.08" y="607.5" ></text>
</g>
<g >
<title>ser::tombstone_view::operator tombstone (1 samples, 0.02%; +0.02%)</title><rect x="1123.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.54" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="943.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.98" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="337.0" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="340.03" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="143.1" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.15" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1127.2" y="661" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.21" y="671.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; +0.02%)</title><rect x="980.3" y="677" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="983.31" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; -0.04%)</title><rect x="946.6" y="725" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="949.62" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="783.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="959.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="543.5" ></text>
</g>
<g >
<title>stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%; 0.00%)</title><rect x="836.2" y="789" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.16" y="799.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="702.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.10" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="575.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.59" y="783.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.14%; -0.02%)</title><rect x="767.4" y="725" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="770.41" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="311.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="314.36" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (26 samples, 0.50%; 0.00%)</title><rect x="1145.8" y="821" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.77" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (1 samples, 0.02%; +0.02%)</title><rect x="865.0" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.04" y="751.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (8 samples, 0.16%; -0.02%)</title><rect x="291.9" y="549" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="294.88" y="559.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%; +0.02%)</title><rect x="498.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="501.59" y="703.5" ></text>
</g>
<g >
<title>scanning_and_populating_reader::read_from_primary (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="815.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (2 samples, 0.04%; +0.04%)</title><rect x="10.0" y="709" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="322.6" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="325.59" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="895.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.12%; +0.02%)</title><rect x="443.1" y="565" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="446.13" y="575.5" ></text>
</g>
<g >
<title>do_cql_test (272 samples, 5.28%; 0.00%)</title><rect x="17.8" y="901" width="62.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.79" y="911.5" >do_cql..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.10%; 0.00%)</title><rect x="281.8" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.80" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="727.3" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="730.30" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1084.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1087.81" y="719.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.19" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.10%; +0.04%)</title><rect x="227.9" y="581" width="1.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="230.94" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="780.2" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="783.24" y="703.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="783.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="767.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="1125.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.60" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%; +0.02%)</title><rect x="951.9" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="954.89" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="109.5" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.46" y="847.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="869.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.85" y="575.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; 0.00%)</title><rect x="666.6" y="821" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.57" y="831.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (6 samples, 0.12%; 0.00%)</title><rect x="1125.4" y="565" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.37" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="623.5" ></text>
</g>
<g >
<title>service::write_response_handler::~write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="703.2" y="837" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.24" y="847.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (499 samples, 9.69%; +0.06%)</title><rect x="736.7" y="805" width="114.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="739.70" y="815.5" >single_node_cq..</text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (36 samples, 0.70%; -0.02%)</title><rect x="864.8" y="789" width="8.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="867.81" y="799.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; +0.02%)</title><rect x="547.6" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="550.63" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="823.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.33" y="719.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (3 samples, 0.06%; -0.02%)</title><rect x="810.5" y="581" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="813.49" y="591.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.06%)</title><rect x="216.9" y="549" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="219.94" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="104.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.96" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (2 samples, 0.04%; +0.04%)</title><rect x="1132.9" y="837" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1135.94" y="847.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="867.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.56" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="867.3" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.33" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="52.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.85" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="727.1" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.08" y="863.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;scanning_and_populating_reader::do_read_from_primary (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (2 samples, 0.04%; 0.00%)</title><rect x="73.7" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.71" y="703.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::_Bind&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1131.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.10" y="543.5" ></text>
</g>
<g >
<title>memtable::evict_entry (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="612.5" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.49" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="725" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="735.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.56" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="559.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_super (1 samples, 0.02%; +0.02%)</title><rect x="29.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.48" y="607.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (10 samples, 0.19%; -0.02%)</title><rect x="1143.5" y="821" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1146.48" y="831.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.38" y="719.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::_Bind&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1131.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.10" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (29 samples, 0.56%; 0.00%)</title><rect x="800.6" y="533" width="6.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.64" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="648.0" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="651.01" y="847.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="113.1" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="767.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; +0.04%)</title><rect x="192.9" y="629" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="195.88" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (7 samples, 0.14%; +0.04%)</title><rect x="187.6" y="661" width="1.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="190.61" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1098.6" y="741" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1101.56" y="751.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.04%)</title><rect x="215.3" y="549" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="218.34" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%; +0.06%)</title><rect x="317.8" y="693" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="320.78" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (2 samples, 0.04%; +0.04%)</title><rect x="416.5" y="565" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="419.55" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::max_size (1 samples, 0.02%; 0.00%)</title><rect x="51.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.71" y="607.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.08%; 0.00%)</title><rect x="617.5" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.53" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;seastar::internal::invoke_func_with_gate&lt;database::apply_in_memory (1 samples, 0.02%; 0.00%)</title><rect x="1115.7" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="40.5" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.48" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="751.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="767.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="719.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="831.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (76 samples, 1.48%; -0.02%)</title><rect x="1059.4" y="677" width="17.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1062.37" y="687.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="203.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="206.42" y="623.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1031.2" y="613" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1034.18" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%; +0.06%)</title><rect x="475.9" y="693" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="478.90" y="703.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.10%; +0.08%)</title><rect x="893.2" y="661" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="896.22" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="540.5" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.53" y="543.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (5 samples, 0.10%; +0.02%)</title><rect x="77.8" y="805" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.83" y="815.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="741.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="744.05" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.69" y="623.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.69" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="463.8" y="709" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="466.76" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; -0.02%)</title><rect x="39.8" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="42.79" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="233.7" y="501" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="236.67" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="962.4" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="965.43" y="735.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (1 samples, 0.02%; +0.02%)</title><rect x="982.1" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="985.14" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="128.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.71" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="46.2" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.21" y="559.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="849.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="851.99" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (2 samples, 0.04%; +0.02%)</title><rect x="73.7" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.71" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (7 samples, 0.14%; 0.00%)</title><rect x="942.0" y="741" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="945.04" y="751.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%; +0.08%)</title><rect x="804.1" y="469" width="1.1" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="807.08" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%; +0.02%)</title><rect x="56.3" y="517" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.29" y="527.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::tombstone_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="113.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="116.36" y="639.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%; 0.00%)</title><rect x="1166.6" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.62" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="839.1" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.14" y="799.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (7 samples, 0.14%; 0.00%)</title><rect x="23.8" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.75" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="58.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.81" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="57.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.21" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="726.2" y="853" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="729.16" y="863.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (6 samples, 0.12%; +0.04%)</title><rect x="461.2" y="709" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="464.24" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%; +0.10%)</title><rect x="767.6" y="693" width="1.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="770.64" y="703.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (16 samples, 0.31%; +0.02%)</title><rect x="846.9" y="773" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="849.93" y="783.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_stopIndex (1 samples, 0.02%; +0.02%)</title><rect x="25.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.81" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.40" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; 0.00%)</title><rect x="1157.9" y="837" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.92" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (16 samples, 0.31%; 0.00%)</title><rect x="280.0" y="565" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="282.96" y="575.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (3 samples, 0.06%; +0.04%)</title><rect x="1077.0" y="661" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1080.02" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="989.9" y="581" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="992.93" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (120 samples, 2.33%; 0.00%)</title><rect x="38.4" y="725" width="27.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.42" y="735.5" >c..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; 0.00%)</title><rect x="590.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.95" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="1106.6" y="725" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1109.58" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="718.4" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.37" y="783.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="780.2" y="709" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="783.24" y="719.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (37 samples, 0.72%; +0.04%)</title><rect x="516.5" y="645" width="8.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="519.47" y="655.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; 0.00%)</title><rect x="747.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.01" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="871.0" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.99" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="110.6" y="853" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="863.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (5 samples, 0.10%; 0.00%)</title><rect x="43.9" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="444.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.28" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="100.5" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="103.52" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.02%)</title><rect x="102.1" y="773" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="105.13" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="846.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.70" y="735.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (14 samples, 0.27%; +0.04%)</title><rect x="982.4" y="661" width="3.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="985.37" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.98" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.32" y="687.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (3 samples, 0.06%; 0.00%)</title><rect x="131.2" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.23" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="1109.1" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1112.10" y="751.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (14 samples, 0.27%; -0.04%)</title><rect x="804.1" y="517" width="3.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="807.08" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (7 samples, 0.14%; 0.00%)</title><rect x="623.9" y="789" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.95" y="799.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (1 samples, 0.02%; +0.02%)</title><rect x="712.9" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.87" y="815.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="687.2" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.20" y="847.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.10%)</title><rect x="484.4" y="629" width="0.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="487.38" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (6 samples, 0.12%; +0.06%)</title><rect x="648.2" y="837" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="651.24" y="847.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="570.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="573.55" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.75" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (5 samples, 0.10%; 0.00%)</title><rect x="82.9" y="789" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="799.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%; +0.06%)</title><rect x="775.7" y="693" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="778.66" y="703.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (9 samples, 0.17%; 0.00%)</title><rect x="1128.1" y="565" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (236 samples, 4.58%; 0.00%)</title><rect x="985.6" y="693" width="54.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.58" y="703.5" >servi..</text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%; 0.00%)</title><rect x="725.5" y="837" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.47" y="847.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="741" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="751.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="345.7" y="629" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="348.74" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="867.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.33" y="719.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (7 samples, 0.14%; -0.04%)</title><rect x="1076.8" y="677" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1079.79" y="687.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="720.4" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="723.43" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1099.9" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.94" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (23 samples, 0.45%; 0.00%)</title><rect x="608.1" y="773" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.14" y="783.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="142.7" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="145.69" y="815.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1140.3" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.27" y="847.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="831.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="767.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%; +0.02%)</title><rect x="803.4" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.39" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (267 samples, 5.19%; -0.02%)</title><rect x="18.7" y="869" width="61.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="21.71" y="879.5" >single..</text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="1050.9" y="677" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.89" y="687.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (10 samples, 0.19%; -0.04%)</title><rect x="1093.3" y="741" width="2.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1096.29" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; -0.04%)</title><rect x="612.7" y="741" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="615.72" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.12%; -0.02%)</title><rect x="767.6" y="709" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="770.64" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.00" y="767.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="703.5" ></text>
</g>
<g >
<title>main::$_3::operator (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="799.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="400.5" y="501" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="403.51" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; -0.04%)</title><rect x="283.4" y="533" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="286.40" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%; +0.02%)</title><rect x="496.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="499.07" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="496.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="499.30" y="639.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.02%)</title><rect x="38.6" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.65" y="543.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (24 samples, 0.47%; +0.04%)</title><rect x="916.4" y="725" width="5.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="919.37" y="735.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="268.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.05" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%; -0.04%)</title><rect x="740.6" y="693" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="743.60" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; 0.00%)</title><rect x="1124.2" y="773" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.23" y="783.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="792.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="795.16" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.1" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.11" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="949" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (10 samples, 0.19%; -0.06%)</title><rect x="820.3" y="709" width="2.3" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="823.35" y="719.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="847.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (2 samples, 0.04%; -0.04%)</title><rect x="191.3" y="645" width="0.4" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="194.27" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (2 samples, 0.04%; +0.04%)</title><rect x="574.4" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="577.45" y="751.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; 0.00%)</title><rect x="540.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.76" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="222.4" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="225.44" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1037.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.37" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (4 samples, 0.08%; -0.02%)</title><rect x="277.0" y="501" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="279.98" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="770.2" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="773.16" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="172.9" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.94" y="783.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%; -0.02%)</title><rect x="661.1" y="821" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="664.07" y="831.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="845.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="848.56" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="36.1" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="39.13" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="304.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="307.26" y="623.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="594.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.16" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="584.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="587.30" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; -0.06%)</title><rect x="670.5" y="837" width="0.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="673.47" y="847.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (4 samples, 0.08%; 0.00%)</title><rect x="750.9" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.91" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (2 samples, 0.04%; +0.04%)</title><rect x="832.3" y="661" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="835.26" y="671.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1116.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="511.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="847.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="767.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="927.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (19 samples, 0.37%; +0.04%)</title><rect x="894.4" y="661" width="4.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="897.37" y="671.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (9 samples, 0.17%; 0.00%)</title><rect x="791.5" y="613" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="794.47" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="751.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.8" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.79" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="1138.4" y="821" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1141.44" y="831.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; -0.02%)</title><rect x="137.9" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="140.88" y="767.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (7 samples, 0.14%; -0.12%)</title><rect x="732.3" y="789" width="1.7" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="735.35" y="799.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%; -0.02%)</title><rect x="542.8" y="597" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="545.82" y="607.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (4 samples, 0.08%; +0.02%)</title><rect x="1018.8" y="501" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1021.81" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; +0.02%)</title><rect x="869.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.16" y="639.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%; 0.00%)</title><rect x="220.4" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.38" y="575.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (2 samples, 0.04%; +0.02%)</title><rect x="593.5" y="725" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="596.47" y="735.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="911.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="25.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.58" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (11 samples, 0.21%; -0.06%)</title><rect x="721.8" y="789" width="2.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="724.80" y="799.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (7 samples, 0.14%; 0.00%)</title><rect x="138.1" y="757" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.11" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator=&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.21" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="747.2" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="750.24" y="751.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="762.1" y="757" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="765.14" y="767.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.16%; 0.00%)</title><rect x="218.5" y="565" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="221.55" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="962.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="964.98" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::io_pgetevents (1 samples, 0.02%; 0.00%)</title><rect x="1169.1" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.15" y="831.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (2 samples, 0.04%; +0.02%)</title><rect x="29.0" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.02" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_S_do_relocate (1 samples, 0.02%; 0.00%)</title><rect x="565.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.28" y="687.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="854.5" y="709" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.49" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (8 samples, 0.16%; 0.00%)</title><rect x="831.1" y="693" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.12" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="869" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="879.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (2 samples, 0.04%; 0.00%)</title><rect x="63.6" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="687.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (36 samples, 0.70%; -0.02%)</title><rect x="1124.2" y="757" width="8.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1127.23" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1110.2" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.25" y="783.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; +0.02%)</title><rect x="772.7" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="775.68" y="767.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (38 samples, 0.74%; 0.00%)</title><rect x="263.0" y="517" width="8.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.00" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="591.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="594.18" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (255 samples, 4.95%; 0.00%)</title><rect x="19.2" y="837" width="58.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.17" y="847.5" >cql3::..</text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="870.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.77" y="607.5" ></text>
</g>
<g >
<title>posix_memalign (11 samples, 0.21%; 0.00%)</title><rect x="251.5" y="405" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="254.55" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="887.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="890.49" y="751.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;gms::feature_service&gt;::create_local_service&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (64 samples, 1.24%; 0.00%)</title><rect x="23.8" y="725" width="14.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.75" y="735.5" ></text>
</g>
<g >
<title>auth::get_permissions (4 samples, 0.08%; 0.00%)</title><rect x="78.1" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (5 samples, 0.10%; 0.00%)</title><rect x="41.2" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="719.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%; +0.02%)</title><rect x="1133.6" y="853" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.62" y="863.5" ></text>
</g>
<g >
<title>database::create_in_memory_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; -0.02%)</title><rect x="740.8" y="677" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="743.83" y="687.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (28 samples, 0.54%; +0.04%)</title><rect x="328.3" y="661" width="6.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="331.32" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; +0.02%)</title><rect x="166.3" y="773" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="169.29" y="783.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="959.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="559.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="1166.6" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.62" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1119.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.87" y="591.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (19 samples, 0.37%; -0.06%)</title><rect x="851.5" y="789" width="4.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="854.51" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="35.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.67" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; 0.00%)</title><rect x="29.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.94" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="657.9" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="660.87" y="847.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="979.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="982.16" y="703.5" ></text>
</g>
<g >
<title>std::optional&lt;sstables::mc::writer::clustering_info&gt;::operator=&lt;sstables::mc::writer::clustering_info const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.88" y="751.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="967.9" y="709" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="970.93" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; +0.02%)</title><rect x="561.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.16" y="607.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="112.7" y="805" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="815.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="495.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; +0.02%)</title><rect x="96.9" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="99.86" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="638.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.62" y="799.5" ></text>
</g>
<g >
<title>table::make_reader (410 samples, 7.96%; -0.16%)</title><rect x="471.5" y="709" width="94.0" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="474.55" y="719.5" >table::make..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.14%; -0.02%)</title><rect x="831.3" y="677" width="1.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="834.35" y="687.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (1 samples, 0.02%; -0.04%)</title><rect x="1095.6" y="741" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1098.58" y="751.5" ></text>
</g>
<g >
<title>seastar::task_quota_aio_completion::complete_with (1 samples, 0.02%; 0.00%)</title><rect x="1133.9" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.85" y="847.5" ></text>
</g>
<g >
<title>[unknown] (331 samples, 6.43%; 0.00%)</title><rect x="10.0" y="981" width="75.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="991.5" >[unknown]</text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%; 0.00%)</title><rect x="858.6" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.62" y="831.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="671.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="275.8" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="278.84" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (2 samples, 0.04%; +0.02%)</title><rect x="829.1" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="832.06" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (2 samples, 0.04%; 0.00%)</title><rect x="1188.9" y="981" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1191.85" y="991.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (33 samples, 0.64%; 0.00%)</title><rect x="1060.7" y="629" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1063.75" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%; 0.00%)</title><rect x="161.7" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="164.71" y="783.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,727 samples, 91.80%; +0.02%)</title><rect x="86.1" y="885" width="1083.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.08" y="895.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%; 0.00%)</title><rect x="864.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="751.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (5 samples, 0.10%; -0.02%)</title><rect x="700.9" y="693" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="703.95" y="703.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="735.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (502 samples, 9.75%; 0.00%)</title><rect x="345.0" y="693" width="115.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="348.05" y="703.5" >seastar::futur..</text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="44.1" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="69.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.58" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="319.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (2 samples, 0.04%; +0.04%)</title><rect x="784.6" y="709" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="787.60" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="871.0" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.99" y="623.5" ></text>
</g>
<g >
<title>database::query (17 samples, 0.33%; +0.06%)</title><rect x="106.7" y="853" width="3.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="109.71" y="863.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (24 samples, 0.47%; -0.06%)</title><rect x="248.6" y="437" width="5.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="251.57" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="54.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.46" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="601.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="604.72" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (125 samples, 2.43%; +0.04%)</title><rect x="1135.9" y="853" width="28.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1138.92" y="863.5" >se..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="492.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="495.40" y="623.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.48" y="591.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; -0.02%)</title><rect x="1124.2" y="821" width="8.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1127.23" y="831.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (4 samples, 0.08%; +0.06%)</title><rect x="915.5" y="725" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="918.45" y="735.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="1045.6" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.62" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_mbegin (1 samples, 0.02%; +0.02%)</title><rect x="37.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.27" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.08%)</title><rect x="458.0" y="645" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="461.03" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (57 samples, 1.11%; -0.04%)</title><rect x="323.7" y="709" width="13.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="326.73" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="812.1" y="597" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="815.10" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="828.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="831.60" y="671.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="1129.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.27" y="495.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%; +0.02%)</title><rect x="515.8" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="518.78" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%; +0.02%)</title><rect x="73.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.25" y="671.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%; 0.00%)</title><rect x="29.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.48" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (66 samples, 1.28%; +0.02%)</title><rect x="794.0" y="613" width="15.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="796.99" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (73 samples, 1.42%; -0.04%)</title><rect x="888.2" y="741" width="16.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="891.18" y="751.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (8 samples, 0.16%; +0.10%)</title><rect x="291.9" y="533" width="1.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="294.88" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="104.2" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.19" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator- (1 samples, 0.02%; +0.02%)</title><rect x="50.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.56" y="639.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="687.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="866.6" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.64" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="622.1" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="625.11" y="799.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.10" y="847.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (3 samples, 0.06%; +0.06%)</title><rect x="905.6" y="741" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="908.60" y="751.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (422 samples, 8.20%; +0.02%)</title><rect x="469.0" y="741" width="96.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="472.03" y="751.5" >std::functi..</text>
</g>
<g >
<title>sstables::compaction::setup&lt;noop_compacted_fragments_consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="917" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="927.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="933" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.77" y="943.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="700.0" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.03" y="847.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="127.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; -0.02%)</title><rect x="140.9" y="805" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="143.86" y="815.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (6 samples, 0.12%; +0.02%)</title><rect x="821.3" y="693" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.26" y="703.5" ></text>
</g>
<g >
<title>ser::serializer&lt;column_mapping&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="767.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; -0.02%)</title><rect x="326.9" y="661" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="329.94" y="671.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (4 samples, 0.08%; 0.00%)</title><rect x="78.1" y="773" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (28 samples, 0.54%; -0.08%)</title><rect x="645.9" y="853" width="6.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="648.95" y="863.5" ></text>
</g>
<g >
<title>freeze (9 samples, 0.17%; 0.00%)</title><rect x="1128.1" y="549" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="559.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (4 samples, 0.08%; -0.02%)</title><rect x="1110.9" y="741" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1113.94" y="751.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%; +0.08%)</title><rect x="886.1" y="757" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="889.12" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.02%)</title><rect x="1056.2" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1059.16" y="639.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="387.0" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="389.99" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (1 samples, 0.02%; -0.04%)</title><rect x="370.9" y="533" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="373.94" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="962.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="965.20" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (13 samples, 0.25%; +0.04%)</title><rect x="274.9" y="517" width="3.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="277.92" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="54.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.69" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.10%)</title><rect x="961.5" y="693" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="964.52" y="703.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="346.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="349.19" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; -0.02%)</title><rect x="98.5" y="837" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="101.46" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="543.5" ></text>
</g>
<g >
<title>auth::resource::resource (9 samples, 0.17%; -0.02%)</title><rect x="778.9" y="741" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="781.87" y="751.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (19 samples, 0.37%; +0.04%)</title><rect x="851.5" y="773" width="4.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="854.51" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.02%)</title><rect x="61.1" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="64.11" y="639.5" ></text>
</g>
<g >
<title>sstables::compacting_sstable_writer::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="783.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (22 samples, 0.43%; -0.04%)</title><rect x="519.7" y="613" width="5.0" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="522.68" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="866.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.18" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_allocate (1 samples, 0.02%; 0.00%)</title><rect x="50.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.79" y="623.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; -0.06%)</title><rect x="458.5" y="645" width="1.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="461.49" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_view_statement, std::default_delete&lt;cql3::statements::create_view_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_view_statement&gt;, void&gt; (1 samples, 0.02%; -0.02%)</title><rect x="66.4" y="725" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="69.38" y="735.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; +0.06%)</title><rect x="796.7" y="485" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="799.74" y="495.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="1138.0" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1140.98" y="847.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.00" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::untyped_constant, false&gt;::_Uninitialized&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="57.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.98" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="618.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="621.68" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%; +0.02%)</title><rect x="282.0" y="501" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="285.03" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="83.3" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.33" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%; +0.02%)</title><rect x="672.1" y="837" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="675.07" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (16 samples, 0.31%; +0.02%)</title><rect x="453.2" y="613" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="456.22" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; +0.04%)</title><rect x="1164.8" y="853" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1167.79" y="863.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="712.2" y="821" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.18" y="831.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;, mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="645.7" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.72" y="863.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="137.6" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.65" y="735.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="63.6" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.63" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (12 samples, 0.23%; +0.06%)</title><rect x="711.0" y="837" width="2.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="714.03" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="39.8" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="719.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="531.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="534.59" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (17 samples, 0.33%; -0.02%)</title><rect x="609.5" y="757" width="3.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="612.51" y="767.5" ></text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::write_id (1 samples, 0.02%; +0.02%)</title><rect x="112.9" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.90" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (11 samples, 0.21%; +0.02%)</title><rect x="976.4" y="693" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.41" y="703.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; +0.02%)</title><rect x="840.7" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="843.74" y="799.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (5 samples, 0.10%; 0.00%)</title><rect x="924.8" y="709" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="927.85" y="719.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%; -0.02%)</title><rect x="131.9" y="757" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="134.92" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="869" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="879.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.12%; 0.00%)</title><rect x="750.7" y="709" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.68" y="719.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="901" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="911.5" >seastar::reactor::run</text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.12%; 0.00%)</title><rect x="1141.0" y="837" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.96" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (25 samples, 0.49%; +0.02%)</title><rect x="979.9" y="693" width="5.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="982.85" y="703.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="623.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (8 samples, 0.16%; -0.02%)</title><rect x="617.1" y="757" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="620.07" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="78.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.06" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, std::function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="863.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="209.1" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="212.15" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="129.9" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="132.86" y="783.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="79.2" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.21" y="831.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (35 samples, 0.68%; 0.00%)</title><rect x="593.9" y="741" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.93" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="29.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.25" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (7 samples, 0.14%; 0.00%)</title><rect x="548.6" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.55" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;gms::feature_service&gt;::shared_ptr_count_for&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (3 samples, 0.06%; +0.06%)</title><rect x="271.0" y="485" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="274.03" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.06%)</title><rect x="656.9" y="821" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="659.95" y="831.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (286 samples, 5.55%; +0.10%)</title><rect x="974.1" y="709" width="65.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="977.12" y="719.5" >service..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="41.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.40" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.10" y="895.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (3 samples, 0.06%; +0.06%)</title><rect x="202.0" y="597" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="205.05" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; -0.02%)</title><rect x="16.9" y="805" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="19.88" y="815.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.83" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="51.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.48" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="161.3" y="773" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="164.25" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; 0.00%)</title><rect x="414.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="417.72" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (71 samples, 1.38%; +0.06%)</title><rect x="888.2" y="725" width="16.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="891.18" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1058.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.00" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (8 samples, 0.16%; -0.02%)</title><rect x="901.9" y="693" width="1.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="904.93" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (10 samples, 0.19%; 0.00%)</title><rect x="101.9" y="805" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.90" y="815.5" ></text>
</g>
<g >
<title>sstables::sstable::new_sstable_component_file (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (2 samples, 0.04%; 0.00%)</title><rect x="74.6" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.63" y="719.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="910.6" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="913.64" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="117.3" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="120.25" y="847.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="314.3" y="661" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="317.34" y="671.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%; 0.00%)</title><rect x="145.0" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="172.5" y="773" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="175.48" y="783.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (4 samples, 0.08%; 0.00%)</title><rect x="940.7" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.66" y="751.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (3 samples, 0.06%; -0.16%)</title><rect x="286.6" y="597" width="0.7" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="289.61" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="859.5" y="773" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="862.54" y="783.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="770.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="773.16" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; -0.04%)</title><rect x="628.3" y="789" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="631.30" y="799.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="750.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="753.45" y="735.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; +0.04%)</title><rect x="534.6" y="613" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="537.57" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="783.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (2 samples, 0.04%; +0.02%)</title><rect x="542.4" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="545.36" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; +0.04%)</title><rect x="887.0" y="757" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="890.04" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1029.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1032.12" y="623.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; +0.02%)</title><rect x="1118.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.04" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.6" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.56" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; 0.00%)</title><rect x="413.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.80" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (7 samples, 0.14%; 0.00%)</title><rect x="561.2" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="564.16" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.02%)</title><rect x="1142.3" y="837" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1145.33" y="847.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (5 samples, 0.10%; -0.02%)</title><rect x="209.8" y="597" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="212.84" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%; +0.04%)</title><rect x="611.1" y="725" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="614.11" y="735.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="783.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (2 samples, 0.04%; 0.00%)</title><rect x="640.9" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.91" y="799.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="658.6" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.55" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="278.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="281.82" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="831.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="834.12" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="59.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.27" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant::untyped_constant (1 samples, 0.02%; +0.02%)</title><rect x="58.1" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.13" y="639.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; -0.06%)</title><rect x="453.7" y="597" width="1.1" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="456.67" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (32 samples, 0.62%; +0.02%)</title><rect x="489.2" y="661" width="7.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="492.20" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="562.1" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.07" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="831.8" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.81" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="773" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="783.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1045.4" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.39" y="639.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (15 samples, 0.29%; +0.04%)</title><rect x="367.5" y="533" width="3.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="370.51" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="823.6" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="826.56" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="348.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="351.26" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="562.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.76" y="639.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%; 0.00%)</title><rect x="1133.9" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.85" y="863.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="142.2" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="145.23" y="815.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.12%; +0.04%)</title><rect x="1005.7" y="565" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1008.75" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="575.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="159.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="60.4" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.42" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="599.0" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="601.97" y="703.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.25" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="1118.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.50" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="711.9" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.95" y="815.5" ></text>
</g>
<g >
<title>seastar::reactor::fstat (1 samples, 0.02%; 0.00%)</title><rect x="685.8" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.82" y="831.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (14 samples, 0.27%; -0.02%)</title><rect x="1107.0" y="757" width="3.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1110.04" y="767.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="863.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::deletable_row_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.9" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.94" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (4 samples, 0.08%; -0.04%)</title><rect x="821.7" y="677" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="824.72" y="687.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%; +0.04%)</title><rect x="914.3" y="677" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="917.31" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="440.8" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="443.84" y="591.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="38.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.19" y="687.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="748.8" y="741" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.85" y="751.5" ></text>
</g>
<g >
<title>column_mapping::regular_column_at (1 samples, 0.02%; +0.02%)</title><rect x="1119.6" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.64" y="591.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; +0.02%)</title><rect x="69.8" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.81" y="815.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="623.5" ></text>
</g>
<g >
<title>ser::serializer&lt;column_mapping_entry&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (29 samples, 0.56%; -0.02%)</title><rect x="800.6" y="549" width="6.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="803.64" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (1 samples, 0.02%; +0.02%)</title><rect x="74.6" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.63" y="703.5" ></text>
</g>
<g >
<title>from_hex (1 samples, 0.02%; 0.00%)</title><rect x="73.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1166.4" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.40" y="719.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (7 samples, 0.14%; -0.02%)</title><rect x="617.1" y="741" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="620.07" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.85" y="591.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (2 samples, 0.04%; 0.00%)</title><rect x="19.9" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.85" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="458.5" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="461.49" y="639.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; -0.06%)</title><rect x="822.4" y="645" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="825.41" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="16.6" y="853" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="863.5" ></text>
</g>
<g >
<title>antlr3::RuleReturnValue&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~RuleReturnValue (1 samples, 0.02%; +0.02%)</title><rect x="49.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.42" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.04%)</title><rect x="687.4" y="837" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="690.43" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="654.0" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.97" y="847.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="849.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.99" y="703.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="21.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.69" y="703.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; 0.00%)</title><rect x="713.8" y="837" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.78" y="847.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.86" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;, std::allocator&lt;std::unique_ptr&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, std::default_delete&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; &gt; &gt;::~_Vector_base (1 samples, 0.02%; +0.02%)</title><rect x="22.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.38" y="751.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="553.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.59" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (42 samples, 0.82%; 0.00%)</title><rect x="890.2" y="693" width="9.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="893.24" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="719.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.32" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="458.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="461.26" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="545.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="548.80" y="655.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="191.0" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="194.04" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; 0.00%)</title><rect x="792.2" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.16" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="62.9" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.94" y="671.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; 0.00%)</title><rect x="332.0" y="629" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="334.98" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="78.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.75" y="655.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_term (3 samples, 0.06%; 0.00%)</title><rect x="73.0" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="702.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.32" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="591.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="51.9" y="581" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.94" y="591.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.64" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (2 samples, 0.04%; 0.00%)</title><rect x="59.7" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.08%)</title><rect x="381.9" y="533" width="1.0" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="384.94" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (561 samples, 10.90%; +0.06%)</title><rect x="956.7" y="741" width="128.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="959.70" y="751.5" >service::storage..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="57.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.67" y="527.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (3 samples, 0.06%; +0.02%)</title><rect x="28.1" y="613" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.10" y="623.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="113.1" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="864.8" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.81" y="703.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (115 samples, 2.23%; +0.23%)</title><rect x="387.4" y="533" width="26.4" height="15.0" fill="rgb(255,42,42)" rx="2" ry="2" />
<text  x="390.44" y="543.5" >w..</text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="703.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (9 samples, 0.17%; 0.00%)</title><rect x="1153.1" y="821" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1156.10" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="871.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.68" y="671.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%; 0.00%)</title><rect x="12.5" y="933" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.52" y="943.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="85.4" y="933" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.40" y="943.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="38.4" y="693" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.42" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="552.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.91" y="687.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="205.0" y="629" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="208.02" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="687.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.04%)</title><rect x="295.8" y="533" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="298.78" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; +0.02%)</title><rect x="560.9" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="563.93" y="655.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (3 samples, 0.06%; 0.00%)</title><rect x="871.7" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.68" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (351 samples, 6.82%; -0.06%)</title><rect x="208.5" y="613" width="80.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="211.46" y="623.5" >partition..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (5 samples, 0.10%; +0.06%)</title><rect x="544.7" y="629" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="547.66" y="639.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (69 samples, 1.34%; +0.04%)</title><rect x="1060.3" y="661" width="15.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1063.29" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="678.0" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.03" y="847.5" ></text>
</g>
<g >
<title>db::schema_tables::read_table_names_of_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="112.2" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.21" y="863.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="815.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (17 samples, 0.33%; 0.00%)</title><rect x="405.3" y="517" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="408.32" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%; +0.02%)</title><rect x="879.9" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="882.93" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (3 samples, 0.06%; +0.02%)</title><rect x="311.8" y="629" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="314.82" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; +0.06%)</title><rect x="1168.5" y="805" width="0.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1171.46" y="815.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1030.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.27" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="658.1" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.09" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; +0.04%)</title><rect x="138.3" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="141.34" y="751.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; +0.02%)</title><rect x="47.8" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.81" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (13 samples, 0.25%; -0.08%)</title><rect x="30.2" y="613" width="2.9" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="33.17" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (259 samples, 5.03%; +0.12%)</title><rect x="884.3" y="773" width="59.3" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="887.29" y="783.5" >cql3::..</text>
</g>
<g >
<title>row::row (126 samples, 2.45%; +0.08%)</title><rect x="234.1" y="501" width="28.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="237.13" y="511.5" >ro..</text>
</g>
<g >
<title>flush_reader::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="82.0" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.96" y="831.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (3 samples, 0.06%; 0.00%)</title><rect x="71.0" y="741" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.96" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.04%)</title><rect x="732.6" y="757" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="735.58" y="767.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="18.0" y="837" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="21.02" y="847.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (8 samples, 0.16%; 0.00%)</title><rect x="77.6" y="837" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.61" y="847.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.00" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="575.4" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="578.36" y="783.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="619.1" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="622.14" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="780.9" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="783.93" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="98.0" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.00" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="340.0" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="343.01" y="735.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (3 samples, 0.06%; -0.02%)</title><rect x="738.8" y="773" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="741.76" y="783.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%; 0.00%)</title><rect x="113.1" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (10 samples, 0.19%; 0.00%)</title><rect x="101.9" y="789" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.90" y="799.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="863.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="46.4" y="517" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.44" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;std::optional&lt;unsigned char&gt; &gt;, std::allocator&lt;seastar::shared_ptr&lt;std::optional&lt;unsigned char&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="76.9" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.92" y="815.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.04%)</title><rect x="296.2" y="549" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="299.23" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (586 samples, 11.38%; +0.04%)</title><rect x="728.7" y="853" width="134.3" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="731.68" y="863.5" >seastar::interna..</text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="159.6" y="773" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="162.65" y="783.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.39" y="559.5" ></text>
</g>
<g >
<title>service::mutation_holder::~mutation_holder (1 samples, 0.02%; +0.02%)</title><rect x="703.2" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.24" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="97.8" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="100.77" y="847.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="772.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="775.45" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (29 samples, 0.56%; 0.00%)</title><rect x="480.3" y="661" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.26" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::grant_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.90" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (36 samples, 0.70%; -0.02%)</title><rect x="864.8" y="821" width="8.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="867.81" y="831.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="299.7" y="581" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="302.67" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="61.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.11" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.86" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (3 samples, 0.06%; +0.06%)</title><rect x="808.2" y="533" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="811.20" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (6 samples, 0.12%; +0.04%)</title><rect x="626.9" y="789" width="1.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="629.93" y="799.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.86" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; +0.02%)</title><rect x="59.7" y="405" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.73" y="415.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="789" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="799.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="1070.1" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1073.14" y="623.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="267.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.59" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (28 samples, 0.54%; +0.02%)</title><rect x="70.5" y="805" width="6.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.50" y="815.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; -0.06%)</title><rect x="167.2" y="789" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="170.21" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (1 samples, 0.02%; +0.02%)</title><rect x="90.2" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="93.21" y="879.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (4 samples, 0.08%; 0.00%)</title><rect x="78.1" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.06" y="767.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1046.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.31" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="671.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.02%)</title><rect x="334.5" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="337.51" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="56.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.06" y="575.5" ></text>
</g>
<g >
<title>database::find_schema (26 samples, 0.50%; +0.02%)</title><rect x="824.7" y="725" width="6.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="827.70" y="735.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%; 0.00%)</title><rect x="113.1" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="783.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%; +0.02%)</title><rect x="126.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="129.42" y="815.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; +0.02%)</title><rect x="1124.2" y="725" width="8.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.23" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1021.6" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1024.56" y="527.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (6 samples, 0.12%; +0.02%)</title><rect x="1153.6" y="805" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1156.56" y="815.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::deleted_at (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="655.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="16.6" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.65" y="847.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (3 samples, 0.06%; +0.04%)</title><rect x="33.1" y="613" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="36.15" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (3 samples, 0.06%; +0.04%)</title><rect x="141.1" y="805" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="144.09" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="701.6" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.64" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.02%)</title><rect x="456.9" y="629" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="459.88" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; +0.02%)</title><rect x="281.6" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="284.57" y="527.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (2 samples, 0.04%; 0.00%)</title><rect x="868.2" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.24" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; +0.02%)</title><rect x="25.4" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.35" y="671.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (11 samples, 0.21%; +0.02%)</title><rect x="678.3" y="837" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.26" y="847.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="1145.1" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1148.08" y="783.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1165.7" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.71" y="863.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; +0.04%)</title><rect x="272.4" y="517" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="275.40" y="527.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.26" y="815.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="786.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.97" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.89%; 0.00%)</title><rect x="25.8" y="661" width="10.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.81" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment_stream_validating_filter::operator (1 samples, 0.02%; +0.02%)</title><rect x="84.0" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.02" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; -0.02%)</title><rect x="58.6" y="549" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="61.58" y="559.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (1 samples, 0.02%; 0.00%)</title><rect x="618.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.91" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1020.6" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1023.64" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="62.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.71" y="623.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (4 samples, 0.08%; 0.00%)</title><rect x="597.6" y="709" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.59" y="719.5" ></text>
</g>
<g >
<title>db::validate_for_write (1 samples, 0.02%; +0.02%)</title><rect x="872.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.60" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (1 samples, 0.02%; -0.02%)</title><rect x="626.7" y="789" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="629.70" y="799.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1169.4" y="981" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.37" y="991.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="735.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; 0.00%)</title><rect x="700.9" y="661" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="671.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%; +0.02%)</title><rect x="904.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.68" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="371.2" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="374.17" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1043.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1046.79" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.04%)</title><rect x="625.6" y="789" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="628.55" y="799.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="623.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1161.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1164.58" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="815.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="575.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="124.8" y="805" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="127.81" y="815.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (16 samples, 0.31%; -0.02%)</title><rect x="280.0" y="549" width="3.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="282.96" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.15" y="847.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (2 samples, 0.04%; +0.04%)</title><rect x="728.0" y="853" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="730.99" y="863.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="543.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="809.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.12" y="623.5" ></text>
</g>
<g >
<title>query::querier_base::close (116 samples, 2.25%; -0.04%)</title><rect x="576.1" y="789" width="26.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="579.05" y="799.5" >q..</text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.12%; 0.00%)</title><rect x="665.2" y="789" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.20" y="799.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="771.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.08" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="72.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.56" y="671.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="460.8" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="463.78" y="719.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (9 samples, 0.17%; -0.02%)</title><rect x="561.2" y="661" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="564.16" y="671.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="949" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.15" y="959.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="288.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.98" y="607.5" ></text>
</g>
<g >
<title>perf_simple_que (5,148 samples, 99.98%; 0.00%)</title><rect x="10.0" y="997" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="1007.5" >perf_simple_que</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (3 samples, 0.06%; 0.00%)</title><rect x="73.0" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.02" y="687.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="896.0" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="898.97" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; +0.02%)</title><rect x="348.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="351.03" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%; +0.02%)</title><rect x="35.4" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.44" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%; -0.02%)</title><rect x="1143.9" y="789" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1146.94" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (572 samples, 11.11%; -0.14%)</title><rect x="955.3" y="757" width="131.1" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="958.33" y="767.5" >service::storage..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.00" y="783.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (4 samples, 0.08%; 0.00%)</title><rect x="639.8" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.76" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%; +0.04%)</title><rect x="1039.0" y="645" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1041.98" y="655.5" ></text>
</g>
<g >
<title>std::addressof&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="25.1" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.13" y="511.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="868.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.70" y="655.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="966.8" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="969.79" y="719.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="751.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1118.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.50" y="607.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (2 samples, 0.04%; 0.00%)</title><rect x="198.1" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.15" y="607.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (2 samples, 0.04%; +0.02%)</title><rect x="1076.1" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1079.10" y="623.5" ></text>
</g>
<g >
<title>dht::tri_compare (9 samples, 0.17%; -0.04%)</title><rect x="1066.2" y="581" width="2.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1069.25" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.63" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; 0.00%)</title><rect x="792.4" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.39" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%; +0.02%)</title><rect x="374.8" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="377.84" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%; +0.06%)</title><rect x="799.3" y="517" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="802.26" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (29 samples, 0.56%; +0.06%)</title><rect x="160.6" y="789" width="6.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="163.57" y="799.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (87 samples, 1.69%; +0.02%)</title><rect x="1058.7" y="693" width="19.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1061.69" y="703.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (8 samples, 0.16%; 0.00%)</title><rect x="579.5" y="677" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="582.49" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (64 samples, 1.24%; 0.00%)</title><rect x="23.8" y="693" width="14.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.75" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="49.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.96" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (48 samples, 0.93%; -0.06%)</title><rect x="193.6" y="629" width="11.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="196.57" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; 0.00%)</title><rect x="25.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.13" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.04%)</title><rect x="929.4" y="693" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="932.43" y="703.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%; +0.02%)</title><rect x="18.3" y="821" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.25" y="831.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="815.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.14%; 0.00%)</title><rect x="1146.9" y="741" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.92" y="751.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="869.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.39" y="543.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; 0.00%)</title><rect x="1076.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1079.33" y="607.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="164.7" y="741" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="167.69" y="751.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (3 samples, 0.06%; 0.00%)</title><rect x="20.5" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="767.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="908.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="911.58" y="751.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (5 samples, 0.10%; +0.02%)</title><rect x="383.3" y="533" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="386.32" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%; 0.00%)</title><rect x="113.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.36" y="687.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%; +0.06%)</title><rect x="1134.1" y="853" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1137.08" y="863.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%; +0.02%)</title><rect x="992.2" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="995.23" y="655.5" ></text>
</g>
<g >
<title>row::apply_monotonically (5 samples, 0.10%; 0.00%)</title><rect x="869.2" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.16" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="54.2" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.23" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="143.8" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.84" y="815.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="463.8" y="725" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="466.76" y="735.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="345.5" y="645" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="348.51" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="850.6" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="853.60" y="799.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="72.3" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.33" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="66.1" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.15" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="39.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (2 samples, 0.04%; -0.02%)</title><rect x="1077.7" y="661" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1080.71" y="671.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (154 samples, 2.99%; -0.02%)</title><rect x="785.1" y="709" width="35.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="788.06" y="719.5" >se..</text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; +0.02%)</title><rect x="16.2" y="901" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.19" y="911.5" ></text>
</g>
<g >
<title>__strlen_avx2 (12 samples, 0.23%; +0.04%)</title><rect x="1003.0" y="597" width="2.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1006.00" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (1 samples, 0.02%; 0.00%)</title><rect x="27.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.42" y="623.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (5 samples, 0.10%; -0.02%)</title><rect x="34.3" y="597" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="37.29" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="658.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.09" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="350.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="353.32" y="623.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1022.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.02" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.10%)</title><rect x="967.9" y="693" width="1.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="970.93" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="575.1" y="741" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="578.13" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (14 samples, 0.27%; +0.06%)</title><rect x="692.9" y="821" width="3.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="695.93" y="831.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="40.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="527.5" ></text>
</g>
<g >
<title>cql3::attributes::fill_prepare_context (1 samples, 0.02%; +0.02%)</title><rect x="70.0" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.04" y="815.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1117.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.81" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_used (1 samples, 0.02%; 0.00%)</title><rect x="118.4" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="121.40" y="831.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (3 samples, 0.06%; +0.04%)</title><rect x="524.9" y="677" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="527.95" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="464.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="467.90" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.0" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.98" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="607.0" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="609.99" y="767.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="868.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.47" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="559.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (4 samples, 0.08%; -0.02%)</title><rect x="345.3" y="661" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="348.28" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (17 samples, 0.33%; +0.02%)</title><rect x="692.7" y="837" width="3.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="695.70" y="847.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.02%)</title><rect x="794.7" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="797.68" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="60.9" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.88" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; -0.08%)</title><rect x="1024.5" y="549" width="1.4" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="1027.54" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_index_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.61" y="735.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (6 samples, 0.12%; 0.00%)</title><rect x="1168.0" y="869" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.00" y="879.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="942.0" y="725" width="1.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="945.04" y="735.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="53" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="63.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.04%)</title><rect x="586.1" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="589.14" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="1010.3" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1013.33" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="559.5" ></text>
</g>
<g >
<title>service::shared_mutation::~shared_mutation (1 samples, 0.02%; 0.00%)</title><rect x="703.2" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.24" y="815.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.02%)</title><rect x="802.2" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="805.24" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="788.7" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.72" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%; +0.02%)</title><rect x="414.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="417.26" y="559.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (8 samples, 0.16%; +0.02%)</title><rect x="569.4" y="741" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="572.41" y="751.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="655.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (13 samples, 0.25%; -0.02%)</title><rect x="364.5" y="533" width="3.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="367.53" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (8 samples, 0.16%; 0.00%)</title><rect x="809.3" y="613" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.35" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="114.0" y="853" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="117.04" y="863.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; 0.00%)</title><rect x="644.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.80" y="815.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="204.6" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="207.57" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="543.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (7 samples, 0.14%; +0.02%)</title><rect x="1125.1" y="629" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.14" y="639.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="58.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="431.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1152.2" y="821" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1155.19" y="831.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%; +0.06%)</title><rect x="936.5" y="757" width="2.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="939.54" y="767.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (6 samples, 0.12%; -0.02%)</title><rect x="929.7" y="693" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="932.66" y="703.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="113.8" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.81" y="847.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="743.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.12" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="680.8" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="683.78" y="847.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%; -0.12%)</title><rect x="385.2" y="533" width="1.1" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="388.15" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (523 samples, 10.16%; -0.10%)</title><rect x="963.6" y="725" width="119.8" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="966.58" y="735.5" >service::stora..</text>
</g>
<g >
<title>database::do_apply (37 samples, 0.72%; 0.00%)</title><rect x="1115.7" y="693" width="8.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.75" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1057.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1060.77" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; +0.10%)</title><rect x="960.1" y="709" width="1.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="963.14" y="719.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (77 samples, 1.50%; -0.04%)</title><rect x="659.0" y="853" width="17.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="662.01" y="863.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.35" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="593.2" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.24" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="46.2" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.21" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (38 samples, 0.74%; +0.02%)</title><rect x="1115.5" y="805" width="8.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.52" y="815.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; 0.00%)</title><rect x="1038.5" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.52" y="655.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="655.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="902.2" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="905.16" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (2 samples, 0.04%; 0.00%)</title><rect x="757.8" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.78" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.04%)</title><rect x="681.2" y="837" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="684.24" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (5 samples, 0.10%; +0.04%)</title><rect x="415.4" y="533" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="418.40" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="682.2" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.16" y="847.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;gms::feature_service, false&gt;::make&lt;gms::feature_config&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; 0.00%)</title><rect x="218.5" y="549" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="221.55" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%; +0.02%)</title><rect x="602.9" y="773" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="605.86" y="783.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; +0.02%)</title><rect x="56.5" y="421" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.52" y="431.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; +0.04%)</title><rect x="159.0" y="789" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="161.96" y="799.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,172 samples, 22.76%; -0.06%)</title><rect x="864.8" y="853" width="268.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="867.81" y="863.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_deallocate (3 samples, 0.06%; 0.00%)</title><rect x="51.0" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.02" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (470 samples, 9.13%; +0.06%)</title><rect x="349.2" y="629" width="107.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="352.17" y="639.5" >flat_mutation..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="1149.2" y="757" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1152.21" y="767.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (5 samples, 0.10%; 0.00%)</title><rect x="102.8" y="757" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="105.81" y="767.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="770.6" y="677" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="773.62" y="687.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="806.4" y="453" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="809.37" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="374.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="377.61" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::rehash (1 samples, 0.02%; +0.02%)</title><rect x="111.1" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.06" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.75" y="383.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="51.0" y="565" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="54.02" y="575.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="565.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="568.05" y="671.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (2 samples, 0.04%; +0.04%)</title><rect x="719.7" y="773" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="722.74" y="783.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%; +0.06%)</title><rect x="838.2" y="789" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="841.22" y="799.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="837.3" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.31" y="735.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="272.9" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="275.86" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.08%)</title><rect x="520.6" y="549" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="523.59" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="175.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="741" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="751.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="806.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.83" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="44.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.15" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; +0.02%)</title><rect x="314.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="317.11" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="1056.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1059.62" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::begin (1 samples, 0.02%; +0.02%)</title><rect x="21.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.92" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; 0.00%)</title><rect x="843.0" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.04" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="311.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="314.59" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="719.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="16.6" y="901" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.65" y="911.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="725.9" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.93" y="415.5" ></text>
</g>
<g >
<title>[[vdso]] (23 samples, 0.45%; -0.02%)</title><rect x="1170.7" y="965" width="5.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1173.75" y="975.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%; +0.02%)</title><rect x="65.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.00" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="465.6" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="468.59" y="767.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%; +0.02%)</title><rect x="1127.2" y="597" width="4.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.21" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.02%)</title><rect x="666.1" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="669.12" y="767.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.06%)</title><rect x="118.2" y="821" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="121.17" y="831.5" ></text>
</g>
<g >
<title>service::storage_proxy::unthrottle (1 samples, 0.02%; +0.02%)</title><rect x="703.5" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.47" y="815.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned int, unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::empty (1 samples, 0.02%; 0.00%)</title><rect x="36.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.35" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; -0.02%)</title><rect x="869.4" y="597" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="872.39" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="546.0" y="645" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="549.03" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (15 samples, 0.29%; -0.02%)</title><rect x="753.9" y="693" width="3.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="756.89" y="703.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; +0.02%)</title><rect x="959.9" y="725" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.91" y="735.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="816.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="819.91" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1085.0" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1088.04" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.32" y="639.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.52" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (26 samples, 0.50%; +0.04%)</title><rect x="537.1" y="613" width="6.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="540.09" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="1027.3" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1030.29" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="415.5" ></text>
</g>
<g >
<title>sstables::sstable::temp_sst_dir (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="623.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="140.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.17" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="655.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%; -0.02%)</title><rect x="538.9" y="565" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="541.93" y="575.5" ></text>
</g>
<g >
<title>schema_registry::learn (4 samples, 0.08%; 0.00%)</title><rect x="112.7" y="821" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="831.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;schema_mutations&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.90" y="767.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="565.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.05" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="559.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%; -0.10%)</title><rect x="160.1" y="789" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="163.11" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.08%)</title><rect x="651.2" y="821" width="0.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="654.22" y="831.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="38.6" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.65" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="814.4" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.39" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (2 samples, 0.04%; +0.04%)</title><rect x="664.7" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="667.74" y="799.5" ></text>
</g>
<g >
<title>boost::optional_detail::optional_base&lt;db::schema_tables::read_table_names_of_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="112.2" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.21" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="618.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.45" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.14%; -0.08%)</title><rect x="980.5" y="661" width="1.6" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="983.54" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.16%)</title><rect x="332.0" y="613" width="2.5" height="15.0" fill="rgb(255,98,98)" rx="2" ry="2" />
<text  x="334.98" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1099.0" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.02" y="751.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%; +0.02%)</title><rect x="1058.9" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1061.91" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (2 samples, 0.04%; 0.00%)</title><rect x="340.2" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.23" y="751.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%; 0.00%)</title><rect x="741.3" y="693" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.28" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%; 0.00%)</title><rect x="864.1" y="821" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="831.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="864.1" y="853" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="863.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (19 samples, 0.37%; 0.00%)</title><rect x="687.9" y="837" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.89" y="847.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="41.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.17" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; 0.00%)</title><rect x="1026.6" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.60" y="607.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%; 0.00%)</title><rect x="113.1" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="799.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (8 samples, 0.16%; +0.02%)</title><rect x="540.1" y="581" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="543.07" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="816.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="819.45" y="671.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="620.5" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="623.51" y="767.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,727 samples, 91.80%; 0.00%)</title><rect x="86.1" y="917" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.08" y="927.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (1 samples, 0.02%; +0.02%)</title><rect x="659.7" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="662.70" y="847.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="450.9" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="453.92" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="346.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="349.88" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (16 samples, 0.31%; +0.02%)</title><rect x="868.0" y="709" width="3.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.02" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; +0.04%)</title><rect x="762.1" y="741" width="1.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="765.14" y="751.5" ></text>
</g>
<g >
<title>schema::get_sharder (1 samples, 0.02%; +0.02%)</title><rect x="1000.2" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1003.25" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="702.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.78" y="815.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%; -0.02%)</title><rect x="89.1" y="869" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="92.06" y="879.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; -0.02%)</title><rect x="620.7" y="773" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="623.74" y="783.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::operator delete (1 samples, 0.02%; 0.00%)</title><rect x="21.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.69" y="735.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%; +0.02%)</title><rect x="972.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="975.06" y="703.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="86.8" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.77" y="879.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.88" y="831.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="759.2" y="757" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="762.16" y="767.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="60.2" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.19" y="415.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::new_offsets (1 samples, 0.02%; +0.02%)</title><rect x="81.3" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.27" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="759.6" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.62" y="767.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (2 samples, 0.04%; -0.06%)</title><rect x="637.7" y="757" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="640.70" y="767.5" ></text>
</g>
<g >
<title>query_state::query_state (21 samples, 0.41%; -0.04%)</title><rect x="614.3" y="789" width="4.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="617.32" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="84.7" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.71" y="831.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (60 samples, 1.17%; +0.02%)</title><rect x="48.3" y="677" width="13.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.27" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="871.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.68" y="687.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (3 samples, 0.06%; -0.08%)</title><rect x="288.2" y="597" width="0.7" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="291.21" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (10 samples, 0.19%; 0.00%)</title><rect x="707.4" y="821" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.37" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="438.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.09" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (5 samples, 0.10%; +0.02%)</title><rect x="589.1" y="629" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="592.11" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="191.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; +0.02%)</title><rect x="701.9" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="704.87" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.27" y="895.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="33.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="36.60" y="607.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%; +0.02%)</title><rect x="90.0" y="869" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="92.98" y="879.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="649.2" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="652.16" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (301 samples, 5.85%; +0.04%)</title><rect x="764.7" y="773" width="68.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="767.66" y="783.5" >cql3::s..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="82.6" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.65" y="783.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (19 samples, 0.37%; 0.00%)</title><rect x="927.4" y="741" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.37" y="751.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="684.4" y="821" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.45" y="831.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1116.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.89" y="511.5" ></text>
</g>
<g >
<title>abstract_type::from_string (3 samples, 0.06%; 0.00%)</title><rect x="71.0" y="725" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.96" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_future&lt;&gt;::shared_state::resolve (1 samples, 0.02%; 0.00%)</title><rect x="703.7" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.70" y="831.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, clustering_key_prefix&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="463.5" ></text>
</g>
<g >
<title>column_mapping_entry::column_mapping_entry (1 samples, 0.02%; +0.02%)</title><rect x="113.1" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="116.13" y="687.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1116.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.67" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.12%; -0.06%)</title><rect x="675.3" y="805" width="1.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="678.28" y="815.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; +0.02%)</title><rect x="940.7" y="725" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="943.66" y="735.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (8 samples, 0.16%; 0.00%)</title><rect x="805.2" y="501" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.22" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (2 samples, 0.04%; +0.04%)</title><rect x="364.8" y="517" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="367.76" y="527.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="356.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.74" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="583.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="586.61" y="655.5" ></text>
</g>
<g >
<title>linearized&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.7" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.73" y="463.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.71" y="591.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::reserve (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%; +0.02%)</title><rect x="583.4" y="661" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="586.39" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (22 samples, 0.43%; -0.02%)</title><rect x="986.3" y="661" width="5.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="989.27" y="671.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%; +0.04%)</title><rect x="663.8" y="741" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="666.82" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (49 samples, 0.95%; -0.04%)</title><rect x="1012.9" y="581" width="11.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1015.85" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%; +0.02%)</title><rect x="475.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="478.67" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.65" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="488.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="491.51" y="639.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="751.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; -0.02%)</title><rect x="64.8" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="67.77" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="79.4" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.44" y="847.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (1 samples, 0.02%; +0.02%)</title><rect x="963.4" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="966.35" y="735.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.17%; 0.00%)</title><rect x="58.6" y="613" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.58" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1048.8" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1051.83" y="687.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (272 samples, 5.28%; 0.00%)</title><rect x="17.8" y="917" width="62.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.79" y="927.5" >std::_..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="277.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="280.90" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%; 0.00%)</title><rect x="57.2" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.21" y="623.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.75" y="527.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (5 samples, 0.10%; +0.02%)</title><rect x="619.6" y="789" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="622.59" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="681.0" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="684.01" y="847.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="324.2" y="693" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="327.19" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="843.0" y="709" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="846.04" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.02%)</title><rect x="651.7" y="821" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="654.68" y="831.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="771.3" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.31" y="703.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; +0.02%)</title><rect x="622.3" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="625.34" y="799.5" ></text>
</g>
<g >
<title>boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%; +0.02%)</title><rect x="1119.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.42" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6 samples, 0.12%; 0.00%)</title><rect x="675.3" y="821" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.28" y="831.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="767.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="113.1" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.13" y="751.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; -0.02%)</title><rect x="200.4" y="581" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="203.44" y="591.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;clustering_key_prefix&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="687.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="254.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; +0.02%)</title><rect x="1085.3" y="741" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1088.27" y="751.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="703.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="556.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.11" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%; +0.02%)</title><rect x="1142.8" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1145.79" y="831.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%; 0.00%)</title><rect x="29.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.94" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.06%)</title><rect x="921.4" y="677" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="924.41" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::deque (1 samples, 0.02%; 0.00%)</title><rect x="20.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.77" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="822.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.41" y="639.5" ></text>
</g>
<g >
<title>gms::feature_service::feature_service (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="495.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (12 samples, 0.23%; +0.04%)</title><rect x="969.3" y="693" width="2.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="972.31" y="703.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="113.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.59" y="815.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="77.4" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.38" y="799.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, utils::UUID&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="831.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.06%)</title><rect x="97.1" y="837" width="0.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="100.08" y="847.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (3 samples, 0.06%; -0.06%)</title><rect x="542.1" y="597" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="545.13" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="667.3" y="821" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="670.26" y="831.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.02%)</title><rect x="868.7" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="871.70" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (4 samples, 0.08%; -0.06%)</title><rect x="786.2" y="661" width="0.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="789.20" y="671.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (447 samples, 8.68%; -0.12%)</title><rect x="465.8" y="773" width="102.5" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="468.82" y="783.5" >query::queri..</text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1130.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.96" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="39.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.56" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%; +0.02%)</title><rect x="837.5" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="840.54" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="141.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="144.77" y="815.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%; -0.04%)</title><rect x="1014.0" y="549" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1017.00" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (47 samples, 0.91%; -0.04%)</title><rect x="602.6" y="789" width="10.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="605.64" y="799.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (1 samples, 0.02%; +0.02%)</title><rect x="81.7" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.73" y="831.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (10 samples, 0.19%; +0.02%)</title><rect x="442.2" y="597" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="445.22" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="462.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.38" y="703.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (4 samples, 0.08%; +0.06%)</title><rect x="249.9" y="405" width="1.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="252.94" y="415.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="655.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%; +0.02%)</title><rect x="967.0" y="709" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="970.02" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="440.4" y="533" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="443.38" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; +0.02%)</title><rect x="53.3" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.31" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="527.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (8 samples, 0.16%; 0.00%)</title><rect x="72.3" y="741" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.33" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%; +0.04%)</title><rect x="327.4" y="645" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="330.40" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="735.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="702.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.10" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="339.3" y="709" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="342.32" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="805" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.15" y="815.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="524.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="527.72" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_counters&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.7" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.69" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1054.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1057.10" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; +0.02%)</title><rect x="864.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.12" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (37 samples, 0.72%; -0.06%)</title><rect x="444.5" y="613" width="8.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="447.51" y="623.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.92" y="959.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%; 0.00%)</title><rect x="481.9" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="484.86" y="623.5" ></text>
</g>
<g >
<title>query::result::builder::build (2 samples, 0.04%; +0.04%)</title><rect x="613.4" y="789" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="616.41" y="799.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; +0.02%)</title><rect x="20.5" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.54" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="55.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.60" y="575.5" ></text>
</g>
<g >
<title>row::external_memory_usage (33 samples, 0.64%; +0.08%)</title><rect x="264.2" y="501" width="7.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="267.15" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="39.8" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="655.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (2 samples, 0.04%; +0.04%)</title><rect x="439.2" y="549" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="442.24" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; -0.04%)</title><rect x="770.2" y="677" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="773.16" y="687.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%; +0.02%)</title><rect x="414.0" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="417.03" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (3 samples, 0.06%; 0.00%)</title><rect x="871.7" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.68" y="719.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="23.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.06" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="60.0" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.96" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (3 samples, 0.06%; 0.00%)</title><rect x="870.3" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.31" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="43.2" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.23" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="575.1" y="757" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="578.13" y="767.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (8 samples, 0.16%; 0.00%)</title><rect x="664.7" y="805" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.74" y="815.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="821.5" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.49" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="637.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.70" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="10.0" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="1140.0" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.04" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (4 samples, 0.08%; 0.00%)</title><rect x="51.9" y="613" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.94" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; -0.02%)</title><rect x="985.1" y="613" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="988.12" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%; 0.00%)</title><rect x="702.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.78" y="831.5" ></text>
</g>
<g >
<title>__pthread_enable_asynccancel (1 samples, 0.02%; +0.02%)</title><rect x="685.8" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="688.82" y="783.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (539 samples, 10.47%; +0.02%)</title><rect x="341.2" y="757" width="123.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="344.15" y="767.5" >seastar::future..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="53.3" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.31" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (1 samples, 0.02%; 0.00%)</title><rect x="83.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.79" y="703.5" ></text>
</g>
<g >
<title>gms::feature_service::register_feature (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.5" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.52" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (9 samples, 0.17%; +0.02%)</title><rect x="901.7" y="709" width="2.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.70" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="667.5" y="821" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="670.49" y="831.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (1 samples, 0.02%; +0.02%)</title><rect x="870.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.31" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1029.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1032.35" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.04%)</title><rect x="203.6" y="613" width="1.0" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="206.65" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.12%; -0.08%)</title><rect x="430.5" y="501" width="1.4" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="433.53" y="511.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="607.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="276.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="279.75" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1036.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1039.46" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (2 samples, 0.04%; +0.02%)</title><rect x="1045.9" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1048.85" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (3 samples, 0.06%; -0.04%)</title><rect x="708.7" y="805" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="711.74" y="815.5" ></text>
</g>
<g >
<title>scanning_and_populating_reader::do_read_from_primary (1 samples, 0.02%; 0.00%)</title><rect x="111.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="319.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="932.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.41" y="751.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__199 (1 samples, 0.02%; +0.02%)</title><rect x="33.8" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="36.83" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.70%; 0.00%)</title><rect x="1124.2" y="789" width="8.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.23" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="59.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.02%)</title><rect x="599.2" y="693" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="602.20" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="354.0" y="597" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="356.99" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="711.9" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.95" y="831.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%; +0.02%)</title><rect x="284.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="287.78" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="607.2" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="610.22" y="751.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (53 samples, 1.03%; -0.04%)</title><rect x="324.7" y="693" width="12.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="327.65" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="53.5" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.54" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (10 samples, 0.19%; +0.02%)</title><rect x="817.1" y="677" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.14" y="687.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="806.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.37" y="447.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.40" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="769.2" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="772.24" y="719.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%; 0.00%)</title><rect x="20.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.77" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1118.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.27" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%; +0.02%)</title><rect x="717.9" y="773" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.91" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (393 samples, 7.63%; -0.08%)</title><rect x="354.4" y="613" width="90.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="357.44" y="623.5" >mutation_f..</text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_impl::_Deque_impl (1 samples, 0.02%; 0.00%)</title><rect x="20.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.77" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (1 samples, 0.02%; +0.02%)</title><rect x="1189.3" y="981" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.31" y="991.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::deletable_row_view&gt;::doit&lt;seastar::simple_memory_input_stream, utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.9" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.94" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="678.9" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.95" y="831.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.14%; +0.02%)</title><rect x="442.9" y="581" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="445.90" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="143.4" y="805" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="146.38" y="815.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (26 samples, 0.50%; 0.00%)</title><rect x="70.7" y="789" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.73" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (4 samples, 0.08%; +0.08%)</title><rect x="772.9" y="757" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="775.91" y="767.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="85.4" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.40" y="959.5" ></text>
</g>
<g >
<title>auth::resource::parent (7 samples, 0.14%; 0.00%)</title><rect x="787.3" y="677" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.35" y="687.5" ></text>
</g>
<g >
<title>query::result::builder::builder (16 samples, 0.31%; +0.02%)</title><rect x="615.5" y="773" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="618.47" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="607.7" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="610.68" y="751.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="901" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="911.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="755.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.49" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="943.4" y="677" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="946.41" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (487 samples, 9.46%; -0.02%)</title><rect x="346.2" y="661" width="111.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="349.19" y="671.5" >std::__invoke..</text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (6 samples, 0.12%; +0.02%)</title><rect x="682.4" y="837" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.39" y="847.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;rows_entry, alloc_strategy_deleter&lt;rows_entry&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="868.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.70" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="921.9" y="741" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="924.87" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%; 0.00%)</title><rect x="128.3" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.25" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="40.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.25" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1133.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.39" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (40 samples, 0.78%; +0.04%)</title><rect x="27.0" y="629" width="9.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="29.96" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.16%; 0.00%)</title><rect x="1050.9" y="661" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.89" y="671.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (32 samples, 0.62%; 0.00%)</title><rect x="750.5" y="741" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.45" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="283.9" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="286.86" y="559.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (218 samples, 4.23%; 0.00%)</title><rect x="19.9" y="805" width="49.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.85" y="815.5" >cql3:..</text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="767.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::components (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.50" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="902.2" y="661" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="905.16" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; -0.02%)</title><rect x="837.1" y="757" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="840.08" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flush_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="10.5" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.46" y="799.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (43 samples, 0.84%; -0.02%)</title><rect x="703.9" y="853" width="9.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="706.93" y="863.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="669.1" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.09" y="815.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="1125.1" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.14" y="671.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (23 samples, 0.45%; 0.00%)</title><rect x="132.6" y="757" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="135.61" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1023.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.85" y="575.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;column_mapping&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="735.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="849.0" y="709" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="851.99" y="719.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (22 samples, 0.43%; -0.02%)</title><rect x="481.4" y="645" width="5.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="484.40" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.02%)</title><rect x="1148.5" y="773" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1151.52" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="933.1" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="936.10" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="684.7" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.68" y="799.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1161.8" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1164.81" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (2 samples, 0.04%; 0.00%)</title><rect x="865.5" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.49" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.25%; -0.06%)</title><rect x="101.2" y="821" width="3.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="104.21" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.00" y="751.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,039 samples, 20.18%; +0.02%)</title><rect x="877.0" y="821" width="238.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="879.95" y="831.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="832.0" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.04" y="655.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="17.8" y="853" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.79" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1158.8" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1161.83" y="815.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%; +0.02%)</title><rect x="740.8" y="661" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="743.83" y="671.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (4 samples, 0.08%; 0.00%)</title><rect x="111.3" y="773" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="783.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (18 samples, 0.35%; +0.02%)</title><rect x="1127.4" y="581" width="4.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.44" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; -0.02%)</title><rect x="835.7" y="757" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="838.70" y="767.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.06%)</title><rect x="295.5" y="533" width="0.3" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="298.55" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; +0.02%)</title><rect x="725.7" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.70" y="799.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="380.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="383.80" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="57.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.67" y="543.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (5 samples, 0.10%; +0.06%)</title><rect x="420.4" y="533" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="423.44" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="821.0" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.04" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::move_slots&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="869.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.62" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="309.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="312.30" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="58.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.36" y="463.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (8 samples, 0.16%; +0.02%)</title><rect x="638.8" y="773" width="1.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="641.84" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; -0.06%)</title><rect x="623.7" y="789" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="626.72" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="685.4" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="688.37" y="815.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (1 samples, 0.02%; +0.02%)</title><rect x="1127.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.89" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="1043.3" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1046.33" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="601.5" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="604.49" y="735.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%; -0.08%)</title><rect x="542.1" y="581" width="0.3" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="545.13" y="591.5" ></text>
</g>
<g >
<title>tracing::add_table_name (4 samples, 0.08%; +0.04%)</title><rect x="1113.7" y="773" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1116.69" y="783.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="125.7" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="128.73" y="815.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::back (1 samples, 0.02%; +0.02%)</title><rect x="50.3" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.33" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="853" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="863.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="799.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.86" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (10 samples, 0.19%; -0.02%)</title><rect x="865.3" y="725" width="2.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="868.27" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_end (1 samples, 0.02%; +0.02%)</title><rect x="36.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="39.81" y="655.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (4 samples, 0.08%; -0.02%)</title><rect x="1143.7" y="805" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1146.71" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (29 samples, 0.56%; +0.10%)</title><rect x="628.5" y="789" width="6.7" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="631.53" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; -0.04%)</title><rect x="971.4" y="661" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="974.37" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="931.0" y="709" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="934.04" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.40" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="46.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.67" y="511.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="110.4" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.38" y="847.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="1074.3" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1077.27" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; +0.02%)</title><rect x="593.9" y="725" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="596.93" y="735.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="167.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="169.98" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; +0.02%)</title><rect x="862.7" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.74" y="847.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (10 samples, 0.19%; -0.02%)</title><rect x="199.8" y="597" width="2.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="202.75" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (13 samples, 0.25%; -0.06%)</title><rect x="923.2" y="741" width="3.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="926.25" y="751.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (3 samples, 0.06%; +0.04%)</title><rect x="290.7" y="565" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="293.73" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="580.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.41" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (2 samples, 0.04%; -0.02%)</title><rect x="1025.9" y="565" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1028.91" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="383.5" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="386.55" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="116.8" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="119.79" y="847.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; +0.02%)</title><rect x="29.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.25" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1135.5" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1138.46" y="863.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; +0.04%)</title><rect x="1087.1" y="757" width="1.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1090.10" y="767.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (2 samples, 0.04%; +0.04%)</title><rect x="461.7" y="693" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="464.70" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="901" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="911.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="113.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="116.59" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (4 samples, 0.08%; -0.16%)</title><rect x="138.8" y="725" width="0.9" height="15.0" fill="rgb(98,98,255)" rx="2" ry="2" />
<text  x="141.79" y="735.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; +0.02%)</title><rect x="678.5" y="821" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.49" y="831.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="85.6" y="965" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.63" y="975.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="209.4" y="597" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="212.38" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (3 samples, 0.06%; +0.04%)</title><rect x="748.2" y="741" width="0.6" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="751.16" y="751.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="39.1" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.10" y="687.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (702 samples, 13.63%; -0.06%)</title><rect x="179.1" y="725" width="160.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="182.13" y="735.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.69" y="751.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="144.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.75" y="815.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="607.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (3 samples, 0.06%; +0.06%)</title><rect x="670.7" y="821" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="673.70" y="831.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%; 0.00%)</title><rect x="112.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.44" y="767.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (3 samples, 0.06%; +0.02%)</title><rect x="720.7" y="789" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="723.66" y="799.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.69" y="783.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="813.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.47" y="591.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="46.2" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.21" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (2 samples, 0.04%; +0.04%)</title><rect x="139.7" y="773" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="142.71" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="846.0" y="741" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="849.01" y="751.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (2 samples, 0.04%; +0.02%)</title><rect x="1058.2" y="693" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1061.23" y="703.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.02%)</title><rect x="520.4" y="565" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="523.36" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%; +0.04%)</title><rect x="347.1" y="613" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="350.11" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="35.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="38.90" y="623.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="235.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="238.27" y="495.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.83" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1045.4" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.39" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.37%; 0.00%)</title><rect x="1127.2" y="613" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.21" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%; -0.02%)</title><rect x="1032.6" y="613" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1035.56" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="63.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.40" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_aggregate_statement, std::default_delete&lt;cql3::statements::create_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_aggregate_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.1" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.15" y="735.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (34 samples, 0.66%; 0.00%)</title><rect x="864.8" y="757" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.81" y="767.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (369 samples, 7.17%; +0.02%)</title><rect x="357.2" y="597" width="84.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="360.19" y="607.5" >flat_muta..</text>
</g>
<g >
<title>cql3::statements::select_statement::execute (3 samples, 0.06%; 0.00%)</title><rect x="761.5" y="757" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.45" y="767.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="979.4" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="982.39" y="703.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (13 samples, 0.25%; -0.02%)</title><rect x="62.3" y="693" width="2.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="65.25" y="703.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%; -0.02%)</title><rect x="928.3" y="709" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="931.29" y="719.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%; +0.02%)</title><rect x="662.7" y="741" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.68" y="751.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (3 samples, 0.06%; 0.00%)</title><rect x="20.5" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.54" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%; -0.02%)</title><rect x="88.4" y="869" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="91.38" y="879.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%; +0.04%)</title><rect x="1163.9" y="773" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1166.87" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="299.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="302.90" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="992.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="995.68" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="51.9" y="533" width="1.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.94" y="543.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="632.0" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.97" y="767.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.14%; +0.02%)</title><rect x="334.7" y="661" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="337.73" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1126.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.29" y="543.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (1 samples, 0.02%; -0.02%)</title><rect x="357.0" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="359.96" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; +0.02%)</title><rect x="1165.9" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.94" y="831.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%; +0.02%)</title><rect x="19.6" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.63" y="831.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="19.9" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.85" y="767.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="47.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.81" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="715.2" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.16" y="831.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="574.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.99" y="655.5" ></text>
</g>
<g >
<title>dht::shard_of (5 samples, 0.10%; +0.08%)</title><rect x="995.4" y="629" width="1.2" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="998.43" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (3 samples, 0.06%; 0.00%)</title><rect x="869.4" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.39" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (47 samples, 0.91%; 0.00%)</title><rect x="129.6" y="789" width="10.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.63" y="799.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="758.2" y="757" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="761.24" y="767.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (7 samples, 0.14%; -0.04%)</title><rect x="996.6" y="629" width="1.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="999.58" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%; 0.00%)</title><rect x="68.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.21" y="719.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.19" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="733.5" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="736.49" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="663.1" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.14" y="783.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="767.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="69" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="79.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; -0.06%)</title><rect x="350.5" y="613" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="353.55" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.1" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="799.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="703.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.01" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (3 samples, 0.06%; 0.00%)</title><rect x="865.3" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.27" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="741.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.28" y="671.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (1 samples, 0.02%; 0.00%)</title><rect x="1167.3" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.31" y="847.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="16.9" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.88" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="88.8" y="869" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.83" y="879.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="819.2" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.20" y="671.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="783.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="84.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.71" y="815.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="814.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="817.62" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="808.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.89" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="24.9" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (24 samples, 0.47%; +0.02%)</title><rect x="1159.1" y="837" width="5.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1162.06" y="847.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.19%; +0.02%)</title><rect x="291.4" y="565" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="294.42" y="575.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="700.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="68.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.21" y="703.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (10 samples, 0.19%; 0.00%)</title><rect x="547.9" y="677" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="550.86" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="68.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.67" y="751.5" ></text>
</g>
<g >
<title>streamed_mutation_freezer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.92" y="527.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="47.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="1135.7" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.69" y="863.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (1 samples, 0.02%; 0.00%)</title><rect x="1128.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.12" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%; -0.02%)</title><rect x="87.2" y="869" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="90.23" y="879.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; 0.00%)</title><rect x="938.8" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.83" y="767.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; +0.02%)</title><rect x="191.7" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="194.73" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (62 samples, 1.20%; -0.02%)</title><rect x="23.8" y="677" width="14.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="26.75" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="541.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.91" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1037.1" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1040.14" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="946.2" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="949.16" y="719.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%; 0.00%)</title><rect x="1120.3" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.33" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (50 samples, 0.97%; +0.02%)</title><rect x="211.2" y="597" width="11.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="214.21" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (86 samples, 1.67%; +0.02%)</title><rect x="42.3" y="709" width="19.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.31" y="719.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="857.9" y="821" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="860.93" y="831.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="82.0" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.96" y="815.5" ></text>
</g>
<g >
<title>__strlen_avx2 (4 samples, 0.08%; +0.08%)</title><rect x="80.1" y="965" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="83.13" y="975.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%; 0.00%)</title><rect x="282.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="285.71" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;&amp;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::_Deque_iterator (1 samples, 0.02%; +0.02%)</title><rect x="20.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.77" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2 samples, 0.04%; +0.04%)</title><rect x="1151.7" y="821" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1154.73" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="82.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.88" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="614.1" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="617.09" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (2 samples, 0.04%; 0.00%)</title><rect x="111.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.29" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; -0.04%)</title><rect x="343.9" y="725" width="0.5" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="346.90" y="735.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (7 samples, 0.14%; +0.06%)</title><rect x="1093.3" y="725" width="1.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1096.29" y="735.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (40 samples, 0.78%; -0.02%)</title><rect x="676.7" y="853" width="9.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="679.66" y="863.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="858.2" y="821" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.16" y="831.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (15 samples, 0.29%; 0.00%)</title><rect x="841.2" y="757" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.20" y="767.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="39.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.79" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (5 samples, 0.10%; -0.04%)</title><rect x="164.7" y="757" width="1.1" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="167.69" y="767.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1122.6" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.62" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="42.5" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.54" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="607.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%; +0.02%)</title><rect x="1077.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1080.48" y="655.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="559.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="562.55" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (5 samples, 0.10%; +0.10%)</title><rect x="926.2" y="741" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="929.22" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; -0.02%)</title><rect x="698.4" y="805" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="701.43" y="815.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (1 samples, 0.02%; 0.00%)</title><rect x="702.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.55" y="847.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="664.5" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="667.51" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="452.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.76" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (11 samples, 0.21%; -0.08%)</title><rect x="662.0" y="805" width="2.5" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="664.99" y="815.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="860.5" y="789" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.45" y="799.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="901.2" y="709" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="904.24" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%; 0.00%)</title><rect x="46.0" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (2 samples, 0.04%; +0.02%)</title><rect x="487.1" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="490.13" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; +0.02%)</title><rect x="822.0" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.95" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="600.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.80" y="719.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (3 samples, 0.06%; -0.02%)</title><rect x="1076.1" y="629" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1079.10" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::maybe_prepare_json_cache (1 samples, 0.02%; +0.02%)</title><rect x="872.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.37" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; -0.02%)</title><rect x="662.7" y="757" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="665.68" y="767.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="83.6" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.56" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; -0.04%)</title><rect x="971.1" y="677" width="1.0" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="974.14" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="640.4" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="643.45" y="719.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1036.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1039.68" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (15 samples, 0.29%; 0.00%)</title><rect x="753.9" y="709" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.89" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.1" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.12" y="767.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%; +0.02%)</title><rect x="959.7" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.68" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1135.2" y="853" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1138.23" y="863.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="869.4" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.39" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (111 samples, 2.16%; +0.04%)</title><rect x="576.5" y="757" width="25.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="579.51" y="767.5" >f..</text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="145.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="147.98" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (7 samples, 0.14%; 0.00%)</title><rect x="700.9" y="773" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.95" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.31%; +0.06%)</title><rect x="1007.6" y="581" width="3.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1010.58" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,701 samples, 91.30%; +0.16%)</title><rect x="90.4" y="869" width="1077.4" height="15.0" fill="rgb(255,98,98)" rx="2" ry="2" />
<text  x="93.44" y="879.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.10" y="863.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%; 0.00%)</title><rect x="725.5" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.47" y="831.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (8 samples, 0.16%; -0.02%)</title><rect x="561.2" y="645" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="564.16" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (2 samples, 0.04%; +0.04%)</title><rect x="55.1" y="613" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="58.15" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.14%; +0.08%)</title><rect x="896.9" y="629" width="1.6" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="899.89" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="802.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.93" y="495.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::on_released (1 samples, 0.02%; 0.00%)</title><rect x="725.7" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.70" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.12%; 0.00%)</title><rect x="1005.7" y="581" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1008.75" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (7 samples, 0.14%; 0.00%)</title><rect x="755.7" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="758.72" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (24 samples, 0.47%; +0.06%)</title><rect x="265.5" y="485" width="5.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="268.53" y="495.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="1128.4" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.35" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (18 samples, 0.35%; -0.08%)</title><rect x="537.8" y="597" width="4.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="540.78" y="607.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%; +0.04%)</title><rect x="560.5" y="645" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="563.47" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="835.9" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.93" y="783.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.06%)</title><rect x="529.1" y="661" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="532.07" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.16%; 0.00%)</title><rect x="674.8" y="837" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.82" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.12%; -0.02%)</title><rect x="1042.4" y="677" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1045.41" y="687.5" ></text>
</g>
<g >
<title>ser::column__c__variant&lt;bytes_ostream&gt;::start_variant_live_cell (1 samples, 0.02%; +0.02%)</title><rect x="1128.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.81" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; +0.02%)</title><rect x="849.9" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="852.91" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; -0.04%)</title><rect x="739.2" y="741" width="0.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="742.22" y="751.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.02" y="799.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; +0.02%)</title><rect x="84.7" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.71" y="799.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="773" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.17" y="783.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="293.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.71" y="575.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (6 samples, 0.12%; 0.00%)</title><rect x="55.8" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.83" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.02%)</title><rect x="483.2" y="581" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="486.24" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="145.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="148.21" y="735.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="51.9" y="565" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.94" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%; +0.02%)</title><rect x="457.1" y="613" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="460.11" y="623.5" ></text>
</g>
<g >
<title>std::locale::_S_initialize (1 samples, 0.02%; +0.02%)</title><rect x="85.2" y="933" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.17" y="943.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%; +0.02%)</title><rect x="919.6" y="693" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="922.58" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="57.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.67" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (12 samples, 0.23%; +0.04%)</title><rect x="731.9" y="805" width="2.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="734.89" y="815.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (129 samples, 2.51%; -0.02%)</title><rect x="233.4" y="517" width="29.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="236.44" y="527.5" >cl..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="702.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.10" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="463.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (16 samples, 0.31%; -0.06%)</title><rect x="739.7" y="741" width="3.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="742.68" y="751.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; +0.04%)</title><rect x="592.1" y="661" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="595.09" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; +0.02%)</title><rect x="441.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="444.07" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="860.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.68" y="783.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (6 samples, 0.12%; +0.10%)</title><rect x="1068.3" y="629" width="1.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1071.31" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%; -0.02%)</title><rect x="1096.7" y="709" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1099.73" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1109.8" y="741" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1112.79" y="751.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="59.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.04" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; -0.04%)</title><rect x="771.3" y="677" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="774.31" y="687.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="846.0" y="757" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.01" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="639.5" y="741" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="642.53" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (7 samples, 0.14%; +0.10%)</title><rect x="776.8" y="693" width="1.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="779.81" y="703.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; 0.00%)</title><rect x="207.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.32" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="749.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="752.76" y="751.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="847.8" y="741" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.85" y="751.5" ></text>
</g>
<g >
<title>row_cache::make_reader (35 samples, 0.68%; 0.00%)</title><rect x="555.2" y="693" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.20" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="812.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="815.56" y="607.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="111.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.06" y="607.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1124.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.00" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="22.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.83" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="727.5" y="853" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="730.53" y="863.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="866.6" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="869.64" y="687.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (3 samples, 0.06%; 0.00%)</title><rect x="417.0" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="420.01" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::stats (5 samples, 0.10%; 0.00%)</title><rect x="525.9" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.86" y="671.5" ></text>
</g>
<g >
<title>db::system_keyspace::large_rows (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.33" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.04" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (2 samples, 0.04%; +0.04%)</title><rect x="126.9" y="789" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="129.88" y="799.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.06" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.22" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (88 samples, 1.71%; +0.06%)</title><rect x="418.2" y="549" width="20.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="421.15" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="910.4" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.41" y="719.5" ></text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.6" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.63" y="415.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (9 samples, 0.17%; 0.00%)</title><rect x="1116.4" y="597" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.44" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (15 samples, 0.29%; -0.06%)</title><rect x="652.4" y="853" width="3.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="655.37" y="863.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, column_mapping&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="751.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.12%; -0.12%)</title><rect x="213.0" y="549" width="1.4" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="216.05" y="559.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%; +0.02%)</title><rect x="1112.1" y="757" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.08" y="767.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%; +0.02%)</title><rect x="1119.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.96" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.60" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; -0.04%)</title><rect x="437.9" y="501" width="0.2" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="440.86" y="511.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.12" y="527.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="843.7" y="725" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.72" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="485.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="488.07" y="623.5" ></text>
</g>
<g >
<title>database::find_keyspace (16 samples, 0.31%; 0.00%)</title><rect x="1043.8" y="693" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.79" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="559.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (4 samples, 0.08%; -0.04%)</title><rect x="750.9" y="661" width="0.9" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="753.91" y="671.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="698.7" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="701.66" y="799.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="575.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="898.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="901.49" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.14%; +0.02%)</title><rect x="755.7" y="629" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.72" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1012.6" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.62" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%; +0.02%)</title><rect x="1166.9" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.85" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; -0.02%)</title><rect x="662.4" y="773" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="665.45" y="783.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (431 samples, 8.37%; 0.00%)</title><rect x="467.0" y="757" width="98.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.97" y="767.5" >mutation_so..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.08%; +0.08%)</title><rect x="312.5" y="645" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="315.51" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%; +0.06%)</title><rect x="654.2" y="837" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="657.20" y="847.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%; -0.02%)</title><rect x="625.1" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="628.09" y="783.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::column_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1122.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.39" y="527.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (12 samples, 0.23%; -0.04%)</title><rect x="1018.1" y="517" width="2.8" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="1021.12" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.02%)</title><rect x="43.2" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.23" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="58.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.81" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (3 samples, 0.06%; +0.04%)</title><rect x="563.9" y="693" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="566.91" y="703.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.98" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="142.0" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="145.00" y="815.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (4 samples, 0.08%; +0.08%)</title><rect x="381.0" y="533" width="0.9" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="384.03" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (15 samples, 0.29%; 0.00%)</title><rect x="868.2" y="693" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.24" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (1 samples, 0.02%; +0.02%)</title><rect x="74.2" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.17" y="735.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (6 samples, 0.12%; +0.12%)</title><rect x="189.2" y="661" width="1.4" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="192.21" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%; -0.02%)</title><rect x="718.1" y="757" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="721.14" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="867.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.56" y="655.5" ></text>
</g>
<g >
<title>db::rp_set::put (1 samples, 0.02%; 0.00%)</title><rect x="1116.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.21" y="607.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="997" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="1007.5" ></text>
</g>
<g >
<title>std::operator== (1 samples, 0.02%; +0.02%)</title><rect x="37.7" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="40.73" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (4 samples, 0.08%; +0.06%)</title><rect x="582.5" y="661" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="585.47" y="671.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="470.9" y="709" width="0.4" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="473.86" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="623.0" y="789" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.03" y="799.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="807.3" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.28" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (506 samples, 9.83%; +0.06%)</title><rect x="344.4" y="725" width="115.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="347.36" y="735.5" >flat_mutation_..</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="77.1" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.15" y="783.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="40.7" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.71" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="539.2" y="533" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="542.16" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="627.8" y="757" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="630.84" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="658.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.32" y="655.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="805.9" y="469" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="808.91" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; +0.02%)</title><rect x="561.8" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.84" y="623.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%; +0.02%)</title><rect x="1167.1" y="805" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.08" y="815.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.14%; -0.14%)</title><rect x="522.9" y="549" width="1.6" height="15.0" fill="rgb(112,112,255)" rx="2" ry="2" />
<text  x="525.88" y="559.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (7 samples, 0.14%; 0.00%)</title><rect x="569.6" y="725" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="572.63" y="735.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%; +0.04%)</title><rect x="912.7" y="693" width="2.1" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="915.70" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="73.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.94" y="655.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (3 samples, 0.06%; 0.00%)</title><rect x="578.6" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.57" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="59.7" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.73" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1096.0" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.04" y="719.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (3 samples, 0.06%; +0.06%)</title><rect x="1022.7" y="565" width="0.7" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1025.71" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (24 samples, 0.47%; +0.02%)</title><rect x="596.0" y="725" width="5.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="598.99" y="735.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (21 samples, 0.41%; +0.04%)</title><rect x="1092.6" y="757" width="4.8" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1095.60" y="767.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (6 samples, 0.12%; 0.00%)</title><rect x="36.6" y="661" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.58" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="935.6" y="725" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="938.62" y="735.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (718 samples, 13.94%; -0.06%)</title><rect x="176.4" y="757" width="164.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="179.38" y="767.5" >flat_mutation_reader:..</text>
</g>
<g >
<title>seastar::thread_context::thread_context (14 samples, 0.27%; 0.00%)</title><rect x="81.7" y="965" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.73" y="975.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="566.4" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.43" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%; -0.02%)</title><rect x="1037.6" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1040.60" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; +0.02%)</title><rect x="529.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="532.76" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.14%; 0.00%)</title><rect x="259.3" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="262.34" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="488.7" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.74" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (4 samples, 0.08%; 0.00%)</title><rect x="56.3" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.29" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6 samples, 0.12%; 0.00%)</title><rect x="1083.7" y="725" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.66" y="735.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="885" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="895.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.71" y="687.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (18 samples, 0.35%; 0.00%)</title><rect x="11.6" y="965" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.60" y="975.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="110.6" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.61" y="799.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="780.5" y="725" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="783.47" y="735.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (16 samples, 0.31%; -0.04%)</title><rect x="826.8" y="693" width="3.6" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="829.76" y="703.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%; -0.02%)</title><rect x="1110.5" y="773" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1113.48" y="783.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1053.6" y="661" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1056.64" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="728.5" y="853" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="731.45" y="863.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (5 samples, 0.10%; 0.00%)</title><rect x="633.6" y="741" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="636.57" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="1116.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.21" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="565.7" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.74" y="767.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; 0.00%)</title><rect x="287.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.30" y="607.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%; +0.02%)</title><rect x="1047.9" y="677" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1050.91" y="687.5" ></text>
</g>
<g >
<title>database::find_column_family (6 samples, 0.12%; -0.02%)</title><rect x="1042.4" y="693" width="1.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1045.41" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="66.8" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.83" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="23.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.75" y="639.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="914.8" y="693" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="917.77" y="703.5" ></text>
</g>
<g >
<title>ser::serializer&lt;column_mapping&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.67" y="719.5" ></text>
</g>
<g >
<title>db::hints::manager::too_many_in_flight_hints_for (1 samples, 0.02%; +0.02%)</title><rect x="1131.1" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.10" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="76.2" y="709" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.23" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (5 samples, 0.10%; +0.04%)</title><rect x="1160.4" y="805" width="1.2" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1163.44" y="815.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.08%)</title><rect x="458.5" y="613" width="1.4" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="461.49" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (257 samples, 4.99%; -0.08%)</title><rect x="774.1" y="757" width="58.9" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="777.06" y="767.5" >servic..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="639.5" ></text>
</g>
<g >
<title>db::view::node_update_backlog::add_fetch (1 samples, 0.02%; +0.02%)</title><rect x="725.2" y="837" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.24" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_realloc_insert&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="17.3" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="20.33" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="42.1" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.08" y="703.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (3 samples, 0.06%; 0.00%)</title><rect x="865.3" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.27" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="64.5" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.54" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="654.9" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="657.89" y="831.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (2 samples, 0.04%; +0.02%)</title><rect x="1120.8" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.79" y="591.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;long&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="703.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="706.01" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="700.3" y="837" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="703.26" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1166.2" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.17" y="703.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (11 samples, 0.21%; +0.10%)</title><rect x="133.5" y="741" width="2.5" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="136.52" y="751.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (101 samples, 1.96%; -0.08%)</title><rect x="791.5" y="629" width="23.1" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="794.47" y="639.5" >a..</text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="949" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.69" y="959.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="584.1" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.07" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::consume (2 samples, 0.04%; 0.00%)</title><rect x="701.2" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.18" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (61 samples, 1.18%; +0.02%)</title><rect x="531.8" y="645" width="14.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="534.82" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (3 samples, 0.06%; 0.00%)</title><rect x="64.1" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.08" y="687.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (2 samples, 0.04%; 0.00%)</title><rect x="113.6" y="853" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.59" y="863.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; 0.00%)</title><rect x="469.7" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="472.72" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (31 samples, 0.60%; -0.02%)</title><rect x="53.8" y="645" width="7.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="56.77" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="40.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.02" y="543.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%; 0.00%)</title><rect x="702.8" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.78" y="847.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="870.5" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.54" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; +0.02%)</title><rect x="21.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.00" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="330.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.61" y="655.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (3 samples, 0.06%; +0.04%)</title><rect x="363.6" y="549" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="366.61" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (2 samples, 0.04%; +0.04%)</title><rect x="1152.6" y="821" width="0.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="1155.65" y="831.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="313.9" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="316.88" y="671.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="551.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.76" y="687.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; 0.00%)</title><rect x="992.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.91" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="962.9" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="965.89" y="735.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.8" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.84" y="799.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (130 samples, 2.52%; -0.02%)</title><rect x="1000.5" y="629" width="29.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1003.48" y="639.5" >se..</text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (4 samples, 0.08%; +0.04%)</title><rect x="370.0" y="517" width="0.9" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="373.03" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.94" y="847.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="1129.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.04" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; -0.08%)</title><rect x="644.8" y="821" width="0.2" height="15.0" fill="rgb(154,154,255)" rx="2" ry="2" />
<text  x="647.80" y="831.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1128.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.35" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="871.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.91" y="607.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.25" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="287.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="290.53" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (11 samples, 0.21%; +0.08%)</title><rect x="254.3" y="469" width="2.5" height="15.0" fill="rgb(255,154,154)" rx="2" ry="2" />
<text  x="257.30" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%; +0.02%)</title><rect x="26.7" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="29.73" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%; +0.02%)</title><rect x="24.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.90" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; -0.04%)</title><rect x="48.7" y="501" width="0.7" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="51.73" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%; -0.02%)</title><rect x="1042.6" y="661" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1045.64" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="63.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.86" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="111.5" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.52" y="207.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="63.9" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.86" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.02%)</title><rect x="592.6" y="677" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="595.55" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.21%; +0.04%)</title><rect x="693.6" y="805" width="2.5" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="696.62" y="815.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="67.1" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.06" y="703.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; -0.02%)</title><rect x="559.3" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="562.32" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="864.3" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="867.35" y="655.5" ></text>
</g>
<g >
<title>_setjmp (2 samples, 0.04%; +0.02%)</title><rect x="645.0" y="837" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="648.03" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (19 samples, 0.37%; +0.10%)</title><rect x="630.6" y="773" width="4.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="633.59" y="783.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (12 samples, 0.23%; 0.00%)</title><rect x="460.3" y="725" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="463.32" y="735.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="69.4" y="741" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.36" y="751.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%; +0.02%)</title><rect x="754.6" y="661" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="757.58" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.14%; 0.00%)</title><rect x="796.1" y="517" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.06" y="527.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (3 samples, 0.06%; +0.04%)</title><rect x="475.0" y="693" width="0.7" height="15.0" fill="rgb(255,182,182)" rx="2" ry="2" />
<text  x="477.99" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1083.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.21" y="719.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; +0.02%)</title><rect x="840.1" y="773" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="843.06" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="64.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.31" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.63" y="655.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="19.4" y="821" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.40" y="831.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="773.8" y="757" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="776.83" y="767.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%; 0.00%)</title><rect x="621.4" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.43" y="799.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_compaction&lt;sstables::compacting_sstable_writer, noop_compacted_fragments_consumer&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="847.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (10 samples, 0.19%; -0.04%)</title><rect x="294.4" y="565" width="2.3" height="15.0" fill="rgb(182,182,255)" rx="2" ry="2" />
<text  x="297.40" y="575.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.64" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.21%; -0.06%)</title><rect x="241.5" y="453" width="2.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="244.46" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%; 0.00%)</title><rect x="639.3" y="757" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.30" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.04" y="671.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (3 samples, 0.06%; 0.00%)</title><rect x="1015.6" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1018.60" y="543.5" ></text>
</g>
</g>
</svg>
