<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="886.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="869" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="869" > </text>
<g id="frames">
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; 0.00%)</title><rect x="199.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.66" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="837.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="840.58" y="623.5" ></text>
</g>
<g >
<title>logalloc::region_impl::object_memory_size_in_allocator (1 samples, 0.02%; +0.02%)</title><rect x="19.3" y="725" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.34" y="735.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (15 samples, 0.28%; +0.04%)</title><rect x="682.8" y="645" width="3.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="685.82" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (6 samples, 0.11%; -0.02%)</title><rect x="693.1" y="645" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="696.05" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (11 samples, 0.21%; -0.17%)</title><rect x="766.0" y="533" width="2.4" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="768.98" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="83.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.37" y="639.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; +0.02%)</title><rect x="782.0" y="485" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="784.99" y="495.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.30%; 0.00%)</title><rect x="1000.1" y="421" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.11" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="383.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (2 samples, 0.04%; +0.04%)</title><rect x="729.5" y="629" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="732.52" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (49 samples, 0.92%; -0.02%)</title><rect x="572.1" y="517" width="10.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="575.10" y="527.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.37" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (5 samples, 0.09%; -0.02%)</title><rect x="1107.3" y="565" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1110.29" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%; -0.02%)</title><rect x="829.4" y="517" width="2.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="832.35" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="447.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (3 samples, 0.06%; -0.02%)</title><rect x="350.0" y="341" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="352.97" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, true&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.92" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (36 samples, 0.68%; +0.13%)</title><rect x="409.3" y="341" width="8.0" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="412.34" y="351.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (3 samples, 0.06%; 0.00%)</title><rect x="112.1" y="629" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="639.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (3 samples, 0.06%; +0.04%)</title><rect x="1054.6" y="485" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1057.59" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="399.5" ></text>
</g>
<g >
<title>schema_mutations::operator== (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; -0.02%)</title><rect x="633.2" y="549" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="636.24" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; -0.02%)</title><rect x="984.8" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="987.77" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="332.8" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.85" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="845.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.58" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="239.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="984.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.77" y="431.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,866 samples, 91.69%; 0.00%)</title><rect x="87.8" y="773" width="1082.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="783.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="514.3" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="517.28" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (5 samples, 0.09%; +0.08%)</title><rect x="530.7" y="389" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="533.74" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_channel (1 samples, 0.02%; -0.02%)</title><rect x="32.2" y="437" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="35.23" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%; +0.02%)</title><rect x="1024.8" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1027.80" y="447.5" ></text>
</g>
<g >
<title>create_partitions (293 samples, 5.52%; 0.00%)</title><rect x="20.7" y="709" width="65.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="719.5" >create_..</text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="703.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%; +0.02%)</title><rect x="1168.4" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.43" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (24 samples, 0.45%; +0.02%)</title><rect x="657.7" y="629" width="5.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="660.70" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (3 samples, 0.06%; +0.06%)</title><rect x="260.6" y="277" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="263.59" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%; +0.02%)</title><rect x="64.7" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.70" y="447.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="45.6" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.58" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="951.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="953.98" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="53.4" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.36" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.04%)</title><rect x="766.9" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="769.87" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (692 samples, 13.04%; -0.08%)</title><rect x="168.5" y="581" width="153.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="171.53" y="591.5" >flat_mutation_reade..</text>
</g>
<g >
<title>db::commitlog::segment::allocate (3 samples, 0.06%; +0.04%)</title><rect x="1119.7" y="453" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1122.74" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,865 samples, 91.67%; 0.00%)</title><rect x="87.8" y="709" width="1081.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="719.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>schema_registry_entry::load (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.36" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.06%)</title><rect x="278.4" y="373" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="281.37" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="523.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="526.40" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="673.0" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="676.04" y="655.5" ></text>
</g>
<g >
<title>__tls_init (7 samples, 0.13%; +0.09%)</title><rect x="506.1" y="485" width="1.5" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="509.06" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (4 samples, 0.08%; 0.00%)</title><rect x="580.8" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.77" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (10 samples, 0.19%; +0.13%)</title><rect x="251.7" y="293" width="2.2" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="254.69" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="463.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="192.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.10" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="722.4" y="677" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="725.40" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.36" y="367.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%; +0.02%)</title><rect x="994.6" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="997.56" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%; +0.02%)</title><rect x="619.0" y="613" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="622.01" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (5 samples, 0.09%; +0.09%)</title><rect x="922.1" y="565" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="925.07" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;unsigned long&gt;, sstables::sstable::update_info_for_opened_data (1 samples, 0.02%; 0.00%)</title><rect x="696.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.17" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="786.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="789.66" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="301.9" y="453" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="304.94" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.15" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="573.4" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="576.43" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1012.8" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.79" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="1088.6" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1091.61" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="474.3" y="453" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="477.26" y="463.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (12 samples, 0.23%; 0.00%)</title><rect x="476.9" y="469" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="479.93" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="139.6" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="142.63" y="639.5" ></text>
</g>
<g >
<title>auth::get_permissions (119 samples, 2.24%; 0.00%)</title><rect x="787.1" y="485" width="26.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.11" y="495.5" >a..</text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="793.3" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="796.33" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (87 samples, 1.64%; -0.02%)</title><rect x="401.3" y="373" width="19.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="404.33" y="383.5" ></text>
</g>
<g >
<title>database::flush (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="661" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="671.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.08%)</title><rect x="589.7" y="533" width="1.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="592.66" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="68.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.26" y="527.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (5 samples, 0.09%; 0.00%)</title><rect x="354.2" y="357" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="357.19" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.41" y="495.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%; +0.02%)</title><rect x="30.2" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="33.23" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="602.8" y="597" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="605.78" y="607.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.01" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="720.0" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="722.96" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; -0.04%)</title><rect x="270.1" y="325" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="273.15" y="335.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (5 samples, 0.09%; +0.02%)</title><rect x="758.9" y="565" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="761.87" y="575.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (2 samples, 0.04%; -0.04%)</title><rect x="464.3" y="501" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="467.26" y="511.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="404.4" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="407.45" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="1016.6" y="373" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1019.57" y="383.5" ></text>
</g>
<g >
<title>_Unwind_Find_FDE (1 samples, 0.02%; 0.00%)</title><rect x="14.2" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.22" y="799.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="539.9" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="542.85" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (48 samples, 0.90%; +0.02%)</title><rect x="185.4" y="453" width="10.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="188.43" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="351.5" ></text>
</g>
<g >
<title>partition_version::partition_version (1 samples, 0.02%; 0.00%)</title><rect x="1119.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.07" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;seastar::shared_ptr&lt;cql3::relation&gt;*, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.81" y="479.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="191.5" ></text>
</g>
<g >
<title>boost::range::count_if&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt;, service::storage_proxy::hint_to_dead_endpoints&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.7" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.74" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%; 0.00%)</title><rect x="190.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="193.10" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::shared_ptr_count_for&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="810.9" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="813.90" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="82.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.49" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (4 samples, 0.08%; +0.06%)</title><rect x="201.7" y="421" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="204.66" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="889.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="892.16" y="607.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.06%)</title><rect x="449.6" y="549" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="452.58" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%; -0.02%)</title><rect x="753.3" y="517" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="756.31" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (6 samples, 0.11%; +0.08%)</title><rect x="183.7" y="453" width="1.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="186.65" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (5 samples, 0.09%; +0.06%)</title><rect x="268.4" y="325" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="271.37" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="806.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.89" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1015.0" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1018.01" y="383.5" ></text>
</g>
<g >
<title>cql3::column_identifier::text (1 samples, 0.02%; +0.02%)</title><rect x="19.8" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.78" y="415.5" ></text>
</g>
<g >
<title>seastar::alien::instance::poll_queues (1 samples, 0.02%; +0.02%)</title><rect x="1168.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.99" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (4 samples, 0.08%; -0.04%)</title><rect x="353.3" y="357" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="356.31" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%; 0.00%)</title><rect x="753.3" y="533" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.31" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="824.2" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="827.24" y="543.5" ></text>
</g>
<g >
<title>__libc_start_main (4,866 samples, 91.69%; 0.00%)</title><rect x="87.8" y="805" width="1082.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="815.5" >__libc_start_main</text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="616.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="619.56" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="706.6" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="709.62" y="655.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.09%; 0.00%)</title><rect x="1119.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.74" y="479.5" ></text>
</g>
<g >
<title>[[vdso]] (24 samples, 0.45%; -0.08%)</title><rect x="1171.1" y="789" width="5.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1174.10" y="799.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (2 samples, 0.04%; +0.04%)</title><rect x="560.5" y="549" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="563.53" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; 0.00%)</title><rect x="1091.5" y="517" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1094.50" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%; 0.00%)</title><rect x="59.6" y="437" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.58" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="73.1" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.15" y="575.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="986.1" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="989.11" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (4 samples, 0.08%; +0.04%)</title><rect x="354.2" y="341" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="357.19" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (5 samples, 0.09%; 0.00%)</title><rect x="830.9" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.91" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.15" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;char&gt;, char&gt;::_S_select_on_copy (1 samples, 0.02%; 0.00%)</title><rect x="28.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.90" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (5 samples, 0.09%; +0.06%)</title><rect x="745.7" y="549" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="748.75" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; 0.00%)</title><rect x="982.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.77" y="511.5" ></text>
</g>
<g >
<title>compound_type&lt; (10 samples, 0.19%; +0.04%)</title><rect x="502.1" y="389" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="505.06" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="351.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; -0.02%)</title><rect x="254.1" y="309" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="257.14" y="319.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (28 samples, 0.53%; -0.02%)</title><rect x="467.6" y="469" width="6.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="470.59" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="1135.7" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.75" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; +0.02%)</title><rect x="356.4" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="359.42" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="821.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.12" y="575.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="527.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; -0.02%)</title><rect x="842.7" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="845.69" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1124.6" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.63" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="929.6" y="549" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="932.63" y="559.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="790.4" y="405" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="793.44" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="757.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.09" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%; 0.00%)</title><rect x="137.9" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.85" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.02%)</title><rect x="97.4" y="661" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="100.38" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.13%)</title><rect x="984.3" y="421" width="0.5" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="987.33" y="431.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (11 samples, 0.21%; 0.00%)</title><rect x="1164.0" y="629" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.99" y="639.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="872.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.26" y="415.5" ></text>
</g>
<g >
<title>database::query (1 samples, 0.02%; +0.02%)</title><rect x="88.0" y="693" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.04" y="703.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%; 0.00%)</title><rect x="969.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.99" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::~pair (1 samples, 0.02%; +0.02%)</title><rect x="53.6" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.58" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.13" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="62.3" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.25" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.70" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="903.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="906.62" y="511.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (1 samples, 0.02%; 0.00%)</title><rect x="1132.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.41" y="687.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1118.0" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.96" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="48.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.24" y="447.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (47 samples, 0.89%; -0.02%)</title><rect x="345.7" y="389" width="10.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="348.75" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (3 samples, 0.06%; +0.02%)</title><rect x="265.7" y="325" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="268.70" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%; 0.00%)</title><rect x="935.6" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.63" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.15%)</title><rect x="709.1" y="661" width="0.4" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="712.06" y="671.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (4 samples, 0.08%; 0.00%)</title><rect x="78.7" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.71" y="559.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; 0.00%)</title><rect x="698.2" y="661" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.17" y="671.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="753.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.31" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="551.9" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="554.86" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="631.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.46" y="575.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="639.5" ></text>
</g>
<g >
<title>[unknown] (350 samples, 6.60%; 0.00%)</title><rect x="10.0" y="805" width="77.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="815.5" >[unknown]</text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.18" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="197.4" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="200.44" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="76.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.26" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%; +0.02%)</title><rect x="565.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="567.98" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%; +0.04%)</title><rect x="439.4" y="437" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="442.35" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (6 samples, 0.11%; +0.04%)</title><rect x="528.1" y="357" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="531.07" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="357.5" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="360.53" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="719.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="110.7" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.72" y="351.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (1 samples, 0.02%; +0.02%)</title><rect x="14.0" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="17.00" y="783.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; 0.00%)</title><rect x="665.0" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.04" y="655.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1082.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1085.83" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="821.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="824.57" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="929.4" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.41" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; +0.02%)</title><rect x="717.7" y="597" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.73" y="607.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; -0.02%)</title><rect x="805.8" y="277" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="808.78" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,347 samples, 44.22%; +0.09%)</title><rect x="116.9" y="661" width="521.9" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="119.95" y="671.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="264.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="267.59" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (46 samples, 0.87%; +0.04%)</title><rect x="204.8" y="421" width="10.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="207.78" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.37" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9 samples, 0.17%; +0.06%)</title><rect x="1147.1" y="629" width="2.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1150.09" y="639.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%; -0.11%)</title><rect x="249.0" y="245" width="0.5" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="252.02" y="255.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; -0.11%)</title><rect x="981.9" y="453" width="0.2" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="984.88" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="859.8" y="645" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="862.81" y="655.5" ></text>
</g>
<g >
<title>table::flush (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="876.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.71" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (6 samples, 0.11%; 0.00%)</title><rect x="45.1" y="485" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="108.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.94" y="671.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="826.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="829.91" y="447.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="495.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="24.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.67" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="1127.3" y="293" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1130.30" y="303.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="746.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="749.86" y="575.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (100 samples, 1.88%; +0.06%)</title><rect x="788.9" y="453" width="22.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="791.88" y="463.5" >a..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="701.9" y="629" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="704.95" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1037.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1040.02" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="463.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (1 samples, 0.02%; 0.00%)</title><rect x="109.8" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="112.83" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="551.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="554.42" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="504.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="507.28" y="511.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (6 samples, 0.11%; +0.02%)</title><rect x="1009.0" y="341" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1012.01" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; 0.00%)</title><rect x="161.9" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="164.86" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="112.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.28" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::~reactor_backend_aio (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="799.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="53.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.14" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="474.7" y="469" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="477.71" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="383.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (3 samples, 0.06%; +0.02%)</title><rect x="448.7" y="533" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="451.69" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (1 samples, 0.02%; 0.00%)</title><rect x="476.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="479.26" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.06%)</title><rect x="596.6" y="517" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="599.55" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.02%)</title><rect x="674.2" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="677.15" y="671.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="941.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="944.86" y="575.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (24 samples, 0.45%; +0.02%)</title><rect x="526.5" y="405" width="5.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="529.51" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple&lt;cql3::operation::raw_update*&amp;, std::default_delete&lt;cql3::operation::set_value&gt;, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="447.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="399.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="650.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="653.36" y="671.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="870.7" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.71" y="463.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; +0.02%)</title><rect x="245.7" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="248.69" y="271.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="64.3" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.25" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%; -0.06%)</title><rect x="715.7" y="613" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="718.73" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.5" y="213" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.47" y="223.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (2 samples, 0.04%; 0.00%)</title><rect x="707.9" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="710.95" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.06%)</title><rect x="254.8" y="325" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="257.80" y="335.5" ></text>
</g>
<g >
<title>malloc (6 samples, 0.11%; 0.00%)</title><rect x="614.6" y="549" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="617.56" y="559.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%; +0.04%)</title><rect x="420.2" y="357" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="423.23" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="622.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="625.57" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; +0.02%)</title><rect x="57.4" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.36" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (37 samples, 0.70%; -0.02%)</title><rect x="1087.3" y="581" width="8.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1090.28" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="352.6" y="357" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="355.64" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (3 samples, 0.06%; +0.02%)</title><rect x="64.5" y="485" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.48" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%; -0.04%)</title><rect x="370.2" y="357" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="373.20" y="367.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (13 samples, 0.24%; -0.09%)</title><rect x="1176.4" y="789" width="2.9" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="1179.44" y="799.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="984.3" y="405" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="987.33" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="683.7" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.71" y="623.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%; 0.00%)</title><rect x="696.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.17" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="86.0" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.04" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="59.4" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.36" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (3 samples, 0.06%; -0.04%)</title><rect x="194.3" y="437" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="197.33" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="321.3" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="324.29" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (5 samples, 0.09%; -0.06%)</title><rect x="801.3" y="309" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="804.34" y="319.5" ></text>
</g>
<g >
<title>dht::tri_compare (11 samples, 0.21%; -0.06%)</title><rect x="1060.6" y="405" width="2.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1063.59" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; -0.04%)</title><rect x="1117.7" y="373" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1120.74" y="383.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; -0.02%)</title><rect x="755.5" y="437" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="758.53" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="1115.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.51" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="59.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.14" y="415.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.63" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="80.9" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.93" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="281.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.49" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.26%; -0.08%)</title><rect x="726.0" y="645" width="3.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="728.96" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (42 samples, 0.79%; 0.00%)</title><rect x="894.5" y="517" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.50" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="59.6" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.58" y="383.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (2 samples, 0.04%; +0.04%)</title><rect x="139.9" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="142.85" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="559.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%; +0.02%)</title><rect x="121.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="124.17" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="808.9" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.90" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.92" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (3 samples, 0.06%; +0.02%)</title><rect x="293.0" y="421" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="296.05" y="431.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="504.9" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="507.95" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1013.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.90" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="65.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.59" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="682.4" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.38" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (112 samples, 2.11%; +0.02%)</title><rect x="653.3" y="677" width="24.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.25" y="687.5" >s..</text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%; +0.02%)</title><rect x="609.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.89" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="607.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="618.1" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="621.12" y="591.5" ></text>
</g>
<g >
<title>sstables::sstable::component_basename (1 samples, 0.02%; 0.00%)</title><rect x="696.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.17" y="639.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%; +0.04%)</title><rect x="707.5" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="710.51" y="655.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (12 samples, 0.23%; +0.08%)</title><rect x="34.2" y="437" width="2.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="37.24" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1015.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1018.90" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%; 0.00%)</title><rect x="139.0" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.96" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="65.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.36" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="45.8" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="447.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="578.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="581.32" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="452.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.03" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (2 samples, 0.04%; 0.00%)</title><rect x="56.7" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.69" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="623.7" y="613" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.68" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="1113.1" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1116.07" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="1144.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.20" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.67" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_function_statement*, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.81" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (2 samples, 0.04%; 0.00%)</title><rect x="158.5" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="161.53" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="56.5" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.47" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="30.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.23" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; +0.02%)</title><rect x="296.4" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="299.38" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (2 samples, 0.04%; +0.04%)</title><rect x="274.8" y="341" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="277.82" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (8 samples, 0.15%; +0.13%)</title><rect x="600.8" y="597" width="1.8" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="603.78" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.04%)</title><rect x="159.6" y="549" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="162.64" y="559.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.04" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="28.5" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.45" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1029.0" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1032.02" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.58" y="367.5" ></text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%; 0.00%)</title><rect x="1119.1" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.07" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="858.0" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.03" y="623.5" ></text>
</g>
<g >
<title>auth::operator== (1 samples, 0.02%; 0.00%)</title><rect x="799.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.78" y="335.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.13" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::merge_partition_versions (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="433.1" y="373" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="436.13" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (12 samples, 0.23%; 0.00%)</title><rect x="129.6" y="629" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.62" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; 0.00%)</title><rect x="672.2" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.15" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="857.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="860.59" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.93" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="421.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="424.12" y="383.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (220 samples, 4.15%; 0.00%)</title><rect x="982.3" y="517" width="48.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.33" y="527.5" >serv..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (17 samples, 0.32%; 0.00%)</title><rect x="840.5" y="581" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.47" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.35" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1118.6" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.63" y="399.5" ></text>
</g>
<g >
<title>column_mapping::regular_column_at (1 samples, 0.02%; +0.02%)</title><rect x="1115.1" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.07" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (24 samples, 0.45%; +0.04%)</title><rect x="272.1" y="405" width="5.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="275.15" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.06%)</title><rect x="776.4" y="517" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="779.43" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (1 samples, 0.02%; +0.02%)</title><rect x="631.0" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.02" y="591.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::index_impl (1 samples, 0.02%; +0.02%)</title><rect x="33.6" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="36.57" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (106 samples, 2.00%; +0.04%)</title><rect x="788.4" y="469" width="23.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="791.44" y="479.5" >s..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="79.8" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.82" y="319.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (35 samples, 0.66%; 0.00%)</title><rect x="733.3" y="597" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.30" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="448.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="451.47" y="543.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="292.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="295.83" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="774.4" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="777.43" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.24%; 0.00%)</title><rect x="27.8" y="469" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.79" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="143.0" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="145.96" y="639.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="426.7" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="429.68" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="693" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (13 samples, 0.24%; 0.00%)</title><rect x="840.9" y="565" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.91" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="303.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="965.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="967.98" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="370.4" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="373.43" y="367.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (16 samples, 0.30%; -0.02%)</title><rect x="500.7" y="405" width="3.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="503.72" y="415.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="42.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.69" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="822.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.90" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.04%)</title><rect x="858.7" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="861.70" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.08%; 0.00%)</title><rect x="663.5" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.48" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.06%)</title><rect x="1139.5" y="629" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1142.53" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="195.7" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="198.66" y="447.5" ></text>
</g>
<g >
<title>std::map&lt;unsigned int, unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="39.6" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.57" y="511.5" ></text>
</g>
<g >
<title>__start_context (3 samples, 0.06%; 0.00%)</title><rect x="86.9" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.93" y="767.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, seastar::future&lt;void&gt;, false&gt;::_Head_base&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="10.2" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.22" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.09%; -0.09%)</title><rect x="897.2" y="469" width="1.1" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="900.17" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (5 samples, 0.09%; -0.02%)</title><rect x="773.5" y="533" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="776.54" y="543.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (13 samples, 0.24%; +0.06%)</title><rect x="919.2" y="517" width="2.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="922.18" y="527.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1116.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (11 samples, 0.21%; +0.06%)</title><rect x="983.2" y="485" width="2.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="986.22" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="30.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.90" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::select_statement*, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="70.5" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.48" y="495.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (3 samples, 0.06%; +0.06%)</title><rect x="736.2" y="485" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="739.19" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="1128.9" y="245" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1131.85" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (5 samples, 0.09%; 0.00%)</title><rect x="159.6" y="581" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.64" y="591.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%; -0.02%)</title><rect x="340.9" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="343.85" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (24 samples, 0.45%; -0.04%)</title><rect x="628.6" y="613" width="5.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="631.57" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.04%)</title><rect x="536.5" y="469" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="539.52" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="159.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="162.42" y="591.5" ></text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (6 samples, 0.11%; 0.00%)</title><rect x="801.1" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.11" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; -0.06%)</title><rect x="398.7" y="373" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="401.66" y="383.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.09%; -0.02%)</title><rect x="688.2" y="629" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="691.16" y="639.5" ></text>
</g>
<g >
<title>query::result_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="960.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="963.76" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="501.4" y="373" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="504.39" y="383.5" ></text>
</g>
<g >
<title>sstables::seal_statistics (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="639.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="330.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.85" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (2 samples, 0.04%; 0.00%)</title><rect x="62.5" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.47" y="511.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="819.1" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.12" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="156.7" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="159.75" y="607.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="518.3" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="521.29" y="447.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="1077.5" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1080.49" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="607.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (10 samples, 0.19%; 0.00%)</title><rect x="923.6" y="549" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="926.63" y="559.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%; -0.02%)</title><rect x="713.7" y="597" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="716.73" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="959.6" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.65" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="868.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.04" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (5 samples, 0.09%; 0.00%)</title><rect x="265.3" y="341" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.26" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; -0.02%)</title><rect x="57.4" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="60.36" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (2 samples, 0.04%; 0.00%)</title><rect x="1131.3" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.30" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (2 samples, 0.04%; 0.00%)</title><rect x="24.0" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.01" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (4 samples, 0.08%; +0.08%)</title><rect x="130.3" y="597" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="133.29" y="607.5" ></text>
</g>
<g >
<title>seastar::file_data_sink_impl::do_put (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="871.2" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.15" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="951.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="954.20" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.63" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.36" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%; 0.00%)</title><rect x="785.1" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.10" y="479.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="783.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;database, false&gt;::make&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (530 samples, 9.99%; -0.02%)</title><rect x="328.4" y="517" width="117.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="331.40" y="527.5" >seastar::futur..</text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (10 samples, 0.19%; 0.00%)</title><rect x="782.0" y="501" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.99" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="606.8" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="609.78" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_impl::_Deque_impl (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%; +0.04%)</title><rect x="1101.3" y="597" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1104.28" y="607.5" ></text>
</g>
<g >
<title>database::has_keyspace (20 samples, 0.38%; 0.00%)</title><rect x="840.2" y="597" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.25" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="467.6" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="470.59" y="463.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%; +0.04%)</title><rect x="549.0" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="551.97" y="479.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="787.6" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.55" y="463.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="639.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="913.2" y="533" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="916.18" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (5 samples, 0.09%; 0.00%)</title><rect x="1168.4" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.43" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (2 samples, 0.04%; +0.02%)</title><rect x="144.5" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="147.52" y="639.5" ></text>
</g>
<g >
<title>dht::shard_of (6 samples, 0.11%; +0.02%)</title><rect x="989.9" y="453" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="992.89" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="906.7" y="501" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="909.73" y="511.5" ></text>
</g>
<g >
<title>difference&lt;std::map, utils::UUID, schema_mutations, std::equal_to&lt;schema_mutations&gt;, std::less&lt;utils::UUID&gt;, std::allocator&lt;std::pair&lt;utils::UUID const, schema_mutations&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="639.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="623.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (12 samples, 0.23%; 0.00%)</title><rect x="790.0" y="437" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.00" y="447.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.86" y="687.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="39.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.79" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (4 samples, 0.08%; +0.08%)</title><rect x="1006.3" y="357" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1009.34" y="367.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; 0.00%)</title><rect x="20.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="703.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="322.8" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="325.84" y="575.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (6 samples, 0.11%; -0.11%)</title><rect x="614.6" y="565" width="1.3" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="617.56" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (217 samples, 4.09%; -0.08%)</title><rect x="983.0" y="501" width="48.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="985.99" y="511.5" >serv..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (8 samples, 0.15%; 0.00%)</title><rect x="676.2" y="645" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.15" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="635.7" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="638.69" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (3 samples, 0.06%; +0.02%)</title><rect x="661.3" y="549" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="664.26" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="552.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.08" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::read_table_mutations (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.61" y="671.5" ></text>
</g>
<g >
<title>seastar::execution_stage::~execution_stage (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="751.5" ></text>
</g>
<g >
<title>utils::array_search_gt (1 samples, 0.02%; 0.00%)</title><rect x="494.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.50" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.15" y="511.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%; +0.02%)</title><rect x="13.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="16.11" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.06%)</title><rect x="793.8" y="357" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="796.78" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="450.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="453.47" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%; +0.02%)</title><rect x="64.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.92" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (687 samples, 12.95%; +0.02%)</title><rect x="169.4" y="565" width="152.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="172.42" y="575.5" >merging_reader&lt;muta..</text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="903.2" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.17" y="495.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%; 0.00%)</title><rect x="1009.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.45" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.06%)</title><rect x="195.2" y="437" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="198.22" y="447.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (2 samples, 0.04%; 0.00%)</title><rect x="24.0" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.01" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.02%)</title><rect x="556.1" y="581" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.09" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="452.7" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.69" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="321.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="324.06" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.06%)</title><rect x="856.0" y="517" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="859.03" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="858.9" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="861.92" y="639.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%; 0.00%)</title><rect x="829.4" y="533" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.35" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="570.8" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="573.76" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="1026.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.57" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1040.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1043.36" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="822.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.24" y="543.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::truncate (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="776.0" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="778.99" y="511.5" ></text>
</g>
<g >
<title>db::system_keyspace::load_tokens (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="591.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="811.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.56" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.02%)</title><rect x="556.3" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="559.31" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="651.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.92" y="671.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; -0.06%)</title><rect x="932.1" y="581" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="935.08" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="437.6" y="405" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="440.57" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="428.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="431.46" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="264.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.14" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; 0.00%)</title><rect x="712.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.84" y="623.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="63.6" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.59" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1128.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.85" y="239.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (4 samples, 0.08%; +0.06%)</title><rect x="426.9" y="421" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="429.90" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;, std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt;, std::_Select1st&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt;, std::less&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt; const, seastar::shared_ptr&lt;seastar::metrics::impl::registered_metric&gt; &gt; &gt; &gt;::erase[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="655.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (3 samples, 0.06%; +0.04%)</title><rect x="999.4" y="421" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1002.45" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="355.1" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="358.08" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (3 samples, 0.06%; 0.00%)</title><rect x="620.6" y="613" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.57" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.92" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%; +0.06%)</title><rect x="317.5" y="453" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="320.51" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="511.2" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.17" y="495.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="555.6" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.64" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="263.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.92" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%; +0.02%)</title><rect x="65.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.36" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="960.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="963.31" y="559.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (9 samples, 0.17%; +0.02%)</title><rect x="328.6" y="485" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="331.62" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="597.0" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="600.00" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%; 0.00%)</title><rect x="52.5" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="479.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.2" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.25" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.70" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (631 samples, 11.89%; -0.11%)</title><rect x="943.4" y="597" width="140.3" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="946.42" y="607.5" >cql3::statements:..</text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="603.0" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="606.00" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="302.2" y="453" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="305.17" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%; +0.02%)</title><rect x="88.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.27" y="703.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (12 samples, 0.23%; +0.02%)</title><rect x="74.0" y="597" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.04" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="905.0" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="907.95" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (44 samples, 0.83%; 0.00%)</title><rect x="283.3" y="421" width="9.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="286.27" y="431.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; -0.02%)</title><rect x="1041.2" y="437" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1044.25" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; +0.02%)</title><rect x="264.8" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="267.81" y="367.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (6 samples, 0.11%; -0.06%)</title><rect x="416.0" y="325" width="1.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="419.01" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.15%; +0.02%)</title><rect x="418.5" y="341" width="1.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="421.45" y="351.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%; +0.02%)</title><rect x="894.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="897.50" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="872.9" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.93" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%; +0.02%)</title><rect x="637.9" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.91" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1011.0" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.01" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="46.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.47" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="850.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.03" y="527.5" ></text>
</g>
<g >
<title>timerfd_settime (1 samples, 0.02%; 0.00%)</title><rect x="1169.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.32" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="707.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="710.06" y="655.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="667.0" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.04" y="639.5" ></text>
</g>
<g >
<title>auth::resource::resource (7 samples, 0.13%; 0.00%)</title><rect x="775.1" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.10" y="559.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (3 samples, 0.06%; +0.06%)</title><rect x="290.2" y="389" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="293.16" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (19 samples, 0.36%; +0.02%)</title><rect x="266.4" y="341" width="4.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="269.37" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (4 samples, 0.08%; 0.00%)</title><rect x="870.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.26" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="554.1" y="485" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="557.09" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (12 samples, 0.23%; -0.04%)</title><rect x="736.2" y="501" width="2.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="739.19" y="511.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (2 samples, 0.04%; +0.04%)</title><rect x="398.0" y="389" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="401.00" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="75.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="78.81" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::~BaseRecognizer (2 samples, 0.04%; +0.02%)</title><rect x="25.8" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.79" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (6 samples, 0.11%; +0.02%)</title><rect x="661.0" y="565" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="664.03" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (3 samples, 0.06%; -0.04%)</title><rect x="1112.8" y="597" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1115.85" y="607.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (26 samples, 0.49%; +0.09%)</title><rect x="1057.3" y="421" width="5.7" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1060.26" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="281.3" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="284.26" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.02%)</title><rect x="51.6" y="325" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.58" y="335.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="703.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="45.8" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.80" y="335.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (282 samples, 5.31%; +0.04%)</title><rect x="769.3" y="581" width="62.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="772.32" y="591.5" >servic..</text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="296.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.16" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (2 samples, 0.04%; +0.04%)</title><rect x="942.1" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="945.08" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="939.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.19" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.43" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="554.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.09" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (20 samples, 0.38%; 0.00%)</title><rect x="868.9" y="597" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.93" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (8 samples, 0.15%; +0.11%)</title><rect x="703.1" y="613" width="1.7" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="706.06" y="623.5" ></text>
</g>
<g >
<title>seastar::aio_storage_context::reap_completions (1 samples, 0.02%; +0.02%)</title><rect x="1167.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.77" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;data_value const*, std::vector&lt;data_value, std::allocator&lt;data_value&gt; &gt; &gt;, data_value*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="80.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.48" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%; 0.00%)</title><rect x="790.4" y="421" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.44" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="840.2" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="843.25" y="591.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="66.3" y="533" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.25" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (3 samples, 0.06%; 0.00%)</title><rect x="749.8" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="752.75" y="511.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (3 samples, 0.06%; -0.06%)</title><rect x="366.2" y="341" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="369.20" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="908.1" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="911.06" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1123.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.52" y="431.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (11 samples, 0.21%; -0.02%)</title><rect x="424.5" y="421" width="2.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="427.46" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="55.4" y="293" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.36" y="303.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="440.5" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="443.47" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.04%)</title><rect x="921.6" y="501" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="924.63" y="511.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.93" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%; +0.02%)</title><rect x="422.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="425.90" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (6 samples, 0.11%; +0.02%)</title><rect x="57.6" y="453" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.58" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="637.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.47" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (34 samples, 0.64%; 0.00%)</title><rect x="575.4" y="501" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.43" y="511.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (273 samples, 5.14%; -0.02%)</title><rect x="481.6" y="517" width="60.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="484.60" y="527.5" >memtab..</text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="1124.4" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.41" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.15%; +0.02%)</title><rect x="821.3" y="565" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.35" y="575.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; 0.00%)</title><rect x="617.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.90" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="566.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="569.31" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="784.4" y="485" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="787.44" y="495.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="1144.6" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1147.64" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::drop_keyspace_statement*, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="69.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.37" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (43 samples, 0.81%; 0.00%)</title><rect x="894.3" y="533" width="9.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.28" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (88 samples, 1.66%; -0.04%)</title><rect x="1053.9" y="517" width="19.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1056.92" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="52.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.69" y="319.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.09%; 0.00%)</title><rect x="112.1" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="848.0" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="851.03" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;frozen_schema  (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="559.5" ></text>
</g>
<g >
<title>db::get_cdc_streams_descriptions_v2_mutation (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="273.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="276.93" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (5 samples, 0.09%; 0.00%)</title><rect x="48.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (11 samples, 0.21%; -0.04%)</title><rect x="645.0" y="661" width="2.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="648.03" y="671.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; -0.06%)</title><rect x="327.3" y="549" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="330.29" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="383.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; -0.02%)</title><rect x="79.2" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="82.15" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; +0.02%)</title><rect x="1011.2" y="341" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.23" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (14 samples, 0.26%; +0.02%)</title><rect x="630.6" y="597" width="3.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="633.57" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (18 samples, 0.34%; +0.08%)</title><rect x="259.0" y="293" width="4.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="262.03" y="303.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="291.7" y="357" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="294.71" y="367.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="11.3" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.33" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%; +0.02%)</title><rect x="475.2" y="469" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="478.15" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; -0.02%)</title><rect x="685.0" y="613" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="688.05" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="350.6" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="353.64" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="202.6" y="421" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="205.55" y="431.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (3 samples, 0.06%; +0.06%)</title><rect x="625.5" y="613" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="628.46" y="623.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; -0.02%)</title><rect x="733.1" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="736.08" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.25" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="696.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.39" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mT__203 (1 samples, 0.02%; +0.02%)</title><rect x="38.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.46" y="463.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (20 samples, 0.38%; +0.11%)</title><rect x="917.6" y="533" width="4.5" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="920.62" y="543.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (42 samples, 0.79%; 0.00%)</title><rect x="1121.5" y="661" width="9.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.52" y="671.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="948.8" y="581" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="951.75" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.08%)</title><rect x="966.1" y="501" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="969.10" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="960.5" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="963.54" y="559.5" ></text>
</g>
<g >
<title>ser::column__c__variant&lt;bytes_ostream&gt;::start_variant_live_cell (1 samples, 0.02%; +0.02%)</title><rect x="1127.7" y="277" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.74" y="287.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="773" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="783.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (2 samples, 0.04%; +0.04%)</title><rect x="616.1" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="619.12" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.36" y="303.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (66 samples, 1.24%; +0.04%)</title><rect x="1055.3" y="485" width="14.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1058.26" y="495.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (2 samples, 0.04%; 0.00%)</title><rect x="73.6" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.59" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="575.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="190.5" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="193.55" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="575.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (2 samples, 0.04%; +0.04%)</title><rect x="387.8" y="341" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="390.77" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; +0.02%)</title><rect x="77.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.37" y="591.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="854.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="857.92" y="559.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (17 samples, 0.32%; +0.09%)</title><rect x="752.0" y="549" width="3.8" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="754.97" y="559.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="984.1" y="437" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="987.11" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (8 samples, 0.15%; -0.02%)</title><rect x="660.6" y="597" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="663.59" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (3 samples, 0.06%; +0.04%)</title><rect x="223.7" y="325" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="226.68" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="985.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="988.00" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="670.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.15" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="809.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.34" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="598.8" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="601.78" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="938.7" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.75" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (10 samples, 0.19%; +0.04%)</title><rect x="469.1" y="437" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="472.15" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.09%; 0.00%)</title><rect x="1035.7" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.69" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%; +0.06%)</title><rect x="421.6" y="405" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="424.57" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (616 samples, 11.61%; +0.02%)</title><rect x="173.4" y="533" width="137.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="176.43" y="543.5" >mutation_fragment..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="68.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.26" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="665.9" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.93" y="623.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_stream (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="655.5" ></text>
</g>
<g >
<title>std::partition_copy&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::back_insert_iterator&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::binder1st&lt;std::_Mem_fn&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1129.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.74" y="383.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (8 samples, 0.15%; +0.08%)</title><rect x="862.9" y="629" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="865.93" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="628.1" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="631.13" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (6 samples, 0.11%; +0.04%)</title><rect x="749.3" y="549" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="752.31" y="559.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (4 samples, 0.08%; 0.00%)</title><rect x="1115.7" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.74" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="449.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="452.14" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.02%)</title><rect x="641.9" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="644.91" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (5 samples, 0.09%; +0.04%)</title><rect x="667.9" y="629" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="670.93" y="639.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (7 samples, 0.13%; -0.02%)</title><rect x="35.3" y="421" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="38.35" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (9 samples, 0.17%; 0.00%)</title><rect x="285.5" y="373" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.49" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%; -0.02%)</title><rect x="1117.5" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1120.51" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; -0.06%)</title><rect x="753.3" y="501" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="756.31" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%; +0.02%)</title><rect x="609.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.23" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (4 samples, 0.08%; +0.06%)</title><rect x="535.2" y="453" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="538.19" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="131.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.40" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; +0.02%)</title><rect x="30.7" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="33.68" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.37" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="456.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="459.70" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_table_statement::raw_statement*, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.92" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="709.7" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="712.73" y="655.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (3 samples, 0.06%; +0.06%)</title><rect x="724.6" y="661" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="727.63" y="671.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (1 samples, 0.02%; -0.04%)</title><rect x="104.5" y="597" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="107.50" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="605.4" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="608.45" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="12.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="15.00" y="495.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="547.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="549.97" y="495.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; 0.00%)</title><rect x="46.7" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.69" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="559.5" ></text>
</g>
<g >
<title>database::has_keyspace (9 samples, 0.17%; +0.04%)</title><rect x="848.5" y="581" width="2.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="851.47" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::new_allocator (1 samples, 0.02%; +0.02%)</title><rect x="25.3" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.34" y="431.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (1 samples, 0.02%; -0.11%)</title><rect x="104.5" y="581" width="0.2" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="107.50" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="30.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="33.90" y="415.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; 0.00%)</title><rect x="719.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.29" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.09%; -0.02%)</title><rect x="836.5" y="581" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="839.47" y="591.5" ></text>
</g>
<g >
<title>query::result::builder::build (11 samples, 0.21%; +0.02%)</title><rect x="607.2" y="613" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="610.23" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="591.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (6 samples, 0.11%; -0.06%)</title><rect x="339.7" y="405" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="342.74" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.38" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="544.7" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="547.75" y="511.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (23 samples, 0.43%; 0.00%)</title><rect x="733.7" y="565" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.74" y="575.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="383.8" y="325" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="386.77" y="335.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (7 samples, 0.13%; -0.02%)</title><rect x="447.8" y="549" width="1.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="450.80" y="559.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (5 samples, 0.09%; 0.00%)</title><rect x="1143.3" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.31" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="867.4" y="661" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.37" y="671.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.04%)</title><rect x="649.7" y="661" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="652.69" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="353.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="356.08" y="367.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="687.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.49" y="655.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (33 samples, 0.62%; 0.00%)</title><rect x="496.9" y="453" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="499.94" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (9 samples, 0.17%; +0.02%)</title><rect x="753.8" y="485" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.75" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (375 samples, 7.07%; +0.04%)</title><rect x="341.1" y="421" width="83.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="344.08" y="431.5" >flat_muta..</text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::_M_create_storage (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.37" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%; 0.00%)</title><rect x="759.5" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.53" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="518.1" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.06" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="667.3" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.26" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (198 samples, 3.73%; +0.06%)</title><rect x="1031.7" y="533" width="44.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1034.69" y="543.5" >serv..</text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (2 samples, 0.04%; 0.00%)</title><rect x="83.2" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.15" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.08%)</title><rect x="834.7" y="581" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="837.69" y="591.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="21.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::comparator_type (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="495.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.83%; 0.00%)</title><rect x="1179.5" y="805" width="9.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.55" y="815.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (3 samples, 0.06%; 0.00%)</title><rect x="800.2" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.22" y="319.5" ></text>
</g>
<g >
<title>__strlen_avx2 (4 samples, 0.08%; -0.06%)</title><rect x="997.4" y="421" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1000.45" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (6 samples, 0.11%; +0.02%)</title><rect x="42.5" y="533" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.46" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1088.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1091.83" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="20.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.45" y="527.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (2 samples, 0.04%; +0.02%)</title><rect x="276.4" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="279.37" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="449.1" y="501" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="452.14" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; +0.02%)</title><rect x="188.3" y="421" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="191.32" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (5 samples, 0.09%; 0.00%)</title><rect x="871.6" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.60" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.62" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="78.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.71" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="68.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.48" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="210.3" y="341" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="213.34" y="351.5" ></text>
</g>
<g >
<title>memtable::memtable (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%; -0.02%)</title><rect x="443.8" y="469" width="2.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="446.80" y="479.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (1 samples, 0.02%; 0.00%)</title><rect x="24.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.67" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1007.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1010.45" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="440.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="443.02" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="527.4" y="357" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="530.40" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (9 samples, 0.17%; -0.02%)</title><rect x="731.3" y="597" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="734.30" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (3 samples, 0.06%; +0.02%)</title><rect x="471.8" y="437" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="474.82" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_role_statement, std::default_delete&lt;cql3::statements::grant_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::grant_role_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="71.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.81" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (7 samples, 0.13%; 0.00%)</title><rect x="1040.1" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1043.14" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%; +0.02%)</title><rect x="1017.7" y="373" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1020.68" y="383.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%; +0.02%)</title><rect x="1043.3" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1046.25" y="527.5" ></text>
</g>
<g >
<title>sstables::sstable_directory::retrieve_shared_sstables (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="559.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (3 samples, 0.06%; +0.02%)</title><rect x="991.2" y="453" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="994.22" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="903.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.39" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.25" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="562.1" y="517" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="565.09" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (5 samples, 0.09%; +0.04%)</title><rect x="140.7" y="629" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="143.74" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="170.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="173.31" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="1117.3" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.29" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="595.2" y="501" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="598.22" y="511.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1071.3" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1074.27" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (293 samples, 5.52%; 0.00%)</title><rect x="20.7" y="741" width="65.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="751.5" >std::_F..</text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="444.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="447.02" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="303.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="839.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="842.58" y="623.5" ></text>
</g>
<g >
<title>database::apply (2 samples, 0.04%; +0.02%)</title><rect x="1124.9" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1127.85" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (572 samples, 10.78%; +0.04%)</title><rect x="176.3" y="501" width="127.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="179.32" y="511.5" >mutation_reader..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%; -0.02%)</title><rect x="585.4" y="533" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="588.44" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="330.6" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="333.63" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; 0.00%)</title><rect x="820.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.24" y="447.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="1116.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.63" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1041.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1044.69" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.02%)</title><rect x="727.5" y="565" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="730.52" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="948.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="951.09" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (2 samples, 0.04%; +0.02%)</title><rect x="185.0" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="187.99" y="463.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (31 samples, 0.58%; -0.02%)</title><rect x="1056.1" y="437" width="6.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1059.15" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (4 samples, 0.08%; 0.00%)</title><rect x="52.9" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (83 samples, 1.56%; +0.11%)</title><rect x="515.8" y="453" width="18.5" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="518.84" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="539.2" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="542.19" y="463.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (452 samples, 8.52%; 0.00%)</title><rect x="454.5" y="565" width="100.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="457.47" y="575.5" >std::functio..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%; +0.02%)</title><rect x="909.0" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="911.95" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (5 samples, 0.09%; -0.04%)</title><rect x="721.1" y="677" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="724.07" y="687.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (14 samples, 0.26%; 0.00%)</title><rect x="20.9" y="693" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.90" y="703.5" ></text>
</g>
<g >
<title>sstables::sstable::create_data (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; +0.04%)</title><rect x="998.6" y="389" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1001.56" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="720.2" y="661" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="723.18" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="70.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.70" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="303.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="306.05" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%; -0.04%)</title><rect x="550.3" y="453" width="2.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="553.31" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (1 samples, 0.02%; +0.02%)</title><rect x="868.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.26" y="639.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.23%; +0.17%)</title><rect x="593.0" y="517" width="2.7" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="596.00" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; -0.02%)</title><rect x="715.3" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="718.29" y="591.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (9 samples, 0.17%; +0.02%)</title><rect x="278.8" y="405" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="281.82" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::stats (1 samples, 0.02%; 0.00%)</title><rect x="541.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.19" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (2 samples, 0.04%; +0.04%)</title><rect x="511.4" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="514.39" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (3 samples, 0.06%; +0.02%)</title><rect x="367.1" y="357" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="370.09" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%; 0.00%)</title><rect x="960.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="963.76" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="597" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="400.0" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="403.00" y="335.5" ></text>
</g>
<g >
<title>query::digester::digester (4 samples, 0.08%; -0.06%)</title><rect x="612.3" y="581" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="615.34" y="591.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (1 samples, 0.02%; +0.02%)</title><rect x="609.4" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.45" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1026.1" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1029.13" y="463.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (2 samples, 0.04%; 0.00%)</title><rect x="1167.1" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.10" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="624.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="627.35" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="199.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="202.00" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="633.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="636.46" y="575.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.09%; +0.02%)</title><rect x="558.8" y="533" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="561.75" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (189 samples, 3.56%; +0.04%)</title><rect x="222.8" y="357" width="42.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="225.79" y="367.5" >mut..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="45.8" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.75%; 0.00%)</title><rect x="1122.0" y="597" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.96" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (58 samples, 1.09%; 0.00%)</title><rect x="27.1" y="517" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.12" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (7 samples, 0.13%; +0.04%)</title><rect x="1124.0" y="437" width="1.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1126.96" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="1167.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.32" y="623.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%; 0.00%)</title><rect x="696.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.17" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="383.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="199.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.44" y="431.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (586 samples, 11.04%; -0.04%)</title><rect x="729.1" y="645" width="130.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="732.07" y="655.5" >single_node_cql_..</text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="836.9" y="533" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="839.91" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.09%; 0.00%)</title><rect x="103.6" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="106.61" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="659.7" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.70" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="424.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="427.23" y="415.5" ></text>
</g>
<g >
<title>compact (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="607.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%; -0.02%)</title><rect x="195.0" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="197.99" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="575.0" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="577.99" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="143.6" y="629" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="146.63" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.02" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="88.7" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="91.71" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%; 0.00%)</title><rect x="19.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="735.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%; 0.00%)</title><rect x="79.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.15" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.37" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (2 samples, 0.04%; +0.04%)</title><rect x="621.2" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="624.23" y="623.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (30 samples, 0.57%; -0.04%)</title><rect x="600.6" y="613" width="6.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="603.56" y="623.5" ></text>
</g>
<g >
<title>sstables::write&lt;unsigned int, unsigned char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; +0.02%)</title><rect x="29.8" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.79" y="399.5" ></text>
</g>
<g >
<title>__vfprintf_internal (2 samples, 0.04%; 0.00%)</title><rect x="85.8" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.82" y="799.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (5 samples, 0.09%; -0.02%)</title><rect x="37.1" y="437" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="40.13" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="595.7" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="598.66" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (78 samples, 1.47%; +0.02%)</title><rect x="1054.1" y="501" width="17.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1057.15" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.02" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="948.5" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="951.53" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="52.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.69" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (11 samples, 0.21%; +0.02%)</title><rect x="1123.1" y="453" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.07" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="133" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="143.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (3 samples, 0.06%; 0.00%)</title><rect x="624.3" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="627.35" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%; 0.00%)</title><rect x="960.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="963.76" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (7 samples, 0.13%; 0.00%)</title><rect x="83.6" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.60" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="973.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.66" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; 0.00%)</title><rect x="750.9" y="549" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.86" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="580.1" y="453" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="583.10" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="559.9" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="562.87" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::reset (1 samples, 0.02%; -0.02%)</title><rect x="615.9" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="618.90" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (2 samples, 0.04%; +0.04%)</title><rect x="532.1" y="421" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="535.07" y="431.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (5 samples, 0.09%; 0.00%)</title><rect x="500.9" y="389" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.94" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.07" y="319.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (26 samples, 0.49%; 0.00%)</title><rect x="1115.1" y="501" width="5.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="511.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; 0.00%)</title><rect x="1148.0" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.98" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; 0.00%)</title><rect x="286.8" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="289.82" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1009.7" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.68" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.04%)</title><rect x="578.5" y="469" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="581.54" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::forward_to (1 samples, 0.02%; 0.00%)</title><rect x="720.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.85" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="933.9" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="936.86" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="30.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.46" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; +0.02%)</title><rect x="576.1" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.10" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1128.6" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.63" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (7 samples, 0.13%; 0.00%)</title><rect x="11.1" y="581" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="305.9" y="501" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="308.94" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (25 samples, 0.47%; -0.02%)</title><rect x="699.7" y="661" width="5.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="702.72" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (136 samples, 2.56%; +0.02%)</title><rect x="994.8" y="453" width="30.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="997.78" y="463.5" >se..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%; +0.02%)</title><rect x="80.3" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.26" y="463.5" ></text>
</g>
<g >
<title>service::client_state::validate_login (1 samples, 0.02%; +0.02%)</title><rect x="817.6" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.57" y="543.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.71" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (11 samples, 0.21%; +0.02%)</title><rect x="706.2" y="661" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="709.17" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%; -0.02%)</title><rect x="700.4" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="703.39" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="795.1" y="309" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="798.11" y="319.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="517.6" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="520.62" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1167.5" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.54" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="811.1" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="814.12" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="949.9" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.86" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="902.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="905.95" y="495.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (21 samples, 0.40%; -0.08%)</title><rect x="896.7" y="485" width="4.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="899.72" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.11%; +0.02%)</title><rect x="731.7" y="565" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="734.74" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (277 samples, 5.22%; 0.00%)</title><rect x="24.0" y="693" width="61.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.01" y="703.5" >single..</text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; -0.06%)</title><rect x="319.7" y="469" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="322.73" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="527.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; +0.02%)</title><rect x="909.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="912.62" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (58 samples, 1.09%; +0.02%)</title><rect x="570.3" y="549" width="12.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="573.32" y="559.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="870.3" y="517" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.26" y="527.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="648.1" y="661" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="651.14" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="338.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="340.96" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; +0.04%)</title><rect x="1166.7" y="677" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1169.65" y="687.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (170 samples, 3.20%; -0.08%)</title><rect x="779.8" y="533" width="37.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="782.77" y="543.5" >ser..</text>
</g>
<g >
<title>mutation_source::mutation_source (6 samples, 0.11%; 0.00%)</title><rect x="637.2" y="597" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.24" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.77%; +0.02%)</title><rect x="1121.7" y="629" width="9.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.74" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="686.2" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="689.16" y="671.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; -0.02%)</title><rect x="103.6" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="106.61" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; +0.02%)</title><rect x="553.6" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.64" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.92" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="792.2" y="389" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="795.22" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (3 samples, 0.06%; -0.04%)</title><rect x="785.3" y="453" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="788.33" y="463.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="511.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; 0.00%)</title><rect x="264.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.14" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (1 samples, 0.02%; -0.02%)</title><rect x="480.0" y="501" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="483.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="904.7" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.73" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (228 samples, 4.30%; +0.04%)</title><rect x="221.0" y="373" width="50.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="224.01" y="383.5" >parti..</text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1011.5" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.45" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (4 samples, 0.08%; +0.06%)</title><rect x="120.3" y="645" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="123.28" y="655.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (12 samples, 0.23%; -0.02%)</title><rect x="854.7" y="581" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="857.70" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (530 samples, 9.99%; -0.04%)</title><rect x="328.4" y="501" width="117.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="331.40" y="511.5" >seastar::inter..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="64.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.25" y="495.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="856.0" y="533" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.03" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (11 samples, 0.21%; 0.00%)</title><rect x="44.7" y="517" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.69" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="784.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="786.99" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="837.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="840.36" y="575.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="207.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="104.9" y="629" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="107.94" y="639.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (2 samples, 0.04%; +0.02%)</title><rect x="909.2" y="549" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="912.17" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="551.6" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="554.64" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="415.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (4 samples, 0.08%; +0.04%)</title><rect x="908.3" y="533" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="911.29" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;partition_version&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.29" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; -0.02%)</title><rect x="322.2" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="325.18" y="559.5" ></text>
</g>
<g >
<title>ser::serialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1128.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.41" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (34 samples, 0.64%; -0.02%)</title><rect x="313.3" y="501" width="7.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="316.28" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="1017.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.90" y="367.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="67.1" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.14" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="98.9" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.94" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%; +0.02%)</title><rect x="813.6" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.57" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="539.4" y="485" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="542.41" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="351.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::mutate_locally (2 samples, 0.04%; -0.02%)</title><rect x="1124.9" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1127.85" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (4 samples, 0.08%; 0.00%)</title><rect x="504.5" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="507.50" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%; +0.02%)</title><rect x="61.1" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.14" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; 0.00%)</title><rect x="806.4" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.45" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="776.4" y="533" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="779.43" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.02%)</title><rect x="439.1" y="453" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="442.13" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (49 samples, 0.92%; 0.00%)</title><rect x="51.1" y="501" width="10.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.13" y="511.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%; -0.08%)</title><rect x="970.8" y="533" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="973.77" y="543.5" ></text>
</g>
<g >
<title>perf_simple_que (5,306 samples, 99.98%; 0.00%)</title><rect x="10.0" y="821" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="831.5" >perf_simple_que</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%; +0.02%)</title><rect x="800.0" y="325" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="803.00" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="867.4" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.37" y="687.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%; +0.02%)</title><rect x="397.6" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="400.55" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="559.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="1128.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.96" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%; +0.04%)</title><rect x="417.3" y="341" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="420.34" y="351.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%; -0.08%)</title><rect x="759.1" y="549" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="762.09" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="817.3" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.35" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (11 samples, 0.21%; +0.02%)</title><rect x="563.0" y="533" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="565.98" y="543.5" ></text>
</g>
<g >
<title>TLS init function for seastar::testing::local_random_engine (1 samples, 0.02%; +0.02%)</title><rect x="862.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="865.70" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="903.8" y="517" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="906.84" y="527.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="819.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="822.79" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt;, std::allocator&lt;std::optional&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="767.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="1120.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.85" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (1 samples, 0.02%; +0.02%)</title><rect x="561.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="563.98" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%; +0.02%)</title><rect x="663.5" y="597" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.48" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="695.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.05" y="671.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (3 samples, 0.06%; 0.00%)</title><rect x="25.1" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.12" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="399.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; -0.04%)</title><rect x="810.2" y="421" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="813.23" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; -0.04%)</title><rect x="618.6" y="597" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="621.57" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%; -0.02%)</title><rect x="663.5" y="613" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="666.48" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,865 samples, 91.67%; 0.00%)</title><rect x="87.8" y="725" width="1081.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="735.5" >seastar::reactor::run</text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="455.4" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="458.36" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="527.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; +0.04%)</title><rect x="659.9" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="662.92" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (3 samples, 0.06%; 0.00%)</title><rect x="112.1" y="613" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1091.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1094.28" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (6 samples, 0.11%; 0.00%)</title><rect x="52.5" y="485" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.06%)</title><rect x="1048.4" y="469" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1051.36" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (4 samples, 0.08%; 0.00%)</title><rect x="248.6" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="251.58" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="714.4" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="717.40" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_role_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="71.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.37" y="575.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1013.5" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1016.46" y="383.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.70" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1015.2" y="389" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1018.23" y="399.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="676.4" y="613" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.38" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1102.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1105.39" y="607.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; +0.02%)</title><rect x="13.3" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="16.34" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::select_statement*, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.48" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (5 samples, 0.09%; 0.00%)</title><rect x="822.0" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.01" y="559.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (2 samples, 0.04%; +0.04%)</title><rect x="367.3" y="341" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="370.31" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.70" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (5 samples, 0.09%; -0.04%)</title><rect x="1150.6" y="629" width="1.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1153.64" y="639.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.36%; 0.00%)</title><rect x="1126.0" y="453" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.96" y="463.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (3 samples, 0.06%; -0.04%)</title><rect x="749.8" y="485" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="752.75" y="495.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; +0.02%)</title><rect x="1129.7" y="357" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.74" y="367.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.45" y="751.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (18 samples, 0.34%; +0.02%)</title><rect x="712.0" y="629" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="714.95" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="802.9" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="805.89" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; -0.04%)</title><rect x="638.8" y="661" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="641.80" y="671.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="809.3" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.34" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="871.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="447.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="87.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.15" y="687.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,186 samples, 22.35%; 0.00%)</title><rect x="868.3" y="677" width="263.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.26" y="687.5" >seastar::lambda_task&lt;seastar::execu..</text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (584 samples, 11.00%; -0.02%)</title><rect x="322.4" y="581" width="129.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="325.40" y="591.5" >seastar::future&lt;..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="399.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_range_initialize&lt;cql3::expr::expression const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="50.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.91" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="1030.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.35" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="335.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.43" y="687.5" ></text>
</g>
<g >
<title>table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.04%)</title><rect x="1116.6" y="389" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1119.63" y="399.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="87.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.38" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%; 0.00%)</title><rect x="947.0" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.97" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.81" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; +0.02%)</title><rect x="434.0" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="437.02" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="940.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="943.30" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (568 samples, 10.70%; +0.02%)</title><rect x="954.3" y="565" width="126.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="957.31" y="575.5" >service::storag..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (11 samples, 0.21%; 0.00%)</title><rect x="675.5" y="661" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.49" y="671.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="806.4" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.45" y="287.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (6 samples, 0.11%; -0.13%)</title><rect x="16.9" y="757" width="1.3" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="19.89" y="767.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;database&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="607.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="1161.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.76" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (2 samples, 0.04%; +0.02%)</title><rect x="1141.8" y="645" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1144.75" y="655.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="894.9" y="469" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="897.94" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="364.0" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="366.98" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%; 0.00%)</title><rect x="1189.6" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.56" y="815.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (33 samples, 0.62%; +0.04%)</title><rect x="851.6" y="629" width="7.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="854.59" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="1161.1" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1164.09" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (40 samples, 0.75%; -0.04%)</title><rect x="237.0" y="277" width="8.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="240.02" y="287.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%; 0.00%)</title><rect x="870.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.49" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.11%; -0.24%)</title><rect x="244.4" y="213" width="1.3" height="15.0" fill="rgb(39,39,255)" rx="2" ry="2" />
<text  x="247.35" y="223.5" ></text>
</g>
<g >
<title>table::views (1 samples, 0.02%; +0.02%)</title><rect x="1121.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.29" y="527.5" ></text>
</g>
<g >
<title>ser::column_view::c (2 samples, 0.04%; 0.00%)</title><rect x="1118.0" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.96" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; -0.02%)</title><rect x="941.4" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="944.42" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (3 samples, 0.06%; +0.04%)</title><rect x="351.7" y="357" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="354.75" y="367.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; +0.02%)</title><rect x="438.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="441.46" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%; 0.00%)</title><rect x="696.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.39" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="641.2" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.25" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; 0.00%)</title><rect x="585.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="587.99" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="444.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="447.25" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; -0.02%)</title><rect x="938.7" y="549" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="941.75" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%; -0.06%)</title><rect x="322.2" y="565" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="325.18" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.04" y="591.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1091.5" y="533" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1094.50" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="898.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="901.50" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (13 samples, 0.24%; 0.00%)</title><rect x="159.0" y="597" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="161.97" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (28 samples, 0.53%; +0.06%)</title><rect x="762.4" y="581" width="6.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="765.43" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="41.1" y="309" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.13" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="277.9" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="280.93" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="32.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="35.01" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="149" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (5 samples, 0.09%; -0.02%)</title><rect x="1040.6" y="453" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1043.58" y="463.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (15 samples, 0.28%; 0.00%)</title><rect x="925.9" y="565" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.85" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="552.3" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.31" y="447.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (8 samples, 0.15%; 0.00%)</title><rect x="384.9" y="341" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="387.88" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::conjunction::~conjunction (1 samples, 0.02%; +0.02%)</title><rect x="49.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="52.80" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (82 samples, 1.55%; 0.00%)</title><rect x="43.8" y="533" width="18.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.80" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (7 samples, 0.13%; 0.00%)</title><rect x="11.1" y="597" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="1080.8" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1083.83" y="575.5" ></text>
</g>
<g >
<title>query::result::builder::build (1 samples, 0.02%; +0.02%)</title><rect x="129.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="131.96" y="639.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (3 samples, 0.06%; -0.04%)</title><rect x="538.7" y="469" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="541.74" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="206.8" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="209.78" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="479.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (1 samples, 0.02%; 0.00%)</title><rect x="817.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.12" y="527.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="445.6" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="448.58" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="903.8" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="906.84" y="543.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="421.3" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="424.34" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.35" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="356.6" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.64" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (31 samples, 0.58%; +0.02%)</title><rect x="31.6" y="453" width="6.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="34.57" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="741" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="751.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%; +0.02%)</title><rect x="182.1" y="469" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="185.10" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.09%; -0.11%)</title><rect x="767.3" y="501" width="1.1" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="770.32" y="511.5" ></text>
</g>
<g >
<title>schema_registry::get (12 samples, 0.23%; 0.00%)</title><rect x="966.5" y="533" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.54" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1167.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.10" y="655.5" ></text>
</g>
<g >
<title>dht::tri_compare (10 samples, 0.19%; +0.11%)</title><rect x="496.9" y="437" width="2.3" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="499.94" y="447.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (11 samples, 0.21%; +0.04%)</title><rect x="1153.5" y="645" width="2.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1156.53" y="655.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (3 samples, 0.06%; -0.02%)</title><rect x="210.3" y="373" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="213.34" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="472.9" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="475.93" y="447.5" ></text>
</g>
<g >
<title>seastar::file::truncate (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_type_statement, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="69.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.59" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="87.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.38" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (2 samples, 0.04%; +0.04%)</title><rect x="657.3" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="660.25" y="639.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="871.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="570.5" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.54" y="543.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (1 samples, 0.02%; +0.02%)</title><rect x="1011.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.90" y="367.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (11 samples, 0.21%; +0.04%)</title><rect x="862.3" y="645" width="2.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="865.26" y="655.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%; 0.00%)</title><rect x="713.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.06" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; -0.02%)</title><rect x="1044.1" y="517" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1047.14" y="527.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="965.7" y="533" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="968.65" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1114.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.18" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="659.3" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="662.26" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (3 samples, 0.06%; +0.06%)</title><rect x="891.2" y="581" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="894.16" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="319.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="511.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="623.5" ></text>
</g>
<g >
<title>tolower (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.13" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%; 0.00%)</title><rect x="28.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.90" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.02%)</title><rect x="1094.8" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1097.84" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.08%)</title><rect x="845.8" y="565" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="848.81" y="575.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="473.2" y="453" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="476.15" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="766.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.21" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.28%; +0.17%)</title><rect x="1045.7" y="485" width="3.3" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="1048.70" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; 0.00%)</title><rect x="1009.2" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.23" y="335.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (8 samples, 0.15%; 0.00%)</title><rect x="11.1" y="629" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="639.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="695.3" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.28" y="447.5" ></text>
</g>
<g >
<title>do_cql_test (293 samples, 5.52%; 0.00%)</title><rect x="20.7" y="725" width="65.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.67" y="735.5" >do_cql_..</text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_input (1 samples, 0.02%; +0.02%)</title><rect x="33.8" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="36.79" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="1031.0" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1034.02" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (4 samples, 0.08%; +0.06%)</title><rect x="1025.2" y="453" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1028.24" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1012.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1015.12" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="555.6" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="558.64" y="575.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (6 samples, 0.11%; 0.00%)</title><rect x="209.7" y="389" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.67" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="52.9" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="367.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.09%; 0.00%)</title><rect x="112.1" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="687.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (9 samples, 0.17%; 0.00%)</title><rect x="753.8" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.75" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="935.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="938.86" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="736.0" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="738.97" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="788.0" y="421" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="791.00" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (5 samples, 0.09%; +0.02%)</title><rect x="680.8" y="661" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="683.82" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1115.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.29" y="431.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%; -0.04%)</title><rect x="137.9" y="565" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="140.85" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.26%; -0.08%)</title><rect x="293.9" y="405" width="3.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="296.94" y="415.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (2 samples, 0.04%; +0.04%)</title><rect x="507.6" y="485" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="510.61" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="636.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.80" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="68.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.03" y="559.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.15" y="671.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="12.4" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="15.45" y="495.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.11%; 0.00%)</title><rect x="763.8" y="565" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.76" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (4 samples, 0.08%; +0.04%)</title><rect x="533.4" y="405" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="536.41" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; -0.02%)</title><rect x="204.6" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="207.55" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1167.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.10" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="672.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="675.37" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="452.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="455.25" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%; 0.00%)</title><rect x="356.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.20" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (5 samples, 0.09%; -0.02%)</title><rect x="1148.0" y="581" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1150.98" y="591.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="87.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.38" y="719.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="26.9" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="29.90" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.37" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="873.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="876.38" y="607.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="40.7" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.68" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="832.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.46" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%; 0.00%)</title><rect x="663.7" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.70" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="861.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="864.81" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="684.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.83" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="295.9" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="298.94" y="383.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (6 samples, 0.11%; -0.02%)</title><rect x="277.5" y="405" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="280.48" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (536 samples, 10.10%; +0.02%)</title><rect x="327.7" y="533" width="119.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="330.74" y="543.5" >flat_mutation_..</text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="828.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="831.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="858.0" y="597" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="861.03" y="607.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; +0.02%)</title><rect x="860.7" y="613" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.70" y="623.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%; -0.02%)</title><rect x="946.5" y="565" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="949.53" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.03" y="543.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="45.4" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="48.35" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="607.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.14" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.11%; +0.04%)</title><rect x="791.3" y="405" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="794.33" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="249.5" y="293" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="252.47" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.09%; 0.00%)</title><rect x="48.7" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="415.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.09%; -0.02%)</title><rect x="764.0" y="549" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="766.98" y="559.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%; +0.02%)</title><rect x="42.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.91" y="527.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="671.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%; -0.04%)</title><rect x="288.2" y="357" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="291.16" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="225.2" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="228.23" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; 0.00%)</title><rect x="652.6" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.59" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="53" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="63.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints&lt;utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.02%)</title><rect x="646.6" y="645" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="649.58" y="655.5" ></text>
</g>
<g >
<title>table::table (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="623.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="638.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.36" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.72" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.09%)</title><rect x="972.3" y="453" width="0.7" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="975.32" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="367.5" ></text>
</g>
<g >
<title>std::copy&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;**&gt; (1 samples, 0.02%; 0.00%)</title><rect x="30.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.23" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (531 samples, 10.01%; -0.02%)</title><rect x="961.0" y="549" width="118.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="963.98" y="559.5" >service::stora..</text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (24 samples, 0.45%; +0.04%)</title><rect x="297.5" y="485" width="5.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="300.50" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.00" y="511.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.04%)</title><rect x="269.3" y="309" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="272.26" y="319.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1116.0" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="351.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1153.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1156.31" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="53.1" y="245" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.14" y="255.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="30.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.90" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%; 0.00%)</title><rect x="80.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.26" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="335.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="287.5" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="290.49" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (453 samples, 8.54%; -0.02%)</title><rect x="196.8" y="485" width="100.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="199.77" y="495.5" >partition_sn..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (20 samples, 0.38%; 0.00%)</title><rect x="1091.1" y="549" width="4.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1094.06" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="627.9" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="630.90" y="623.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token (1 samples, 0.02%; +0.02%)</title><rect x="34.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="37.01" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_destroy_data_aux (1 samples, 0.02%; +0.02%)</title><rect x="24.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.45" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; -0.02%)</title><rect x="705.3" y="661" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="708.28" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="296.8" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="299.83" y="399.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%; +0.02%)</title><rect x="73.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.59" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="511.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.09%; 0.00%)</title><rect x="998.3" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.34" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="19.6" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.56" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="47.8" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.80" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="399.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (5 samples, 0.09%; +0.02%)</title><rect x="386.7" y="341" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="389.66" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="679.7" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="682.71" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="111.2" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.17" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::pair&lt;auth::role_or_anonymous, auth::resource&gt;&amp;&amp;, auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="811.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.79" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="825.8" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="828.79" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="57.1" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.14" y="447.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.21%)</title><rect x="579.0" y="469" width="0.4" height="15.0" fill="rgb(65,65,255)" rx="2" ry="2" />
<text  x="581.99" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="807.1" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.12" y="383.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="850.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.70" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="904.5" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="907.51" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="568.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.32" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="45.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (275 samples, 5.18%; -0.02%)</title><rect x="24.0" y="677" width="61.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="27.01" y="687.5" >cql3::..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="40.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.02" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (11 samples, 0.21%; +0.08%)</title><rect x="211.9" y="405" width="2.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="214.89" y="415.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (4 samples, 0.08%; 0.00%)</title><rect x="1128.2" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.19" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="11.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%; 0.00%)</title><rect x="1160.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1163.65" y="655.5" ></text>
</g>
<g >
<title>ser::mutation_partition__static_row&lt;bytes_ostream&gt;::start_columns (1 samples, 0.02%; 0.00%)</title><rect x="1126.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.63" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="48.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.24" y="431.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_definition_impl::metric_definition_impl (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="495.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; +0.02%)</title><rect x="77.1" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.15" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (24 samples, 0.45%; 0.00%)</title><rect x="1161.1" y="661" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.09" y="671.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="559.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="519.4" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="522.40" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="351.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (32 samples, 0.60%; -0.06%)</title><rect x="132.5" y="629" width="7.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="135.51" y="639.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.02%; 0.00%)</title><rect x="1179.3" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.33" y="815.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%; -0.04%)</title><rect x="557.2" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="560.20" y="591.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (4 samples, 0.08%; +0.08%)</title><rect x="1072.6" y="485" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1075.60" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (2 samples, 0.04%; +0.04%)</title><rect x="1134.2" y="677" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1137.19" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (3 samples, 0.06%; +0.02%)</title><rect x="783.3" y="469" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="786.33" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (13 samples, 0.24%; 0.00%)</title><rect x="1049.7" y="485" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1052.70" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="525.8" y="405" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="528.85" y="415.5" ></text>
</g>
<g >
<title>make_shared_schema (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="447.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; -0.02%)</title><rect x="1149.3" y="613" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1152.31" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="67.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.37" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (24 samples, 0.45%; +0.02%)</title><rect x="733.5" y="581" width="5.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="736.52" y="591.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (1 samples, 0.02%; +0.02%)</title><rect x="1070.4" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1073.38" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="255.5" ></text>
</g>
<g >
<title>table::as_mutation_source (7 samples, 0.13%; +0.02%)</title><rect x="637.0" y="613" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.02" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.02" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1035.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.47" y="527.5" ></text>
</g>
<g >
<title>db::schema_tables::read_table_names_of_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.95" y="655.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1029.5" y="421" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1032.46" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::create_local_service&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="591.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (4 samples, 0.08%; +0.02%)</title><rect x="617.5" y="597" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="620.45" y="607.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="521.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="523.96" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1026.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.35" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="98.9" y="661" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="101.94" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="643.5" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="646.47" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; +0.02%)</title><rect x="1080.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1083.60" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (7 samples, 0.13%; 0.00%)</title><rect x="836.0" y="613" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.02" y="623.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; +0.04%)</title><rect x="483.6" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="486.60" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (11 samples, 0.21%; 0.00%)</title><rect x="604.3" y="581" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="607.34" y="591.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="448.2" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="451.25" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (1 samples, 0.02%; -0.06%)</title><rect x="970.1" y="533" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="973.10" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (11 samples, 0.21%; +0.15%)</title><rect x="689.9" y="629" width="2.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="692.94" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned short, std::allocator&lt;unsigned short&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.37" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.04%)</title><rect x="709.5" y="645" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="712.51" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.8" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.81" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="62.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.25" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (2 samples, 0.04%; +0.02%)</title><rect x="140.3" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="143.30" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::deque (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="495.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1117.1" y="421" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.07" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="1140.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.42" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="192.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="195.77" y="415.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (40 samples, 0.75%; 0.00%)</title><rect x="1122.0" y="581" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.96" y="591.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (2 samples, 0.04%; +0.02%)</title><rect x="612.8" y="565" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.79" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.04%)</title><rect x="760.6" y="549" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="763.65" y="559.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (5 samples, 0.09%; +0.09%)</title><rect x="830.9" y="453" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="833.91" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="1078.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1081.60" y="527.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (9 samples, 0.17%; -0.04%)</title><rect x="796.2" y="389" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="799.22" y="399.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e45834082150b00b4442f08dc988cb07c3379ff4] (1 samples, 0.02%; +0.02%)</title><rect x="234.1" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="237.13" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (5 samples, 0.09%; +0.02%)</title><rect x="399.1" y="357" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="402.11" y="367.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%; -0.02%)</title><rect x="749.8" y="517" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="752.75" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.25" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.81" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; -0.02%)</title><rect x="64.0" y="485" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="67.03" y="495.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;sstables::foreign_sstable_open_info, 131072ul&gt;::chunked_vector (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::vector&lt;cql3::query_options, std::allocator&lt;cql3::query_options&gt; &gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="684.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="687.16" y="639.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%; +0.06%)</title><rect x="466.9" y="469" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="469.92" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.92" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%; 0.00%)</title><rect x="263.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.25" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="44.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.69" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.09%; +0.08%)</title><rect x="1138.2" y="645" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1141.19" y="655.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (11 samples, 0.21%; 0.00%)</title><rect x="550.3" y="485" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="553.31" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="653.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.03" y="671.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; -0.02%)</title><rect x="271.7" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="274.70" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="68.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.26" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="102.7" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="105.72" y="623.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="1148.0" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.98" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="823.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.35" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; +0.02%)</title><rect x="1083.1" y="565" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1086.05" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="101.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="104.83" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; -0.08%)</title><rect x="991.9" y="437" width="2.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="994.89" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (4 samples, 0.08%; +0.02%)</title><rect x="1129.1" y="389" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.08" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (6 samples, 0.11%; +0.02%)</title><rect x="871.4" y="549" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.38" y="559.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%; +0.04%)</title><rect x="494.9" y="469" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="497.94" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%; 0.00%)</title><rect x="809.6" y="437" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.56" y="447.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (3 samples, 0.06%; -0.02%)</title><rect x="1018.3" y="421" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1021.35" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (18 samples, 0.34%; -0.06%)</title><rect x="505.8" y="501" width="4.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="508.84" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="591.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="916.7" y="517" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="919.73" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="761.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="764.31" y="591.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (7 samples, 0.13%; 0.00%)</title><rect x="1069.9" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.93" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%; +0.02%)</title><rect x="24.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.90" y="559.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.02" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1130.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.19" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="761.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="764.09" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1052.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1055.59" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (2 samples, 0.04%; +0.04%)</title><rect x="973.0" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="975.99" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%; +0.04%)</title><rect x="1095.5" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1098.50" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="214.8" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="217.78" y="415.5" ></text>
</g>
<g >
<title>seastar::alien::instance::poll_queues (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="671.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="845.8" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="848.81" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; -0.06%)</title><rect x="109.4" y="661" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="112.39" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%; +0.02%)</title><rect x="540.5" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="543.52" y="511.5" ></text>
</g>
<g >
<title>database::query (106 samples, 2.00%; -0.04%)</title><rect x="995.4" y="437" width="23.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="998.45" y="447.5" >d..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="664.6" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="667.59" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%; -0.04%)</title><rect x="138.3" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="141.29" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::small_vector (2 samples, 0.04%; -0.02%)</title><rect x="478.7" y="437" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="481.71" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%; 0.00%)</title><rect x="1051.9" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.92" y="479.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="573.2" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="576.21" y="479.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (41 samples, 0.77%; 0.00%)</title><rect x="254.4" y="341" width="9.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.36" y="351.5" ></text>
</g>
<g >
<title>database::find_keyspace (28 samples, 0.53%; -0.04%)</title><rect x="1036.8" y="517" width="6.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1039.80" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="54.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.25" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (10 samples, 0.19%; -0.02%)</title><rect x="713.3" y="613" width="2.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="716.29" y="623.5" ></text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (1 samples, 0.02%; +0.02%)</title><rect x="758.6" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="761.65" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; +0.02%)</title><rect x="807.3" y="373" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="810.34" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="656.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="659.37" y="655.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; -0.02%)</title><rect x="139.0" y="565" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="141.96" y="575.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (3 samples, 0.06%; 0.00%)</title><rect x="871.8" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="479.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::doit&lt;seastar::simple_memory_input_stream, std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.8" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.85" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="80.5" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.48" y="527.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="1027.5" y="421" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1030.46" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; +0.02%)</title><rect x="103.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.39" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (2 samples, 0.04%; +0.04%)</title><rect x="137.2" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="140.18" y="575.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (13 samples, 0.24%; +0.02%)</title><rect x="20.9" y="677" width="2.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.90" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (29 samples, 0.55%; 0.00%)</title><rect x="428.7" y="405" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="431.68" y="415.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (6 samples, 0.11%; -0.04%)</title><rect x="528.1" y="373" width="1.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="531.07" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="830.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.46" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%; -0.04%)</title><rect x="400.2" y="389" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="403.22" y="399.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (13 samples, 0.24%; +0.09%)</title><rect x="1108.6" y="581" width="2.9" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1111.62" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="859.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="862.37" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%; -0.02%)</title><rect x="1037.2" y="485" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1040.25" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1146.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.86" y="639.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (270 samples, 5.09%; -0.08%)</title><rect x="971.2" y="533" width="60.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="974.21" y="543.5" >servic..</text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="138.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.52" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.04%)</title><rect x="813.3" y="453" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="816.34" y="463.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.26%; +0.04%)</title><rect x="153.4" y="613" width="3.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="156.41" y="623.5" ></text>
</g>
<g >
<title>make_combined_reader (83 samples, 1.56%; +0.02%)</title><rect x="462.9" y="517" width="18.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.92" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; +0.02%)</title><rect x="867.4" y="645" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.37" y="655.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="642.6" y="661" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="645.58" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%; +0.02%)</title><rect x="794.4" y="341" width="1.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="797.44" y="351.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (3 samples, 0.06%; -0.02%)</title><rect x="836.7" y="565" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="839.69" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.13%; -0.02%)</title><rect x="946.8" y="533" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="949.75" y="543.5" ></text>
</g>
<g >
<title>row::row (135 samples, 2.54%; -0.02%)</title><rect x="224.3" y="325" width="30.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="227.34" y="335.5" >ro..</text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (34 samples, 0.64%; +0.02%)</title><rect x="1122.9" y="501" width="7.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.85" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="681.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.71" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1115.40" y="607.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (1 samples, 0.02%; 0.00%)</title><rect x="720.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.62" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (143 samples, 2.69%; -0.02%)</title><rect x="1134.6" y="677" width="31.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1137.64" y="687.5" >se..</text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.26" y="479.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1131.7" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.74" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (4 samples, 0.08%; +0.06%)</title><rect x="979.0" y="453" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="981.99" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="822.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="825.68" y="527.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="101.2" y="645" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="104.16" y="655.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="251.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="254.47" y="303.5" ></text>
</g>
<g >
<title>database::find_schema (25 samples, 0.47%; 0.00%)</title><rect x="823.8" y="549" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.79" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="111.8" y="229" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.84" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="805.8" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.78" y="303.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="772.2" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.21" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="292.2" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="295.16" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.17%; 0.00%)</title><rect x="47.8" y="485" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="603.4" y="581" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="606.45" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; +0.04%)</title><rect x="773.8" y="517" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="776.76" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (1 samples, 0.02%; +0.02%)</title><rect x="81.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.15" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="60.0" y="261" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="63.03" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;data_value, std::allocator&lt;data_value&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="303.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="306.28" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.02%)</title><rect x="138.3" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="141.29" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="913.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="916.40" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="624.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="627.79" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (4 samples, 0.08%; 0.00%)</title><rect x="808.7" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.67" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="60.0" y="229" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.03" y="239.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="831.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; +0.06%)</title><rect x="842.0" y="533" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="845.03" y="543.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="836.9" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.91" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.58" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (4 samples, 0.08%; 0.00%)</title><rect x="19.8" y="741" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="751.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; +0.04%)</title><rect x="486.0" y="469" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="489.05" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (3 samples, 0.06%; 0.00%)</title><rect x="735.3" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.30" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="40.7" y="517" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.68" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (7 samples, 0.13%; -0.02%)</title><rect x="524.3" y="389" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="527.29" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="271.9" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="274.93" y="399.5" ></text>
</g>
<g >
<title>database::find_schema (5 samples, 0.09%; +0.04%)</title><rect x="824.5" y="533" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="827.46" y="543.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="1127.3" y="277" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1130.30" y="287.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_definition::metric_definition (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="730.0" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="732.96" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (18 samples, 0.34%; +0.02%)</title><rect x="603.2" y="597" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="606.22" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="865.1" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.15" y="655.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="870.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.71" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; +0.02%)</title><rect x="66.0" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.03" y="543.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%; +0.06%)</title><rect x="532.7" y="405" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="535.74" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%; 0.00%)</title><rect x="1095.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1098.95" y="591.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.71" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;collect_all_shared_sstables (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="111.4" y="37" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.39" y="47.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (4 samples, 0.08%; +0.06%)</title><rect x="1053.0" y="501" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1056.03" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="796.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.67" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.09%; 0.00%)</title><rect x="1035.7" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.69" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%; +0.04%)</title><rect x="902.1" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="905.06" y="479.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="1168.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.88" y="639.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (1 samples, 0.02%; 0.00%)</title><rect x="612.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.12" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1125.7" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.74" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="543.5" ></text>
</g>
<g >
<title>freeze (13 samples, 0.24%; 0.00%)</title><rect x="1126.2" y="373" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.19" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="495.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="12.2" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="15.22" y="495.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.09%; 0.00%)</title><rect x="1035.7" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.69" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="65.1" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.14" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (7 samples, 0.13%; 0.00%)</title><rect x="972.1" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.10" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; 0.00%)</title><rect x="1021.2" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1024.24" y="415.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.04" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="672.2" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.15" y="671.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="716.0" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="718.95" y="623.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.04" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="621.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.68" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1051.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1054.25" y="479.5" ></text>
</g>
<g >
<title>abstract_type::from_string (5 samples, 0.09%; 0.00%)</title><rect x="74.9" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.93" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (10 samples, 0.19%; +0.02%)</title><rect x="27.8" y="437" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.79" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; +0.02%)</title><rect x="62.0" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.03" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; -0.02%)</title><rect x="820.0" y="485" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="823.01" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (2 samples, 0.04%; -0.06%)</title><rect x="534.3" y="453" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="537.30" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="271.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (2 samples, 0.04%; +0.02%)</title><rect x="143.9" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="146.85" y="639.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="555.0" y="581" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.97" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.04%)</title><rect x="166.1" y="597" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="169.09" y="607.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (1 samples, 0.02%; 0.00%)</title><rect x="1129.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.14" y="431.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="607.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%; +0.02%)</title><rect x="1141.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1144.08" y="671.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (4 samples, 0.08%; +0.02%)</title><rect x="348.0" y="341" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="350.97" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1130.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.97" y="447.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="53.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.36" y="351.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.63" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.04" y="607.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1043.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.03" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%; +0.02%)</title><rect x="660.4" y="613" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="663.37" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (5 samples, 0.09%; +0.04%)</title><rect x="905.4" y="533" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="908.39" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; +0.02%)</title><rect x="248.6" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="251.58" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (9 samples, 0.17%; -0.02%)</title><rect x="946.8" y="581" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="949.75" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (211 samples, 3.98%; 0.00%)</title><rect x="26.5" y="597" width="46.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.45" y="607.5" >seas..</text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="665.9" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.93" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="692.4" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="695.39" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.06%)</title><rect x="860.9" y="597" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="863.93" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;unsigned int&gt;::_Rb_tree_iterator (1 samples, 0.02%; +0.02%)</title><rect x="39.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.13" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="367.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.06%)</title><rect x="318.2" y="437" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="321.17" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="204.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="207.33" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_function_statement*, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.03" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (541 samples, 10.19%; +0.02%)</title><rect x="327.5" y="549" width="120.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="330.51" y="559.5" >flat_mutation_..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; 0.00%)</title><rect x="715.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.29" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (40 samples, 0.75%; 0.00%)</title><rect x="73.6" y="613" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.59" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="287.5" ></text>
</g>
<g >
<title>sstables::sstable::open_or_create_data (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="142.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="145.30" y="639.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (13 samples, 0.24%; +0.08%)</title><rect x="1096.2" y="581" width="2.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1099.17" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="525.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="528.62" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; +0.02%)</title><rect x="46.2" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.24" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="731.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="734.30" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="52.9" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="351.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="137.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.96" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="188.8" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="191.77" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="923.4" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="926.40" y="559.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; +0.02%)</title><rect x="400.2" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="403.22" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="868.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.04" y="655.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (115 samples, 2.17%; -0.30%)</title><rect x="371.8" y="357" width="25.5" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="374.76" y="367.5" >w..</text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (11 samples, 0.21%; +0.02%)</title><rect x="686.8" y="661" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="689.83" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; -0.02%)</title><rect x="584.8" y="533" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="587.77" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="319.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (5 samples, 0.09%; 0.00%)</title><rect x="57.8" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="447.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="452.5" y="597" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="455.47" y="607.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.02%)</title><rect x="269.3" y="293" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="272.26" y="303.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="1068.8" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1071.82" y="431.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="719.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (8 samples, 0.15%; -0.08%)</title><rect x="395.6" y="341" width="1.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="398.55" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (12 samples, 0.23%; +0.02%)</title><rect x="378.4" y="341" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="381.43" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; +0.02%)</title><rect x="1122.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.18" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (4 samples, 0.08%; -0.02%)</title><rect x="684.4" y="629" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="687.38" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.09%; 0.00%)</title><rect x="841.8" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.80" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (36 samples, 0.68%; 0.00%)</title><rect x="466.0" y="485" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.04" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (4 samples, 0.08%; +0.02%)</title><rect x="797.3" y="341" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="800.33" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="544.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="547.52" y="511.5" ></text>
</g>
<g >
<title>__call_tls_dtors (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="789" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="799.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="1090.6" y="549" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1093.61" y="559.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="639.5" ></text>
</g>
<g >
<title>parse_raw (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,844 samples, 91.28%; +0.19%)</title><rect x="90.7" y="693" width="1077.1" height="15.0" fill="rgb(255,78,78)" rx="2" ry="2" />
<text  x="93.71" y="703.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%; 0.00%)</title><rect x="888.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="891.94" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%; +0.04%)</title><rect x="316.6" y="469" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="319.62" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="54.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.91" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="907.6" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="910.62" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="213.9" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="216.89" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; -0.02%)</title><rect x="1012.6" y="373" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1015.57" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="735.5" ></text>
</g>
<g >
<title>validation::validate_column_family (38 samples, 0.72%; 0.00%)</title><rect x="823.6" y="565" width="8.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.57" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.34%; +0.02%)</title><rect x="1126.0" y="421" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.96" y="431.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; +0.02%)</title><rect x="473.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="476.82" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1119.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.07" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%; +0.02%)</title><rect x="719.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="722.07" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (10 samples, 0.19%; 0.00%)</title><rect x="804.4" y="325" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.45" y="335.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%; +0.04%)</title><rect x="868.9" y="581" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="871.93" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="892.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="895.05" y="591.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; 0.00%)</title><rect x="1009.9" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.90" y="319.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_16ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_17ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_18ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_19EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (1 samples, 0.02%; +0.02%)</title><rect x="74.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.48" y="591.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="675.7" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="678.71" y="655.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.08%)</title><rect x="645.5" y="645" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="648.47" y="655.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (13 samples, 0.24%; +0.06%)</title><rect x="814.0" y="501" width="2.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="817.01" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; 0.00%)</title><rect x="78.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.26" y="559.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; 0.00%)</title><rect x="819.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.57" y="495.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::operator delete (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.01" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.04%)</title><rect x="727.1" y="581" width="1.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="730.07" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%; -0.02%)</title><rect x="63.6" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="66.59" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="637.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="640.69" y="575.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.09%; +0.04%)</title><rect x="586.3" y="549" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="589.33" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (236 samples, 4.45%; 0.00%)</title><rect x="219.2" y="389" width="52.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.23" y="399.5" >logal..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%; +0.06%)</title><rect x="1149.5" y="581" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1152.53" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.04%)</title><rect x="536.7" y="485" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="539.74" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; 0.00%)</title><rect x="864.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.71" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="45.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%; 0.00%)</title><rect x="564.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="567.76" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; +0.02%)</title><rect x="1063.0" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1066.04" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (2 samples, 0.04%; -0.02%)</title><rect x="933.9" y="581" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="936.86" y="591.5" ></text>
</g>
<g >
<title>write_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="255.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (5 samples, 0.09%; -0.04%)</title><rect x="767.3" y="517" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="770.32" y="527.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="799.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (1 samples, 0.02%; 0.00%)</title><rect x="653.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.03" y="655.5" ></text>
</g>
<g >
<title>database::do_apply (27 samples, 0.51%; 0.00%)</title><rect x="1115.1" y="517" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.9" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (23 samples, 0.43%; -0.02%)</title><rect x="937.6" y="597" width="5.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="940.64" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="671.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (7 samples, 0.13%; -0.06%)</title><rect x="244.1" y="245" width="1.6" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="247.13" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="737.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="740.52" y="479.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.07" y="415.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e45834082150b00b4442f08dc988cb07c3379ff4] (1 samples, 0.02%; +0.02%)</title><rect x="803.6" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="806.56" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="843.8" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="846.80" y="575.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (23 samples, 0.43%; -0.04%)</title><rect x="189.0" y="437" width="5.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="191.99" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.13%; -0.08%)</title><rect x="939.9" y="533" width="1.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="942.86" y="543.5" ></text>
</g>
<g >
<title>sstables::mc::writer::writer (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; +0.02%)</title><rect x="52.2" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.25" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.09%; +0.02%)</title><rect x="734.9" y="517" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="737.85" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; -0.02%)</title><rect x="643.2" y="661" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="646.25" y="671.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::RecognizerSharedState (1 samples, 0.02%; 0.00%)</title><rect x="24.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.04%)</title><rect x="795.6" y="341" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="798.55" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (4 samples, 0.08%; -0.02%)</title><rect x="332.6" y="437" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="335.63" y="447.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="64.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.70" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (2 samples, 0.04%; 0.00%)</title><rect x="1169.1" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.10" y="639.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (4 samples, 0.08%; -0.02%)</title><rect x="288.8" y="357" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="291.82" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.24" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1126.4" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.41" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="907.2" y="501" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="910.17" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (22 samples, 0.41%; +0.02%)</title><rect x="868.7" y="613" width="4.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.71" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;sstables::sstable_directory&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="810.2" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.23" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="723.3" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="726.29" y="687.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (86 samples, 1.62%; 0.00%)</title><rect x="485.2" y="501" width="19.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="488.16" y="511.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (16 samples, 0.30%; 0.00%)</title><rect x="14.7" y="789" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.67" y="799.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="862.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.04" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (8 samples, 0.15%; -0.02%)</title><rect x="906.5" y="517" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="909.51" y="527.5" ></text>
</g>
<g >
<title>database::setup_metrics (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="527.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.06%)</title><rect x="211.0" y="373" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="214.00" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="13.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.34" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; 0.00%)</title><rect x="1015.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1018.68" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="566.5" y="565" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="569.54" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="602.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.78" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="559.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (10 samples, 0.19%; -0.06%)</title><rect x="966.8" y="517" width="2.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="969.76" y="527.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="977.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="980.88" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (4 samples, 0.08%; +0.02%)</title><rect x="547.4" y="437" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="550.41" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="541.9" y="501" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="544.86" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%; -0.04%)</title><rect x="794.4" y="357" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="797.44" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; +0.06%)</title><rect x="1069.0" y="469" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1072.04" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, std::pair&lt;unsigned int const, unsigned int&gt;, std::_Select1st&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;std::pair&lt;unsigned int const, unsigned int&gt; &gt; &gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="38.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.68" y="495.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="269.7" y="325" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="272.70" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="577.4" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.43" y="463.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%; 0.00%)</title><rect x="243.0" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="246.02" y="239.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (9 samples, 0.17%; +0.04%)</title><rect x="325.3" y="549" width="2.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="328.29" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="53.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.14" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%; 0.00%)</title><rect x="998.6" y="405" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.56" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (5 samples, 0.09%; -0.02%)</title><rect x="547.2" y="485" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="550.19" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume (2 samples, 0.04%; 0.00%)</title><rect x="695.3" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (3 samples, 0.06%; 0.00%)</title><rect x="12.0" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.00" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; 0.00%)</title><rect x="250.6" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="253.58" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="714.2" y="597" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.18" y="607.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%; +0.02%)</title><rect x="1083.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1086.72" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (6 samples, 0.11%; +0.02%)</title><rect x="63.8" y="501" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.81" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.06%)</title><rect x="1149.3" y="597" width="1.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1152.31" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (5 samples, 0.09%; +0.08%)</title><rect x="1103.1" y="597" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1106.06" y="607.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; -0.02%)</title><rect x="820.9" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="823.90" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="351.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (59 samples, 1.11%; -0.02%)</title><rect x="232.8" y="293" width="13.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="235.79" y="303.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%; 0.00%)</title><rect x="24.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="591.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; +0.02%)</title><rect x="599.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="602.89" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.17%; 0.00%)</title><rect x="47.8" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="144.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="147.30" y="639.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="703.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::got_cl (2 samples, 0.04%; +0.02%)</title><rect x="704.8" y="645" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="707.84" y="655.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="683.3" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="686.27" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (3 samples, 0.06%; +0.04%)</title><rect x="765.3" y="533" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="768.32" y="543.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1116.4" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.40" y="367.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (167 samples, 3.15%; +0.08%)</title><rect x="780.0" y="517" width="37.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="782.99" y="527.5" >ser..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="809.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="812.34" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (4 samples, 0.08%; -0.06%)</title><rect x="984.1" y="453" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="987.11" y="463.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (7 samples, 0.13%; +0.04%)</title><rect x="14.7" y="757" width="1.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="17.67" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="78.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.48" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.70" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="76.0" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.04" y="543.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="827.1" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="830.13" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="585.9" y="501" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="588.88" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator+ (1 samples, 0.02%; +0.02%)</title><rect x="696.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.17" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="775.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="778.10" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="655.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (4 samples, 0.08%; +0.02%)</title><rect x="224.3" y="309" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="227.34" y="319.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="520.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="523.73" y="415.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="664.4" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="667.37" y="655.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (1 samples, 0.02%; -0.02%)</title><rect x="715.5" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="718.51" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1073.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1076.71" y="527.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (10 samples, 0.19%; +0.04%)</title><rect x="190.8" y="421" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="193.77" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="923.8" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="926.85" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="709" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="415.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (10 samples, 0.19%; +0.04%)</title><rect x="726.2" y="613" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="729.18" y="623.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.03" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="158.3" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="161.31" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.71" y="607.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="1101.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1104.73" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="751.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (2 samples, 0.04%; +0.02%)</title><rect x="1031.2" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1034.24" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::compact_for_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="559.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="629.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="632.68" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.11%; +0.06%)</title><rect x="199.9" y="421" width="1.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="202.89" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%; -0.02%)</title><rect x="414.2" y="325" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="417.23" y="335.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; +0.02%)</title><rect x="762.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="765.20" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (302 samples, 5.69%; -0.15%)</title><rect x="215.0" y="421" width="67.2" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="218.00" y="431.5" >partiti..</text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (54 samples, 1.02%; 0.00%)</title><rect x="708.6" y="677" width="12.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.62" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (2 samples, 0.04%; +0.02%)</title><rect x="55.8" y="421" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.80" y="431.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%; +0.02%)</title><rect x="90.5" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="93.49" y="703.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.02%)</title><rect x="279.5" y="389" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="282.49" y="399.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (37 samples, 0.70%; +0.04%)</title><rect x="496.1" y="469" width="8.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="499.05" y="479.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (1 samples, 0.02%; +0.02%)</title><rect x="21.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="24.78" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; -0.02%)</title><rect x="59.4" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="62.36" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (8 samples, 0.15%; +0.04%)</title><rect x="804.9" y="309" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="807.89" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; -0.02%)</title><rect x="620.8" y="597" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="623.79" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="823.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="826.13" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (8 samples, 0.15%; 0.00%)</title><rect x="313.7" y="485" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="316.73" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="473.6" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="476.60" y="463.5" ></text>
</g>
<g >
<title>memtable_list::add_memtable (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.81" y="351.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="318.2" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="321.17" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="112.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.28" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="647.2" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="650.25" y="655.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%; +0.02%)</title><rect x="835.8" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.80" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.81" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1025.0" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1028.02" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="948.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="951.31" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (3 samples, 0.06%; 0.00%)</title><rect x="556.8" y="597" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="559.75" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; -0.02%)</title><rect x="1042.6" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1045.58" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%; +0.02%)</title><rect x="750.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="753.42" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (12 samples, 0.23%; +0.02%)</title><rect x="234.3" y="277" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="237.35" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%; +0.06%)</title><rect x="734.2" y="533" width="4.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="737.19" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="810.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.90" y="431.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="929.2" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="932.19" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%; 0.00%)</title><rect x="993.0" y="421" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="996.00" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="931.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.19" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="841.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.80" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (1 samples, 0.02%; +0.02%)</title><rect x="653.9" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.92" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="447.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="13.6" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="16.56" y="783.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="933.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="935.97" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (9 samples, 0.17%; +0.02%)</title><rect x="736.9" y="485" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="739.86" y="495.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (44 samples, 0.83%; -0.04%)</title><rect x="731.3" y="613" width="9.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="734.30" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="197.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="199.99" y="479.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (6 samples, 0.11%; 0.00%)</title><rect x="1070.2" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1073.15" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="30.0" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="447.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="269.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.48" y="335.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (17 samples, 0.32%; -0.11%)</title><rect x="315.5" y="485" width="3.8" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="318.51" y="495.5" ></text>
</g>
<g >
<title>query_state::query_state (29 samples, 0.55%; -0.04%)</title><rect x="610.1" y="613" width="6.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="613.12" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="768.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="771.65" y="591.5" ></text>
</g>
<g >
<title>posix_memalign (3 samples, 0.06%; +0.04%)</title><rect x="243.5" y="245" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="246.47" y="255.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; +0.02%)</title><rect x="870.9" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.93" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="479.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="482.60" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="76.0" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.04" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (71 samples, 1.34%; -0.06%)</title><rect x="893.8" y="565" width="15.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="896.83" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="431.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; +0.02%)</title><rect x="548.3" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="551.30" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="104.5" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="107.50" y="575.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1166.0" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.99" y="607.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="901.2" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.17" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; 0.00%)</title><rect x="1129.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="351.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="872.3" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.26" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="65.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.36" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.14" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_index_statement*, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.26" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.93" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (55 samples, 1.04%; 0.00%)</title><rect x="27.1" y="501" width="12.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.12" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="712.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="715.62" y="623.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (5 samples, 0.09%; -0.08%)</title><rect x="631.9" y="565" width="1.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="634.91" y="575.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,284 samples, 24.19%; +0.04%)</title><rect x="167.0" y="597" width="285.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="169.98" y="607.5" >query::consume_page&lt;</text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1128.2" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.19" y="335.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="1128.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.96" y="319.5" ></text>
</g>
<g >
<title>query::querier_base::close (141 samples, 2.66%; +0.04%)</title><rect x="569.0" y="613" width="31.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="571.98" y="623.5" >qu..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%; 0.00%)</title><rect x="25.1" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.12" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="438.7" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="441.69" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (18 samples, 0.34%; -0.02%)</title><rect x="298.6" y="469" width="4.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="301.61" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (8 samples, 0.15%; 0.00%)</title><rect x="1167.8" y="693" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.77" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (7 samples, 0.13%; 0.00%)</title><rect x="310.4" y="533" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="313.39" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (27 samples, 0.51%; -0.02%)</title><rect x="55.4" y="469" width="6.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="58.36" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="79.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; +0.02%)</title><rect x="889.6" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="892.61" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; -0.04%)</title><rect x="420.0" y="325" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="423.01" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="623.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="44.9" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.91" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="68.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.03" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="108.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.72" y="655.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="157.2" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.19" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; -0.02%)</title><rect x="786.0" y="485" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="788.99" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;void&gt;::promise_type::run_and_dispose (3 samples, 0.06%; +0.06%)</title><rect x="89.4" y="693" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="92.38" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="448.9" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="451.91" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (34 samples, 0.64%; -0.02%)</title><rect x="31.1" y="469" width="7.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="34.12" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="527.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (4 samples, 0.08%; +0.02%)</title><rect x="529.4" y="373" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="532.40" y="383.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="12.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.67" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; 0.00%)</title><rect x="78.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.26" y="575.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1128.6" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.63" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.06%)</title><rect x="975.9" y="469" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="978.88" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (220 samples, 4.15%; 0.00%)</title><rect x="24.5" y="645" width="48.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="655.5" >cql3..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (14 samples, 0.26%; +0.02%)</title><rect x="27.6" y="485" width="3.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.57" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (7 samples, 0.13%; +0.02%)</title><rect x="869.8" y="549" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.82" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; -0.09%)</title><rect x="750.2" y="469" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="753.20" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (43 samples, 0.81%; -0.08%)</title><rect x="1044.4" y="517" width="9.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1047.36" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; 0.00%)</title><rect x="683.5" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.49" y="639.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; -0.02%)</title><rect x="1030.8" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1033.80" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.13%; 0.00%)</title><rect x="827.6" y="485" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.57" y="495.5" ></text>
</g>
<g >
<title>__start_context (304 samples, 5.73%; 0.00%)</title><rect x="18.2" y="789" width="67.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="799.5" >__start..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="662.6" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="665.59" y="623.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="941.6" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="944.64" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="121.8" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="124.84" y="655.5" ></text>
</g>
<g >
<title>posix_memalign (2 samples, 0.04%; -0.02%)</title><rect x="249.0" y="261" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="252.02" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (6 samples, 0.11%; 0.00%)</title><rect x="815.6" y="485" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.57" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (5 samples, 0.09%; +0.02%)</title><rect x="775.3" y="533" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="778.32" y="543.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (3 samples, 0.06%; +0.04%)</title><rect x="942.7" y="597" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="945.75" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="463.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (2 samples, 0.04%; 0.00%)</title><rect x="800.4" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="803.45" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%; +0.02%)</title><rect x="178.8" y="485" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="181.76" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="680.6" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="683.60" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (1 samples, 0.02%; -0.02%)</title><rect x="1136.0" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1138.97" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="112.9" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.95" y="431.5" ></text>
</g>
<g >
<title>database::database (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="543.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="655.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="810.5" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="813.45" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="443.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="446.36" y="479.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (7 samples, 0.13%; -0.04%)</title><rect x="558.8" y="549" width="1.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="561.75" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (2 samples, 0.04%; 0.00%)</title><rect x="66.3" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.25" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="110.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.28" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="248.8" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="251.80" y="287.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (8 samples, 0.15%; 0.00%)</title><rect x="538.1" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.08" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="47.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.58" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (91 samples, 1.71%; -0.02%)</title><rect x="909.8" y="581" width="20.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="912.84" y="591.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="591.4" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="594.44" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (4 samples, 0.08%; +0.02%)</title><rect x="674.6" y="661" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="677.60" y="671.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (34 samples, 0.64%; +0.04%)</title><rect x="545.2" y="501" width="7.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="548.19" y="511.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="431.5" ></text>
</g>
<g >
<title>local_schema_registry (5 samples, 0.09%; +0.09%)</title><rect x="956.1" y="549" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="959.09" y="559.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (2 samples, 0.04%; +0.04%)</title><rect x="280.8" y="405" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="283.82" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%; -0.13%)</title><rect x="474.0" y="485" width="2.0" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="477.04" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="607.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (2 samples, 0.04%; 0.00%)</title><rect x="55.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.80" y="447.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (121 samples, 2.28%; -0.08%)</title><rect x="786.9" y="501" width="26.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="789.88" y="511.5" >s..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="902.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="905.73" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="636.4" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="639.35" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::read_schema_partition_for_table (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.61" y="655.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (7 samples, 0.13%; +0.06%)</title><rect x="936.1" y="565" width="1.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="939.08" y="575.5" ></text>
</g>
<g >
<title>seastar::alien::message_queue::process_incoming (1 samples, 0.02%; +0.02%)</title><rect x="1168.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.21" y="655.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="806.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.67" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="687.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.02%)</title><rect x="60.5" y="261" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.47" y="271.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; -0.04%)</title><rect x="494.7" y="453" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="497.72" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%; 0.00%)</title><rect x="263.7" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.70" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="572.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="575.76" y="479.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; -0.04%)</title><rect x="504.1" y="357" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="507.06" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%; 0.00%)</title><rect x="370.6" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="373.65" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="475.4" y="453" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="478.37" y="463.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="769.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.10" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl_nrvo&lt;query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="723.5" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="726.51" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="48.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.24" y="479.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="893.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="896.17" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; -0.02%)</title><rect x="170.5" y="549" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="173.54" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; +0.08%)</title><rect x="336.6" y="437" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="339.63" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::indexes (1 samples, 0.02%; +0.02%)</title><rect x="112.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.50" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (239 samples, 4.50%; +0.02%)</title><rect x="219.0" y="405" width="53.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="222.01" y="415.5" >parti..</text>
</g>
<g >
<title>validation::validate_keyspace (12 samples, 0.23%; 0.00%)</title><rect x="829.4" y="549" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.35" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (10 samples, 0.19%; +0.06%)</title><rect x="207.4" y="373" width="2.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="210.44" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="367.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (1 samples, 0.02%; +0.02%)</title><rect x="1015.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1018.46" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (2 samples, 0.04%; 0.00%)</title><rect x="649.0" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.03" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1042.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.81" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::update_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.70" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::column_identifier&gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; +0.02%)</title><rect x="25.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.56" y="591.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.06%)</title><rect x="126.7" y="629" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="129.73" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="41.4" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.35" y="495.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (4 samples, 0.08%; +0.06%)</title><rect x="279.9" y="389" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="282.93" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (16 samples, 0.30%; 0.00%)</title><rect x="938.5" y="581" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.52" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; +0.02%)</title><rect x="658.8" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.81" y="575.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="41.8" y="357" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.80" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="827.1" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.13" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="1148.6" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1151.64" y="543.5" ></text>
</g>
<g >
<title>memtable_list::flush (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="579.2" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="582.21" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::consume (175 samples, 3.30%; -0.08%)</title><rect x="358.4" y="373" width="38.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="361.42" y="383.5" >mut..</text>
</g>
<g >
<title>cql3::query_options::get_value_at (7 samples, 0.13%; +0.06%)</title><rect x="895.2" y="485" width="1.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="898.17" y="495.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="87.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.38" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.02%)</title><rect x="462.5" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="465.48" y="527.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1116.0" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1128.0" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1130.96" y="271.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="1016.6" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1019.57" y="399.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%; 0.00%)</title><rect x="42.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.24" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="708.4" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="711.39" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.11%; 0.00%)</title><rect x="848.9" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.92" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="606.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="609.34" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="263.0" y="293" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="266.03" y="303.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; -0.02%)</title><rect x="1118.0" y="389" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1120.96" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1104.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1107.17" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%; -0.02%)</title><rect x="936.7" y="549" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="939.75" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (2 samples, 0.04%; +0.04%)</title><rect x="981.4" y="421" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="984.44" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="106.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="109.72" y="495.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (42 samples, 0.79%; -0.02%)</title><rect x="346.0" y="373" width="9.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="348.97" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="809.1" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="812.12" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="637.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.47" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (4 samples, 0.08%; 0.00%)</title><rect x="52.9" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="45.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; -0.02%)</title><rect x="553.2" y="517" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="556.20" y="527.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (9 samples, 0.17%; -0.06%)</title><rect x="339.1" y="421" width="2.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="342.07" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="251.2" y="277" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="254.25" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%; 0.00%)</title><rect x="79.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.15" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (8 samples, 0.15%; -0.06%)</title><rect x="703.1" y="629" width="1.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="706.06" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="112.1" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.06" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="1030.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1033.58" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (1 samples, 0.02%; +0.02%)</title><rect x="971.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="973.99" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::parsed_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="72.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="75.48" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.09%; -0.02%)</title><rect x="1079.3" y="549" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1082.27" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="674.4" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="677.38" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (19 samples, 0.36%; -0.09%)</title><rect x="561.2" y="549" width="4.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="564.20" y="559.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1072.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1075.38" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.48" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="767.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (21 samples, 0.40%; 0.00%)</title><rect x="1115.1" y="453" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.04%)</title><rect x="840.5" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="843.47" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (13 samples, 0.24%; -0.02%)</title><rect x="27.8" y="453" width="2.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="30.79" y="463.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="639.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="165.9" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="168.87" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (110 samples, 2.07%; 0.00%)</title><rect x="512.3" y="485" width="24.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="515.28" y="495.5" >s..</text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (8 samples, 0.15%; 0.00%)</title><rect x="972.1" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.10" y="511.5" ></text>
</g>
<g >
<title>mutation_cleaner_impl::merge_some (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.36" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.09%; +0.09%)</title><rect x="887.8" y="597" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="890.83" y="607.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; -0.04%)</title><rect x="547.4" y="469" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="550.41" y="479.5" ></text>
</g>
<g >
<title>memtable::apply (21 samples, 0.40%; 0.00%)</title><rect x="1115.1" y="437" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.09%; -0.02%)</title><rect x="1157.1" y="661" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1160.09" y="671.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::work_item_returning&lt;seastar::syscall_result&lt;int&gt; &gt;::process (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="751.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; -0.02%)</title><rect x="547.4" y="453" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="550.41" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%; -0.04%)</title><rect x="713.7" y="581" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="716.73" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="317.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="320.28" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="56.7" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.69" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%; -0.02%)</title><rect x="287.7" y="357" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="290.71" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="652.1" y="661" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="655.14" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="44.0" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.02" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (17 samples, 0.32%; +0.02%)</title><rect x="77.8" y="581" width="3.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.82" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="776.7" y="549" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="779.66" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (13 samples, 0.24%; -0.11%)</title><rect x="826.2" y="501" width="2.9" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="829.24" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (20 samples, 0.38%; +0.06%)</title><rect x="273.0" y="373" width="4.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="276.04" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (33 samples, 0.62%; +0.11%)</title><rect x="255.9" y="309" width="7.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="258.92" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (10 samples, 0.19%; 0.00%)</title><rect x="518.7" y="437" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="521.73" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (13 samples, 0.24%; +0.02%)</title><rect x="793.1" y="389" width="2.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="796.11" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="50.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.24" y="495.5" ></text>
</g>
<g >
<title>query::result::result (5 samples, 0.09%; 0.00%)</title><rect x="608.3" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.34" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (5 samples, 0.09%; 0.00%)</title><rect x="48.7" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (18 samples, 0.34%; 0.00%)</title><rect x="62.0" y="533" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.03" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="281.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.93" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (3 samples, 0.06%; -0.02%)</title><rect x="135.2" y="581" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="138.18" y="591.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="23.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="26.79" y="687.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (6 samples, 0.11%; +0.04%)</title><rect x="550.7" y="437" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="553.75" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (1 samples, 0.02%; 0.00%)</title><rect x="90.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="93.05" y="703.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; +0.02%)</title><rect x="576.3" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.32" y="479.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (5 samples, 0.09%; -0.06%)</title><rect x="1110.4" y="565" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1113.40" y="575.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.02%; +0.02%)</title><rect x="86.7" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.71" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%; -0.02%)</title><rect x="1075.7" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1078.71" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="850.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="853.03" y="543.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (5 samples, 0.09%; -0.02%)</title><rect x="160.8" y="581" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="163.75" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (10 samples, 0.19%; +0.13%)</title><rect x="639.0" y="661" width="2.2" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="642.02" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1167.5" y="645" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.54" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (7 samples, 0.13%; +0.02%)</title><rect x="1149.1" y="629" width="1.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1152.09" y="639.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; 0.00%)</title><rect x="656.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.14" y="655.5" ></text>
</g>
<g >
<title>__close (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="725" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.78" y="735.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (7 samples, 0.13%; -0.02%)</title><rect x="946.8" y="549" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="949.75" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="870.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.49" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (35 samples, 0.66%; +0.02%)</title><rect x="53.8" y="485" width="7.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="56.80" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (3 samples, 0.06%; 0.00%)</title><rect x="45.8" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="622.3" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="625.35" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (4 samples, 0.08%; +0.02%)</title><rect x="973.9" y="517" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.88" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (5 samples, 0.09%; 0.00%)</title><rect x="1168.4" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.43" y="687.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (4 samples, 0.08%; 0.00%)</title><rect x="270.8" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.81" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="677" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="687.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (25 samples, 0.47%; +0.21%)</title><rect x="488.9" y="437" width="5.6" height="15.0" fill="rgb(255,65,65)" rx="2" ry="2" />
<text  x="491.94" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="657.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="660.03" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="58.0" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.03" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="591.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="970.5" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="973.54" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="723.7" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="726.74" y="687.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.93" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; +0.02%)</title><rect x="542.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="545.52" y="527.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_nextChar (1 samples, 0.02%; +0.02%)</title><rect x="31.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="34.12" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_move_assign (1 samples, 0.02%; +0.02%)</title><rect x="81.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.37" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="661.9" y="549" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="664.92" y="559.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (5 samples, 0.09%; 0.00%)</title><rect x="84.0" y="645" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.04" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true, false, false&gt;::_Optional_payload (1 samples, 0.02%; +0.02%)</title><rect x="42.2" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="45.24" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1130.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.41" y="479.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="397.8" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="400.77" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="659.7" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.70" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9 samples, 0.17%; -0.04%)</title><rect x="716.6" y="613" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="719.62" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="959.9" y="549" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.87" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%; +0.06%)</title><rect x="564.1" y="485" width="1.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="567.09" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="68.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.70" y="543.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; 0.00%)</title><rect x="991.9" y="453" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="994.89" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::file_data_sink_impl::do_put (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="431.5" ></text>
</g>
<g >
<title>partition_version::~partition_version (1 samples, 0.02%; +0.02%)</title><rect x="1119.3" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.29" y="399.5" ></text>
</g>
<g >
<title>operator delete (12 samples, 0.23%; +0.15%)</title><rect x="435.6" y="421" width="2.6" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="438.57" y="431.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1132.0" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.97" y="319.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (4 samples, 0.08%; +0.08%)</title><rect x="295.0" y="373" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="298.05" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="707.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="710.28" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.02%)</title><rect x="391.8" y="325" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="394.77" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_psrstate (1 samples, 0.02%; +0.02%)</title><rect x="44.2" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.24" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.7" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.69" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="591.5" ></text>
</g>
<g >
<title>row::compact_and_expire (91 samples, 1.71%; -0.02%)</title><rect x="400.4" y="389" width="20.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="403.44" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="431.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::dynamic_bitset (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (5 samples, 0.09%; +0.02%)</title><rect x="892.3" y="581" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="895.28" y="591.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1128.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.63" y="335.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (19 samples, 0.36%; +0.06%)</title><rect x="798.7" y="341" width="4.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="801.67" y="351.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::_Tuple_impl&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.52" y="623.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (27 samples, 0.51%; +0.11%)</title><rect x="239.7" y="261" width="6.0" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="242.69" y="271.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (4 samples, 0.08%; -0.02%)</title><rect x="749.8" y="533" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="752.75" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (492 samples, 9.27%; +0.04%)</title><rect x="331.1" y="485" width="109.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="334.07" y="495.5" >std::__invoke..</text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%; +0.02%)</title><rect x="870.0" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.04" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%; 0.00%)</title><rect x="110.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="511.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (15 samples, 0.28%; +0.02%)</title><rect x="847.1" y="597" width="3.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="850.14" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="309.9" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="312.95" y="511.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (3 samples, 0.06%; 0.00%)</title><rect x="1116.0" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="536.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="539.30" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="812.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="815.01" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="646.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="649.36" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="573.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="575.98" y="479.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="18.4" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.45" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="81.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.82" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (5 samples, 0.09%; 0.00%)</title><rect x="754.6" y="453" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.64" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; 0.00%)</title><rect x="129.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="132.18" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (3 samples, 0.06%; +0.06%)</title><rect x="969.2" y="533" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="972.21" y="543.5" ></text>
</g>
<g >
<title>table::make_memtable_list (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="607.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (4 samples, 0.08%; +0.02%)</title><rect x="1074.2" y="517" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1077.16" y="527.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (4 samples, 0.08%; +0.02%)</title><rect x="84.3" y="597" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.26" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (7 samples, 0.13%; 0.00%)</title><rect x="773.1" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="776.10" y="559.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="44.9" y="469" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="47.91" y="479.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; +0.02%)</title><rect x="805.8" y="261" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="808.78" y="271.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (13 samples, 0.24%; 0.00%)</title><rect x="1126.2" y="389" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.19" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="947.6" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="950.64" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="1131.1" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1134.08" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::tuple_map_helper&lt;std::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;, seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::unwrap (1 samples, 0.02%; 0.00%)</title><rect x="1121.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.52" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (6 samples, 0.11%; +0.04%)</title><rect x="242.1" y="245" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="245.13" y="255.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.30%; 0.00%)</title><rect x="14.7" y="773" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.67" y="783.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="253.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="256.92" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.41" y="527.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="105.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.16" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="81.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.82" y="559.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%; -0.04%)</title><rect x="737.7" y="469" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="740.74" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="85.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.15" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="420.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="423.68" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (3 samples, 0.06%; 0.00%)</title><rect x="871.8" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.82" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (266 samples, 5.01%; 0.00%)</title><rect x="24.5" y="661" width="59.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="671.5" >cql3::..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (6 samples, 0.11%; +0.09%)</title><rect x="1162.7" y="629" width="1.3" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1165.65" y="639.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (25 samples, 0.47%; 0.00%)</title><rect x="488.9" y="453" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.94" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (46 samples, 0.87%; +0.02%)</title><rect x="521.8" y="421" width="10.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="524.84" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (135 samples, 2.54%; 0.00%)</title><rect x="570.3" y="597" width="30.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="573.32" y="607.5" >st..</text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (2 samples, 0.04%; +0.04%)</title><rect x="368.6" y="357" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="371.65" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; 0.00%)</title><rect x="1127.1" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.08" y="319.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (5 samples, 0.09%; 0.00%)</title><rect x="928.1" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.07" y="527.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.63" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::compact_for_compaction (1 samples, 0.02%; 0.00%)</title><rect x="110.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (403 samples, 7.59%; -0.06%)</title><rect x="338.2" y="437" width="89.6" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="341.19" y="447.5" >mutation_f..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="687.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="703.5" ></text>
</g>
<g >
<title>auth::resource::parent (10 samples, 0.19%; +0.02%)</title><rect x="784.2" y="501" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="787.22" y="511.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,866 samples, 91.69%; 0.00%)</title><rect x="87.8" y="741" width="1082.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="751.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (3 samples, 0.06%; +0.04%)</title><rect x="446.2" y="517" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="449.25" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="934.3" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="937.30" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4 samples, 0.08%; +0.02%)</title><rect x="28.7" y="373" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.68" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (3 samples, 0.06%; +0.06%)</title><rect x="131.6" y="613" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="134.62" y="623.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (3 samples, 0.06%; +0.04%)</title><rect x="668.4" y="613" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="671.37" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; -0.02%)</title><rect x="178.5" y="485" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="181.54" y="495.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.08%)</title><rect x="540.1" y="485" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="543.08" y="495.5" ></text>
</g>
<g >
<title>db::system_keyspace::paxos (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (3 samples, 0.06%; +0.06%)</title><rect x="816.2" y="453" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="819.23" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.45" y="735.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.08%)</title><rect x="472.5" y="453" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="475.48" y="463.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="655.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%; -0.04%)</title><rect x="132.3" y="629" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="135.29" y="639.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="803.6" y="325" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.56" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="41.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.80" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="43.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="46.80" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (15 samples, 0.28%; -0.06%)</title><rect x="1000.3" y="405" width="3.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1003.34" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="287.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="514.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="517.28" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; +0.02%)</title><rect x="290.8" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="293.83" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1116.2" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.18" y="319.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="623.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (4 samples, 0.08%; +0.02%)</title><rect x="925.0" y="533" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="927.96" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (41 samples, 0.77%; -0.02%)</title><rect x="283.3" y="405" width="9.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="286.27" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="808.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.01" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="764.4" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="767.43" y="543.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.95" y="623.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="24.2" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.23" y="559.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="483.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.16" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="889.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="892.39" y="607.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="629.9" y="597" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="632.91" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (4 samples, 0.08%; +0.06%)</title><rect x="423.3" y="405" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="426.34" y="415.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="1119.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.52" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (2 samples, 0.04%; 0.00%)</title><rect x="55.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.80" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (198 samples, 3.73%; 0.00%)</title><rect x="776.9" y="565" width="44.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.88" y="575.5" >std:..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.37" y="543.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.6" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.63" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (17 samples, 0.32%; +0.02%)</title><rect x="306.6" y="517" width="3.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="309.61" y="527.5" ></text>
</g>
<g >
<title>distributed_loader::reshard (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="751.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%; +0.02%)</title><rect x="364.2" y="357" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="367.20" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (13 samples, 0.24%; 0.00%)</title><rect x="1123.1" y="485" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.07" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="72.0" y="565" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="75.04" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="790.0" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="793.00" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%; +0.02%)</title><rect x="1139.3" y="645" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1142.30" y="655.5" ></text>
</g>
<g >
<title>collect_all_shared_sstables (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="735.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%; 0.00%)</title><rect x="467.8" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="470.81" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.09%; +0.04%)</title><rect x="310.8" y="517" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="313.84" y="527.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::parsed_statement*, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.48" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="62.5" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.47" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.9" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="447.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="751.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; 0.00%)</title><rect x="266.1" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="269.14" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%; 0.00%)</title><rect x="63.1" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.43" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (3 samples, 0.06%; 0.00%)</title><rect x="735.3" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.30" y="495.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="576.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.76" y="479.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="917.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="920.40" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (9 samples, 0.17%; -0.02%)</title><rect x="28.0" y="421" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="31.01" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (8 samples, 0.15%; -0.04%)</title><rect x="692.6" y="661" width="1.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="695.61" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1100.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1103.62" y="591.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (41 samples, 0.77%; 0.00%)</title><rect x="1121.7" y="645" width="9.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.74" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; +0.02%)</title><rect x="189.9" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="192.88" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (42 samples, 0.79%; 0.00%)</title><rect x="73.6" y="629" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.59" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1018.1" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1021.13" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="500.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.50" y="415.5" ></text>
</g>
<g >
<title>table::as_mutation_source (1 samples, 0.02%; +0.02%)</title><rect x="145.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="148.19" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="554.5" y="517" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="557.53" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (3 samples, 0.06%; +0.06%)</title><rect x="702.2" y="613" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="705.17" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="786.0" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="788.99" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="830.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="833.46" y="479.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%; +0.06%)</title><rect x="198.3" y="437" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="201.33" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1125.3" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.30" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1009.7" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1012.68" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.11%; +0.09%)</title><rect x="934.5" y="581" width="1.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="937.52" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; -0.02%)</title><rect x="684.6" y="613" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="687.60" y="623.5" ></text>
</g>
<g >
<title>sstring_hash::operator (5 samples, 0.09%; 0.00%)</title><rect x="830.9" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.91" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="930.1" y="581" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="933.08" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="112.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.28" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,039 samples, 19.58%; +0.17%)</title><rect x="883.2" y="613" width="231.0" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="886.16" y="623.5" >cql3::statements::select_state..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (4 samples, 0.08%; +0.08%)</title><rect x="355.3" y="373" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="358.31" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="383.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="604.3" y="565" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="607.34" y="575.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (2 samples, 0.04%; 0.00%)</title><rect x="84.5" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="844.2" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.25" y="591.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="397.3" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="400.33" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="606.6" y="565" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="609.56" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; +0.02%)</title><rect x="173.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="176.20" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (3 samples, 0.06%; -0.02%)</title><rect x="522.7" y="405" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="525.73" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (9 samples, 0.17%; +0.02%)</title><rect x="1071.5" y="501" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1074.49" y="511.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (1 samples, 0.02%; 0.00%)</title><rect x="1129.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.52" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (7 samples, 0.13%; 0.00%)</title><rect x="11.1" y="613" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.70" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%; -0.06%)</title><rect x="182.3" y="453" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="185.32" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="913.6" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="916.62" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (4 samples, 0.08%; 0.00%)</title><rect x="110.1" y="645" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="66.7" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.70" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="756.9" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.87" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="954.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="957.09" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; 0.00%)</title><rect x="693.1" y="629" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="696.05" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="618.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="621.79" y="607.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (220 samples, 4.15%; -0.02%)</title><rect x="24.5" y="629" width="48.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="27.45" y="639.5" >cql3..</text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (74 samples, 1.39%; +0.02%)</title><rect x="893.4" y="581" width="16.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="896.39" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (3 samples, 0.06%; 0.00%)</title><rect x="1124.9" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.85" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (43 samples, 0.81%; 0.00%)</title><rect x="96.9" y="677" width="9.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="99.94" y="687.5" ></text>
</g>
<g >
<title>schema_registry::get (2 samples, 0.04%; +0.04%)</title><rect x="958.8" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="961.76" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; 0.00%)</title><rect x="867.6" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.60" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (13 samples, 0.24%; -0.02%)</title><rect x="1027.2" y="453" width="2.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1030.24" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; +0.02%)</title><rect x="97.2" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="100.16" y="671.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%; 0.00%)</title><rect x="1169.5" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.54" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::statement_restrictions&gt;::shared_ptr_count_for&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (22 samples, 0.41%; +0.02%)</title><rect x="1161.5" y="645" width="4.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1164.54" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (3 samples, 0.06%; +0.02%)</title><rect x="553.9" y="517" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="556.86" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (47 samples, 0.89%; 0.00%)</title><rect x="840.0" y="613" width="10.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.02" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="80.5" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.48" y="543.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (1 samples, 0.02%; 0.00%)</title><rect x="864.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.93" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (4 samples, 0.08%; +0.06%)</title><rect x="301.1" y="453" width="0.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="304.05" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.09%; +0.02%)</title><rect x="930.5" y="581" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="933.52" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="783.5" ></text>
</g>
<g >
<title>row_cache::make_reader (46 samples, 0.87%; +0.11%)</title><rect x="543.0" y="517" width="10.2" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="545.97" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="79.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.37" y="527.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (7 samples, 0.13%; +0.02%)</title><rect x="1002.1" y="389" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1005.12" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1009.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1012.68" y="319.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; 0.00%)</title><rect x="340.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.85" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="19.1" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="751.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;sstables::foreign_sstable_open_info [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="18.2" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.23" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (19 samples, 0.36%; +0.06%)</title><rect x="700.6" y="645" width="4.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="703.61" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (2 samples, 0.04%; +0.04%)</title><rect x="88.9" y="693" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="91.93" y="703.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (1 samples, 0.02%; 0.00%)</title><rect x="613.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.23" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; -0.04%)</title><rect x="826.5" y="469" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="829.46" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (16 samples, 0.30%; -0.21%)</title><rect x="527.0" y="389" width="3.5" height="15.0" fill="rgb(65,65,255)" rx="2" ry="2" />
<text  x="529.96" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="11.1" y="645" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="542.3" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="545.30" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (10 samples, 0.19%; +0.02%)</title><rect x="1138.0" y="661" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1140.97" y="671.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="766.6" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="769.65" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="1028.8" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1031.80" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.63" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (6 samples, 0.11%; +0.02%)</title><rect x="444.9" y="437" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="447.91" y="447.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (4 samples, 0.08%; -0.02%)</title><rect x="369.3" y="357" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="372.31" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="76.5" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.48" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="30.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.90" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (7 samples, 0.13%; -0.04%)</title><rect x="303.7" y="501" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="306.72" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (13 samples, 0.24%; +0.02%)</title><rect x="1126.2" y="357" width="2.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.19" y="367.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (4 samples, 0.08%; -0.06%)</title><rect x="37.3" y="421" width="0.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="40.35" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.92" y="527.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; -0.02%)</title><rect x="139.4" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="142.41" y="607.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,866 samples, 91.69%; 0.00%)</title><rect x="87.8" y="757" width="1082.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="767.5" >seastar::app_template::run</text>
</g>
<g >
<title>seastar::thread_pool::work (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="71.1" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.15" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1041.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.92" y="479.5" ></text>
</g>
<g >
<title>auth::resource::resource (8 samples, 0.15%; 0.00%)</title><rect x="775.1" y="565" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.10" y="575.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.30%; 0.00%)</title><rect x="1045.7" y="501" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.70" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="812.9" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="815.90" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (8 samples, 0.15%; +0.06%)</title><rect x="508.1" y="485" width="1.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="511.06" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="1089.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.50" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (42 samples, 0.79%; 0.00%)</title><rect x="311.9" y="533" width="9.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="314.95" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (1 samples, 0.02%; -0.02%)</title><rect x="478.5" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="481.49" y="447.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (2 samples, 0.04%; 0.00%)</title><rect x="1128.6" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.63" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="262.8" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="265.81" y="271.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="127.8" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="130.84" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.75%; 0.00%)</title><rect x="1122.0" y="549" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.96" y="559.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%; -0.04%)</title><rect x="755.3" y="437" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="758.31" y="447.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="446.9" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="449.91" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (4 samples, 0.08%; +0.04%)</title><rect x="1099.7" y="581" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1102.73" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="40.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.68" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (6 samples, 0.11%; 0.00%)</title><rect x="52.5" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%; 0.00%)</title><rect x="1169.5" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.54" y="703.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%; +0.02%)</title><rect x="83.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.60" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,054 samples, 19.86%; +0.17%)</title><rect x="880.5" y="629" width="234.3" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="883.49" y="639.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>sstables::sstable::write_components (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="72.5" y="565" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.48" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="825.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.35" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_token_present (1 samples, 0.02%; 0.00%)</title><rect x="31.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.35" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (1 samples, 0.02%; +0.02%)</title><rect x="28.2" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="31.23" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="61.4" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.36" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; -0.02%)</title><rect x="584.8" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="587.77" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; -0.04%)</title><rect x="416.5" y="309" width="0.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="419.45" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (2 samples, 0.04%; +0.02%)</title><rect x="677.5" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="680.49" y="623.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; 0.00%)</title><rect x="1043.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.92" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="112.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.28" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; +0.02%)</title><rect x="577.2" y="469" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="580.21" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="844.7" y="581" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.69" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_users_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.03" y="559.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::work_item, 128ul&gt;::emplace_back&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="869.4" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.37" y="511.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (22 samples, 0.41%; -0.04%)</title><rect x="917.2" y="549" width="4.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="920.18" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::impl::impl (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="431.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.15" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.06%)</title><rect x="846.3" y="549" width="0.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="849.25" y="559.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_type_statement*, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="69.1" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.14" y="527.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (9 samples, 0.17%; -0.06%)</title><rect x="287.7" y="373" width="2.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="290.71" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::cf_name&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="66.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.48" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="70.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.92" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="639.5" ></text>
</g>
<g >
<title>sstables::serialized_size&lt;sstables::compaction_metadata&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="623.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="750.6" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="753.64" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="947.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="950.42" y="495.5" ></text>
</g>
<g >
<title>seastar::file_desc::read (1 samples, 0.02%; +0.02%)</title><rect x="1168.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1171.65" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.02" y="383.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="212.8" y="389" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="215.78" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (4 samples, 0.08%; +0.08%)</title><rect x="451.1" y="549" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="454.14" y="559.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%; 0.00%)</title><rect x="65.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.14" y="479.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; 0.00%)</title><rect x="982.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.10" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%; +0.02%)</title><rect x="85.6" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.60" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (7 samples, 0.13%; -0.04%)</title><rect x="28.2" y="389" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="31.23" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; -0.02%)</title><rect x="41.8" y="373" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.80" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.91" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (21 samples, 0.40%; -0.04%)</title><rect x="577.7" y="485" width="4.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="580.65" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; +0.02%)</title><rect x="50.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.69" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%; +0.02%)</title><rect x="267.3" y="309" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.26" y="319.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%; +0.02%)</title><rect x="356.9" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="359.86" y="399.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="559.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="518.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.51" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_function_statement, std::default_delete&lt;cql3::statements::drop_function_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.9" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.92" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="98.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.49" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="48.5" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.47" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="431.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="558.5" y="549" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="561.53" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="605.2" y="565" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="608.23" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%; +0.02%)</title><rect x="1016.1" y="405" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1019.12" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1120.2" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.18" y="431.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (8 samples, 0.15%; +0.04%)</title><rect x="1005.9" y="373" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1008.90" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::statement_restrictions, false&gt;::make&lt;database&amp;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, cql3::statements::statement_type const&amp;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, cql3::prepare_context&amp;, bool, bool&amp;, bool&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%; +0.06%)</title><rect x="605.7" y="565" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="608.67" y="575.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; 0.00%)</title><rect x="669.0" y="661" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.04" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="475.8" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="478.82" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="549" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="559.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="21.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.78" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="20.2" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.23" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="865.4" y="677" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.37" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (2 samples, 0.04%; +0.04%)</title><rect x="471.4" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="474.37" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; -0.02%)</title><rect x="45.6" y="309" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="48.58" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="71.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="74.59" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (1 samples, 0.02%; 0.00%)</title><rect x="88.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.49" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; +0.04%)</title><rect x="764.0" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="766.98" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (2 samples, 0.04%; 0.00%)</title><rect x="25.8" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.79" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (10 samples, 0.19%; +0.02%)</title><rect x="285.3" y="389" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="288.27" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="116.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="119.28" y="671.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (11 samples, 0.21%; 0.00%)</title><rect x="287.7" y="389" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="290.71" y="399.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%; -0.02%)</title><rect x="339.7" y="389" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="342.74" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="29.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.12" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1029.7" y="405" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1032.69" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="184.5" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="187.54" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="575.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (14 samples, 0.26%; +0.02%)</title><rect x="726.0" y="629" width="3.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="728.96" y="639.5" ></text>
</g>
<g >
<title>sstables::sstable::open_or_create_data (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="575.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="415.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%; +0.02%)</title><rect x="653.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="656.03" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="434.9" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="437.91" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%; +0.02%)</title><rect x="1081.9" y="581" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1084.94" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (98 samples, 1.85%; 0.00%)</title><rect x="514.5" y="469" width="21.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="517.51" y="479.5" >p..</text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.11%; +0.02%)</title><rect x="1147.8" y="613" width="1.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1150.75" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.02%)</title><rect x="480.3" y="485" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="483.27" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.48" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (5 samples, 0.09%; 0.00%)</title><rect x="637.2" y="581" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.24" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="985.2" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="988.22" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="677.7" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="680.71" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="62.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.47" y="495.5" ></text>
</g>
<g >
<title>query::result::builder::builder (1 samples, 0.02%; +0.02%)</title><rect x="609.7" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="612.67" y="623.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (7 samples, 0.13%; +0.02%)</title><rect x="285.9" y="357" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="288.93" y="367.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;table&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, table::config, db::commitlog&amp;, compaction_manager&amp;, cell_locker_stats&amp;, cache_tracker&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="655.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="760.0" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.98" y="591.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="29.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.34" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (69 samples, 1.30%; 0.00%)</title><rect x="792.7" y="437" width="15.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="795.66" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (11 samples, 0.21%; -0.02%)</title><rect x="854.9" y="565" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="857.92" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (4 samples, 0.08%; +0.02%)</title><rect x="11.8" y="533" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.78" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="59.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.14" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="51.4" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.36" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; 0.00%)</title><rect x="679.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.93" y="655.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="511.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (5 samples, 0.09%; +0.02%)</title><rect x="617.2" y="613" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="620.23" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%; +0.02%)</title><rect x="1189.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.56" y="799.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="939.2" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="942.19" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="218.8" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="221.78" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (4 samples, 0.08%; 0.00%)</title><rect x="211.0" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="214.00" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="565.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="568.20" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (35 samples, 0.66%; 0.00%)</title><rect x="1145.5" y="645" width="7.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.53" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_destroy&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="56.0" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.03" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::tuple&lt;service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt;, true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.52" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="543.5" ></text>
</g>
<g >
<title>memtable_list::new_memtable (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (1 samples, 0.02%; +0.02%)</title><rect x="434.2" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="437.24" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="50.5" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.47" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; 0.00%)</title><rect x="1079.3" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.27" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="867.8" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.82" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="800.9" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="803.89" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="530.3" y="373" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="533.29" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::result_set, std::default_delete&lt;cql3::result_set&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="677.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.93" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%; +0.02%)</title><rect x="1075.0" y="517" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1078.05" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;unsigned long&gt;::then_impl_nrvo&lt;seastar::file_data_sink_impl::do_put (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1075.9" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1078.94" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="1143.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.08" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; 0.00%)</title><rect x="340.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.41" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="399.5" ></text>
</g>
<g >
<title>seastar::file::close (1 samples, 0.02%; +0.02%)</title><rect x="696.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.61" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; 0.00%)</title><rect x="1117.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.74" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (10 samples, 0.19%; +0.02%)</title><rect x="658.1" y="613" width="2.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="661.14" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (2 samples, 0.04%; 0.00%)</title><rect x="84.5" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="127.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; -0.02%)</title><rect x="453.1" y="597" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="456.14" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.04%)</title><rect x="673.0" y="661" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="676.04" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="103.2" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="106.16" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="98.7" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.72" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="350.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="353.86" y="351.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="518.3" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="521.29" y="431.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (47 samples, 0.89%; +0.04%)</title><rect x="911.6" y="565" width="10.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="914.62" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="865.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.15" y="687.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="753.5" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="756.53" y="479.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="80.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.48" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="577.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="579.99" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (44 samples, 0.83%; -0.02%)</title><rect x="557.4" y="597" width="9.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="560.42" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="111.5" ></text>
</g>
<g >
<title>std::function&lt;frozen_schema  (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="575.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (5 samples, 0.09%; 0.00%)</title><rect x="1127.1" y="325" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.08" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="693.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="696.72" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="812.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.45" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="292.4" y="405" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="295.38" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="837.8" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.80" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="1144.6" y="597" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1147.64" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.36%; 0.00%)</title><rect x="1126.0" y="485" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.96" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell_until&lt;sstables::mc::row_has_complex_deletion (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.11" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="476.0" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="479.04" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="683.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.49" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="291.7" y="341" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="294.71" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="766.4" y="501" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="769.43" y="511.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.09%; -0.02%)</title><rect x="1056.1" y="421" width="1.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1059.15" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (9 samples, 0.17%; +0.17%)</title><rect x="441.4" y="469" width="2.0" height="15.0" fill="rgb(255,91,91)" rx="2" ry="2" />
<text  x="444.35" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="249.9" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="252.91" y="303.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="68.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.70" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; 0.00%)</title><rect x="572.5" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.54" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.06%)</title><rect x="161.2" y="565" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="164.20" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (52 samples, 0.98%; 0.00%)</title><rect x="1003.9" y="405" width="11.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1006.89" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (58 samples, 1.09%; 0.00%)</title><rect x="27.1" y="533" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.12" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; -0.02%)</title><rect x="563.4" y="501" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="566.42" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; -0.17%)</title><rect x="633.9" y="613" width="0.2" height="15.0" fill="rgb(91,91,255)" rx="2" ry="2" />
<text  x="636.91" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="613" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (2 samples, 0.04%; 0.00%)</title><rect x="663.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.70" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="902.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="905.50" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="264.4" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="267.37" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="1114.6" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1117.62" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (5 samples, 0.09%; +0.09%)</title><rect x="1022.6" y="437" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1025.57" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="796.4" y="373" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="799.44" y="383.5" ></text>
</g>
<g >
<title>schema::position (2 samples, 0.04%; +0.02%)</title><rect x="1102.6" y="597" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1105.62" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; +0.06%)</title><rect x="967.0" y="501" width="2.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="969.99" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="931.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.41" y="575.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.58" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%; 0.00%)</title><rect x="30.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.23" y="431.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (1 samples, 0.02%; 0.00%)</title><rect x="1117.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.51" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; +0.02%)</title><rect x="696.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.39" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="552.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.08" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="711.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.29" y="639.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; +0.02%)</title><rect x="872.0" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.04" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="309.5" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="312.50" y="495.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%; 0.00%)</title><rect x="687.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.94" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="564.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="567.76" y="463.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::from_single_value (1 samples, 0.02%; +0.02%)</title><rect x="111.6" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="114.61" y="639.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (7 samples, 0.13%; 0.00%)</title><rect x="1126.6" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.63" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; 0.00%)</title><rect x="1122.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.63" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.09%)</title><rect x="974.8" y="485" width="2.0" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="977.77" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%; +0.02%)</title><rect x="1026.8" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1029.80" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; 0.00%)</title><rect x="1083.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.50" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (18 samples, 0.34%; +0.02%)</title><rect x="591.7" y="533" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="594.66" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="54.9" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.81" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.14" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%; -0.04%)</title><rect x="915.6" y="517" width="1.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="918.62" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%; -0.02%)</title><rect x="658.6" y="597" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="661.59" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (3 samples, 0.06%; +0.04%)</title><rect x="357.8" y="373" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="360.75" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1120.8" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1123.85" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.72%; -0.02%)</title><rect x="798.4" y="357" width="8.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="801.45" y="367.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="581" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="591.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_currentLine (1 samples, 0.02%; +0.02%)</title><rect x="32.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="35.90" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (465 samples, 8.76%; +0.04%)</title><rect x="335.5" y="453" width="103.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="338.52" y="463.5" >flat_mutatio..</text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="829.1" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="832.13" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.11%; +0.02%)</title><rect x="836.2" y="597" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="839.24" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (3 samples, 0.06%; 0.00%)</title><rect x="1017.5" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.46" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="159.6" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.64" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="479.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="482.82" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="1049.0" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1052.03" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="56.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.92" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_assign_base (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.03" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (26 samples, 0.49%; -0.02%)</title><rect x="265.0" y="357" width="5.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="268.03" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.92" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="591.2" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="594.22" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; +0.02%)</title><rect x="100.3" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="103.27" y="671.5" ></text>
</g>
<g >
<title>write&lt;unsigned int&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1120.4" y="453" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1123.41" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; -0.06%)</title><rect x="764.4" y="517" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="767.43" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (8 samples, 0.15%; 0.00%)</title><rect x="575.9" y="485" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.88" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="383.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; 0.00%)</title><rect x="803.8" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.78" y="303.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (10 samples, 0.19%; +0.04%)</title><rect x="523.6" y="405" width="2.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="526.62" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="755.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="758.75" y="591.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.02%)</title><rect x="711.7" y="629" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="714.73" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="977.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="980.66" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (4 samples, 0.08%; +0.06%)</title><rect x="940.5" y="517" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="943.53" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="81.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="84.60" y="591.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="12.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.89" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.04%)</title><rect x="193.2" y="405" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="196.21" y="415.5" ></text>
</g>
<g >
<title>std::filesystem::__cxx11::path::_Parser::next (1 samples, 0.02%; +0.02%)</title><rect x="87.6" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="90.60" y="799.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (5 samples, 0.09%; 0.00%)</title><rect x="787.3" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.33" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.2" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.25" y="399.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (5 samples, 0.09%; 0.00%)</title><rect x="74.9" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.93" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="80.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.48" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="527.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%; +0.02%)</title><rect x="423.1" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="426.12" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="557.0" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="559.98" y="591.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; 0.00%)</title><rect x="839.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.80" y="623.5" ></text>
</g>
<g >
<title>db::system_keyspace::set_local_host_id (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="687.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="701.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="704.95" y="623.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="106.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="109.50" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="539.0" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="541.97" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; +0.02%)</title><rect x="16.2" y="757" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="19.23" y="767.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (6 samples, 0.11%; +0.04%)</title><rect x="1154.4" y="629" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1157.42" y="639.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%; 0.00%)</title><rect x="135.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="138.85" y="591.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::native_value_clone_visitor&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (368 samples, 6.93%; -0.04%)</title><rect x="201.2" y="437" width="81.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="204.22" y="447.5" >partition..</text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; -0.04%)</title><rect x="323.1" y="565" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="326.07" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="820.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="823.68" y="559.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (357 samples, 6.73%; +0.11%)</title><rect x="342.2" y="405" width="79.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="345.19" y="415.5" >compact_m..</text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (2 samples, 0.04%; 0.00%)</title><rect x="12.9" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.89" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="500.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.72" y="399.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (449 samples, 8.46%; +0.04%)</title><rect x="197.7" y="453" width="99.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="200.66" y="463.5" >logalloc::al..</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.06%)</title><rect x="119.6" y="645" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="122.62" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="510.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.95" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%; -0.04%)</title><rect x="695.7" y="453" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="698.72" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="20.0" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="23.01" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (9 samples, 0.17%; 0.00%)</title><rect x="946.8" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.75" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (3 samples, 0.06%; +0.06%)</title><rect x="1021.9" y="437" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1024.91" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="58.5" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="383.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; -0.02%)</title><rect x="754.4" y="453" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="757.42" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume (184 samples, 3.47%; -0.02%)</title><rect x="357.1" y="389" width="40.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="360.08" y="399.5" >que..</text>
</g>
<g >
<title>cql3_parser::CqlParser::query (211 samples, 3.98%; +0.02%)</title><rect x="26.5" y="581" width="46.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="29.45" y="591.5" >cql3..</text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.04%)</title><rect x="694.8" y="661" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="697.83" y="671.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.04%)</title><rect x="631.9" y="549" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="634.91" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; -0.09%)</title><rect x="1036.6" y="469" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="1039.58" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="40.9" y="341" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.91" y="351.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="111.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.61" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="703.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="52.5" y="437" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="55.47" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (4 samples, 0.08%; +0.06%)</title><rect x="22.9" y="645" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="25.90" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (17 samples, 0.32%; -0.04%)</title><rect x="468.7" y="453" width="3.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="471.70" y="463.5" ></text>
</g>
<g >
<title>memtable_list::flush (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="463.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (6 samples, 0.11%; 0.00%)</title><rect x="110.1" y="677" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="687.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (15 samples, 0.28%; +0.04%)</title><rect x="476.5" y="485" width="3.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="479.49" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; 0.00%)</title><rect x="505.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="508.39" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1114.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1117.40" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="630.8" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="633.80" y="591.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="297.1" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="300.05" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (2 samples, 0.04%; +0.04%)</title><rect x="774.7" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="777.65" y="559.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%; 0.00%)</title><rect x="138.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.52" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; +0.02%)</title><rect x="271.3" y="325" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="274.26" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (1 samples, 0.02%; 0.00%)</title><rect x="857.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.37" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (134 samples, 2.52%; -0.09%)</title><rect x="570.3" y="581" width="29.8" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="573.32" y="591.5" >fl..</text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.06%)</title><rect x="1162.0" y="629" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1164.98" y="639.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (31 samples, 0.58%; -0.02%)</title><rect x="1056.1" y="453" width="6.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1059.15" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1093.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1096.72" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (68 samples, 1.28%; -0.02%)</title><rect x="792.9" y="421" width="15.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="795.89" y="431.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; -0.02%)</title><rect x="756.2" y="581" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="759.20" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (65 samples, 1.22%; +0.02%)</title><rect x="1003.7" y="421" width="14.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1006.67" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="70.0" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.03" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="1155.8" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1158.76" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="598.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="601.55" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.04%)</title><rect x="49.4" y="277" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="52.36" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="44.7" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.69" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (24 samples, 0.45%; 0.00%)</title><rect x="868.3" y="645" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.26" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="320.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="323.62" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="67.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.37" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (2 samples, 0.04%; +0.02%)</title><rect x="239.2" y="261" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="242.24" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.71" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="399.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="826.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.91" y="463.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="803.6" y="309" width="0.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="806.56" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; 0.00%)</title><rect x="756.2" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.20" y="575.5" ></text>
</g>
<g >
<title>posix_memalign (6 samples, 0.11%; -0.02%)</title><rect x="244.4" y="229" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="247.35" y="239.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="575.9" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="578.88" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="664.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.15" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="1017.2" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1020.24" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="33.3" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.35" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="835.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="838.58" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="543.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="607.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (1 samples, 0.02%; 0.00%)</title><rect x="1161.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1164.32" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (1 samples, 0.02%; -0.02%)</title><rect x="190.3" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="193.32" y="431.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1169.8" y="805" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.77" y="815.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (1 samples, 0.02%; +0.02%)</title><rect x="612.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="615.56" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.48" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (3 samples, 0.06%; -0.04%)</title><rect x="271.0" y="341" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="274.04" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="367.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (25 samples, 0.47%; -0.02%)</title><rect x="100.9" y="661" width="5.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="103.94" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="767.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (2 samples, 0.04%; +0.02%)</title><rect x="622.8" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="625.79" y="623.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (3 samples, 0.06%; -0.02%)</title><rect x="801.8" y="293" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="804.78" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (11 samples, 0.21%; +0.02%)</title><rect x="631.2" y="581" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.24" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="733.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="736.08" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="648.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.81" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (6 samples, 0.11%; -0.02%)</title><rect x="398.9" y="373" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="401.89" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::close (2 samples, 0.04%; -0.06%)</title><rect x="128.5" y="629" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="131.51" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="1093.3" y="501" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1096.28" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (11 samples, 0.21%; 0.00%)</title><rect x="1123.1" y="469" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.07" y="479.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.43" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="82.0" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.04" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="938.7" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.75" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (32 samples, 0.60%; 0.00%)</title><rect x="748.6" y="565" width="7.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.64" y="575.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="540.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="543.08" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="196.1" y="453" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="199.11" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (199 samples, 3.75%; -0.02%)</title><rect x="27.1" y="565" width="44.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="30.12" y="575.5" >cql3..</text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (7 samples, 0.13%; 0.00%)</title><rect x="869.8" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.82" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (3 samples, 0.06%; -0.04%)</title><rect x="1050.6" y="469" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1053.59" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.71" y="559.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (19 samples, 0.36%; +0.04%)</title><rect x="978.1" y="469" width="4.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="981.10" y="479.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; +0.02%)</title><rect x="561.9" y="533" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="564.87" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="137.0" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="139.96" y="559.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; +0.02%)</title><rect x="10.4" y="773" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.44" y="783.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (3 samples, 0.06%; +0.04%)</title><rect x="305.3" y="501" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="308.28" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1133.5" y="677" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1136.52" y="687.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="591.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::external_memory_usage (4 samples, 0.08%; +0.06%)</title><rect x="258.1" y="293" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="261.14" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="584.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="587.77" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="595.9" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="598.89" y="543.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (3 samples, 0.06%; +0.04%)</title><rect x="843.1" y="517" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="846.14" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="568.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.76" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="937.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="940.41" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="779.5" y="533" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="782.55" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::create_columns_from_column_rows (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.02%)</title><rect x="792.9" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="795.89" y="415.5" ></text>
</g>
<g >
<title>compound_type&lt; (9 samples, 0.17%; -0.06%)</title><rect x="915.2" y="533" width="2.0" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="918.18" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; +0.06%)</title><rect x="750.9" y="533" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="753.86" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%; 0.00%)</title><rect x="63.1" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (2 samples, 0.04%; +0.02%)</title><rect x="52.9" y="325" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.91" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_S_do_relocate (1 samples, 0.02%; +0.02%)</title><rect x="80.0" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.04" y="447.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (67 samples, 1.26%; -0.06%)</title><rect x="793.1" y="405" width="14.9" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="796.11" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="52.9" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="383.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (5 samples, 0.09%; +0.02%)</title><rect x="193.0" y="421" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="195.99" y="431.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (9 samples, 0.17%; +0.02%)</title><rect x="860.3" y="629" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="863.26" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; +0.02%)</title><rect x="340.6" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="343.63" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (12 samples, 0.23%; +0.04%)</title><rect x="666.4" y="645" width="2.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="669.37" y="655.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="783.5" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="786.55" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (16 samples, 0.30%; +0.02%)</title><rect x="869.6" y="581" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="872.60" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (2 samples, 0.04%; 0.00%)</title><rect x="564.8" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="567.76" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="82.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.71" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="56.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.92" y="415.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; -0.06%)</title><rect x="573.7" y="501" width="1.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="576.65" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="210.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.11" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; -0.02%)</title><rect x="794.7" y="325" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="797.67" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%; 0.00%)</title><rect x="696.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.39" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (3 samples, 0.06%; -0.04%)</title><rect x="619.9" y="613" width="0.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="622.90" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="663.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.04" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%; +0.02%)</title><rect x="50.0" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.02" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::smp_pollfn::poll (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (21 samples, 0.40%; -0.02%)</title><rect x="272.8" y="389" width="4.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="275.82" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; 0.00%)</title><rect x="985.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.66" y="495.5" ></text>
</g>
<g >
<title>row::compact_and_expire (2 samples, 0.04%; 0.00%)</title><rect x="695.7" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.72" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="959.4" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.43" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="661.7" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="664.70" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; 0.00%)</title><rect x="679.3" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.27" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (45 samples, 0.85%; -0.04%)</title><rect x="709.5" y="661" width="10.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="712.51" y="671.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="950.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.75" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (4 samples, 0.08%; +0.06%)</title><rect x="1070.6" y="453" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1073.60" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (2 samples, 0.04%; -0.02%)</title><rect x="825.1" y="501" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="828.13" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (25 samples, 0.47%; +0.02%)</title><rect x="852.5" y="613" width="5.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="855.48" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (7 samples, 0.13%; +0.06%)</title><rect x="1093.9" y="533" width="1.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1096.95" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (7 samples, 0.13%; 0.00%)</title><rect x="59.6" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.58" y="431.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%; 0.00%)</title><rect x="641.7" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.69" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="481.4" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="484.38" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (33 samples, 0.62%; +0.02%)</title><rect x="427.8" y="437" width="7.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="430.79" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (2 samples, 0.04%; +0.02%)</title><rect x="24.0" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="27.01" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="204.3" y="405" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="207.33" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="83.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.15" y="639.5" ></text>
</g>
<g >
<title>service::storage_service::init_server (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="671.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;sstables::file_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="13.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="16.11" y="623.5" ></text>
</g>
<g >
<title>clustering_key_prefix::clustering_key_prefix (1 samples, 0.02%; 0.00%)</title><rect x="1118.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.63" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.02%)</title><rect x="673.3" y="661" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="676.26" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1097.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1100.28" y="575.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; 0.00%)</title><rect x="818.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.90" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.09%; -0.02%)</title><rect x="314.2" y="469" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="317.17" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="651.7" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="654.70" y="671.5" ></text>
</g>
<g >
<title>compound_type&lt; (15 samples, 0.28%; 0.00%)</title><rect x="925.9" y="549" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.85" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.07" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="435.1" y="437" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="438.13" y="447.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (1 samples, 0.02%; +0.02%)</title><rect x="480.9" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="483.93" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; -0.06%)</title><rect x="957.4" y="533" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="960.42" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (26 samples, 0.49%; +0.04%)</title><rect x="206.1" y="405" width="5.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="209.11" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="815.3" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="818.34" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1137.7" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1140.75" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (4 samples, 0.08%; 0.00%)</title><rect x="56.7" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.69" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (2 samples, 0.04%; +0.02%)</title><rect x="946.3" y="581" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="949.31" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="63.4" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.36" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (3 samples, 0.06%; 0.00%)</title><rect x="1124.9" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.85" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; +0.02%)</title><rect x="138.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="141.52" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="575.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%; +0.02%)</title><rect x="1133.1" y="677" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.08" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1030.1" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1033.13" y="463.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%; 0.00%)</title><rect x="624.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="627.57" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="109.2" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="112.17" y="671.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (36 samples, 0.68%; +0.02%)</title><rect x="1122.4" y="517" width="8.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.41" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.0" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (40 samples, 0.75%; 0.00%)</title><rect x="557.6" y="581" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="560.64" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="719.5" y="661" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="722.51" y="671.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%; +0.02%)</title><rect x="25.1" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="28.12" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="802.4" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="805.45" y="335.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="623.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (76 samples, 1.43%; +0.09%)</title><rect x="1083.9" y="597" width="16.9" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1086.94" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="709.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="712.28" y="655.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (7 samples, 0.13%; +0.09%)</title><rect x="1097.5" y="565" width="1.6" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1100.50" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1125.1" y="277" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.07" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="399.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="655.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%; 0.00%)</title><rect x="872.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.49" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="310.2" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="313.17" y="511.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="575.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (139 samples, 2.62%; 0.00%)</title><rect x="223.5" y="341" width="30.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="226.45" y="351.5" >cl..</text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="687.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="524.3" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.29" y="383.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="420.9" y="389" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="423.90" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (7 samples, 0.13%; +0.13%)</title><rect x="739.3" y="565" width="1.6" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="742.30" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="86.9" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.93" y="799.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="679.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="682.49" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (13 samples, 0.24%; -0.02%)</title><rect x="1027.2" y="437" width="2.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1030.24" y="447.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%; +0.02%)</title><rect x="38.0" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="41.02" y="415.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="818.5" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="821.46" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="41.6" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1112.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1114.96" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="463.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; -0.08%)</title><rect x="367.8" y="357" width="0.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="370.76" y="367.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (6 samples, 0.11%; +0.02%)</title><rect x="635.0" y="581" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="638.02" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (6 samples, 0.11%; 0.00%)</title><rect x="45.1" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="966.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.32" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (3 samples, 0.06%; +0.06%)</title><rect x="850.9" y="629" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="853.92" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="623.5" ></text>
</g>
<g >
<title>query_state::query_state (1 samples, 0.02%; -0.02%)</title><rect x="129.4" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="132.40" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="18.9" y="709" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.89" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (70 samples, 1.32%; -0.06%)</title><rect x="404.7" y="357" width="15.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="407.67" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1122.6" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1125.63" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="969.9" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="972.88" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (15 samples, 0.28%; 0.00%)</title><rect x="765.3" y="549" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="768.32" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="303.1" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="306.05" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%; +0.06%)</title><rect x="275.5" y="325" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="278.48" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (7 samples, 0.13%; 0.00%)</title><rect x="444.7" y="453" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.69" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.09%)</title><rect x="104.1" y="597" width="0.4" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="107.05" y="607.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (61 samples, 1.15%; -0.02%)</title><rect x="570.3" y="565" width="13.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="573.32" y="575.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; -0.04%)</title><rect x="38.9" y="485" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="41.91" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (7 samples, 0.13%; +0.09%)</title><rect x="364.6" y="357" width="1.6" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="367.64" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (1 samples, 0.02%; +0.02%)</title><rect x="1073.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1076.49" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="531.9" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="534.85" y="415.5" ></text>
</g>
<g >
<title>service::client_state::has_access (4 samples, 0.08%; 0.00%)</title><rect x="84.3" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.26" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_function_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.81" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (3 samples, 0.06%; +0.06%)</title><rect x="276.8" y="357" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="279.82" y="367.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.06%)</title><rect x="289.9" y="373" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="292.94" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.02" y="351.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="367.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (1 samples, 0.02%; 0.00%)</title><rect x="720.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.62" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; +0.02%)</title><rect x="62.9" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.92" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (304 samples, 5.73%; 0.00%)</title><rect x="18.2" y="773" width="67.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="783.5" >seastar..</text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (4 samples, 0.08%; 0.00%)</title><rect x="775.5" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="778.54" y="527.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; +0.04%)</title><rect x="72.7" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="75.70" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="438.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="441.46" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="444.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="447.47" y="463.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (9 samples, 0.17%; +0.02%)</title><rect x="558.3" y="565" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="561.31" y="575.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="820.0" y="469" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="823.01" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="495.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (4 samples, 0.08%; +0.02%)</title><rect x="613.5" y="581" width="0.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="616.45" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (2 samples, 0.04%; +0.04%)</title><rect x="722.8" y="677" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="725.85" y="687.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; -0.06%)</title><rect x="872.0" y="437" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="875.04" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.47" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.48" y="559.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="27.3" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="30.34" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; 0.00%)</title><rect x="576.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="579.54" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="667.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.70" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="121.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="124.62" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (6 samples, 0.11%; +0.04%)</title><rect x="291.0" y="389" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="294.05" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="468.3" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.26" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="104.7" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="107.72" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="443.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="446.58" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (13 samples, 0.24%; +0.02%)</title><rect x="817.8" y="533" width="2.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="820.79" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;mutation_cleaner_impl&gt;::make&lt;logalloc::region&amp;, cache_tracker*&amp;, mutation_cleaner*, mutation_application_stats&amp;, seastar::scheduling_group&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; -0.04%)</title><rect x="212.8" y="373" width="1.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="215.78" y="383.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="480.3" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.27" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="536.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="539.07" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (38 samples, 0.72%; -0.09%)</title><rect x="486.5" y="469" width="8.4" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="489.49" y="479.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="52.9" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;mutation_cleaner_impl::worker&gt;::make&lt;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_slice_or_needs_filtering (8 samples, 0.15%; 0.00%)</title><rect x="658.6" y="581" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.59" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="671.9" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="674.93" y="671.5" ></text>
</g>
<g >
<title>row::external_memory_usage (36 samples, 0.68%; +0.02%)</title><rect x="255.5" y="325" width="8.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="258.47" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; +0.06%)</title><rect x="1079.7" y="533" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1082.72" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="790.0" y="405" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="793.00" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%; 0.00%)</title><rect x="816.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.23" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.24%; +0.02%)</title><rect x="102.1" y="645" width="2.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="105.05" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="530.5" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="533.52" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%; -0.04%)</title><rect x="899.6" y="453" width="1.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="902.61" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="776.7" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="779.66" y="543.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (24 samples, 0.45%; +0.04%)</title><rect x="977.0" y="485" width="5.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="979.99" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.06%)</title><rect x="681.9" y="645" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="684.94" y="655.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (9 samples, 0.17%; -0.08%)</title><rect x="738.9" y="581" width="2.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="741.86" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (44 samples, 0.83%; 0.00%)</title><rect x="73.4" y="645" width="9.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.37" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.09%; 0.00%)</title><rect x="48.7" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1080.4" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1083.38" y="559.5" ></text>
</g>
<g >
<title>from_hex (5 samples, 0.09%; +0.08%)</title><rect x="74.9" y="517" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="77.93" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="813.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.12" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="303.5" ></text>
</g>
<g >
<title>mutation_cleaner_impl::mutation_cleaner_impl (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="447.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="1130.6" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.63" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (4 samples, 0.08%; 0.00%)</title><rect x="11.8" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.78" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="303.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::truncate (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.09%; -0.02%)</title><rect x="766.2" y="517" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="769.21" y="527.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (1 samples, 0.02%; -0.02%)</title><rect x="339.5" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="342.52" y="415.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="1117.7" y="341" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.74" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (9 samples, 0.17%; -0.02%)</title><rect x="860.3" y="645" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="863.26" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="568.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="571.54" y="607.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="575.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (15 samples, 0.28%; +0.09%)</title><rect x="913.8" y="549" width="3.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="916.84" y="559.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (59 samples, 1.11%; +0.02%)</title><rect x="1055.9" y="469" width="13.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1058.92" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (8 samples, 0.15%; -0.02%)</title><rect x="1106.8" y="581" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1109.84" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (2 samples, 0.04%; +0.04%)</title><rect x="447.4" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="450.36" y="543.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="315.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="318.06" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="455.8" y="533" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="458.81" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%; +0.02%)</title><rect x="552.5" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.53" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="46.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.02" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (5 samples, 0.09%; +0.02%)</title><rect x="797.1" y="357" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="800.11" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="665.7" y="645" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="668.70" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (197 samples, 3.71%; +0.09%)</title><rect x="986.6" y="469" width="43.8" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="989.55" y="479.5" >serv..</text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (4 samples, 0.08%; +0.04%)</title><rect x="685.3" y="629" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="688.27" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (4 samples, 0.08%; 0.00%)</title><rect x="104.9" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.94" y="655.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="986.3" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="989.33" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; 0.00%)</title><rect x="699.3" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.28" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (203 samples, 3.83%; -0.02%)</title><rect x="985.9" y="485" width="45.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="988.88" y="495.5" >serv..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; 0.00%)</title><rect x="450.7" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="453.69" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="46.7" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="49.69" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="972.8" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="975.77" y="447.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (5 samples, 0.09%; 0.00%)</title><rect x="78.5" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.48" y="575.5" ></text>
</g>
<g >
<title>std::addressof&lt;char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="55.1" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.14" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1132.52" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="196.5" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="199.55" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="468.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.04" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.02%)</title><rect x="1010.1" y="293" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1013.12" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (27 samples, 0.51%; +0.02%)</title><rect x="1036.8" y="501" width="6.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1039.80" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (5 samples, 0.09%; 0.00%)</title><rect x="79.8" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1079.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.05" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1167.3" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.32" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1129.5" y="357" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1132.52" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1128.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.96" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="445.8" y="421" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="448.80" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="830.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.69" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="834.0" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="837.02" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.11%)</title><rect x="328.8" y="453" width="1.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="331.85" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="581.9" y="469" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="584.88" y="479.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.5" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.47" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (8 samples, 0.15%; +0.02%)</title><rect x="398.4" y="389" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="401.44" y="399.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (2 samples, 0.04%; +0.02%)</title><rect x="945.9" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="948.86" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="45.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="367.5" ></text>
</g>
<g >
<title>locator::simple_snitch::get_datacenter (1 samples, 0.02%; 0.00%)</title><rect x="1124.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.41" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (9 samples, 0.17%; -0.04%)</title><rect x="1164.2" y="613" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1167.21" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1128.9" y="213" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.85" y="223.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="680.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="683.16" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%; 0.00%)</title><rect x="104.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.28" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="559.6" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="562.64" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="603.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.67" y="575.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (3 samples, 0.06%; -0.02%)</title><rect x="370.9" y="357" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="373.87" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (71 samples, 1.34%; +0.04%)</title><rect x="1141.3" y="661" width="15.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1144.31" y="671.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (39 samples, 0.73%; -0.02%)</title><rect x="1170.7" y="805" width="8.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1173.66" y="815.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="55.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.58" y="287.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="194.1" y="437" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="197.10" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="925.6" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="928.63" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.09%; +0.04%)</title><rect x="1143.3" y="613" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1146.31" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%; 0.00%)</title><rect x="720.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.62" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="639.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%; 0.00%)</title><rect x="36.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.90" y="447.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;utils::chunked_vector&lt;gms::inet_address, 131072ul&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.19" y="687.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="73.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.81" y="575.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="783.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (7 samples, 0.13%; 0.00%)</title><rect x="40.7" y="533" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.68" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="203.9" y="421" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="206.89" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.08%; +0.06%)</title><rect x="1158.6" y="645" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1161.65" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (16 samples, 0.30%; -0.02%)</title><rect x="293.7" y="437" width="3.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="296.72" y="447.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%; 0.00%)</title><rect x="695.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="463.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (21 samples, 0.40%; 0.00%)</title><rect x="1115.1" y="485" width="4.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (1 samples, 0.02%; -0.02%)</title><rect x="869.4" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="872.37" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%; +0.08%)</title><rect x="829.4" y="501" width="2.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="832.35" y="511.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; 0.00%)</title><rect x="953.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.98" y="575.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (3 samples, 0.06%; +0.02%)</title><rect x="282.2" y="421" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="285.15" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="815.8" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="818.79" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="834.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="837.47" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="30.0" y="421" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="33.01" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="367.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.09%; -0.02%)</title><rect x="1119.7" y="485" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1122.74" y="495.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::from_singular&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.95" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_index_statement&gt;, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="68.3" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.26" y="559.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; 0.00%)</title><rect x="600.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.33" y="623.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="543.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%; -0.02%)</title><rect x="369.1" y="357" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="372.09" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (19 samples, 0.36%; 0.00%)</title><rect x="681.9" y="661" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.94" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="603.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="606.00" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="527.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%; +0.02%)</title><rect x="966.3" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="969.32" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="60.3" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="63.25" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="711.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="714.51" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="463.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::AllocatorType (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="626.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="629.13" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::expr::expression const*, cql3::expr::expression*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="415.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1140.2" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1143.19" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%; -0.02%)</title><rect x="680.4" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="683.38" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.04" y="463.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; +0.02%)</title><rect x="86.9" y="725" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.93" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="53.1" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.14" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%; -0.02%)</title><rect x="479.2" y="437" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="482.15" y="447.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (465 samples, 8.76%; 0.00%)</title><rect x="453.4" y="597" width="103.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="456.36" y="607.5" >query::queri..</text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (10 samples, 0.19%; +0.04%)</title><rect x="579.4" y="469" width="2.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="582.43" y="479.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.6" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="64.58" y="447.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="695.9" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.94" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="145.0" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="147.97" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="693.9" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="696.94" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1169.5" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1172.54" y="687.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1164.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.99" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (10 samples, 0.19%; -0.02%)</title><rect x="136.5" y="581" width="2.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="139.52" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; +0.02%)</title><rect x="54.7" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.69" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_initial_partition_key_restrictions (1 samples, 0.02%; +0.02%)</title><rect x="79.6" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.59" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="651.0" y="661" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="654.03" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.08%)</title><rect x="1089.1" y="533" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1092.05" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (4 samples, 0.08%; +0.08%)</title><rect x="569.4" y="597" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="572.43" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (6 samples, 0.11%; -0.06%)</title><rect x="819.3" y="501" width="1.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="822.35" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (2 samples, 0.04%; +0.04%)</title><rect x="623.2" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="626.24" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%; -0.08%)</title><rect x="399.6" y="341" width="0.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="402.55" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="40.7" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.68" y="495.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="268.1" y="325" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="271.15" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="440.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="443.24" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (10 samples, 0.19%; 0.00%)</title><rect x="59.1" y="453" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.14" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (585 samples, 11.02%; +0.04%)</title><rect x="951.4" y="581" width="130.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="954.42" y="591.5" >service::storage..</text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (2 samples, 0.04%; 0.00%)</title><rect x="580.3" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.32" y="463.5" ></text>
</g>
<g >
<title>schema_registry::learn (4 samples, 0.08%; 0.00%)</title><rect x="112.1" y="645" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="655.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="1042.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.36" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="663.3" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="666.26" y="639.5" ></text>
</g>
<g >
<title>compound_type&lt; (11 samples, 0.21%; +0.02%)</title><rect x="926.7" y="533" width="2.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="929.74" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="554.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="557.31" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (2 samples, 0.04%; +0.04%)</title><rect x="833.1" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="836.13" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (2 samples, 0.04%; 0.00%)</title><rect x="142.5" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="145.52" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (12 samples, 0.23%; +0.04%)</title><rect x="207.0" y="389" width="2.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="210.00" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="63.1" y="309" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="66.14" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="796.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.00" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="1099.3" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.28" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="575.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="30.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.01" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%; 0.00%)</title><rect x="822.5" y="533" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="825.46" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.08%)</title><rect x="838.7" y="597" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="841.69" y="607.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (5 samples, 0.09%; +0.08%)</title><rect x="461.4" y="517" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="464.37" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (3 samples, 0.06%; +0.06%)</title><rect x="627.2" y="613" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="630.24" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1122.07" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="1026.4" y="421" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1029.35" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (2 samples, 0.04%; 0.00%)</title><rect x="49.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.36" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.70" y="463.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (220 samples, 4.15%; 0.00%)</title><rect x="24.5" y="613" width="48.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="623.5" >cql3..</text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (1 samples, 0.02%; 0.00%)</title><rect x="1129.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.52" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="56.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.69" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="545.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="547.97" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="719.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (8 samples, 0.15%; 0.00%)</title><rect x="871.4" y="565" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.38" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (26 samples, 0.49%; 0.00%)</title><rect x="440.5" y="485" width="5.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="443.47" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,069 samples, 20.14%; +0.28%)</title><rect x="877.2" y="645" width="237.6" height="15.0" fill="rgb(255,13,13)" rx="2" ry="2" />
<text  x="880.16" y="655.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_function_statement*, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="71.03" y="511.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; -0.02%)</title><rect x="892.9" y="565" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="895.94" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; -0.02%)</title><rect x="303.5" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="306.50" y="511.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="444.7" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="447.69" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1117.1" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.07" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.58" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="900.7" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="903.73" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::hint_to_dead_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1123.7" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.74" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,377 samples, 44.79%; +0.09%)</title><rect x="113.6" y="677" width="528.5" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="116.61" y="687.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;sstables::sstable_directory&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state_base::future_state_base (1 samples, 0.02%; +0.02%)</title><rect x="84.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.71" y="527.5" ></text>
</g>
<g >
<title>utils::filter::bloom_filter::add (1 samples, 0.02%; +0.02%)</title><rect x="12.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="15.67" y="607.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (1 samples, 0.02%; +0.02%)</title><rect x="13.8" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="16.78" y="783.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%; +0.02%)</title><rect x="901.4" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="904.39" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (4 samples, 0.08%; 0.00%)</title><rect x="11.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.78" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; 0.00%)</title><rect x="575.4" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.43" y="495.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; 0.00%)</title><rect x="1104.4" y="581" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1107.40" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="30.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.90" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (31 samples, 0.58%; 0.00%)</title><rect x="428.2" y="421" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="431.24" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; 0.00%)</title><rect x="582.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="585.32" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_type_statement*, std::default_delete&lt;cql3::statements::drop_type_statement&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="69.6" y="533" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="72.59" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="947.9" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="950.86" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="773.5" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="776.54" y="527.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="55.6" y="261" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="58.58" y="271.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%; 0.00%)</title><rect x="825.1" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.13" y="527.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (5 samples, 0.09%; 0.00%)</title><rect x="1168.4" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.43" y="655.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.89" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="351.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (455 samples, 8.57%; +0.06%)</title><rect x="453.8" y="581" width="101.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="456.81" y="591.5" >mutation_sou..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (4 samples, 0.08%; 0.00%)</title><rect x="807.1" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="810.12" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%; +0.06%)</title><rect x="912.1" y="549" width="1.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="915.07" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="567.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="569.98" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1013.7" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1016.68" y="383.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (40 samples, 0.75%; +0.04%)</title><rect x="495.4" y="485" width="8.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="498.39" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (9 samples, 0.17%; 0.00%)</title><rect x="939.4" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.41" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%; -0.04%)</title><rect x="756.0" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="758.98" y="591.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (10 samples, 0.19%; +0.06%)</title><rect x="393.3" y="341" width="2.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="396.33" y="351.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="49.4" y="325" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="52.36" y="335.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1129.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1123.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.52" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="479.5" ></text>
</g>
<g >
<title>std::operator- (3 samples, 0.06%; +0.02%)</title><rect x="48.7" y="341" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.69" y="351.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; 0.00%)</title><rect x="891.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.83" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%; +0.06%)</title><rect x="191.2" y="405" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="194.21" y="415.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (3 samples, 0.06%; 0.00%)</title><rect x="1124.9" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.85" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="813.3" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.34" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="40.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.46" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.34%; -0.02%)</title><rect x="1038.8" y="485" width="4.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1041.80" y="495.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; 0.00%)</title><rect x="1007.2" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1010.23" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="959.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="962.20" y="559.5" ></text>
</g>
<g >
<title>freeze (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="607.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="52.0" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="55.02" y="319.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="30.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="33.46" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.09%; +0.09%)</title><rect x="1136.2" y="661" width="1.1" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1139.19" y="671.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1165.8" y="597" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1168.76" y="607.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (543 samples, 10.23%; +0.06%)</title><rect x="730.2" y="629" width="120.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="733.18" y="639.5" >single_node_cql..</text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.09%; +0.04%)</title><rect x="1156.0" y="645" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1158.98" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="1167.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.32" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (11 samples, 0.21%; +0.08%)</title><rect x="477.2" y="453" width="2.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="480.15" y="463.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="73.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.81" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1012.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1015.34" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="631.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="634.68" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (6 samples, 0.11%; +0.08%)</title><rect x="132.5" y="613" width="1.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="135.51" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1111.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1114.51" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (214 samples, 4.03%; +0.06%)</title><rect x="890.1" y="597" width="47.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="893.05" y="607.5" >cql3..</text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="935.6" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="938.63" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="45.4" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::delete_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.26" y="559.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="585.4" y="517" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="588.44" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%; 0.00%)</title><rect x="1169.5" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.54" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="116.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="119.50" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="937.2" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.19" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="838.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.25" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (2 samples, 0.04%; 0.00%)</title><rect x="25.8" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.79" y="607.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (1 samples, 0.02%; -0.02%)</title><rect x="1100.8" y="597" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1103.84" y="607.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.03" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="735.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getCharIndex (1 samples, 0.02%; 0.00%)</title><rect x="33.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.57" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="999.2" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1002.23" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%; 0.00%)</title><rect x="708.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.17" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (2 samples, 0.04%; -0.02%)</title><rect x="79.8" y="485" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="82.82" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="481.2" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="484.16" y="511.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; +0.02%)</title><rect x="296.6" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="299.61" y="399.5" ></text>
</g>
<g >
<title>sstables::sstable::create_data (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="671.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureISt5tupleIJEEE14discard_resultEvEUlDpOT_E_ZNS7_14then_impl_nrvoISB_NS4_IvEEEET0_OT_EUlOS3_RSB_ONS_12future_stateIS6_EEE_S6_E15run_and_disposeEv (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.50" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; 0.00%)</title><rect x="1115.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.51" y="431.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (40 samples, 0.75%; +0.02%)</title><rect x="1122.0" y="533" width="8.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.96" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.09%; -0.02%)</title><rect x="275.3" y="341" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="278.26" y="351.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="929.9" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="932.85" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; -0.02%)</title><rect x="930.7" y="565" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="933.74" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; -0.02%)</title><rect x="474.3" y="469" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="477.26" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::live_cell_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1118.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.18" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.14" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::drop_keyspace_statement, std::default_delete&lt;cql3::statements::drop_keyspace_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="69.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.37" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="121.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.40" y="655.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.45" y="703.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; -0.02%)</title><rect x="695.3" y="549" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="698.28" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="541.4" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="544.41" y="511.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (1 samples, 0.02%; -0.02%)</title><rect x="1169.1" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1172.10" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (7 samples, 0.13%; +0.04%)</title><rect x="670.4" y="661" width="1.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="673.37" y="671.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (579 samples, 10.91%; +0.13%)</title><rect x="323.3" y="565" width="128.7" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="326.29" y="575.5" >query::consume_p..</text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.02%)</title><rect x="862.0" y="597" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="865.04" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (2 samples, 0.04%; +0.04%)</title><rect x="911.2" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="914.18" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%; +0.02%)</title><rect x="368.2" y="341" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="371.20" y="351.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="62.7" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="65.70" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="718.6" y="629" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="721.62" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (40 samples, 0.75%; -0.11%)</title><rect x="894.7" y="501" width="8.9" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="897.72" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="335.5" ></text>
</g>
<g >
<title>table::set_hit_rate (11 samples, 0.21%; +0.04%)</title><rect x="716.2" y="629" width="2.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="719.18" y="639.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; 0.00%)</title><rect x="529.8" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.85" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; -0.02%)</title><rect x="692.4" y="645" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="695.39" y="655.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (2 samples, 0.04%; -0.02%)</title><rect x="434.5" y="389" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="437.46" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="629" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.04%)</title><rect x="1104.4" y="565" width="2.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1107.40" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="297.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.27" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasReachedFillbufferTarget (1 samples, 0.02%; +0.02%)</title><rect x="39.3" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="42.35" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (12 samples, 0.23%; -0.02%)</title><rect x="650.6" y="677" width="2.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="653.58" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (22 samples, 0.41%; +0.02%)</title><rect x="76.9" y="597" width="4.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="79.93" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="735.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="738.52" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1130.4" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.41" y="511.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e45834082150b00b4442f08dc988cb07c3379ff4] (1 samples, 0.02%; +0.02%)</title><rect x="927.6" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="930.63" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="792.7" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="795.66" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; -0.02%)</title><rect x="58.5" y="245" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="61.47" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="415.5" ></text>
</g>
<g >
<title>table::make_reader (441 samples, 8.31%; +0.06%)</title><rect x="456.9" y="533" width="98.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="459.92" y="543.5" >table::make..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (78 samples, 1.47%; +0.11%)</title><rect x="179.4" y="485" width="17.4" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="182.43" y="495.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (16 samples, 0.30%; -0.04%)</title><rect x="1049.3" y="501" width="3.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="1052.25" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (2 samples, 0.04%; 0.00%)</title><rect x="54.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.47" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.02%)</title><rect x="782.2" y="469" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="785.21" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="671.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; -0.04%)</title><rect x="281.7" y="405" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="284.71" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; 0.00%)</title><rect x="772.2" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.21" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (14 samples, 0.26%; +0.04%)</title><rect x="689.5" y="661" width="3.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="692.50" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (23 samples, 0.43%; -0.06%)</title><rect x="134.3" y="597" width="5.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="137.29" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (8 samples, 0.15%; -0.02%)</title><rect x="294.6" y="389" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="297.61" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%; 0.00%)</title><rect x="45.8" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.80" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="438.2" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="441.24" y="431.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="649.3" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="652.25" y="655.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (11 samples, 0.21%; -0.02%)</title><rect x="793.6" y="373" width="2.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="796.55" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="302.4" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="305.39" y="463.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (4 samples, 0.08%; 0.00%)</title><rect x="842.9" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.92" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; +0.02%)</title><rect x="332.0" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="334.96" y="479.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.2" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.25" y="415.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="110.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (8 samples, 0.15%; -0.04%)</title><rect x="635.0" y="597" width="1.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="638.02" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="319.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="74.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="77.70" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; -0.06%)</title><rect x="1081.5" y="581" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="1084.49" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::constant::view (1 samples, 0.02%; 0.00%)</title><rect x="872.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.49" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="533" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="505.6" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="508.61" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="907.0" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="909.95" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::select_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.48" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="54.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.47" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="95.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="585.2" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="588.21" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.75%; 0.00%)</title><rect x="1122.0" y="565" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.96" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="438.9" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="441.91" y="463.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="754.9" y="437" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="757.87" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.11%; +0.04%)</title><rect x="519.6" y="421" width="1.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="522.62" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (5 samples, 0.09%; 0.00%)</title><rect x="332.6" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.63" y="463.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="534.7" y="453" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="537.74" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="720.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.62" y="687.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (12 samples, 0.23%; +0.04%)</title><rect x="898.7" y="469" width="2.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="901.72" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (12 samples, 0.23%; +0.08%)</title><rect x="245.9" y="293" width="2.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="248.91" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="866.0" y="677" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="869.04" y="687.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="667.5" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="670.48" y="639.5" ></text>
</g>
<g >
<title>[unknown] (18 samples, 0.34%; 0.00%)</title><rect x="10.2" y="789" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="799.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="783.3" y="485" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="786.33" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="808.5" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.45" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="80.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="83.71" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (8 samples, 0.15%; 0.00%)</title><rect x="983.9" y="469" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.88" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="371.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="374.54" y="367.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="806.4" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.45" y="271.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (9 samples, 0.17%; -0.02%)</title><rect x="1087.7" y="565" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1090.72" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="479.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="763.5" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.54" y="575.5" ></text>
</g>
<g >
<title>all (5,307 samples, 100%)</title><rect x="10.0" y="837" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="48.0" y="293" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.02" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (19 samples, 0.36%; 0.00%)</title><rect x="1126.0" y="469" width="4.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.96" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="527.2" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="530.18" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="705.9" y="661" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="708.95" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%; -0.06%)</title><rect x="581.0" y="437" width="0.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="583.99" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="399.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="320.8" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="323.84" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (40 samples, 0.75%; 0.00%)</title><rect x="1122.0" y="613" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.96" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (4 samples, 0.08%; -0.08%)</title><rect x="291.5" y="373" width="0.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="294.49" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (26 samples, 0.49%; 0.00%)</title><rect x="133.8" y="613" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="136.85" y="623.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; -0.02%)</title><rect x="274.1" y="357" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="277.15" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.24" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (4 samples, 0.08%; +0.06%)</title><rect x="565.4" y="565" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="568.42" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="40.2" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.24" y="543.5" ></text>
</g>
<g >
<title>free (11 samples, 0.21%; +0.08%)</title><rect x="430.7" y="357" width="2.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="433.68" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%; +0.04%)</title><rect x="1105.5" y="549" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1108.51" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (1 samples, 0.02%; 0.00%)</title><rect x="876.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.93" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; -0.02%)</title><rect x="549.4" y="469" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="552.42" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (3 samples, 0.06%; 0.00%)</title><rect x="702.2" y="629" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.17" y="639.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (8 samples, 0.15%; -0.06%)</title><rect x="614.3" y="581" width="1.8" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="617.34" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (14 samples, 0.26%; +0.02%)</title><rect x="647.5" y="677" width="3.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="650.47" y="687.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1042.1" y="469" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1045.14" y="479.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="757" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="767.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (18 samples, 0.34%; +0.02%)</title><rect x="500.3" y="421" width="4.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="503.28" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.06%)</title><rect x="614.6" y="533" width="1.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="617.56" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="966.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.32" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (59 samples, 1.11%; +0.04%)</title><rect x="521.2" y="437" width="13.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="524.18" y="447.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (40 samples, 0.75%; 0.00%)</title><rect x="798.2" y="389" width="8.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="801.22" y="399.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.37" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; -0.02%)</title><rect x="848.9" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="851.92" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (19 samples, 0.36%; -0.02%)</title><rect x="1104.4" y="597" width="4.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1107.40" y="607.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="815.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (1 samples, 0.02%; +0.02%)</title><rect x="29.6" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="32.57" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1167.1" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1170.10" y="623.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (24 samples, 0.45%; 0.00%)</title><rect x="868.3" y="661" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.26" y="671.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.24%; 0.00%)</title><rect x="10.7" y="725" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="735.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (3 samples, 0.06%; 0.00%)</title><rect x="86.9" y="741" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.93" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="79.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.15" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (17 samples, 0.32%; 0.00%)</title><rect x="62.3" y="517" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.25" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="638.4" y="549" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="641.36" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (1 samples, 0.02%; -0.04%)</title><rect x="317.1" y="469" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="320.06" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (7 samples, 0.13%; +0.13%)</title><rect x="747.1" y="565" width="1.5" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="750.08" y="575.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.09%; 0.00%)</title><rect x="745.7" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="748.75" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="122.1" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="125.06" y="655.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%; 0.00%)</title><rect x="696.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.39" y="671.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (4 samples, 0.08%; -0.04%)</title><rect x="52.9" y="389" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="55.91" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="70.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.70" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;cql3::update_parameters::prefetch_data&gt;::future_state&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="873.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="876.15" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="768.4" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="771.43" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%; +0.02%)</title><rect x="528.7" y="341" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="531.74" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; +0.04%)</title><rect x="714.8" y="597" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="717.84" y="607.5" ></text>
</g>
<g >
<title>boost::dynamic_bitset&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::init_from_unsigned_long (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="527.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="328.8" y="469" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="331.85" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (4 samples, 0.08%; +0.06%)</title><rect x="484.3" y="501" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="487.27" y="511.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (11 samples, 0.21%; +0.09%)</title><rect x="1019.5" y="421" width="2.4" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="1022.46" y="431.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;auth::role_or_anonymous, auth::get_permissions (1 samples, 0.02%; +0.02%)</title><rect x="812.2" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="815.23" y="479.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.08%)</title><rect x="425.6" y="405" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="428.57" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="306.2" y="517" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="309.17" y="527.5" ></text>
</g>
<g >
<title>checked_file_impl::truncate (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; -0.02%)</title><rect x="876.5" y="645" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="879.49" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="303.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1116.0" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="623.9" y="597" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="626.90" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.36" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="52.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="351.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (124 samples, 2.34%; 0.00%)</title><rect x="509.8" y="501" width="27.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="512.84" y="511.5" >m..</text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (2 samples, 0.04%; +0.04%)</title><rect x="790.9" y="405" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="793.89" y="415.5" ></text>
</g>
<g >
<title>row_cache::make_reader (1 samples, 0.02%; +0.02%)</title><rect x="455.6" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="458.59" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="906.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="909.51" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="821.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="824.79" y="559.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; 0.00%)</title><rect x="351.1" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="354.08" y="367.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.09%; 0.00%)</title><rect x="871.6" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.60" y="511.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; 0.00%)</title><rect x="42.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.24" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="302.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="305.61" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="621.9" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="624.90" y="623.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="735.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="738.74" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; +0.02%)</title><rect x="867.6" y="613" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="870.60" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (9 samples, 0.17%; -0.04%)</title><rect x="199.2" y="437" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="202.22" y="447.5" ></text>
</g>
<g >
<title>schema::is_synced (1 samples, 0.02%; +0.02%)</title><rect x="1121.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1124.07" y="527.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="718.4" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="721.40" y="607.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1116.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.18" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="78.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.26" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; +0.02%)</title><rect x="54.5" y="421" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.47" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="449.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="452.36" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (10 samples, 0.19%; +0.02%)</title><rect x="634.6" y="613" width="2.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="637.58" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1009.5" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1012.45" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="676.4" y="597" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="679.38" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="48.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.47" y="399.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%; -0.04%)</title><rect x="550.3" y="469" width="2.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="553.31" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="682.2" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="685.16" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (4 samples, 0.08%; 0.00%)</title><rect x="51.4" y="485" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.36" y="495.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="927.9" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="930.85" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (15 samples, 0.28%; 0.00%)</title><rect x="293.9" y="421" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="296.94" y="431.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="384.4" y="341" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="387.43" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (1 samples, 0.02%; 0.00%)</title><rect x="76.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.70" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1156.9" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1159.87" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.09%; 0.00%)</title><rect x="812.5" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.45" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; +0.02%)</title><rect x="583.0" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="585.99" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="713.5" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="716.51" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; +0.06%)</title><rect x="169.6" y="549" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="172.65" y="559.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1132.6" y="677" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1135.63" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="1051.5" y="469" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1054.48" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="678.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.60" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="539.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="541.97" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="65.6" y="485" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="68.59" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (120 samples, 2.26%; -0.04%)</title><rect x="40.2" y="549" width="26.7" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="43.24" y="559.5" >c..</text>
</g>
<g >
<title>utils::estimated_histogram::add (1 samples, 0.02%; 0.00%)</title><rect x="12.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.89" y="607.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="633.7" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="636.69" y="607.5" ></text>
</g>
<g >
<title>db::cql_type_parser::parse (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="559.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.15%; -0.06%)</title><rect x="261.3" y="277" width="1.7" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="264.25" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (18 samples, 0.34%; 0.00%)</title><rect x="1126.0" y="437" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.96" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="315.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="318.28" y="479.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (5 samples, 0.09%; 0.00%)</title><rect x="572.5" y="501" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.54" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="553.0" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="555.97" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="105.6" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="108.61" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="398.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="401.89" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="106.1" y="645" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="109.05" y="655.5" ></text>
</g>
<g >
<title>database::find_uuid (16 samples, 0.30%; +0.02%)</title><rect x="765.1" y="565" width="3.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="768.09" y="575.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (475 samples, 8.95%; -0.04%)</title><rect x="334.9" y="469" width="105.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="337.85" y="479.5" >seastar::rep..</text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (5 samples, 0.09%; -0.02%)</title><rect x="425.8" y="389" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="428.79" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (6 samples, 0.11%; -0.02%)</title><rect x="845.8" y="597" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="848.81" y="607.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (3 samples, 0.06%; 0.00%)</title><rect x="947.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.42" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="699.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="702.72" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="555.0" y="565" width="0.6" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="557.97" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (2 samples, 0.04%; -0.04%)</title><rect x="551.2" y="421" width="0.4" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="554.19" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="463.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="559.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%; +0.02%)</title><rect x="1115.7" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1118.74" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::modification_statement (1 samples, 0.02%; +0.02%)</title><rect x="66.3" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="69.25" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.14" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; -0.02%)</title><rect x="753.3" y="485" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="756.31" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="98.3" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="101.27" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (17 samples, 0.32%; 0.00%)</title><rect x="825.6" y="517" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.57" y="527.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::sstable_writer (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="735.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.4" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.40" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%; 0.00%)</title><rect x="337.5" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="340.52" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (72 samples, 1.36%; -0.02%)</title><rect x="583.9" y="565" width="16.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="586.88" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="113.2" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.17" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="511.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.07" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="802.7" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="805.67" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (56 samples, 1.06%; -0.02%)</title><rect x="744.9" y="597" width="12.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="747.86" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (2 samples, 0.04%; +0.02%)</title><rect x="695.7" y="437" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.72" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="415.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (7 samples, 0.13%; +0.04%)</title><rect x="1087.9" y="549" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1090.94" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="399.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (1 samples, 0.02%; 0.00%)</title><rect x="21.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.56" y="671.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="645" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="51.8" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="54.80" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1125.5" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1128.52" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (23 samples, 0.43%; 0.00%)</title><rect x="1090.4" y="565" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1093.39" y="575.5" ></text>
</g>
<g >
<title>db::system_keyspace::force_blocking_flush (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="671.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="543.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%; -0.04%)</title><rect x="600.1" y="581" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="603.11" y="591.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="671.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (21 samples, 0.40%; +0.13%)</title><rect x="852.9" y="597" width="4.7" height="15.0" fill="rgb(255,118,118)" rx="2" ry="2" />
<text  x="855.92" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_type (1 samples, 0.02%; +0.02%)</title><rect x="40.2" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.24" y="527.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; +0.02%)</title><rect x="214.3" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="217.34" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="326.4" y="533" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="329.40" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; -0.02%)</title><rect x="810.5" y="405" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="813.45" y="415.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; +0.04%)</title><rect x="162.8" y="613" width="0.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="165.75" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (2 samples, 0.04%; +0.02%)</title><rect x="1137.3" y="661" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1140.30" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="431.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::serialized_size_visitor&gt; (1 samples, 0.02%; +0.02%)</title><rect x="110.9" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.95" y="607.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="623.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (4 samples, 0.08%; 0.00%)</title><rect x="84.3" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.26" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="60.0" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="699.9" y="645" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="702.95" y="655.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.18" y="447.5" ></text>
</g>
<g >
<title>main (4,866 samples, 91.69%; 0.00%)</title><rect x="87.8" y="789" width="1082.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.82" y="799.5" >main</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="48.2" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.24" y="399.5" ></text>
</g>
<g >
<title>schema::get_partitioner (2 samples, 0.04%; +0.02%)</title><rect x="933.2" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="936.19" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="50.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="53.24" y="463.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="563.4" y="517" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.42" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="868.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.04" y="687.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; +0.04%)</title><rect x="745.3" y="565" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="748.30" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="644.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="647.80" y="671.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="26.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.68" y="575.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (9 samples, 0.17%; -0.02%)</title><rect x="28.0" y="405" width="2.0" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="31.01" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (5 samples, 0.09%; +0.06%)</title><rect x="1014.1" y="389" width="1.1" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1017.12" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::alter_table_statement*, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.37" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (10 samples, 0.19%; +0.08%)</title><rect x="855.1" y="549" width="2.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="858.14" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="810.7" y="389" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="813.67" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="41.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.80" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_table_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.37" y="559.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%; 0.00%)</title><rect x="1117.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.74" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::builder (19 samples, 0.36%; -0.06%)</title><rect x="611.9" y="597" width="4.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="614.90" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1108.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1111.40" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; -0.02%)</title><rect x="1160.4" y="629" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1163.43" y="639.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (8 samples, 0.15%; -0.04%)</title><rect x="317.5" y="469" width="1.8" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="320.51" y="479.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="58.9" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.92" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (4 samples, 0.08%; 0.00%)</title><rect x="663.5" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.48" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%; +0.06%)</title><rect x="1010.3" y="341" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1013.34" y="351.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (8 samples, 0.15%; 0.00%)</title><rect x="660.6" y="581" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="663.59" y="591.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.43" y="671.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (451 samples, 8.50%; -0.04%)</title><rect x="197.2" y="469" width="100.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="200.22" y="479.5" >seastar::do_..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN4cql34expr10expressionEEER18overloaded_functorIJZNS5_18prepare_expressionERKS6_R8databaseRKN7seastar13basic_sstringIcjLj15ELb1EEENSD_13lw_shared_ptrINS4_20column_specificationEEEE3$_4ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_5ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_6ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_7ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_8ZNS5_18prepare_expressionESA_SC_SH_SK_E3$_9ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_10ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_11ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_12ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_13ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_14ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_15ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_16ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_17ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_18ZNS5_18prepare_expressionESA_SC_SH_SK_E4$_19EERSt7variantIJNS5_11conjunctionENS5_15binary_operatorENS5_12column_valueENS5_5tokenENS5_21unresolved_identifierENS5_25column_mutation_attributeENS5_13function_callENS5_4castENS5_15field_selectionENS5_4nullENS5_13bind_variableENS5_16untyped_constantENS5_8constantENS5_17tuple_constructorENS5_22collection_constructorENS5_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES12_S1L_ (9 samples, 0.17%; 0.00%)</title><rect x="74.7" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.70" y="575.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="644.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.58" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (11 samples, 0.21%; +0.08%)</title><rect x="583.9" y="549" width="2.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="586.88" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (2 samples, 0.04%; 0.00%)</title><rect x="811.1" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.12" y="463.5" ></text>
</g>
<g >
<title>get_common_indices.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="86.3" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.27" y="799.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="814.7" y="485" width="0.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="817.68" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="660.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="663.81" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="73.4" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="76.37" y="575.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%; +0.02%)</title><rect x="696.8" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="699.83" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (5 samples, 0.09%; 0.00%)</title><rect x="1023.7" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.68" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="928.5" y="485" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="931.52" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::flush_tmp_bufs (1 samples, 0.02%; 0.00%)</title><rect x="11.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.56" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="333.5" y="437" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="336.52" y="447.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="623.5" ></text>
</g>
<g >
<title>schema::get_sharder (1 samples, 0.02%; +0.02%)</title><rect x="994.3" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="997.33" y="463.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (18 samples, 0.34%; 0.00%)</title><rect x="1007.9" y="357" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1010.90" y="367.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%; +0.02%)</title><rect x="85.4" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="88.38" y="687.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%; 0.00%)</title><rect x="1019.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.01" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="931.6" y="581" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="934.63" y="591.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="12.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="15.89" y="591.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%; -0.09%)</title><rect x="483.4" y="501" width="0.2" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="486.38" y="511.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="651.5" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="654.47" y="671.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; +0.04%)</title><rect x="347.3" y="341" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="350.30" y="351.5" ></text>
</g>
<g >
<title>seastar::thread::maybe_yield (1 samples, 0.02%; +0.02%)</title><rect x="11.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="14.56" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (13 samples, 0.24%; +0.04%)</title><rect x="1158.2" y="661" width="2.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1161.20" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="583.2" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="586.21" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="655.5" ></text>
</g>
<g >
<title>_Unwind_IteratePhdrCallback (1 samples, 0.02%; +0.02%)</title><rect x="14.2" y="773" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="17.22" y="783.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="42.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.24" y="495.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (1 samples, 0.02%; 0.00%)</title><rect x="1129.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (3 samples, 0.06%; 0.00%)</title><rect x="86.9" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.93" y="783.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::done (1 samples, 0.02%; 0.00%)</title><rect x="696.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.61" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (2 samples, 0.04%; 0.00%)</title><rect x="866.5" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.48" y="687.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="102.5" y="629" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="105.50" y="639.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (3 samples, 0.06%; 0.00%)</title><rect x="1124.9" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.85" y="415.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%; +0.04%)</title><rect x="289.0" y="341" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="292.05" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="53.1" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.14" y="271.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (124 samples, 2.34%; +0.11%)</title><rect x="226.3" y="309" width="27.6" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="229.34" y="319.5" >c..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="756.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="758.98" y="575.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (3 samples, 0.06%; +0.02%)</title><rect x="433.4" y="373" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="436.35" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="892.9" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="895.94" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (5 samples, 0.09%; -0.06%)</title><rect x="784.9" y="485" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="787.88" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; -0.06%)</title><rect x="139.0" y="549" width="0.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="141.96" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="141.9" y="629" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="144.85" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1140.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1143.64" y="671.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%; +0.02%)</title><rect x="110.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.50" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="662.4" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="665.37" y="623.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (2 samples, 0.04%; 0.00%)</title><rect x="110.5" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="591.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (12 samples, 0.23%; 0.00%)</title><rect x="736.2" y="517" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.19" y="527.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="210.3" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.34" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="44.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.91" y="335.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%; 0.00%)</title><rect x="43.8" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.80" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="871.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.15" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="751.8" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="754.75" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%; +0.02%)</title><rect x="1189.3" y="805" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1192.33" y="815.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%; 0.00%)</title><rect x="51.4" y="453" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.36" y="463.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; 0.00%)</title><rect x="42.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.69" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, std::allocator&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; &gt;::emplace_back&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="960.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="963.76" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::consume_with&lt;row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="703.5" ></text>
</g>
<g >
<title>table::query (3 samples, 0.06%; -0.02%)</title><rect x="1167.1" y="677" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1170.10" y="687.5" ></text>
</g>
<g >
<title>auth::get_permissions (2 samples, 0.04%; 0.00%)</title><rect x="84.5" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (5 samples, 0.09%; 0.00%)</title><rect x="425.8" y="405" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="428.79" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="872.0" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.04" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.09%; +0.04%)</title><rect x="567.4" y="597" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="570.43" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="56.2" y="453" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="59.25" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.09%; 0.00%)</title><rect x="1151.8" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.76" y="639.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (3 samples, 0.06%; -0.02%)</title><rect x="366.2" y="357" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="369.20" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.06%)</title><rect x="968.5" y="485" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="971.54" y="495.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; -0.02%)</title><rect x="838.7" y="613" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="841.69" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::_Select1st&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;, std::less&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.02%; +0.02%)</title><rect x="14.4" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="17.45" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%; 0.00%)</title><rect x="548.7" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.75" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="753.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.31" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (2 samples, 0.04%; 0.00%)</title><rect x="641.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.69" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="137.6" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="140.63" y="575.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="767.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (304 samples, 5.73%; 0.00%)</title><rect x="18.2" y="757" width="67.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.23" y="767.5" >seastar..</text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="894.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="897.94" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (322 samples, 6.07%; 0.00%)</title><rect x="761.5" y="597" width="71.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="764.54" y="607.5" >cql3::st..</text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1128.4" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.41" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.23" y="607.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="834.7" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.69" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; 0.00%)</title><rect x="552.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="555.75" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (63 samples, 1.19%; +0.02%)</title><rect x="182.8" y="469" width="14.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="185.76" y="479.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.02%)</title><rect x="718.0" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="720.96" y="591.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="575.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="559.5" ></text>
</g>
<g >
<title>row::append_cell (1 samples, 0.02%; 0.00%)</title><rect x="1117.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.74" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="511.8" y="485" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="514.84" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.02%)</title><rect x="41.8" y="325" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.80" y="335.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="972.3" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="975.32" y="479.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.07" y="399.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%; -0.08%)</title><rect x="282.8" y="421" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="285.82" y="431.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%; 0.00%)</title><rect x="510.7" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="513.73" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.09%)</title><rect x="787.6" y="437" width="0.8" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="790.55" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.02%)</title><rect x="469.6" y="405" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="472.59" y="415.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (3 samples, 0.06%; +0.04%)</title><rect x="537.4" y="501" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="540.41" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (4 samples, 0.08%; +0.08%)</title><rect x="1037.9" y="485" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1040.91" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5 samples, 0.09%; -0.02%)</title><rect x="1148.0" y="597" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1150.98" y="607.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%; +0.02%)</title><rect x="695.5" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="698.50" y="463.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="84.9" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.93" y="575.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.12" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1128.6" y="245" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1131.63" y="255.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (23 samples, 0.43%; -0.02%)</title><rect x="388.2" y="341" width="5.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="391.21" y="351.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="869.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.37" y="543.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.72" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="559.5" ></text>
</g>
<g >
<title>table::query (2,218 samples, 41.79%; -0.19%)</title><rect x="145.4" y="629" width="493.2" height="15.0" fill="rgb(78,78,255)" rx="2" ry="2" />
<text  x="148.41" y="639.5" >table::query</text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; 0.00%)</title><rect x="634.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.80" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.81" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (3 samples, 0.06%; -0.02%)</title><rect x="618.3" y="613" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="621.34" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (5 samples, 0.09%; +0.02%)</title><rect x="1144.4" y="629" width="1.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1147.42" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="581.7" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="584.66" y="479.5" ></text>
</g>
<g >
<title>partition_entry::read (4 samples, 0.08%; -0.02%)</title><rect x="538.5" y="485" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="541.52" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (6 samples, 0.11%; +0.04%)</title><rect x="588.1" y="533" width="1.3" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="591.10" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; -0.02%)</title><rect x="99.4" y="661" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="102.38" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.0" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="67.03" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (6 samples, 0.11%; 0.00%)</title><rect x="332.4" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="335.40" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="677.0" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="680.04" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="220.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.79" y="383.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; +0.02%)</title><rect x="832.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="835.91" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="431.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="38.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.91" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="105.4" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="108.39" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="68.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.70" y="559.5" ></text>
</g>
<g >
<title>compound_type&lt; (3 samples, 0.06%; +0.02%)</title><rect x="870.3" y="501" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="873.26" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator* (1 samples, 0.02%; +0.02%)</title><rect x="41.6" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="44.57" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (8 samples, 0.15%; -0.02%)</title><rect x="935.9" y="581" width="1.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="938.86" y="591.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (5 samples, 0.09%; 0.00%)</title><rect x="688.2" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="691.16" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="70.3" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.26" y="495.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%; +0.02%)</title><rect x="871.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="874.60" y="479.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; -0.02%)</title><rect x="166.5" y="597" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="169.53" y="607.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.06%)</title><rect x="681.7" y="645" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="684.71" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="902.5" y="485" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="905.50" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; +0.02%)</title><rect x="83.8" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.82" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; +0.08%)</title><rect x="1107.5" y="549" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1110.51" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="939.0" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="941.97" y="527.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="20.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.45" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; -0.02%)</title><rect x="635.9" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="638.91" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="90.3" y="693" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="93.27" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%; 0.00%)</title><rect x="218.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="221.34" y="415.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.36" y="335.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="270.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="273.59" y="351.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="600.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="603.56" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="694.4" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="697.39" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (8 samples, 0.15%; 0.00%)</title><rect x="818.9" y="517" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.90" y="527.5" ></text>
</g>
<g >
<title>make_set_value (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="566.5" y="581" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="569.54" y="591.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (47 samples, 0.89%; -0.04%)</title><rect x="745.3" y="581" width="10.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="748.30" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (26 samples, 0.49%; +0.06%)</title><rect x="1063.3" y="453" width="5.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1066.26" y="463.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; +0.02%)</title><rect x="47.1" y="501" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.13" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="63.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.59" y="447.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (22 samples, 0.41%; +0.02%)</title><rect x="1007.7" y="373" width="4.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1010.67" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (2 samples, 0.04%; 0.00%)</title><rect x="82.0" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.04" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.91" y="463.5" ></text>
</g>
<g >
<title>sstables::mc::row_has_complex_deletion (2 samples, 0.04%; 0.00%)</title><rect x="11.1" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.11" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="786.4" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="789.44" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%; 0.00%)</title><rect x="859.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.59" y="655.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="319.1" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="322.06" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; 0.00%)</title><rect x="686.4" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.38" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.15%; -0.02%)</title><rect x="676.2" y="629" width="1.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="679.15" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; -0.02%)</title><rect x="41.4" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.35" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (52 samples, 0.98%; +0.08%)</title><rect x="697.1" y="677" width="11.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="700.05" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="112.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.72" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="958.1" y="517" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="961.09" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="663.7" y="549" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="666.70" y="559.5" ></text>
</g>
<g >
<title>tracing::add_table_name (3 samples, 0.06%; +0.06%)</title><rect x="1113.5" y="597" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1116.51" y="607.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.32%; 0.00%)</title><rect x="825.6" y="533" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.57" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%; 0.00%)</title><rect x="112.1" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="607.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="898.3" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="901.28" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="728.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="731.41" y="623.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%; 0.00%)</title><rect x="842.9" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.92" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1134.0" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1136.97" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="865.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.15" y="671.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="687.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%; +0.04%)</title><rect x="284.8" y="389" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="287.82" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%; -0.04%)</title><rect x="130.3" y="613" width="1.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="133.29" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; -0.02%)</title><rect x="665.5" y="629" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="668.48" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="850.3" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.25" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (7 samples, 0.13%; +0.02%)</title><rect x="758.4" y="581" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="761.42" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="689.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.27" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="820.2" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.24" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; 0.00%)</title><rect x="832.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.69" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.09%; -0.02%)</title><rect x="48.7" y="437" width="1.1" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="51.69" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl&lt;cql3::operation::raw_update*&amp;, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (19 samples, 0.36%; -0.04%)</title><rect x="757.3" y="597" width="4.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="760.31" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.89" y="735.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="937.0" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="939.97" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="605.2" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="608.23" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; +0.02%)</title><rect x="267.9" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.92" y="319.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (23 samples, 0.43%; +0.08%)</title><rect x="499.2" y="437" width="5.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="502.17" y="447.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (3 samples, 0.06%; 0.00%)</title><rect x="62.9" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.92" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="857.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.81" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%; +0.02%)</title><rect x="112.7" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="115.72" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (48 samples, 0.90%; +0.02%)</title><rect x="283.0" y="437" width="10.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="286.04" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="84.0" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.04" y="575.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%; -0.02%)</title><rect x="249.0" y="277" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="252.02" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,321 samples, 43.73%; +0.11%)</title><rect x="122.5" y="645" width="516.1" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="125.51" y="655.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1166.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.21" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.02" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; -0.04%)</title><rect x="638.8" y="645" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="641.80" y="655.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.14" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="81.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.82" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="48.2" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.24" y="463.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="543.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (4 samples, 0.08%; -0.09%)</title><rect x="392.4" y="325" width="0.9" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="395.44" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="214.6" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="217.56" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="82.9" y="565" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.93" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.81" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (6 samples, 0.11%; -0.02%)</title><rect x="103.4" y="629" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="106.39" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="543.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; +0.02%)</title><rect x="48.9" y="309" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="51.91" y="319.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1115.1" y="565" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.07" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; -0.04%)</title><rect x="352.4" y="357" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="355.42" y="367.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; +0.02%)</title><rect x="47.4" y="469" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="50.35" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (4 samples, 0.08%; -0.04%)</title><rect x="596.1" y="533" width="0.9" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="599.11" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.91" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (4 samples, 0.08%; 0.00%)</title><rect x="110.1" y="661" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.06" y="671.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1167.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.32" y="655.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%; +0.02%)</title><rect x="288.6" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="291.60" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="166.8" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="169.76" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; +0.02%)</title><rect x="19.1" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="22.12" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="76.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.26" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="443.8" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="446.80" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%; -0.02%)</title><rect x="609.0" y="581" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="612.01" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="850.5" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="853.47" y="623.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (2 samples, 0.04%; 0.00%)</title><rect x="616.8" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.79" y="623.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1114.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.85" y="655.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (8 samples, 0.15%; -0.02%)</title><rect x="906.5" y="533" width="1.8" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="909.51" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="702.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.84" y="639.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (36 samples, 0.68%; +0.02%)</title><rect x="678.2" y="677" width="8.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.16" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="415.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Lexer (1 samples, 0.02%; 0.00%)</title><rect x="24.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.90" y="607.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1118.2" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1121.18" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2 samples, 0.04%; 0.00%)</title><rect x="832.0" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.02" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%; 0.00%)</title><rect x="78.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.71" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="973.4" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="976.43" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="70.7" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="73.70" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="60.5" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.47" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="672.2" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="675.15" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.11%; -0.08%)</title><rect x="1076.2" y="533" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1079.16" y="543.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="509.6" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="512.62" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="191.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="194.88" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.13" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="87.49" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%; 0.00%)</title><rect x="263.5" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.48" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (1 samples, 0.02%; +0.02%)</title><rect x="872.7" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="875.71" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%; 0.00%)</title><rect x="42.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.24" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (15 samples, 0.28%; 0.00%)</title><rect x="429.8" y="373" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.79" y="383.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (12 samples, 0.23%; +0.02%)</title><rect x="923.2" y="565" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="926.18" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (23 samples, 0.43%; -0.04%)</title><rect x="560.3" y="565" width="5.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="563.31" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; 0.00%)</title><rect x="289.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="292.71" y="383.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; -0.02%)</title><rect x="727.1" y="597" width="1.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="730.07" y="607.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="78.9" y="469" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="81.93" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="671.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%; 0.00%)</title><rect x="20.2" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="942.5" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="945.53" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="527.4" y="373" width="0.7" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="530.40" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="41.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.13" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="103.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="106.83" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="41.4" y="357" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="44.35" y="367.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (7 samples, 0.13%; 0.00%)</title><rect x="319.3" y="485" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="322.29" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="808.2" y="437" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="811.23" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (3 samples, 0.06%; 0.00%)</title><rect x="1116.0" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="399.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; -0.02%)</title><rect x="1051.0" y="453" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1054.03" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.11%; 0.00%)</title><rect x="796.9" y="373" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="799.89" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="77.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="80.59" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="86.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.71" y="719.5" ></text>
</g>
<g >
<title>dirty_memory_manager::flush_one (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="447.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="111.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.17" y="543.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (11 samples, 0.21%; +0.06%)</title><rect x="346.4" y="357" width="2.5" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="349.41" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="331.7" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="334.74" y="479.5" ></text>
</g>
<g >
<title>mutation_partition::compact_for_compaction (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="543.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; +0.02%)</title><rect x="110.1" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="113.06" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (4 samples, 0.08%; +0.08%)</title><rect x="953.2" y="565" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="956.20" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.58" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; +0.02%)</title><rect x="366.9" y="357" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="369.87" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.63" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (25 samples, 0.47%; +0.02%)</title><rect x="976.8" y="501" width="5.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="979.77" y="511.5" ></text>
</g>
<g >
<title>cql3::relation::to_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.93" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="904.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="907.28" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (2 samples, 0.04%; +0.02%)</title><rect x="32.5" y="437" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="35.46" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="326.8" y="533" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="329.85" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.01" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_assign_base (1 samples, 0.02%; +0.02%)</title><rect x="57.8" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="60.80" y="383.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.3" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.28" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; +0.02%)</title><rect x="456.5" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="459.47" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (1 samples, 0.02%; 0.00%)</title><rect x="24.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%; -0.02%)</title><rect x="626.3" y="613" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="629.35" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (8 samples, 0.15%; +0.04%)</title><rect x="754.0" y="469" width="1.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="756.98" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1090.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1093.17" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (635 samples, 11.97%; -0.04%)</title><rect x="724.0" y="677" width="141.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="726.96" y="687.5" >seastar::internal..</text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::~inheriting_concrete_execution_stage (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="773" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="783.5" ></text>
</g>
<g >
<title>seastar::gate::enter (2 samples, 0.04%; +0.04%)</title><rect x="1018.6" y="405" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1021.57" y="415.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="867.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.82" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="575.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (15 samples, 0.28%; -0.09%)</title><rect x="381.1" y="341" width="3.3" height="15.0" fill="rgb(144,144,255)" rx="2" ry="2" />
<text  x="384.10" y="351.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="711.7" y="613" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="714.73" y="623.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (41 samples, 0.77%; -0.04%)</title><rect x="686.2" y="677" width="9.1" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="689.16" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (1 samples, 0.02%; -0.02%)</title><rect x="116.7" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="119.73" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::find (5 samples, 0.09%; 0.00%)</title><rect x="947.0" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.97" y="527.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%; -0.02%)</title><rect x="583.7" y="549" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="586.66" y="559.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,823 samples, 34.35%; -0.11%)</title><rect x="163.6" y="613" width="405.4" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="166.64" y="623.5" >query::querier&lt;</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%; +0.06%)</title><rect x="155.6" y="597" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="158.64" y="607.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; +0.04%)</title><rect x="1013.0" y="373" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1016.01" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (13 samples, 0.24%; -0.02%)</title><rect x="1108.6" y="597" width="2.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1111.62" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1166.4" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1169.43" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.24" y="447.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::free (1 samples, 0.02%; 0.00%)</title><rect x="26.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.01" y="543.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%; +0.02%)</title><rect x="1019.2" y="437" width="2.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1022.24" y="447.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="720.6" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="723.62" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="970.3" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="973.32" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="938.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.30" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="636.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.13" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="33.3" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="36.35" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (22 samples, 0.41%; 0.00%)</title><rect x="734.0" y="549" width="4.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.96" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="79.2" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.15" y="543.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="767.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (5 samples, 0.09%; +0.06%)</title><rect x="597.4" y="549" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="600.44" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (2 samples, 0.04%; +0.04%)</title><rect x="425.1" y="405" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="428.12" y="415.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (17 samples, 0.32%; 0.00%)</title><rect x="1126.2" y="405" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.19" y="415.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="112.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.28" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_base (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (4 samples, 0.08%; +0.04%)</title><rect x="833.6" y="597" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="836.58" y="607.5" ></text>
</g>
<g >
<title>schema_mutations::digest (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::make_writer (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="719.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="59.4" y="277" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="62.36" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; -0.04%)</title><rect x="518.5" y="437" width="0.2" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="521.51" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="143.4" y="629" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="146.41" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="582.8" y="485" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="585.77" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (4 samples, 0.08%; 0.00%)</title><rect x="643.9" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.91" y="671.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; -0.04%)</title><rect x="738.6" y="469" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="741.63" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.02%)</title><rect x="225.7" y="309" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="228.68" y="319.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%; -0.06%)</title><rect x="503.2" y="373" width="1.1" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="506.17" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="86.0" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.04" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1099.1" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1102.06" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; -0.02%)</title><rect x="58.5" y="229" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="61.47" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.02%)</title><rect x="693.1" y="613" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="696.05" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.58" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (39 samples, 0.73%; 0.00%)</title><rect x="312.4" y="517" width="8.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="315.39" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="783.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="319.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="623.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (2 samples, 0.04%; +0.02%)</title><rect x="1089.7" y="565" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1092.72" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.04%)</title><rect x="948.8" y="565" width="2.0" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="951.75" y="575.5" ></text>
</g>
<g >
<title>is_system_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="82.3" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="85.26" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1073.9" y="517" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1076.93" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="816.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.90" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; +0.02%)</title><rect x="270.1" y="309" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="273.15" y="319.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_group::~metric_group (1 samples, 0.02%; 0.00%)</title><rect x="14.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="17.45" y="735.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; -0.02%)</title><rect x="54.9" y="405" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="57.91" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="768.9" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="771.87" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="267.3" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="270.26" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1130.2" y="469" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1133.19" y="479.5" ></text>
</g>
<g >
<title>make_combined_reader (69 samples, 1.30%; +0.06%)</title><rect x="464.7" y="501" width="15.3" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="467.70" y="511.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="383.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%; +0.04%)</title><rect x="634.1" y="613" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="637.13" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (21 samples, 0.40%; +0.04%)</title><rect x="1064.4" y="437" width="4.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1067.37" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.83" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (67 samples, 1.26%; 0.00%)</title><rect x="47.1" y="517" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="527.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.15" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (67 samples, 1.26%; 0.00%)</title><rect x="654.1" y="661" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.14" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="131.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.18" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; +0.02%)</title><rect x="722.2" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="725.18" y="687.5" ></text>
</g>
<g >
<title>data_value::data_value (1 samples, 0.02%; 0.00%)</title><rect x="110.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.50" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (41 samples, 0.77%; +0.02%)</title><rect x="710.2" y="645" width="9.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="713.17" y="655.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; +0.02%)</title><rect x="964.8" y="533" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="967.76" y="543.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="809.6" y="421" width="0.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="812.56" y="431.5" ></text>
</g>
<g >
<title>seastar::writeable_eventfd::signal (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="735.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="81.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.82" y="607.5" ></text>
</g>
<g >
<title>locator::simple_snitch::get_datacenter (1 samples, 0.02%; +0.02%)</title><rect x="1123.3" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1126.30" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="86.5" y="405" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="89.49" y="415.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; +0.02%)</title><rect x="957.2" y="549" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="960.20" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (58 samples, 1.09%; 0.00%)</title><rect x="27.1" y="549" width="12.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.12" y="559.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="974.8" y="501" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="977.77" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="83.2" y="613" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="86.15" y="623.5" ></text>
</g>
<g >
<title>sstables::sstable::filename (1 samples, 0.02%; 0.00%)</title><rect x="696.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.17" y="655.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (1 samples, 0.02%; +0.02%)</title><rect x="589.4" y="533" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="592.44" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="1077.3" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1080.27" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="866.9" y="677" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="869.93" y="687.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="907.8" y="485" width="0.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="910.84" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; 0.00%)</title><rect x="592.6" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.55" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.08%)</title><rect x="965.7" y="517" width="0.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="968.65" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="838.5" y="613" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="841.47" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::read_tables_for_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="110.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.95" y="671.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;memtable&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;, dirty_memory_manager&amp;, table_stats&amp;, memtable_list*, seastar::scheduling_group&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="998.3" y="405" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1001.34" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (24 samples, 0.45%; 0.00%)</title><rect x="642.1" y="677" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.13" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1128.6" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.63" y="271.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_e45834082150b00b4442f08dc988cb07c3379ff4] (1 samples, 0.02%; +0.02%)</title><rect x="982.5" y="501" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="985.55" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.58" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="43.4" y="517" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="46.35" y="527.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (15 samples, 0.28%; +0.08%)</title><rect x="1142.2" y="645" width="3.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1145.20" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (1 samples, 0.02%; +0.02%)</title><rect x="981.2" y="437" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="984.22" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (15 samples, 0.28%; -0.08%)</title><rect x="435.6" y="437" width="3.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="438.57" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="935.6" y="533" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="938.63" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (34 samples, 0.64%; -0.02%)</title><rect x="974.8" y="517" width="7.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="977.77" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="941.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.19" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.6" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="70.59" y="559.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (2 samples, 0.04%; 0.00%)</title><rect x="33.3" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.35" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.81" y="479.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (1 samples, 0.02%; 0.00%)</title><rect x="29.3" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.34" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (5 samples, 0.09%; 0.00%)</title><rect x="871.6" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.60" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (23 samples, 0.43%; +0.02%)</title><rect x="868.5" y="629" width="5.1" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.49" y="639.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,086 samples, 20.46%; -0.19%)</title><rect x="873.6" y="661" width="241.5" height="15.0" fill="rgb(78,78,255)" rx="2" ry="2" />
<text  x="876.60" y="671.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>ser::serializer&lt;std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.9" y="325" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1129.85" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="1052.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1055.81" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; +0.02%)</title><rect x="868.0" y="629" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="871.04" y="639.5" ></text>
</g>
<g >
<title>memtable_list::memtable_list (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="844.7" y="597" width="0.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="847.69" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.7" y="245" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="61.69" y="255.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (1 samples, 0.02%; +0.02%)</title><rect x="10.0" y="789" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (7 samples, 0.13%; +0.02%)</title><rect x="731.5" y="581" width="1.6" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="734.52" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (34 samples, 0.64%; 0.00%)</title><rect x="31.1" y="485" width="7.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.12" y="495.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (4 samples, 0.08%; 0.00%)</title><rect x="871.6" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.60" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::do_compact (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="333.1" y="405" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="336.07" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (8 samples, 0.15%; +0.02%)</title><rect x="532.5" y="421" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="535.52" y="431.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="52.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.69" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1117.5" y="373" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1120.51" y="383.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.72" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (3 samples, 0.06%; +0.06%)</title><rect x="924.3" y="533" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="927.29" y="543.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1132.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.97" y="639.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%; 0.00%)</title><rect x="965.2" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="968.21" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="759.8" y="549" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="762.76" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="48.2" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.24" y="415.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (29 samples, 0.55%; -0.02%)</title><rect x="1115.1" y="661" width="6.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1118.07" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.02%)</title><rect x="728.6" y="613" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="731.63" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (45 samples, 0.85%; -0.04%)</title><rect x="587.4" y="549" width="10.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="590.44" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_type_statement, std::default_delete&lt;cql3::statements::create_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="69.1" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.14" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="643.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.69" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (7 samples, 0.13%; 0.00%)</title><rect x="939.9" y="549" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.86" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%; 0.00%)</title><rect x="928.1" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.07" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (11 samples, 0.21%; +0.02%)</title><rect x="274.4" y="357" width="2.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="277.37" y="367.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; -0.06%)</title><rect x="33.1" y="437" width="0.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="36.12" y="447.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; -0.02%)</title><rect x="933.6" y="581" width="0.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="936.63" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="59.6" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.58" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; +0.04%)</title><rect x="980.8" y="437" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="983.77" y="447.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; -0.02%)</title><rect x="330.2" y="469" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="333.18" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="468.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.93" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="626.8" y="613" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="629.79" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="267.7" y="325" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="270.70" y="335.5" ></text>
</g>
<g >
<title>mutation_cleaner::mutation_cleaner (1 samples, 0.02%; 0.00%)</title><rect x="112.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.95" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="321.7" y="533" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="324.73" y="543.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="469.6" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="472.59" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.03" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="56.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.03" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%; +0.02%)</title><rect x="876.5" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="879.49" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; -0.04%)</title><rect x="981.4" y="437" width="0.5" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="984.44" y="447.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (3 samples, 0.06%; -0.02%)</title><rect x="278.2" y="389" width="0.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="281.15" y="399.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="813.8" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="816.79" y="511.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1042.4" y="453" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1045.36" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (3 samples, 0.06%; +0.04%)</title><rect x="599.2" y="549" width="0.7" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="602.22" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; +0.02%)</title><rect x="44.5" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="47.46" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="294.4" y="389" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="297.38" y="399.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="175.5" ></text>
</g>
<g >
<title>service::client_state::has_access (191 samples, 3.60%; +0.02%)</title><rect x="778.2" y="549" width="42.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="781.21" y="559.5" >ser..</text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;int&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="696.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.83" y="575.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%; +0.06%)</title><rect x="1040.6" y="437" width="0.6" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1043.58" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="55.4" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.36" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="694.2" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="697.16" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="302.8" y="485" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="305.83" y="495.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1117.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1120.07" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="1011.7" y="341" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1014.68" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="826.2" y="485" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.24" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="59.1" y="389" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="62.14" y="399.5" ></text>
</g>
<g >
<title>database::apply_in_memory (21 samples, 0.40%; -0.02%)</title><rect x="1115.1" y="469" width="4.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1118.07" y="479.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%; +0.02%)</title><rect x="1101.1" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1104.06" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="672.6" y="661" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="675.60" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.09%; 0.00%)</title><rect x="48.7" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.69" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="41.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.04%)</title><rect x="542.7" y="517" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="545.75" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; 0.00%)</title><rect x="29.3" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="32.34" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; -0.06%)</title><rect x="825.1" y="485" width="0.5" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="828.13" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; 0.00%)</title><rect x="716.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="718.95" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="865.8" y="677" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="868.82" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.09%; +0.04%)</title><rect x="849.1" y="549" width="1.2" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="852.14" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_in_expression&lt;cql3::expr::binary_operator, cql3::expr::has_token (1 samples, 0.02%; -0.06%)</title><rect x="892.9" y="549" width="0.3" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="895.94" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="59.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.81" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="567.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.20" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (44 samples, 0.83%; +0.06%)</title><rect x="1004.3" y="389" width="9.8" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1007.34" y="399.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="415.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (1 samples, 0.02%; -0.02%)</title><rect x="1053.9" y="501" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1056.92" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (3 samples, 0.06%; +0.06%)</title><rect x="422.2" y="405" width="0.7" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="425.23" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.70" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (9 samples, 0.17%; +0.06%)</title><rect x="979.9" y="453" width="2.0" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="982.88" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (17 samples, 0.32%; +0.04%)</title><rect x="803.1" y="341" width="3.8" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="806.11" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="624.3" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="627.35" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="46.0" y="309" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="49.02" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="67.1" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.14" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (7 samples, 0.13%; +0.04%)</title><rect x="187.4" y="437" width="1.6" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="190.43" y="447.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (1 samples, 0.02%; +0.02%)</title><rect x="1116.8" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1119.85" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.11%; +0.08%)</title><rect x="390.4" y="325" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="393.44" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; 0.00%)</title><rect x="625.0" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.01" y="623.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="603.9" y="581" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="606.89" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="649.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.47" y="671.5" ></text>
</g>
<g >
<title>partition_entry::apply_to_incomplete (2 samples, 0.04%; +0.02%)</title><rect x="18.7" y="741" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="21.67" y="751.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (9 samples, 0.17%; +0.02%)</title><rect x="971.9" y="517" width="2.0" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="974.88" y="527.5" ></text>
</g>
<g >
<title>emptyable&lt;bool&gt;::verify (1 samples, 0.02%; +0.02%)</title><rect x="79.2" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="82.15" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (2 samples, 0.04%; +0.04%)</title><rect x="607.9" y="597" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="610.89" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.47" y="367.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (10 samples, 0.19%; -0.13%)</title><rect x="348.9" y="357" width="2.2" height="15.0" fill="rgb(118,118,255)" rx="2" ry="2" />
<text  x="351.86" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="47.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.80" y="399.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="687.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%; -0.02%)</title><rect x="740.9" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="743.86" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="1152.9" y="629" width="0.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1155.87" y="639.5" ></text>
</g>
<g >
<title>executor&lt;test_read (627 samples, 11.81%; -0.02%)</title><rect x="725.3" y="661" width="139.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="728.29" y="671.5" >executor&lt;test_read</text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="602.6" y="597" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="605.56" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="636.6" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="639.58" y="591.5" ></text>
</g>
<g >
<title>row::compact_and_expire (1 samples, 0.02%; 0.00%)</title><rect x="110.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.28" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1116.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1118.96" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="330.4" y="453" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="333.40" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (2 samples, 0.04%; +0.04%)</title><rect x="465.6" y="485" width="0.4" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="468.59" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (31 samples, 0.58%; -0.02%)</title><rect x="656.6" y="645" width="6.9" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="659.59" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (11 samples, 0.21%; -0.02%)</title><rect x="689.9" y="645" width="2.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="692.94" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%; +0.02%)</title><rect x="751.5" y="549" width="0.5" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="754.53" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="678.8" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="681.82" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (2 samples, 0.04%; 0.00%)</title><rect x="633.0" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="636.02" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (9 samples, 0.17%; -0.04%)</title><rect x="307.9" y="501" width="2.0" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="310.95" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.11%; +0.08%)</title><rect x="827.6" y="469" width="1.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="830.57" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (69 samples, 1.30%; -0.06%)</title><rect x="893.8" y="549" width="15.4" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="896.83" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (5 samples, 0.09%; +0.09%)</title><rect x="333.7" y="469" width="1.2" height="15.0" fill="rgb(255,144,144)" rx="2" ry="2" />
<text  x="336.74" y="479.5" ></text>
</g>
<g >
<title>query::clustering_position_tracker&lt;query_result_builder&gt;::consume_new_partition (1 samples, 0.02%; +0.02%)</title><rect x="345.7" y="373" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="348.75" y="383.5" ></text>
</g>
<g >
<title>database::query (14 samples, 0.26%; +0.11%)</title><rect x="106.9" y="677" width="3.2" height="15.0" fill="rgb(255,131,131)" rx="2" ry="2" />
<text  x="109.94" y="687.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="40.5" y="501" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="43.46" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (4 samples, 0.08%; +0.02%)</title><rect x="54.0" y="469" width="0.9" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="57.02" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (426 samples, 8.03%; -0.11%)</title><rect x="741.1" y="613" width="94.7" height="15.0" fill="rgb(131,131,255)" rx="2" ry="2" />
<text  x="744.08" y="623.5" >cql3::query..</text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1029.2" y="421" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1032.24" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.58" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="686.6" y="645" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="689.60" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="694.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.16" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="913.6" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="916.62" y="527.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (4 samples, 0.08%; +0.06%)</title><rect x="203.0" y="421" width="0.9" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="206.00" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.04%)</title><rect x="760.0" y="565" width="1.1" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="762.98" y="575.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="48.9" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.91" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1165.5" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1168.54" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; -0.02%)</title><rect x="638.4" y="581" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="641.36" y="591.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (43 samples, 0.81%; -0.02%)</title><rect x="485.8" y="485" width="9.6" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="488.82" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="1026.4" y="453" width="0.4" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1029.35" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_expression (9 samples, 0.17%; 0.00%)</title><rect x="74.7" y="581" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.70" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="111.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.84" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5 samples, 0.09%; +0.06%)</title><rect x="1159.5" y="645" width="1.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="1162.54" y="655.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (2 samples, 0.04%; 0.00%)</title><rect x="687.7" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.72" y="655.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="131.2" y="581" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="134.18" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (4 samples, 0.08%; +0.04%)</title><rect x="1077.9" y="533" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="1080.94" y="543.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (5 samples, 0.09%; 0.00%)</title><rect x="79.8" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.82" y="559.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="844.0" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="847.03" y="575.5" ></text>
</g>
<g >
<title>compact_mutation&lt; (1 samples, 0.02%; -0.02%)</title><rect x="448.9" y="517" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="451.91" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; -0.02%)</title><rect x="1027.5" y="405" width="1.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1030.46" y="415.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%; 0.00%)</title><rect x="25.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.34" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_table_statement::raw_statement, std::default_delete&lt;cql3::statements::create_table_statement::raw_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.92" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="108.5" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="111.50" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="453.1" y="581" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="456.14" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1081.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1084.27" y="575.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%; 0.00%)</title><rect x="111.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="114.39" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="156.5" y="613" width="0.7" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="159.53" y="623.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (3 samples, 0.06%; 0.00%)</title><rect x="84.5" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.49" y="591.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="59.6" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.58" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.38" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; -0.02%)</title><rect x="1130.9" y="661" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1133.86" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="510.9" y="453" width="0.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="513.95" y="463.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.45" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (24 samples, 0.45%; -0.02%)</title><rect x="428.7" y="389" width="5.3" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="431.68" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="26.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.90" y="559.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1043.7" y="517" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1046.70" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="10.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="591.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (15 samples, 0.28%; +0.02%)</title><rect x="771.8" y="565" width="3.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="774.76" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (4 samples, 0.08%; +0.04%)</title><rect x="901.6" y="485" width="0.9" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="904.61" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (591 samples, 11.14%; +0.02%)</title><rect x="174.8" y="517" width="131.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="177.76" y="527.5" >mutation_fragmen..</text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.11%; +0.08%)</title><rect x="524.3" y="357" width="1.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="527.29" y="367.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1116.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.63" y="367.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; 0.00%)</title><rect x="16.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.67" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="638.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.58" y="655.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (38 samples, 0.72%; -0.02%)</title><rect x="798.4" y="373" width="8.5" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="801.45" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="1078.8" y="533" width="0.2" height="15.0" fill="rgb(196,196,255)" rx="2" ry="2" />
<text  x="1081.83" y="543.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (8 samples, 0.15%; +0.02%)</title><rect x="22.0" y="661" width="1.8" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="25.01" y="671.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="735.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%; 0.00%)</title><rect x="1089.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1092.28" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="694.6" y="661" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="697.61" y="671.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (3 samples, 0.06%; 0.00%)</title><rect x="1118.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1121.40" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::binary_operator const*&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="892.7" y="565" width="0.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="895.72" y="575.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (680 samples, 12.81%; -0.06%)</title><rect x="171.0" y="549" width="151.2" height="15.0" fill="rgb(170,170,255)" rx="2" ry="2" />
<text  x="173.98" y="559.5" >seastar::repeat&lt;mer..</text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="1111.7" y="597" width="0.3" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="1114.73" y="607.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (55 samples, 1.04%; +0.06%)</title><rect x="571.0" y="533" width="12.2" height="15.0" fill="rgb(255,170,170)" rx="2" ry="2" />
<text  x="573.98" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (23 samples, 0.43%; +0.02%)</title><rect x="157.6" y="613" width="5.2" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="160.64" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.11%; +0.02%)</title><rect x="679.0" y="661" width="1.4" height="15.0" fill="rgb(255,196,196)" rx="2" ry="2" />
<text  x="682.04" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="138.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="141.74" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.07" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%; 0.00%)</title><rect x="86.5" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.49" y="799.5" ></text>
</g>
<g >
<title>query::querier&lt; (2 samples, 0.04%; 0.00%)</title><rect x="128.1" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.07" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (451 samples, 8.50%; -0.04%)</title><rect x="454.7" y="549" width="100.3" height="15.0" fill="rgb(183,183,255)" rx="2" ry="2" />
<text  x="457.70" y="559.5" >std::_Functi..</text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; +0.04%)</title><rect x="805.3" y="293" width="0.5" height="15.0" fill="rgb(255,183,183)" rx="2" ry="2" />
<text  x="808.34" y="303.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="112.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.06" y="463.5" ></text>
</g>
</g>
</svg>
