<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="806.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="789" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="789" > </text>
<g id="frames">
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1167.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.58" y="575.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="107.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.62" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%; +0.04%)</title><rect x="678.8" y="581" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="681.82" y="591.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; 0.00%)</title><rect x="10.2" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.23" y="735.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1077.9" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1080.89" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="540.4" y="325" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="543.43" y="335.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (71 samples, 1.36%; +0.02%)</title><rect x="891.9" y="485" width="16.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="894.94" y="495.5" ></text>
</g>
<g >
<title>database::has_keyspace (18 samples, 0.35%; -0.02%)</title><rect x="842.1" y="517" width="4.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="845.12" y="527.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; +0.02%)</title><rect x="870.0" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="872.97" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (3 samples, 0.06%; +0.02%)</title><rect x="675.9" y="581" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="678.87" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; -0.02%)</title><rect x="207.0" y="309" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="210.04" y="319.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%; -0.02%)</title><rect x="427.4" y="293" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="430.42" y="303.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%; -0.02%)</title><rect x="1017.4" y="245" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1020.42" y="255.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (6 samples, 0.12%; +0.02%)</title><rect x="581.7" y="453" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="584.65" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (20 samples, 0.38%; 0.00%)</title><rect x="71.4" y="517" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.38" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="79.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="82.76" y="399.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="535.2" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="538.22" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.1" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="67.13" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="926.1" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="929.14" y="431.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (1 samples, 0.02%; +0.02%)</title><rect x="118.5" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="121.49" y="559.5" ></text>
</g>
<g >
<title>database::find_uuid (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.66" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; 0.00%)</title><rect x="1108.5" y="485" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.46" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;bool&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="783.5" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="786.45" y="463.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="84.1" y="533" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.06" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="636.2" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="639.24" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::tuple (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (33 samples, 0.63%; 0.00%)</title><rect x="865.4" y="517" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (5 samples, 0.10%; -0.02%)</title><rect x="56.0" y="357" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="58.98" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="55.5" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="58.52" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="540.0" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="542.98" y="287.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (9 samples, 0.17%; +0.04%)</title><rect x="843.7" y="453" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="846.70" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (22 samples, 0.42%; +0.02%)</title><rect x="829.2" y="437" width="5.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="832.21" y="447.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="218.8" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="221.82" y="287.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.92" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_SET (1 samples, 0.02%; +0.02%)</title><rect x="38.5" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="41.54" y="383.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.06%)</title><rect x="425.2" y="261" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="428.15" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.19%)</title><rect x="556.7" y="405" width="0.3" height="15.0" fill="rgb(35,35,255)" rx="2" ry="2" />
<text  x="559.74" y="415.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (12 samples, 0.23%; +0.04%)</title><rect x="562.9" y="405" width="2.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="565.86" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="708.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.71" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;4ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="101" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="111.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; 0.00%)</title><rect x="407.9" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.94" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="774.2" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="777.17" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="56.7" y="165" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="59.66" y="175.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="319.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="43.7" y="197" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="46.75" y="207.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (26 samples, 0.50%; -0.04%)</title><rect x="649.8" y="597" width="5.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="652.83" y="607.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="668.4" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="671.40" y="511.5" ></text>
</g>
<g >
<title>_ZN7seastar8futurizeIvE22satisfy_with_result_ofIZZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS9_14discard_resultEvEUlDpOT_E_NS3_IvEEEET0_OT_ENKUlONS_8internal22promise_base_with_typeIvEERSE_ONS_12future_stateIS8_EEE_clESM_SN_SQ_EUlvE_EEvSM_SI_ (1 samples, 0.02%; 0.00%)</title><rect x="102.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="105.86" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.89" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; +0.02%)</title><rect x="624.0" y="533" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="627.01" y="543.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; +0.02%)</title><rect x="1075.2" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1078.17" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (5 samples, 0.10%; -0.04%)</title><rect x="450.1" y="373" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="453.07" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="335.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="415.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (9 samples, 0.17%; 0.00%)</title><rect x="1165.5" y="549" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.54" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (6 samples, 0.12%; -0.02%)</title><rect x="669.8" y="549" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="672.76" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (12 samples, 0.23%; -0.02%)</title><rect x="752.2" y="453" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="755.20" y="463.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (15 samples, 0.29%; -0.02%)</title><rect x="283.6" y="293" width="3.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="286.60" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.06%)</title><rect x="1027.4" y="325" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1030.38" y="335.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="335.5" ></text>
</g>
<g >
<title>dht::shard_of (2 samples, 0.04%; -0.02%)</title><rect x="997.0" y="373" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1000.03" y="383.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="42.6" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="45.61" y="367.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (3 samples, 0.06%; -0.04%)</title><rect x="1125.5" y="373" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1128.45" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement::do_execute (1 samples, 0.02%; 0.00%)</title><rect x="662.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.51" y="607.5" ></text>
</g>
<g >
<title>table::as_mutation_source (4 samples, 0.08%; 0.00%)</title><rect x="644.6" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.62" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; 0.00%)</title><rect x="940.0" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="942.96" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;2ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="69" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="79.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; -0.02%)</title><rect x="43.1" y="389" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="46.07" y="399.5" ></text>
</g>
<g >
<title>seastar::gate::leave (1 samples, 0.02%; +0.02%)</title><rect x="121.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="124.88" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.37" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (27 samples, 0.52%; +0.02%)</title><rect x="434.4" y="309" width="6.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="437.44" y="319.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_id::full_name (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="255.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%; -0.04%)</title><rect x="689.2" y="549" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="692.24" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="75.2" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="78.23" y="431.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; -0.02%)</title><rect x="811.1" y="213" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="814.09" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="597" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="607.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="463.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range_detail::join_iterator&lt;gms::inet_address*, gms::inet_address*, gms::inet_address, gms::inet_address&amp;, boost::iterators::random_access_traversal_tag&gt;, std::_Bind&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.47" y="271.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (9 samples, 0.17%; 0.00%)</title><rect x="797.5" y="357" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.50" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="975.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="978.29" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; +0.06%)</title><rect x="592.5" y="373" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="595.53" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1043.2" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1046.24" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; -0.02%)</title><rect x="838.9" y="501" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="841.94" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="902.8" y="437" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="905.81" y="447.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="816.3" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="819.30" y="383.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="323.2" y="373" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="326.23" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; 0.00%)</title><rect x="573.5" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.50" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="550.9" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="553.85" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1107.6" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1110.56" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (3 samples, 0.06%; +0.02%)</title><rect x="324.8" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="327.82" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="17.5" y="645" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="20.47" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="914.8" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="917.82" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (42 samples, 0.81%; -0.02%)</title><rect x="561.0" y="421" width="9.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="564.04" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (2 samples, 0.04%; 0.00%)</title><rect x="695.8" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="863.6" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.63" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="826.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.71" y="447.5" ></text>
</g>
<g >
<title>utils::array_search_gt (2 samples, 0.04%; +0.04%)</title><rect x="512.6" y="373" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="515.58" y="383.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="956.5" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="959.49" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="1129.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.07" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="864.3" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="990.2" y="325" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="993.24" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="72.7" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.74" y="479.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="330.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.25" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%; -0.06%)</title><rect x="566.7" y="389" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="569.71" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (36 samples, 0.69%; -0.02%)</title><rect x="700.6" y="581" width="8.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="703.56" y="591.5" ></text>
</g>
<g >
<title>cql3::cql3_type::get_kind (1 samples, 0.02%; +0.02%)</title><rect x="70.7" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="73.70" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="819.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.69" y="431.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (292 samples, 5.60%; 0.00%)</title><rect x="16.8" y="693" width="66.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.79" y="703.5" >seastar..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="915.5" y="453" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="918.50" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (10 samples, 0.19%; -0.02%)</title><rect x="1131.1" y="405" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1134.11" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="79.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.53" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="704.9" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="707.86" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (1 samples, 0.02%; -0.04%)</title><rect x="458.9" y="501" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="461.90" y="511.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (6 samples, 0.12%; +0.10%)</title><rect x="1030.6" y="357" width="1.3" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="1033.55" y="367.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (1 samples, 0.02%; 0.00%)</title><rect x="352.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="355.00" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1084.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.91" y="479.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.08%; -0.02%)</title><rect x="681.3" y="581" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="684.31" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (354 samples, 6.79%; -0.06%)</title><rect x="197.8" y="357" width="80.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="200.76" y="367.5" >partition..</text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="53.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.26" y="399.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="83.6" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="86.61" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="319.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;cql3::expr::expression const*, std::back_insert_iterator&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="399.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="39.7" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.67" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; -0.02%)</title><rect x="263.2" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="266.21" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="766.5" y="485" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="769.47" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%; -0.02%)</title><rect x="271.6" y="261" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="274.59" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (2 samples, 0.04%; 0.00%)</title><rect x="870.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.88" y="415.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.04%)</title><rect x="95.6" y="565" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="98.61" y="575.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="30.6" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="33.61" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (34 samples, 0.65%; 0.00%)</title><rect x="804.7" y="293" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.74" y="303.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="545.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="547.96" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.02%)</title><rect x="1035.3" y="325" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1038.31" y="335.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%; 0.00%)</title><rect x="1143.1" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.12" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="306.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="309.70" y="399.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="292.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="295.66" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; 0.00%)</title><rect x="100.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.60" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="1019.7" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1022.68" y="303.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="430.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="433.59" y="351.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::parse_header (1 samples, 0.02%; +0.02%)</title><rect x="20.6" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="23.64" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::column_value&gt; (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.83" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1121.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1124.37" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="82.5" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.48" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.06%; +0.06%)</title><rect x="153.4" y="517" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="156.37" y="527.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="335.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (3 samples, 0.06%; +0.04%)</title><rect x="294.9" y="309" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="297.92" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (4 samples, 0.08%; +0.04%)</title><rect x="788.7" y="389" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="791.66" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (6 samples, 0.12%; +0.02%)</title><rect x="459.4" y="517" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="462.35" y="527.5" ></text>
</g>
<g >
<title>cdc::generation_service::handle_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="511.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (11 samples, 0.21%; 0.00%)</title><rect x="480.9" y="357" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.87" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="271.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="708.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.03" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="914.8" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="917.82" y="431.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (1 samples, 0.02%; 0.00%)</title><rect x="867.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.48" y="415.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (39 samples, 0.75%; +0.06%)</title><rect x="613.1" y="533" width="8.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="616.14" y="543.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="643.3" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="646.26" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="947.4" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="950.43" y="479.5" ></text>
</g>
<g >
<title>abstract_type::from_string (7 samples, 0.13%; 0.00%)</title><rect x="69.1" y="469" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.11" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="77.3" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="80.27" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="445.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="448.54" y="383.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="399.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1152.6" y="533" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1155.63" y="543.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="81.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="84.80" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="431.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="319.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (240 samples, 4.61%; -0.06%)</title><rect x="985.3" y="437" width="54.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="988.26" y="447.5" >servi..</text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; -0.06%)</title><rect x="1023.1" y="293" width="1.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1026.08" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; 0.00%)</title><rect x="1084.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.23" y="479.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="678.6" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="681.59" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="627.6" y="453" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="630.63" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; +0.02%)</title><rect x="328.2" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="331.21" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.04%)</title><rect x="439.2" y="261" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="442.19" y="271.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; -0.06%)</title><rect x="157.2" y="517" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="160.22" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_deallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="681.3" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="684.31" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="1123.2" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.19" y="271.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (9 samples, 0.17%; +0.04%)</title><rect x="317.3" y="405" width="2.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="320.34" y="415.5" ></text>
</g>
<g >
<title>schema::is_synced (1 samples, 0.02%; +0.02%)</title><rect x="1126.8" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1129.81" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="367.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="655.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (4 samples, 0.08%; +0.04%)</title><rect x="37.0" y="341" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="39.95" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1095.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1098.10" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; 0.00%)</title><rect x="708.9" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.94" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (6 samples, 0.12%; +0.02%)</title><rect x="1152.4" y="549" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1155.40" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="239.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; -0.02%)</title><rect x="985.0" y="373" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="988.03" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%; +0.02%)</title><rect x="89.3" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="92.27" y="623.5" ></text>
</g>
<g >
<title>bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.02" y="655.5" ></text>
</g>
<g >
<title>database::has_keyspace (2 samples, 0.04%; 0.00%)</title><rect x="81.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.57" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (5 samples, 0.10%; +0.04%)</title><rect x="578.7" y="453" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="581.71" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (9 samples, 0.17%; -0.06%)</title><rect x="667.0" y="549" width="2.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="670.04" y="559.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="208.2" y="309" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="211.18" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="239.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="19.5" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="22.51" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="351.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="303.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (15 samples, 0.29%; -0.04%)</title><rect x="1101.4" y="501" width="3.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1104.44" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; +0.02%)</title><rect x="31.1" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="34.06" y="319.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (13 samples, 0.25%; -0.10%)</title><rect x="310.5" y="437" width="3.0" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="313.55" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (1 samples, 0.02%; 0.00%)</title><rect x="864.5" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.54" y="495.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (6 samples, 0.12%; -0.04%)</title><rect x="295.6" y="309" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="298.60" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="81.3" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="84.34" y="575.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (7 samples, 0.13%; +0.02%)</title><rect x="925.7" y="437" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="928.69" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.06%)</title><rect x="793.0" y="357" width="2.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="795.97" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="672.7" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="675.70" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; +0.02%)</title><rect x="601.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="604.13" y="415.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="46.2" y="261" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="49.24" y="271.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (6 samples, 0.12%; +0.08%)</title><rect x="706.2" y="549" width="1.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="709.22" y="559.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (74 samples, 1.42%; -0.02%)</title><rect x="586.0" y="485" width="16.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="588.96" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="649.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.60" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="42.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.61" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="190.3" y="341" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="193.28" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="858.2" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="861.20" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1083.1" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1086.10" y="463.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.26" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; -0.04%)</title><rect x="611.3" y="453" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="614.32" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="847.1" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="850.10" y="527.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%; -0.10%)</title><rect x="1170.7" y="725" width="0.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1173.75" y="735.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="223.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="367.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; +0.02%)</title><rect x="718.7" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="721.68" y="511.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (7 samples, 0.13%; +0.04%)</title><rect x="335.2" y="405" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="338.24" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="814.3" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="817.26" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="551.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="554.76" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; -0.04%)</title><rect x="323.2" y="357" width="1.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="326.23" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="89.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="92.04" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="928.0" y="469" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="930.95" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1163.7" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1166.73" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.04%)</title><rect x="190.1" y="325" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="193.06" y="335.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::insert_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.1" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.13" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%; +0.02%)</title><rect x="813.4" y="341" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="816.35" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="340.9" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="343.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="643.7" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="646.71" y="495.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (3 samples, 0.06%; 0.00%)</title><rect x="627.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.40" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="862.0" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="865.05" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (16 samples, 0.31%; +0.02%)</title><rect x="1164.0" y="565" width="3.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1166.95" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1053.7" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1056.65" y="447.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="559.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_following (1 samples, 0.02%; +0.02%)</title><rect x="53.0" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.03" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="71.2" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="74.15" y="479.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="831.5" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="834.47" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (4 samples, 0.08%; +0.02%)</title><rect x="486.8" y="357" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="489.76" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; -0.06%)</title><rect x="723.2" y="581" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="726.21" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="849.4" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="852.36" y="479.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (5 samples, 0.10%; 0.00%)</title><rect x="106.5" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1130.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.89" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (2 samples, 0.04%; 0.00%)</title><rect x="1120.2" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="113.7" y="565" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="116.73" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1115.5" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1118.49" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%; 0.00%)</title><rect x="836.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.23" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (11 samples, 0.21%; +0.04%)</title><rect x="919.3" y="437" width="2.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="922.35" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (2 samples, 0.04%; +0.04%)</title><rect x="595.9" y="389" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="598.92" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; -0.06%)</title><rect x="768.5" y="437" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="771.51" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (3 samples, 0.06%; +0.02%)</title><rect x="440.6" y="309" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="443.55" y="319.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="80.4" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="83.44" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%; 0.00%)</title><rect x="753.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.79" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="335.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="671.3" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="674.34" y="575.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (6 samples, 0.12%; 0.00%)</title><rect x="79.1" y="501" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="351.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::static_row (1 samples, 0.02%; 0.00%)</title><rect x="1124.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.09" y="335.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="868.2" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="871.16" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.28" y="415.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (5 samples, 0.10%; 0.00%)</title><rect x="1058.4" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1061.41" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="736.6" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="739.57" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,059 samples, 20.33%; 0.00%)</title><rect x="879.5" y="549" width="239.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="882.49" y="559.5" >seastar::noncopyable_function&lt;s..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (2 samples, 0.04%; +0.04%)</title><rect x="946.8" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="949.75" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="255.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (6 samples, 0.12%; +0.02%)</title><rect x="806.8" y="213" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="809.78" y="223.5" ></text>
</g>
<g >
<title>sstables::write_cell_value&lt;bytes_ostream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="85.9" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="88.87" y="383.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (2 samples, 0.04%; +0.04%)</title><rect x="1017.0" y="245" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1019.96" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (4 samples, 0.08%; 0.00%)</title><rect x="1143.1" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.12" y="591.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="303.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="85" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="95.5" ></text>
</g>
<g >
<title>free (2 samples, 0.04%; +0.04%)</title><rect x="440.8" y="293" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="443.78" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="70.9" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.93" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="1050.7" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1053.71" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="574.6" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="577.63" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="54.8" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.84" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="399.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="1167.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.58" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="712.8" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="715.79" y="575.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (21 samples, 0.40%; -0.10%)</title><rect x="1013.8" y="277" width="4.7" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1016.79" y="287.5" ></text>
</g>
<g >
<title>memtable_entry::memtable_entry (3 samples, 0.06%; 0.00%)</title><rect x="1120.2" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1085.6" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1088.59" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="826.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.71" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;std::optional&lt;cdc::topology_description&gt; &gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (4 samples, 0.08%; +0.04%)</title><rect x="631.9" y="533" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="634.93" y="543.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="82.5" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.48" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="671.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (7 samples, 0.13%; 0.00%)</title><rect x="69.1" y="453" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.11" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_aggregate_statement, std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::drop_aggregate_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="66.6" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="69.62" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="725.5" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="728.47" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (8 samples, 0.15%; 0.00%)</title><rect x="977.1" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.10" y="447.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; 0.00%)</title><rect x="431.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="434.72" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable&lt;boost::iterators::transform_iterator&lt;boost::range_detail::select_second_const&lt;std::unordered_map&lt;dht::token, gms::inet_address, std::hash&lt;dht::token&gt;, std::equal_to&lt;dht::token&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt; &gt; &gt;, std::__detail::_Node_const_iterator&lt;std::pair&lt;dht::token const, gms::inet_address&gt;, false, true&gt;, boost::use_default, boost::use_default&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="42.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.61" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="533" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="543.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; -0.04%)</title><rect x="628.1" y="533" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="631.08" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (6 samples, 0.12%; -0.04%)</title><rect x="673.6" y="565" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="676.61" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="26.8" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="29.76" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="643.9" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="646.94" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;std::vector&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="855.7" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="858.70" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="788.4" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="791.44" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (621 samples, 11.92%; -0.04%)</title><rect x="168.8" y="437" width="140.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="171.77" y="447.5" >mutation_fragment..</text>
</g>
<g >
<title>seastar::future_state&lt;db::rp_handle&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="1126.6" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1129.58" y="431.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (1 samples, 0.02%; 0.00%)</title><rect x="86.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.33" y="511.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%; +0.02%)</title><rect x="439.4" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="442.42" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="533" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="543.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="447.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="817.9" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="820.88" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; -0.04%)</title><rect x="571.7" y="437" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="574.69" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; +0.02%)</title><rect x="56.4" y="181" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="59.43" y="191.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (2 samples, 0.04%; +0.02%)</title><rect x="741.3" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="744.33" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="655.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; +0.04%)</title><rect x="771.2" y="421" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="774.22" y="431.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1018.1" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1021.10" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="786.6" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="789.63" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1037.1" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1040.12" y="335.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_3b4dc39eb84df2f30b1642770599338655846644] (1 samples, 0.02%; +0.02%)</title><rect x="952.0" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="954.96" y="495.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (2 samples, 0.04%; 0.00%)</title><rect x="1119.6" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; +0.02%)</title><rect x="122.3" y="517" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="125.34" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="1142.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1145.44" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="1033.3" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1036.27" y="383.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; 0.00%)</title><rect x="911.4" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="914.42" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (3 samples, 0.06%; 0.00%)</title><rect x="61.2" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.19" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="632.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="635.61" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; -0.02%)</title><rect x="405.7" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="408.67" y="303.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="554.9" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="557.93" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (16 samples, 0.31%; +0.04%)</title><rect x="937.0" y="501" width="3.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="940.01" y="511.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="731.6" y="517" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="734.59" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::entry::entry (2 samples, 0.04%; 0.00%)</title><rect x="1012.9" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1015.89" y="303.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (4 samples, 0.08%; 0.00%)</title><rect x="1129.3" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="351.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%; 0.00%)</title><rect x="85.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.87" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;database, false&gt;::make&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (15 samples, 0.29%; +0.02%)</title><rect x="981.9" y="421" width="3.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="984.86" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="351.5" ></text>
</g>
<g >
<title>log_heap&lt;logalloc::segment_descriptor, logalloc::segment_descriptor_hist_options&gt;::adjust_up (1 samples, 0.02%; +0.02%)</title><rect x="17.7" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="20.70" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (181 samples, 3.47%; +0.04%)</title><rect x="1039.6" y="453" width="41.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1042.61" y="463.5" >ser..</text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%; +0.02%)</title><rect x="524.4" y="421" width="1.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="527.35" y="431.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.04%)</title><rect x="533.6" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="536.64" y="367.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (14 samples, 0.27%; -0.04%)</title><rect x="848.7" y="517" width="3.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="851.68" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1112.1" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1115.09" y="479.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (1 samples, 0.02%; 0.00%)</title><rect x="37.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.63" y="335.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.66" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; -0.02%)</title><rect x="667.0" y="533" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="670.04" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_table_statement, std::default_delete&lt;cql3::statements::alter_table_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.4" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="69.40" y="495.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="530.7" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="533.69" y="399.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (3 samples, 0.06%; -0.06%)</title><rect x="1158.3" y="549" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1161.29" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (6 samples, 0.12%; +0.06%)</title><rect x="252.1" y="213" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="255.12" y="223.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (1 samples, 0.02%; +0.02%)</title><rect x="950.6" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="953.60" y="511.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="895.1" y="389" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="898.11" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::apply (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; 0.00%)</title><rect x="914.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="917.59" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,088 samples, 20.88%; -0.08%)</title><rect x="873.1" y="581" width="246.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="876.14" y="591.5" >seastar::concrete_execution_stag..</text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="891.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.26" y="495.5" ></text>
</g>
<g >
<title>table::update_cache (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="575.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="1135.6" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.64" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="934.1" y="453" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="937.07" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.10%; +0.08%)</title><rect x="673.8" y="533" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="676.83" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1137.5" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1140.45" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (2 samples, 0.04%; +0.04%)</title><rect x="483.6" y="357" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="486.59" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="756.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.05" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; 0.00%)</title><rect x="44.2" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.20" y="415.5" ></text>
</g>
<g >
<title>schema::column_at (4 samples, 0.08%; 0.00%)</title><rect x="253.7" y="213" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="256.70" y="223.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="870.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.20" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1045.5" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1048.50" y="431.5" ></text>
</g>
<g >
<title>sstring_hash::operator (9 samples, 0.17%; 0.00%)</title><rect x="843.7" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.70" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="789.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="792.57" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (5 samples, 0.10%; 0.00%)</title><rect x="838.9" y="517" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.94" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="271.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; +0.02%)</title><rect x="59.6" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="62.60" y="447.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; -0.08%)</title><rect x="503.5" y="389" width="0.7" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="506.52" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; +0.02%)</title><rect x="1006.8" y="325" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1009.77" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::constants::setter&gt;::~shared_ptr_count_for (1 samples, 0.02%; 0.00%)</title><rect x="662.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.28" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; +0.02%)</title><rect x="47.4" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="50.37" y="319.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema&gt;::make&lt;schema&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="313.0" y="421" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="316.04" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (8 samples, 0.15%; +0.02%)</title><rect x="100.1" y="565" width="1.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="103.14" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.02%; +0.02%)</title><rect x="22.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="25.91" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; 0.00%)</title><rect x="898.7" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="901.74" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (2 samples, 0.04%; +0.02%)</title><rect x="304.4" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="307.43" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (35 samples, 0.67%; 0.00%)</title><rect x="356.1" y="293" width="7.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.07" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="319.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1131.3" y="373" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.34" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; -0.02%)</title><rect x="42.6" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="45.61" y="415.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="765.8" y="485" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="768.79" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; 0.00%)</title><rect x="941.8" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.77" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="255.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="463.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (23 samples, 0.44%; -0.06%)</title><rect x="1066.1" y="341" width="5.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1069.11" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="312.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="315.81" y="415.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="479.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (4 samples, 0.08%; +0.04%)</title><rect x="477.0" y="389" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="480.02" y="399.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (3 samples, 0.06%; 0.00%)</title><rect x="786.6" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.63" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="898.1" y="389" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="901.06" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, auth::standard_role_manager::create (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="808.4" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="811.37" y="271.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (4 samples, 0.08%; +0.02%)</title><rect x="54.2" y="357" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="57.17" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.06%)</title><rect x="749.9" y="469" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="752.93" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (8 samples, 0.15%; 0.00%)</title><rect x="977.1" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.10" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%; +0.04%)</title><rect x="641.7" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="644.67" y="479.5" ></text>
</g>
<g >
<title>cdc::generation_service::make_new_generation (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="559.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%; -0.04%)</title><rect x="544.1" y="293" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="547.06" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.94" y="271.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%; 0.00%)</title><rect x="1128.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.62" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="102.4" y="581" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="105.41" y="591.5" ></text>
</g>
<g >
<title>[[vdso]] (18 samples, 0.35%; -0.10%)</title><rect x="1172.3" y="709" width="4.1" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1175.33" y="719.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="485" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="495.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="191.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; -0.06%)</title><rect x="138.0" y="549" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="140.97" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;true, seastar::future&lt;void&gt;, seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="623.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (73 samples, 1.40%; -0.04%)</title><rect x="586.0" y="469" width="16.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="588.96" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (5 samples, 0.10%; +0.04%)</title><rect x="651.2" y="581" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="654.19" y="591.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (8 samples, 0.15%; -0.02%)</title><rect x="553.8" y="421" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="556.80" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,783 samples, 91.80%; 0.00%)</title><rect x="87.2" y="645" width="1083.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="655.5" >seastar::reactor::run</text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="246.2" y="197" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="249.23" y="207.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="930.4" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="933.45" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="501.9" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="504.93" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, bool const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="74.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.32" y="463.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="684.5" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="687.48" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="197.5" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="200.53" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, table::compact_sstables (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; +0.02%)</title><rect x="665.9" y="565" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="668.91" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (5 samples, 0.10%; 0.00%)</title><rect x="641.0" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.99" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="75.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.91" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="639.2" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="642.18" y="543.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="524.1" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="527.13" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="778.2" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="781.25" y="431.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (31 samples, 0.60%; 0.00%)</title><rect x="516.7" y="357" width="7.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="519.65" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="70.9" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.93" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="288.1" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="291.13" y="319.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (21 samples, 0.40%; 0.00%)</title><rect x="507.8" y="373" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="510.82" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::for_each_cql_result (1 samples, 0.02%; 0.00%)</title><rect x="649.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.60" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%; 0.00%)</title><rect x="426.5" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="429.51" y="255.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="527.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="779.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.38" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="41.0" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="44.03" y="351.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.10%; +0.06%)</title><rect x="281.6" y="261" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="284.56" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="644.8" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="647.84" y="479.5" ></text>
</g>
<g >
<title>update_usable.constprop.0 (1 samples, 0.02%; +0.02%)</title><rect x="1189.5" y="725" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1192.55" y="735.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; -0.02%)</title><rect x="657.1" y="581" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="660.07" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="254.4" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.38" y="207.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;query::result_memory_accounter&gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="635.1" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="638.11" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="303.5" ></text>
</g>
<g >
<title>database::query (12 samples, 0.23%; +0.02%)</title><rect x="103.1" y="597" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="106.09" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="271.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="253.5" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="256.47" y="223.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="671.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%; 0.00%)</title><rect x="82.5" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.48" y="607.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="695.8" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (16 samples, 0.31%; +0.12%)</title><rect x="1008.1" y="325" width="3.7" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1011.13" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::optional&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt; &gt;::invoke&lt;cql3::query_processor::for_each_cql_result (1 samples, 0.02%; +0.02%)</title><rect x="649.6" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="652.60" y="575.5" ></text>
</g>
<g >
<title>all (5,210 samples, 100%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="44.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.43" y="399.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%; +0.02%)</title><rect x="513.0" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="516.03" y="383.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (713 samples, 13.69%; -0.08%)</title><rect x="166.5" y="469" width="161.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="169.50" y="479.5" >seastar::repeat&lt;merg..</text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (4 samples, 0.08%; 0.00%)</title><rect x="1169.6" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1172.62" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="51.4" y="149" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="54.45" y="159.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="479.5" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="482.51" y="383.5" ></text>
</g>
<g >
<title>evictable_reader::recreate_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="303.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; +0.04%)</title><rect x="446.7" y="405" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="449.67" y="415.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (83 samples, 1.59%; +0.08%)</title><rect x="227.9" y="213" width="18.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="230.88" y="223.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (21 samples, 0.40%; +0.02%)</title><rect x="1108.0" y="517" width="4.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1111.01" y="527.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="932.0" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="935.03" y="479.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="479.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (6 samples, 0.12%; +0.02%)</title><rect x="823.1" y="405" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="826.09" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (1 samples, 0.02%; +0.02%)</title><rect x="261.2" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="264.17" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (16 samples, 0.31%; 0.00%)</title><rect x="1164.0" y="581" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1166.95" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="80.0" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="82.98" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="599.5" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="602.55" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (9 samples, 0.17%; -0.04%)</title><rect x="50.3" y="405" width="2.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="53.31" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1060.9" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1063.90" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.10%; -0.02%)</title><rect x="184.2" y="341" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="187.17" y="351.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="607.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="610.47" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%; 0.00%)</title><rect x="88.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="91.14" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="73.4" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="76.42" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::emplace_back&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="734.3" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="737.31" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="431.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="456.9" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="459.86" y="479.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="677.5" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="680.46" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (12 samples, 0.23%; +0.02%)</title><rect x="759.9" y="373" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="762.90" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::~storage_proxy (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="480.2" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="483.19" y="367.5" ></text>
</g>
<g >
<title>logalloc::segment::occupancy (1 samples, 0.02%; +0.02%)</title><rect x="86.8" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="89.78" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="644.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.84" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="694.0" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="696.99" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%; +0.02%)</title><rect x="570.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="573.10" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (9 samples, 0.17%; +0.10%)</title><rect x="849.8" y="469" width="2.1" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="852.82" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (2 samples, 0.04%; -0.06%)</title><rect x="1024.7" y="309" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1027.66" y="319.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="360.1" y="261" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="363.15" y="271.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_3b4dc39eb84df2f30b1642770599338655846644] (2 samples, 0.04%; +0.04%)</title><rect x="480.4" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="483.41" y="367.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%; +0.02%)</title><rect x="407.5" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="410.49" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="1159.0" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1161.97" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (2 samples, 0.04%; +0.02%)</title><rect x="539.3" y="325" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="542.30" y="335.5" ></text>
</g>
<g >
<title>std::__find_if&lt;char*, __gnu_cxx::__ops::_Iter_pred&lt;boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="287.5" ></text>
</g>
<g >
<title>dirty_memory_manager::flush_one (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (3 samples, 0.06%; 0.00%)</title><rect x="864.3" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="575.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (21 samples, 0.40%; +0.04%)</title><rect x="714.8" y="549" width="4.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="717.83" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (70 samples, 1.34%; -0.08%)</title><rect x="586.6" y="453" width="15.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="589.64" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%; 0.00%)</title><rect x="1150.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.82" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="46.5" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.46" y="303.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (460 samples, 8.83%; -0.06%)</title><rect x="194.6" y="389" width="104.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="197.59" y="399.5" >seastar::do_..</text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="724.1" y="597" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="727.12" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="990.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="993.92" y="399.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="580.3" y="453" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="583.30" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="795.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.46" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (4 samples, 0.08%; +0.06%)</title><rect x="932.5" y="501" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="935.48" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, auth::role_or_anonymous&amp;&amp;, auth::get_permissions (1 samples, 0.02%; +0.02%)</title><rect x="817.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="820.65" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (2 samples, 0.04%; +0.04%)</title><rect x="868.8" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="871.84" y="479.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="870.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.88" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="177.1" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="180.15" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="303.1" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="306.07" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="446.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.21" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="107.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.39" y="383.5" ></text>
</g>
<g >
<title>query_result_builder::consume (193 samples, 3.70%; -0.02%)</title><rect x="364.0" y="309" width="43.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="367.00" y="319.5" >quer..</text>
</g>
<g >
<title>partition_entry::apply (2 samples, 0.04%; 0.00%)</title><rect x="1124.3" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.32" y="351.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::get_arg (1 samples, 0.02%; +0.02%)</title><rect x="20.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="23.42" y="591.5" ></text>
</g>
<g >
<title>cdc::generation_service::after_join (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; -0.06%)</title><rect x="685.4" y="533" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="688.39" y="543.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; 0.00%)</title><rect x="982.5" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.54" y="399.5" ></text>
</g>
<g >
<title>cql3::query_processor::create_paged_state (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="415.5" ></text>
</g>
<g >
<title>clustering_key_prefix::clustering_key_prefix (1 samples, 0.02%; 0.00%)</title><rect x="1123.6" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.64" y="303.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="362.2" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="365.19" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.7" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="26.1" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (9 samples, 0.17%; +0.10%)</title><rect x="339.3" y="357" width="2.1" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="342.31" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="591.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%; +0.04%)</title><rect x="543.6" y="293" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="546.60" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="673.2" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="676.16" y="543.5" ></text>
</g>
<g >
<title>database::find_uuid (23 samples, 0.44%; 0.00%)</title><rect x="769.2" y="485" width="5.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="772.19" y="495.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="835.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="838.32" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.08%)</title><rect x="542.0" y="277" width="1.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="545.02" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (2 samples, 0.04%; +0.04%)</title><rect x="198.7" y="341" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="201.66" y="351.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (14 samples, 0.27%; +0.08%)</title><rect x="448.0" y="389" width="3.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="451.03" y="399.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="716.0" y="533" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="718.96" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="620.6" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="623.61" y="479.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%; +0.02%)</title><rect x="50.1" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="53.09" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (9 samples, 0.17%; 0.00%)</title><rect x="45.8" y="421" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.02%)</title><rect x="615.2" y="501" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="618.17" y="511.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::optional&lt;auth::resource&gt;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="819.9" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.92" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (2 samples, 0.04%; +0.04%)</title><rect x="154.3" y="501" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="157.27" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%; -0.04%)</title><rect x="1088.1" y="501" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1091.08" y="511.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; -0.02%)</title><rect x="758.5" y="373" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="761.54" y="383.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.47" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (3 samples, 0.06%; +0.04%)</title><rect x="291.3" y="277" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="294.30" y="287.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%; +0.02%)</title><rect x="649.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="652.37" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::advance (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.70" y="655.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%; -0.02%)</title><rect x="188.0" y="325" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="191.02" y="335.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="26.1" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="789.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="792.80" y="415.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%; +0.02%)</title><rect x="710.5" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="713.53" y="575.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="562.6" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.63" y="415.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="641.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.99" y="495.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="207.0" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.04" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (3 samples, 0.06%; -0.04%)</title><rect x="858.9" y="549" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="861.88" y="559.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.02%)</title><rect x="518.5" y="309" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="521.46" y="319.5" ></text>
</g>
<g >
<title>mutation_querier::consume (180 samples, 3.45%; -0.02%)</title><rect x="364.7" y="293" width="40.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="367.68" y="303.5" >mut..</text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="1023.1" y="309" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.08" y="319.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (4 samples, 0.08%; -0.02%)</title><rect x="1048.7" y="373" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1051.67" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (14 samples, 0.27%; +0.02%)</title><rect x="1127.5" y="373" width="3.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.49" y="383.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (1 samples, 0.02%; 0.00%)</title><rect x="123.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="126.02" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (6 samples, 0.12%; +0.06%)</title><rect x="832.8" y="389" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="835.83" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,068 samples, 20.50%; +0.12%)</title><rect x="877.4" y="565" width="241.9" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="880.45" y="575.5" >seastar::noncopyable_function&lt;se..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="495.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="84.7" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.74" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="655.5" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="658.49" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="452.6" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="455.56" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (9 samples, 0.17%; -0.02%)</title><rect x="20.0" y="597" width="2.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="22.97" y="607.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (36 samples, 0.69%; 0.00%)</title><rect x="94.7" y="597" width="8.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="97.71" y="607.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="1131.6" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (3 samples, 0.06%; +0.02%)</title><rect x="599.8" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="602.77" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="277.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="280.71" y="351.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (3 samples, 0.06%; 0.00%)</title><rect x="79.5" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.53" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::create_local_service&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="511.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; 0.00%)</title><rect x="524.6" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="527.58" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; 0.00%)</title><rect x="763.5" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.52" y="495.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="22.7" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="25.68" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="1061.1" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1064.13" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="565" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="575.5" ></text>
</g>
<g >
<title>dht::tri_compare (5 samples, 0.10%; -0.06%)</title><rect x="515.5" y="357" width="1.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="518.52" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="447.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.04%)</title><rect x="525.7" y="389" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="528.71" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="49.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.18" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="48.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.50" y="303.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="383.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="98.3" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="101.33" y="543.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_type_statement*, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.4" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="67.36" y="447.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (12 samples, 0.23%; +0.02%)</title><rect x="740.2" y="485" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="743.20" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (41 samples, 0.79%; -0.10%)</title><rect x="713.0" y="565" width="9.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="716.02" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (86 samples, 1.65%; +0.12%)</title><rect x="745.6" y="517" width="19.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="748.63" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.5" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1115.54" y="495.5" ></text>
</g>
<g >
<title>__start_context (292 samples, 5.60%; 0.00%)</title><rect x="16.8" y="709" width="66.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.79" y="719.5" >__start..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (514 samples, 9.87%; +0.02%)</title><rect x="334.8" y="453" width="116.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="337.78" y="463.5" >flat_mutation_..</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.04" y="463.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.6" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1122.56" y="287.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="84.3" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="447.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (4 samples, 0.08%; 0.00%)</title><rect x="220.0" y="229" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="222.95" y="239.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%; 0.00%)</title><rect x="876.5" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.54" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="517" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="245" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="618.3" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="621.35" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; +0.06%)</title><rect x="329.3" y="485" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="332.35" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="871.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="874.11" y="399.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="693" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="703.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (15 samples, 0.29%; -0.08%)</title><rect x="1056.8" y="421" width="3.4" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1059.83" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::row_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1124.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.09" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; -0.02%)</title><rect x="1038.3" y="389" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1041.25" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (67 samples, 1.29%; -0.02%)</title><rect x="277.9" y="357" width="15.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="280.93" y="367.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="934.1" y="469" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="937.07" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="570.6" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="573.56" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="441.2" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="444.23" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (28 samples, 0.54%; 0.00%)</title><rect x="866.1" y="501" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.12" y="511.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (1 samples, 0.02%; +0.02%)</title><rect x="38.3" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="41.31" y="351.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (68 samples, 1.31%; +0.06%)</title><rect x="747.7" y="501" width="15.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="750.67" y="511.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; 0.00%)</title><rect x="635.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.33" y="527.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%; +0.02%)</title><rect x="1162.4" y="565" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1165.37" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="511.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%; 0.00%)</title><rect x="113.1" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.05" y="575.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (2 samples, 0.04%; 0.00%)</title><rect x="973.5" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="976.48" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.12%; 0.00%)</title><rect x="867.0" y="469" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.03" y="479.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="51.4" y="309" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="54.45" y="319.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::get_future (3 samples, 0.06%; 0.00%)</title><rect x="1128.2" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.17" y="367.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%; +0.02%)</title><rect x="84.3" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="87.29" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%; -0.02%)</title><rect x="357.4" y="261" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="360.43" y="271.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (9 samples, 0.17%; 0.00%)</title><rect x="79.1" y="581" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="591.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (7 samples, 0.13%; +0.08%)</title><rect x="844.2" y="437" width="1.5" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="847.15" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="559.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="591.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="511.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (3 samples, 0.06%; +0.02%)</title><rect x="643.5" y="501" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="646.49" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::emplace_back&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;&amp;, nonwrapping_interval&lt;dht::token&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1083.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1086.78" y="463.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.02%)</title><rect x="80.0" y="373" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="82.98" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="319.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="76.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.13" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (80 samples, 1.54%; +0.02%)</title><rect x="41.9" y="453" width="18.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="44.93" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="118.0" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="121.03" y="543.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; 0.00%)</title><rect x="687.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.20" y="591.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.08%)</title><rect x="453.9" y="469" width="1.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="456.92" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (7 samples, 0.13%; 0.00%)</title><rect x="1147.4" y="549" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.42" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="74.5" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="77.55" y="431.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%; -0.02%)</title><rect x="35.6" y="341" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="38.59" y="351.5" ></text>
</g>
<g >
<title>database::find_keyspace (3 samples, 0.06%; +0.04%)</title><rect x="962.8" y="453" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="965.83" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, std::pair&lt;column_definition const* const, cql3::expr::expression&gt;, std::allocator&lt;std::pair&lt;column_definition const* const, cql3::expr::expression&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="75.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="78.45" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (5 samples, 0.10%; +0.04%)</title><rect x="155.0" y="501" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="157.95" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql3_type::raw&gt;::shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="57.6" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="60.56" y="415.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="60.7" y="261" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.73" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (11 samples, 0.21%; -0.02%)</title><rect x="1034.9" y="373" width="2.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1037.86" y="383.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.37" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="1093.7" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.74" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%; -0.02%)</title><rect x="186.9" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="189.89" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="80.2" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="83.21" y="447.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="893.1" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="896.07" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="669.5" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="672.53" y="559.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="814.0" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.03" y="351.5" ></text>
</g>
<g >
<title>table::query (2,237 samples, 42.94%; +0.17%)</title><rect x="139.3" y="549" width="506.7" height="15.0" fill="rgb(255,52,52)" rx="2" ry="2" />
<text  x="142.32" y="559.5" >table::query</text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="871.6" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="874.56" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.10%; -0.04%)</title><rect x="259.4" y="197" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="262.36" y="207.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="543.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="670.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="673.89" y="495.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::~abstract_read_resolver (1 samples, 0.02%; 0.00%)</title><rect x="710.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.75" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%; +0.04%)</title><rect x="717.3" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="720.32" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="840.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.08" y="543.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="838.3" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="841.26" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.12%; +0.02%)</title><rect x="196.2" y="341" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="199.17" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="585.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.28" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="63.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.00" y="447.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; 0.00%)</title><rect x="667.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="670.27" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (44 samples, 0.84%; -0.02%)</title><rect x="602.7" y="485" width="10.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="605.72" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="978.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="981.46" y="399.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (1 samples, 0.02%; +0.02%)</title><rect x="243.3" y="165" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="246.28" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.02%)</title><rect x="682.4" y="581" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="685.44" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (34 samples, 0.65%; +0.02%)</title><rect x="804.7" y="277" width="7.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="807.74" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (4 samples, 0.08%; 0.00%)</title><rect x="867.0" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.03" y="463.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (3 samples, 0.06%; 0.00%)</title><rect x="126.6" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="129.64" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (22 samples, 0.42%; -0.04%)</title><rect x="852.3" y="549" width="5.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="855.31" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="639.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; -0.06%)</title><rect x="978.2" y="389" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="981.23" y="399.5" ></text>
</g>
<g >
<title>unsigned_vint::serialize (1 samples, 0.02%; +0.02%)</title><rect x="86.3" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="89.33" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%; +0.02%)</title><rect x="723.7" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="726.66" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="808.1" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="811.14" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="834.2" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="837.19" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (4 samples, 0.08%; -0.02%)</title><rect x="842.8" y="469" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="845.79" y="479.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="676.1" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="679.10" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1013.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.11" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.04" y="479.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="601.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="604.36" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (6 samples, 0.12%; 0.00%)</title><rect x="934.1" y="501" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="937.07" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (2 samples, 0.04%; +0.02%)</title><rect x="704.4" y="549" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="707.41" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (3 samples, 0.06%; 0.00%)</title><rect x="26.1" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="383.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; 0.00%)</title><rect x="1120.2" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (4 samples, 0.08%; 0.00%)</title><rect x="79.5" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.53" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (7 samples, 0.13%; +0.02%)</title><rect x="317.8" y="389" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="320.80" y="399.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="287.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (13 samples, 0.25%; +0.02%)</title><rect x="666.6" y="565" width="2.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="669.59" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="871.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.56" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (20 samples, 0.38%; +0.04%)</title><rect x="293.1" y="357" width="4.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="296.11" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; +0.02%)</title><rect x="762.4" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="765.39" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="78.9" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="81.85" y="543.5" ></text>
</g>
<g >
<title>fmt::v7::detail::vformat_to&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="83.4" y="709" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="86.38" y="719.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (18 samples, 0.35%; +0.08%)</title><rect x="968.7" y="437" width="4.1" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="971.72" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="76.1" y="501" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="79.13" y="511.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (6 samples, 0.12%; +0.02%)</title><rect x="1093.5" y="469" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1096.52" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (2 samples, 0.04%; -0.02%)</title><rect x="631.5" y="533" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="634.48" y="543.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="559.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1151.3" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.27" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (6 samples, 0.12%; 0.00%)</title><rect x="1151.0" y="533" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.04" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="863.9" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="866.86" y="607.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="870.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.20" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="55.8" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="58.75" y="351.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="684.7" y="549" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="687.71" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (3 samples, 0.06%; 0.00%)</title><rect x="643.5" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="646.49" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::grant_statement*, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="65.0" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="68.04" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="181" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="191.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="990.7" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="993.69" y="367.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (71 samples, 1.36%; +0.06%)</title><rect x="1062.3" y="421" width="16.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1065.26" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="649.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.15" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="1153.1" y="501" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1156.08" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.08%)</title><rect x="675.2" y="581" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="678.19" y="591.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="1147.0" y="533" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1149.97" y="543.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="582.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="585.11" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="206.4" y="261" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="209.36" y="271.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="711.4" y="581" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="714.43" y="591.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (1 samples, 0.02%; +0.02%)</title><rect x="762.8" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="765.84" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (7 samples, 0.13%; 0.00%)</title><rect x="43.1" y="437" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="511.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (4 samples, 0.08%; 0.00%)</title><rect x="121.2" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.21" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; -0.04%)</title><rect x="574.4" y="501" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="577.41" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; -0.04%)</title><rect x="101.3" y="549" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="104.27" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1020.8" y="309" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1023.81" y="319.5" ></text>
</g>
<g >
<title>database::find_column_family (3 samples, 0.06%; 0.00%)</title><rect x="768.5" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.51" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%; -0.02%)</title><rect x="535.5" y="357" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="538.45" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.04%)</title><rect x="608.2" y="437" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="611.15" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="644.2" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="647.17" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;::operator=&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.49" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (2 samples, 0.04%; +0.04%)</title><rect x="1128.2" y="341" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1131.17" y="351.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%; +0.02%)</title><rect x="1006.3" y="341" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1009.32" y="351.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="75.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.91" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="64.41" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="993.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="996.86" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="431.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; -0.02%)</title><rect x="633.3" y="517" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="636.29" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (3 samples, 0.06%; 0.00%)</title><rect x="176.5" y="373" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="179.47" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="1033.7" y="341" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1036.72" y="351.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="565" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="1059.5" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1062.54" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; 0.00%)</title><rect x="173.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="176.30" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (15 samples, 0.29%; +0.08%)</title><rect x="1071.5" y="373" width="3.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1074.55" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="84.3" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%; -0.06%)</title><rect x="374.4" y="277" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="377.42" y="287.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="639.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (11 samples, 0.21%; +0.02%)</title><rect x="1176.4" y="709" width="2.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1179.41" y="719.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="456.4" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="459.41" y="479.5" ></text>
</g>
<g >
<title>malloc (2 samples, 0.04%; 0.00%)</title><rect x="627.6" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.63" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="430.4" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="433.36" y="351.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%; +0.08%)</title><rect x="698.1" y="581" width="2.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="701.07" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="335.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; +0.02%)</title><rect x="442.6" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="445.59" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%; -0.04%)</title><rect x="1141.1" y="581" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1144.08" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="50.8" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="53.77" y="255.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="823.5" y="389" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="826.54" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%; +0.02%)</title><rect x="40.1" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="43.12" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (2 samples, 0.04%; 0.00%)</title><rect x="733.9" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="736.85" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (3 samples, 0.06%; +0.04%)</title><rect x="670.4" y="501" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="673.44" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (15 samples, 0.29%; 0.00%)</title><rect x="1127.5" y="389" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.49" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::expr::expression::impl*, false&gt;::_Head_base&lt;cql3::expr::expression::impl*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="57.8" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="60.79" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="319.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%; 0.00%)</title><rect x="644.6" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="647.62" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="1037.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.35" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="399.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::waiting_for (1 samples, 0.02%; 0.00%)</title><rect x="719.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.13" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (34 samples, 0.65%; +0.02%)</title><rect x="1012.0" y="309" width="7.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1014.98" y="319.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="45.8" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="48.79" y="207.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="941.5" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="944.54" y="511.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (12 samples, 0.23%; -0.04%)</title><rect x="765.1" y="517" width="2.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="768.11" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1017.9" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1020.87" y="271.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.7" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="54.67" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;db::cf_holder&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1126.1" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1129.13" y="383.5" ></text>
</g>
<g >
<title>read_context::create_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="239.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="671.1" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="674.12" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (5 samples, 0.10%; -0.02%)</title><rect x="741.8" y="405" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="744.78" y="415.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%; 0.00%)</title><rect x="351.1" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="354.09" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="327.1" y="453" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="330.08" y="463.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%; -0.04%)</title><rect x="997.7" y="357" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1000.71" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="600.7" y="389" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="603.68" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%; +0.04%)</title><rect x="900.8" y="405" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="903.78" y="415.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (5 samples, 0.10%; -0.02%)</title><rect x="578.7" y="485" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="581.71" y="495.5" ></text>
</g>
<g >
<title>cdc::generation_service::do_handle_cdc_generation_intercept_nonfatal_errors (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (6 samples, 0.12%; +0.02%)</title><rect x="812.7" y="357" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="815.67" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.04%)</title><rect x="431.9" y="325" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="434.95" y="335.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%; -0.10%)</title><rect x="199.6" y="341" width="0.2" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="202.57" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (3 samples, 0.06%; +0.04%)</title><rect x="889.2" y="501" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="892.22" y="511.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%; 0.00%)</title><rect x="31.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.52" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (2 samples, 0.04%; -0.02%)</title><rect x="370.6" y="277" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="373.57" y="287.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%; 0.00%)</title><rect x="1123.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.87" y="335.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="719.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.04%)</title><rect x="195.9" y="341" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="198.95" y="351.5" ></text>
</g>
<g >
<title>make_combined_reader (104 samples, 2.00%; 0.00%)</title><rect x="473.6" y="437" width="23.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="476.62" y="447.5" >m..</text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (9 samples, 0.17%; +0.02%)</title><rect x="806.1" y="245" width="2.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="809.10" y="255.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (4 samples, 0.08%; +0.08%)</title><rect x="360.6" y="261" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="363.60" y="271.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="51.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="54.90" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (6 samples, 0.12%; -0.04%)</title><rect x="1155.6" y="549" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1158.57" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%; +0.02%)</title><rect x="666.4" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="669.36" y="575.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1120.2" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="223.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (20 samples, 0.38%; 0.00%)</title><rect x="387.8" y="261" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="390.78" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="496.0" y="405" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="499.04" y="415.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (11 samples, 0.21%; -0.02%)</title><rect x="243.5" y="165" width="2.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="246.51" y="175.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="651.0" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="653.96" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.59" y="527.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (7 samples, 0.13%; +0.04%)</title><rect x="1165.5" y="533" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1168.54" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="675.6" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="678.65" y="591.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (2 samples, 0.04%; +0.04%)</title><rect x="462.1" y="485" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="465.07" y="495.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="853.9" y="453" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.89" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="993.4" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="996.41" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (41 samples, 0.79%; -0.04%)</title><rect x="1012.0" y="325" width="9.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1014.98" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="22.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="25.46" y="463.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="367.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="479.5" ></text>
</g>
<g >
<title>row_tombstone::apply (1 samples, 0.02%; 0.00%)</title><rect x="429.2" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="432.23" y="335.5" ></text>
</g>
<g >
<title>schema::position (1 samples, 0.02%; 0.00%)</title><rect x="1107.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.79" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="799.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.08" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (4 samples, 0.08%; -0.02%)</title><rect x="191.6" y="357" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="194.64" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="725.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.93" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="639.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.96" y="543.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (28 samples, 0.54%; +0.04%)</title><rect x="756.5" y="469" width="6.3" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="759.50" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="68.4" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="71.43" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (3 samples, 0.06%; -0.04%)</title><rect x="457.1" y="469" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="460.09" y="479.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (267 samples, 5.12%; -0.06%)</title><rect x="497.6" y="437" width="60.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="500.63" y="447.5" >memtab..</text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (2 samples, 0.04%; +0.04%)</title><rect x="499.7" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="502.67" y="431.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="267.3" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="270.29" y="223.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (5 samples, 0.10%; +0.02%)</title><rect x="25.6" y="405" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="28.63" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; +0.02%)</title><rect x="181.0" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="184.00" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (1 samples, 0.02%; -0.02%)</title><rect x="714.4" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="717.38" y="559.5" ></text>
</g>
<g >
<title>table::query (2 samples, 0.04%; 0.00%)</title><rect x="1168.3" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mIDENT (1 samples, 0.02%; +0.02%)</title><rect x="36.0" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="39.05" y="367.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="137.3" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="140.29" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="700.3" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="703.33" y="591.5" ></text>
</g>
<g >
<title>database::find_column_family (1 samples, 0.02%; 0.00%)</title><rect x="1126.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.36" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="554.9" y="357" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="557.93" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="399.5" ></text>
</g>
<g >
<title>dht::sharder::shard_of (1 samples, 0.02%; +0.02%)</title><rect x="993.0" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="995.96" y="399.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="931.1" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="934.12" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.75" y="495.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (3 samples, 0.06%; +0.06%)</title><rect x="630.3" y="501" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="633.35" y="511.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (12 samples, 0.23%; 0.00%)</title><rect x="752.2" y="437" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.20" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="703.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%; 0.00%)</title><rect x="86.8" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="671.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.35%; 0.00%)</title><rect x="964.2" y="453" width="4.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="967.19" y="463.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="127.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (4 samples, 0.08%; 0.00%)</title><rect x="71.8" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.83" y="479.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="998.2" y="373" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.17" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::maybe_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="335.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%; 0.00%)</title><rect x="85.4" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="447.5" ></text>
</g>
<g >
<title>boost::range_detail::filtered_range&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%; 0.00%)</title><rect x="1131.6" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="306.7" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="309.70" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; +0.02%)</title><rect x="42.4" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="45.39" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="573.5" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.50" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="836.5" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="839.45" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="59.8" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="62.83" y="447.5" ></text>
</g>
<g >
<title>row::apply (1 samples, 0.02%; +0.02%)</title><rect x="871.3" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="874.33" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl&gt;::_S_destroy&lt;seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::impl, mutation_fragment&gt; (2 samples, 0.04%; 0.00%)</title><rect x="321.2" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="324.19" y="399.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.59" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="442.1" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="445.14" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (1 samples, 0.02%; +0.02%)</title><rect x="1189.3" y="725" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1192.32" y="735.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; +0.02%)</title><rect x="718.9" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="721.91" y="527.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (89 samples, 1.71%; -0.02%)</title><rect x="796.1" y="389" width="20.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="799.14" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; -0.02%)</title><rect x="1134.7" y="581" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1137.74" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="687.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (2 samples, 0.04%; +0.04%)</title><rect x="428.8" y="325" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="431.78" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="739.5" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="742.52" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="105.8" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="108.80" y="287.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::~small_vector (2 samples, 0.04%; +0.02%)</title><rect x="711.0" y="565" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="713.98" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="57.3" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.34" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="511.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::validate_visitor&lt;basic_single_fragmented_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="351.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="763.3" y="501" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="766.30" y="511.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.12%; -0.06%)</title><rect x="432.2" y="309" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="435.17" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="629" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; 0.00%)</title><rect x="23.1" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; -0.02%)</title><rect x="805.9" y="229" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="808.88" y="239.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%; -0.06%)</title><rect x="719.4" y="533" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="722.36" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (5 samples, 0.10%; +0.04%)</title><rect x="671.6" y="565" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="674.57" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (8 samples, 0.15%; 0.00%)</title><rect x="98.3" y="549" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.33" y="559.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="1167.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.58" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="655.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="543.5" ></text>
</g>
<g >
<title>auth::standard_role_manager::create_or_replace (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="591.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (54 samples, 1.04%; -0.02%)</title><rect x="800.4" y="325" width="12.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="803.44" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="492.6" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="495.64" y="367.5" ></text>
</g>
<g >
<title>table::make_reader (478 samples, 9.17%; +0.12%)</title><rect x="465.0" y="453" width="108.3" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="468.01" y="463.5" >table::make_r..</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; +0.02%)</title><rect x="983.7" y="373" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="986.67" y="383.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (52 samples, 1.00%; 0.00%)</title><rect x="1064.1" y="405" width="11.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.07" y="415.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (3 samples, 0.06%; 0.00%)</title><rect x="1121.6" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.60" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (1 samples, 0.02%; +0.02%)</title><rect x="88.4" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="91.36" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="135.7" y="549" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="138.70" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::maybe_advance_to (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (67 samples, 1.29%; -0.02%)</title><rect x="1145.2" y="581" width="15.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1148.16" y="591.5" ></text>
</g>
<g >
<title>database::shard_of (2 samples, 0.04%; 0.00%)</title><rect x="1129.5" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.53" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="970.5" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="973.53" y="431.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.02%; 0.00%)</title><rect x="16.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.34" y="703.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="195.5" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="198.49" y="367.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (3 samples, 0.06%; +0.04%)</title><rect x="410.2" y="309" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="413.20" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.02%)</title><rect x="1098.0" y="437" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1101.05" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="832.6" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="835.60" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="845.7" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="848.74" y="511.5" ></text>
</g>
<g >
<title>[unknown] (21 samples, 0.40%; 0.00%)</title><rect x="11.6" y="693" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.59" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (2 samples, 0.04%; +0.04%)</title><rect x="134.8" y="549" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="137.79" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.06%)</title><rect x="1107.3" y="517" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1110.33" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (10 samples, 0.19%; +0.02%)</title><rect x="740.6" y="453" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="743.65" y="463.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (4 samples, 0.08%; +0.06%)</title><rect x="190.7" y="357" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="193.74" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (46 samples, 0.88%; +0.10%)</title><rect x="200.5" y="341" width="10.4" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="203.48" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.06%)</title><rect x="621.3" y="485" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="624.29" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.06%)</title><rect x="473.4" y="437" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="476.39" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (280 samples, 5.37%; 0.00%)</title><rect x="19.5" y="661" width="63.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.51" y="671.5" >std::_..</text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%; +0.06%)</title><rect x="309.6" y="437" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="312.64" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="308.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="311.28" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,783 samples, 91.80%; +0.02%)</title><rect x="87.2" y="629" width="1083.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="90.23" y="639.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%; +0.02%)</title><rect x="612.7" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="615.68" y="495.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="77.9" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="80.95" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="155.6" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="158.63" y="495.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="137.5" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="140.51" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (6 samples, 0.12%; +0.12%)</title><rect x="1027.6" y="357" width="1.4" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1030.61" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%; +0.02%)</title><rect x="1021.9" y="325" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1024.95" y="335.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="519.4" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="522.37" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::resize (1 samples, 0.02%; 0.00%)</title><rect x="1170.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.52" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; 0.00%)</title><rect x="947.2" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.21" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="803.2" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="806.16" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="496.9" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="499.95" y="431.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="43.5" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="46.52" y="191.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="832.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="835.38" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%; +0.06%)</title><rect x="545.4" y="341" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="548.42" y="351.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="935.4" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="938.43" y="511.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.8" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1127.77" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (18 samples, 0.35%; +0.02%)</title><rect x="53.5" y="389" width="4.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.49" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="851.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.85" y="543.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_tokenStartCharIndex (1 samples, 0.02%; +0.02%)</title><rect x="28.6" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="31.57" y="383.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="662.3" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="665.28" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (55 samples, 1.06%; -0.08%)</title><rect x="314.4" y="453" width="12.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="317.40" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (8 samples, 0.15%; 0.00%)</title><rect x="945.8" y="501" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.85" y="511.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="603.6" y="437" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="606.62" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="74.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="77.78" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="957.4" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="960.40" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.08%)</title><rect x="450.1" y="357" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="453.07" y="367.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.94" y="207.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (13 samples, 0.25%; -0.02%)</title><rect x="852.8" y="501" width="2.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="855.76" y="511.5" ></text>
</g>
<g >
<title>distributed_loader::init_non_system_keyspaces (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="591.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="696.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.03" y="351.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.70" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (25 samples, 0.48%; 0.00%)</title><rect x="616.3" y="517" width="5.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="619.31" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1120.5" y="181" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.47" y="191.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (7 samples, 0.13%; -0.02%)</title><rect x="741.3" y="437" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="744.33" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation::data, std::default_delete&lt;mutation::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; 0.00%)</title><rect x="1134.1" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.06" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (3 samples, 0.06%; 0.00%)</title><rect x="187.1" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="190.11" y="351.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (6 samples, 0.12%; 0.00%)</title><rect x="860.0" y="549" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.01" y="559.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%; +0.02%)</title><rect x="985.9" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="988.93" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::grant_statement*, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.04" y="447.5" ></text>
</g>
<g >
<title>deletable_row::apply (1 samples, 0.02%; +0.02%)</title><rect x="1122.3" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1125.28" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.5" y="165" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.47" y="175.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,784 samples, 91.82%; 0.00%)</title><rect x="87.2" y="693" width="1083.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="703.5" >seastar::app_template::run</text>
</g>
<g >
<title>bytes_ostream::linearize (3 samples, 0.06%; +0.02%)</title><rect x="622.9" y="501" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="625.88" y="511.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="52.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.81" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (11 samples, 0.21%; 0.00%)</title><rect x="869.3" y="453" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.29" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, utils::UUID, std::allocator&lt;utils::UUID&gt;, std::__detail::_Identity, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="1125.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.90" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="657.8" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="660.75" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="591.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (4 samples, 0.08%; +0.06%)</title><rect x="808.6" y="213" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="811.60" y="223.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="901.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="904.68" y="415.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (6 samples, 0.12%; 0.00%)</title><rect x="79.1" y="517" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="99.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="102.92" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (15 samples, 0.29%; -0.06%)</title><rect x="639.4" y="533" width="3.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="642.41" y="543.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="929.3" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="932.31" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (7 samples, 0.13%; 0.00%)</title><rect x="1043.7" y="421" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.69" y="431.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;sstables::file_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.10" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (4 samples, 0.08%; 0.00%)</title><rect x="54.2" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.17" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="261.4" y="245" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="264.40" y="255.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (555 samples, 10.65%; +0.02%)</title><rect x="958.3" y="469" width="125.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="961.30" y="479.5" >service::storag..</text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%; +0.02%)</title><rect x="1131.3" y="341" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1134.34" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="610.6" y="421" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="613.64" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (15 samples, 0.29%; 0.00%)</title><rect x="269.6" y="309" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.55" y="319.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="463.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.75" y="255.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="1136.1" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1139.10" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%; +0.02%)</title><rect x="636.0" y="533" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="639.01" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (4 samples, 0.08%; +0.02%)</title><rect x="1047.8" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1050.77" y="383.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%; 0.00%)</title><rect x="82.5" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.48" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (6 samples, 0.12%; +0.06%)</title><rect x="580.3" y="437" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="583.30" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="846.2" y="501" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="849.19" y="511.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.68" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%; -0.04%)</title><rect x="632.8" y="533" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="635.84" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="273.4" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="276.40" y="319.5" ></text>
</g>
<g >
<title>row_cache::update (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (3 samples, 0.06%; -0.02%)</title><rect x="328.0" y="485" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="330.99" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (3 samples, 0.06%; +0.04%)</title><rect x="119.8" y="533" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="122.85" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; +0.02%)</title><rect x="87.0" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="90.01" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="84.3" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="431.5" ></text>
</g>
<g >
<title>database::find_schema (7 samples, 0.13%; +0.02%)</title><rect x="827.6" y="453" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="830.62" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="939.1" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="942.05" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="74.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.32" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="341.4" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="344.35" y="367.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="1048.7" y="357" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1051.67" y="367.5" ></text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="751.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="695.1" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="698.12" y="591.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (22 samples, 0.42%; +0.06%)</title><rect x="396.8" y="261" width="5.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="399.84" y="271.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (84 samples, 1.61%; +0.12%)</title><rect x="174.9" y="405" width="19.0" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="177.88" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.10%; -0.04%)</title><rect x="895.6" y="405" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="898.57" y="415.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="447.5" ></text>
</g>
<g >
<title>distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (2 samples, 0.04%; -0.02%)</title><rect x="676.1" y="565" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="679.10" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (9 samples, 0.17%; +0.04%)</title><rect x="345.2" y="357" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="348.20" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::configure (1 samples, 0.02%; 0.00%)</title><rect x="1170.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.52" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="638.7" y="501" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="641.73" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; 0.00%)</title><rect x="98.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.78" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="255.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (1 samples, 0.02%; +0.02%)</title><rect x="866.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="869.12" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;data_value, std::allocator&lt;data_value&gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (6 samples, 0.12%; +0.02%)</title><rect x="939.3" y="485" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="942.28" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (15 samples, 0.29%; 0.00%)</title><rect x="596.4" y="389" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.38" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="613" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="639.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%; +0.02%)</title><rect x="68.7" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="71.66" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (266 samples, 5.11%; -0.02%)</title><rect x="22.0" y="613" width="60.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="25.00" y="623.5" >single..</text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="900.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="903.32" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (34 samples, 0.65%; 0.00%)</title><rect x="865.4" y="549" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1020.6" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1023.59" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="429.5" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="432.45" y="335.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::raw (1 samples, 0.02%; 0.00%)</title><rect x="62.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.77" y="447.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (2 samples, 0.04%; 0.00%)</title><rect x="84.3" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="335.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%; 0.00%)</title><rect x="718.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.68" y="527.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%; +0.04%)</title><rect x="652.8" y="581" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="655.77" y="591.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="326.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.86" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="593.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="596.66" y="383.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (3 samples, 0.06%; +0.04%)</title><rect x="629.7" y="501" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="632.67" y="511.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; -0.02%)</title><rect x="272.7" y="293" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="275.73" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; +0.02%)</title><rect x="870.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="873.65" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="511.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="287.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="686.1" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="689.07" y="543.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (24 samples, 0.46%; +0.08%)</title><rect x="282.7" y="309" width="5.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="285.69" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1056.6" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1059.60" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (13 samples, 0.25%; 0.00%)</title><rect x="869.3" y="469" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.29" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.06%)</title><rect x="1109.8" y="469" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1112.82" y="479.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; +0.02%)</title><rect x="106.5" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="109.48" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="1132.7" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.70" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1100.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.76" y="447.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%; +0.04%)</title><rect x="722.3" y="565" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="725.30" y="575.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.02%)</title><rect x="267.1" y="229" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="270.06" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (2 samples, 0.04%; 0.00%)</title><rect x="272.0" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.05" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; +0.02%)</title><rect x="174.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="177.66" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (5 samples, 0.10%; +0.04%)</title><rect x="568.3" y="357" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="571.29" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="851.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.40" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="872.9" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="875.92" y="527.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="399.5" ></text>
</g>
<g >
<title>locator::simple_snitch::sort_by_proximity (3 samples, 0.06%; +0.06%)</title><rect x="1061.6" y="421" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1064.58" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (5 samples, 0.10%; 0.00%)</title><rect x="816.3" y="389" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.30" y="399.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt;, std::_Bind&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.47" y="287.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%; +0.02%)</title><rect x="1120.5" y="149" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.47" y="159.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1133.2" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1136.15" y="303.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (14 samples, 0.27%; 0.00%)</title><rect x="579.8" y="485" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="582.84" y="495.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="88.6" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="91.59" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="53.3" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.26" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; +0.04%)</title><rect x="1019.2" y="293" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1022.23" y="303.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="653.9" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="656.90" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (33 samples, 0.63%; -0.02%)</title><rect x="434.4" y="325" width="7.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="437.44" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="819.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.24" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="185.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="188.07" y="335.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.37" y="383.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; -0.10%)</title><rect x="374.0" y="277" width="0.2" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="376.97" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1054.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1057.33" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; 0.00%)</title><rect x="851.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.40" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="453.7" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="456.69" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="636.7" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="639.69" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_keyspace_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="64.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.58" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.06%)</title><rect x="1121.6" y="309" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1124.60" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; 0.00%)</title><rect x="268.2" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.20" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (51 samples, 0.98%; +0.10%)</title><rect x="663.4" y="581" width="11.6" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="666.42" y="591.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; +0.02%)</title><rect x="442.4" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="445.36" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (43 samples, 0.83%; +0.02%)</title><rect x="28.8" y="373" width="9.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="31.80" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%; -0.02%)</title><rect x="762.6" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="765.62" y="463.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (2 samples, 0.04%; -0.04%)</title><rect x="786.9" y="405" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="789.85" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (14 samples, 0.27%; -0.06%)</title><rect x="154.0" y="517" width="3.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="157.05" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (513 samples, 9.85%; 0.00%)</title><rect x="335.0" y="437" width="116.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="338.01" y="447.5" >seastar::futur..</text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%; 0.00%)</title><rect x="31.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.06" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="271.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (2 samples, 0.04%; +0.04%)</title><rect x="449.6" y="373" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="452.61" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (6 samples, 0.12%; 0.00%)</title><rect x="905.1" y="453" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="908.08" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (30 samples, 0.58%; -0.02%)</title><rect x="95.6" y="581" width="6.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="98.61" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="1118.7" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1121.66" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%; +0.04%)</title><rect x="800.9" y="277" width="1.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="803.89" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.12%; +0.02%)</title><rect x="552.2" y="405" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="555.21" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (6 samples, 0.12%; 0.00%)</title><rect x="285.2" y="277" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="288.18" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (10 samples, 0.19%; 0.00%)</title><rect x="1035.1" y="357" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.08" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (3 samples, 0.06%; 0.00%)</title><rect x="40.6" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="463.5" ></text>
</g>
<g >
<title>query::result::builder::builder (8 samples, 0.15%; -0.04%)</title><rect x="626.3" y="517" width="1.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="629.27" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; 0.00%)</title><rect x="837.6" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.59" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="689.9" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="692.92" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="993.6" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="996.64" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (5 samples, 0.10%; -0.02%)</title><rect x="673.8" y="549" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="676.83" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="946.1" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="949.07" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="49.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.18" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="1010.8" y="309" width="1.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1013.85" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;flat_mutation_reader&gt;::allocate (3 samples, 0.06%; +0.06%)</title><rect x="471.6" y="437" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="474.58" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::batch_statement*, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.26" y="431.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%; 0.00%)</title><rect x="274.5" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="277.54" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.02%)</title><rect x="905.5" y="405" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="908.53" y="415.5" ></text>
</g>
<g >
<title>service::client_state::get_timestamp (1 samples, 0.02%; +0.02%)</title><rect x="1118.9" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1121.88" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; 0.00%)</title><rect x="938.6" y="485" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.60" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (1 samples, 0.02%; 0.00%)</title><rect x="410.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="413.88" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; +0.04%)</title><rect x="1103.9" y="485" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1106.93" y="495.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (25 samples, 0.48%; 0.00%)</title><rect x="1119.6" y="373" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (16 samples, 0.31%; -0.04%)</title><rect x="480.4" y="373" width="3.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="483.41" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (8 samples, 0.15%; +0.06%)</title><rect x="810.4" y="229" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="813.41" y="239.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; -0.02%)</title><rect x="811.8" y="197" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="814.77" y="207.5" ></text>
</g>
<g >
<title>tolower (2 samples, 0.04%; +0.02%)</title><rect x="41.5" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="44.48" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="824.7" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="827.68" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="611.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="614.10" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="811.3" y="213" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="814.31" y="223.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="18.4" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="21.38" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="193.7" y="373" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="196.68" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (7 samples, 0.13%; 0.00%)</title><rect x="946.1" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.07" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_realloc_insert&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="255.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; +0.02%)</title><rect x="927.3" y="485" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="930.27" y="495.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; 0.00%)</title><rect x="852.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.08" y="559.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (4 samples, 0.08%; +0.08%)</title><rect x="350.2" y="325" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="353.18" y="335.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="447.3" y="389" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="450.35" y="399.5" ></text>
</g>
<g >
<title>free (13 samples, 0.25%; -0.06%)</title><rect x="436.5" y="277" width="2.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="439.48" y="287.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="543.5" ></text>
</g>
<g >
<title>ser::tombstone_view::operator tombstone (1 samples, 0.02%; 0.00%)</title><rect x="107.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.39" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (50 samples, 0.96%; -0.02%)</title><rect x="123.5" y="533" width="11.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="126.47" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.6" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="64.64" y="239.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (10 samples, 0.19%; -0.04%)</title><rect x="653.2" y="581" width="2.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="656.22" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::do_merge_with (3 samples, 0.06%; 0.00%)</title><rect x="73.4" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.42" y="431.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (44 samples, 0.84%; 0.00%)</title><rect x="1179.1" y="725" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1182.13" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (7 samples, 0.13%; -0.02%)</title><rect x="709.8" y="581" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="712.85" y="591.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::wait_all (1 samples, 0.02%; 0.00%)</title><rect x="1127.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.26" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (6 samples, 0.12%; 0.00%)</title><rect x="85.4" y="533" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (81 samples, 1.55%; 0.00%)</title><rect x="1061.6" y="437" width="18.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.58" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%; 0.00%)</title><rect x="31.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.06" y="351.5" ></text>
</g>
<g >
<title>boost::iterator_range&lt;boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%; 0.00%)</title><rect x="1131.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="223.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; +0.02%)</title><rect x="45.3" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="48.33" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (3 samples, 0.06%; 0.00%)</title><rect x="867.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.03" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="849.6" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="852.59" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="740.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.97" y="511.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="684.0" y="565" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="687.03" y="575.5" ></text>
</g>
<g >
<title>row_marker::compact_and_expire (1 samples, 0.02%; +0.02%)</title><rect x="427.2" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="430.19" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (4 samples, 0.08%; +0.04%)</title><rect x="409.3" y="245" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="412.30" y="255.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;service::storage_proxy&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="287.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (62 samples, 1.19%; -0.04%)</title><rect x="588.2" y="437" width="14.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="591.22" y="447.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; 0.00%)</title><rect x="916.2" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="919.18" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="696.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.48" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; 0.00%)</title><rect x="1123.2" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.19" y="287.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_3b4dc39eb84df2f30b1642770599338655846644] (1 samples, 0.02%; +0.02%)</title><rect x="518.2" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="521.24" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="553.6" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="556.57" y="431.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (4 samples, 0.08%; +0.02%)</title><rect x="484.0" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="487.04" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (8 samples, 0.15%; 0.00%)</title><rect x="50.5" y="389" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1127.7" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.72" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="367.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="822.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="825.18" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="276.3" y="325" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="279.35" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1045.7" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1048.73" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="441.5" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="444.46" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="76.1" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="79.13" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.06" y="415.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="795.2" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="798.23" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="767.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.60" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::binary_operator&gt; (1 samples, 0.02%; 0.00%)</title><rect x="75.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.23" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="101.0" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="104.05" y="559.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="759.2" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="762.22" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="696.5" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.48" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1000.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.88" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.06" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="78.2" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="81.17" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (51 samples, 0.98%; 0.00%)</title><rect x="751.3" y="485" width="11.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.29" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="756.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="759.28" y="447.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="649.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="652.37" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (2 samples, 0.04%; +0.02%)</title><rect x="871.8" y="453" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="874.79" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1167.1" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1170.12" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.04%)</title><rect x="1107.3" y="501" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1110.33" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (1 samples, 0.02%; 0.00%)</title><rect x="464.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="467.79" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="1050.0" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1053.03" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="56.0" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.98" y="351.5" ></text>
</g>
<g >
<title>std::remove_if&lt;char*, boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="319.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::construct&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="239.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="575.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (2 samples, 0.04%; 0.00%)</title><rect x="22.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.68" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="603.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.40" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="686.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.29" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="303.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.02%)</title><rect x="544.3" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="547.28" y="287.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%; +0.02%)</title><rect x="1013.3" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1016.34" y="303.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="447.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (10 samples, 0.19%; -0.02%)</title><rect x="629.2" y="517" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="632.22" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.02%)</title><rect x="733.4" y="517" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="736.40" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::cannot_hint&lt;boost::range::joined_range&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.47" y="303.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (4 samples, 0.08%; +0.06%)</title><rect x="359.2" y="261" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="362.24" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (3 samples, 0.06%; 0.00%)</title><rect x="61.2" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.19" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (16 samples, 0.31%; -0.10%)</title><rect x="269.6" y="325" width="3.6" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="272.55" y="335.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (34 samples, 0.65%; 0.00%)</title><rect x="865.4" y="581" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="591.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (12 samples, 0.23%; -0.10%)</title><rect x="358.8" y="277" width="2.7" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="361.79" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.04%)</title><rect x="193.0" y="357" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="196.00" y="367.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (7 samples, 0.13%; +0.08%)</title><rect x="241.7" y="149" width="1.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="244.70" y="159.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (4 samples, 0.08%; 0.00%)</title><rect x="268.4" y="277" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.42" y="287.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; -0.02%)</title><rect x="297.6" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="300.64" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="680.4" y="517" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="683.40" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="303.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%; 0.00%)</title><rect x="36.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.27" y="367.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (7 samples, 0.13%; +0.02%)</title><rect x="568.1" y="373" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="571.07" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="347.0" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="350.01" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="55.5" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="58.52" y="367.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="77.0" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="80.04" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.37" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="63.7" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="66.68" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; +0.02%)</title><rect x="77.7" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="80.72" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (8 samples, 0.15%; +0.04%)</title><rect x="890.1" y="501" width="1.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="893.13" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;unsigned long&amp;, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.93" y="271.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="593.2" y="373" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="596.21" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1115.9" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1118.94" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (22 samples, 0.42%; 0.00%)</title><rect x="1045.7" y="421" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.73" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="936.8" y="501" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="939.79" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="694.2" y="581" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="697.22" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="287.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::with_scheduling_group&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="607.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (17 samples, 0.33%; -0.02%)</title><rect x="923.4" y="485" width="3.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="926.42" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::do_expire_lowres_timers (1 samples, 0.02%; +0.02%)</title><rect x="1169.4" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1172.39" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="848.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="851.91" y="511.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="463.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (3 samples, 0.06%; +0.02%)</title><rect x="1136.3" y="597" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1139.32" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="46.0" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="49.01" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (512 samples, 9.83%; -0.04%)</title><rect x="335.2" y="421" width="116.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="338.24" y="431.5" >seastar::inter..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (29 samples, 0.56%; -0.04%)</title><rect x="538.8" y="341" width="6.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="541.85" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="652.1" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="655.09" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.05" y="415.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="528.4" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="531.43" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1018.5" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.55" y="287.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.28" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="705.1" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="708.09" y="559.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; +0.04%)</title><rect x="823.8" y="357" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="826.77" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="855.9" y="517" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="858.93" y="527.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (3 samples, 0.06%; +0.02%)</title><rect x="739.1" y="517" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="742.06" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="449.2" y="373" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="452.16" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1126.4" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1129.36" y="399.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.6" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="43.58" y="255.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="583.7" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="586.69" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.10%; -0.02%)</title><rect x="1145.8" y="533" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1148.83" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="785.0" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="788.04" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; +0.02%)</title><rect x="63.9" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="66.90" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="835.8" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="838.77" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="826.3" y="453" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="829.26" y="463.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (1 samples, 0.02%; +0.02%)</title><rect x="1002.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1005.92" y="367.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; 0.00%)</title><rect x="695.8" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="415.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; 0.00%)</title><rect x="668.2" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="671.17" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1094.6" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1097.65" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="530.7" y="373" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="533.69" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.08%)</title><rect x="957.2" y="437" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="960.17" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (43 samples, 0.83%; -0.02%)</title><rect x="68.2" y="565" width="9.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="71.21" y="575.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.37" y="351.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="583.9" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.92" y="511.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; 0.00%)</title><rect x="555.6" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="558.61" y="431.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; 0.00%)</title><rect x="1106.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.97" y="527.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (1 samples, 0.02%; -0.02%)</title><rect x="374.2" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="377.19" y="287.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="559.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; -0.02%)</title><rect x="645.1" y="501" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="648.07" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (9 samples, 0.17%; 0.00%)</title><rect x="60.1" y="437" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.05" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1080.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1083.61" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (49 samples, 0.94%; +0.08%)</title><rect x="123.5" y="517" width="11.1" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="126.47" y="527.5" ></text>
</g>
<g >
<title>partition_version_ref::partition_version_ref (1 samples, 0.02%; +0.02%)</title><rect x="1120.7" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.69" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="864.5" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.54" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="682.2" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="685.21" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="778.5" y="453" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="781.47" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (7 samples, 0.13%; 0.00%)</title><rect x="50.5" y="373" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="383.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; +0.04%)</title><rect x="120.5" y="533" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="123.53" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="48.0" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="51.05" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="319.5" ></text>
</g>
<g >
<title>perf_simple_que (5,209 samples, 99.98%; 0.00%)</title><rect x="10.0" y="741" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >perf_simple_que</text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (1 samples, 0.02%; +0.02%)</title><rect x="44.2" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="47.20" y="399.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (5 samples, 0.10%; 0.00%)</title><rect x="1125.2" y="405" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.22" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="446.4" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.44" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="1152.0" y="469" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1154.95" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="383.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="43.3" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="431.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (6 samples, 0.12%; +0.10%)</title><rect x="305.3" y="405" width="1.4" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="308.34" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="569.7" y="373" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="572.65" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; -0.02%)</title><rect x="570.8" y="437" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="573.78" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="60.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.05" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1034.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1037.18" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%; +0.02%)</title><rect x="1078.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1081.12" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (16 samples, 0.31%; 0.00%)</title><rect x="842.1" y="501" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.12" y="511.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::invoke&lt;seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="607.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1122.3" y="341" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.28" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.08%)</title><rect x="582.1" y="421" width="0.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="585.11" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (3 samples, 0.06%; -0.06%)</title><rect x="534.1" y="357" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="537.09" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="681.5" y="565" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="684.54" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.06%; 0.00%)</title><rect x="1146.3" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1149.29" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (55 samples, 1.06%; -0.06%)</title><rect x="181.2" y="373" width="12.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="184.22" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (14 samples, 0.27%; -0.02%)</title><rect x="322.3" y="389" width="3.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="325.33" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1105.3" y="501" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1108.29" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="896.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="899.47" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (7 samples, 0.13%; -0.13%)</title><rect x="521.0" y="293" width="1.5" height="15.0" fill="rgb(87,87,255)" rx="2" ry="2" />
<text  x="523.96" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="271.8" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="274.82" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (8 samples, 0.15%; -0.02%)</title><rect x="290.2" y="293" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="293.17" y="303.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="287.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (53 samples, 1.02%; 0.00%)</title><rect x="415.2" y="277" width="12.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="418.19" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%; 0.00%)</title><rect x="322.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="325.78" y="383.5" ></text>
</g>
<g >
<title>dht::tri_compare (13 samples, 0.25%; +0.04%)</title><rect x="1068.4" y="325" width="2.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1071.38" y="335.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (8 samples, 0.15%; 0.00%)</title><rect x="250.3" y="197" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="253.30" y="207.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (1 samples, 0.02%; +0.02%)</title><rect x="1132.7" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1135.70" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (16 samples, 0.31%; -0.06%)</title><rect x="541.1" y="309" width="3.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="544.11" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="26.1" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="351.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (6 samples, 0.12%; +0.04%)</title><rect x="606.1" y="453" width="1.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="609.12" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="197" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.13%; -0.04%)</title><rect x="1043.7" y="405" width="1.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1046.69" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; -0.02%)</title><rect x="837.6" y="501" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="840.59" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="297.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.87" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (2 samples, 0.04%; -0.02%)</title><rect x="42.6" y="437" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="45.61" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1140.9" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1143.85" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1074.9" y="373" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1077.94" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (37 samples, 0.71%; -0.04%)</title><rect x="433.8" y="357" width="8.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="436.76" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="903.7" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="906.72" y="463.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="399.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="39.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.22" y="415.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (15 samples, 0.29%; 0.00%)</title><rect x="1145.6" y="565" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.61" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="58.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.24" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (5 samples, 0.10%; +0.04%)</title><rect x="654.4" y="549" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="657.36" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="383.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1013.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.11" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="863.4" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="866.40" y="607.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="106.3" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="109.26" y="271.5" ></text>
</g>
<g >
<title>make_set_value (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="577.4" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="580.35" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (6 samples, 0.12%; 0.00%)</title><rect x="85.4" y="517" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="941.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.09" y="511.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="275.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="278.67" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.4" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.41" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.51" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (6 samples, 0.12%; -0.02%)</title><rect x="73.0" y="453" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="75.96" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;database&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;clustering_key_prefix, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="275.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="278.22" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (22 samples, 0.42%; +0.02%)</title><rect x="152.7" y="533" width="5.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="155.69" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="1105.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.07" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="668.9" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="671.85" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::(anonymous namespace)::explode_conjunction (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.42" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt;, true, true&gt;::operator= (1 samples, 0.02%; -0.02%)</title><rect x="65.7" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="68.72" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (2 samples, 0.04%; 0.00%)</title><rect x="1024.7" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.66" y="303.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%; -0.02%)</title><rect x="427.4" y="309" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="430.42" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="700.8" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="703.79" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1034.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1037.86" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="658.4" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="661.43" y="575.5" ></text>
</g>
<g >
<title>abstract_type::bound_value_needs_to_be_reserialized (1 samples, 0.02%; +0.02%)</title><rect x="892.8" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="895.85" y="431.5" ></text>
</g>
<g >
<title>data_value::~data_value (1 samples, 0.02%; 0.00%)</title><rect x="74.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.32" y="399.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%; +0.02%)</title><rect x="262.1" y="245" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="265.08" y="255.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.33%; +0.06%)</title><rect x="519.6" y="309" width="3.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="522.60" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="293" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="303.5" ></text>
</g>
<g >
<title>__tls_init (3 samples, 0.06%; +0.04%)</title><rect x="566.0" y="389" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="569.03" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; +0.02%)</title><rect x="780.3" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="783.28" y="495.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (7 samples, 0.13%; 0.00%)</title><rect x="1120.0" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.02" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.02%)</title><rect x="1152.6" y="517" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1155.63" y="527.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="695.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="698.35" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (11 samples, 0.21%; +0.02%)</title><rect x="824.9" y="485" width="2.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="827.90" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="289.0" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="292.03" y="303.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="495.5" ></text>
</g>
<g >
<title>seastar::open_directory (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (16 samples, 0.31%; -0.02%)</title><rect x="739.7" y="517" width="3.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="742.74" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.08%; +0.06%)</title><rect x="961.9" y="453" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="964.93" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="950.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="953.38" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (7 samples, 0.13%; 0.00%)</title><rect x="741.3" y="421" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.33" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="857.3" y="549" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="860.29" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="304.9" y="405" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="307.89" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="49.6" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="52.64" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="304.2" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="307.21" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="445.8" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="448.76" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="326.6" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="329.63" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (5 samples, 0.10%; -0.02%)</title><rect x="1159.2" y="565" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1162.20" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="726.8" y="597" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="729.83" y="607.5" ></text>
</g>
<g >
<title>with_linearized&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="18.2" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="21.15" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="155.6" y="469" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="158.63" y="479.5" ></text>
</g>
<g >
<title>database::find_schema (5 samples, 0.10%; -0.04%)</title><rect x="768.1" y="485" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="771.05" y="495.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; +0.02%)</title><rect x="410.9" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="413.88" y="303.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (7 samples, 0.13%; 0.00%)</title><rect x="395.0" y="261" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="398.03" y="271.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="751.5" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="754.52" y="479.5" ></text>
</g>
<g >
<title>seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt;::write (1 samples, 0.02%; +0.02%)</title><rect x="1125.7" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1128.68" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="89.5" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="92.50" y="623.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.10%; 0.00%)</title><rect x="106.5" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="575.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (17 samples, 0.33%; -0.04%)</title><rect x="912.3" y="469" width="3.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="915.33" y="479.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (34 samples, 0.65%; 0.00%)</title><rect x="865.4" y="565" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="575.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (1 samples, 0.02%; +0.02%)</title><rect x="1135.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1138.42" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="949.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="952.92" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="154.7" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="157.73" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1152.0" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.95" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="859.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.33" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="591.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="21.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.32" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.02%)</title><rect x="364.2" y="293" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="367.23" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (14 samples, 0.27%; +0.08%)</title><rect x="730.7" y="533" width="3.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="733.68" y="543.5" ></text>
</g>
<g >
<title>query::querier_base::close (122 samples, 2.34%; 0.00%)</title><rect x="585.5" y="533" width="27.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="588.50" y="543.5" >q..</text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="812.2" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="815.22" y="255.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="44.0" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="46.97" y="207.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="695.8" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="698.80" y="367.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (2 samples, 0.04%; +0.04%)</title><rect x="952.2" y="485" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="955.19" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="978.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="981.69" y="415.5" ></text>
</g>
<g >
<title>cql3::update_parameters::update_parameters (1 samples, 0.02%; +0.02%)</title><rect x="872.2" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="875.24" y="495.5" ></text>
</g>
<g >
<title>dl_main (1 samples, 0.02%; 0.00%)</title><rect x="83.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.16" y="703.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.10%)</title><rect x="1026.7" y="341" width="0.9" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1029.70" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="903.9" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="906.95" y="463.5" ></text>
</g>
<g >
<title>service::client_state::has_access (6 samples, 0.12%; 0.00%)</title><rect x="79.1" y="533" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (9 samples, 0.17%; 0.00%)</title><rect x="73.0" y="485" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.96" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation_base_with_promise&lt;seastar::internal::promise_base_with_type&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;, void&gt;::waiting_task (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="719.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%; -0.02%)</title><rect x="602.5" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="605.49" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="24.3" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="27.27" y="303.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="601.6" y="405" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="604.59" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (21 samples, 0.40%; 0.00%)</title><rect x="757.9" y="437" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="906.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="909.89" y="447.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (47 samples, 0.90%; +0.06%)</title><rect x="841.2" y="533" width="10.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="844.21" y="543.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (7 samples, 0.13%; -0.04%)</title><rect x="1113.0" y="501" width="1.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1115.99" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1043.5" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1046.46" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.47" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="86.8" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (593 samples, 11.38%; 0.00%)</title><rect x="728.0" y="597" width="134.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.97" y="607.5" >seastar::interna..</text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="672.9" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.93" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;database&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1031.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1034.91" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (3 samples, 0.06%; +0.04%)</title><rect x="576.4" y="501" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="579.45" y="511.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="463.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="455.3" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="458.27" y="479.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (15 samples, 0.29%; 0.00%)</title><rect x="759.2" y="421" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.22" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10 samples, 0.19%; +0.02%)</title><rect x="1150.1" y="549" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1153.14" y="559.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="865.7" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="868.67" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (344 samples, 6.60%; +0.04%)</title><rect x="352.4" y="341" width="78.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="355.45" y="351.5" >flat_muta..</text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="689.2" y="565" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="692.24" y="575.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (7 samples, 0.13%; -0.23%)</title><rect x="401.8" y="261" width="1.6" height="15.0" fill="rgb(0,0,255)" rx="2" ry="2" />
<text  x="404.82" y="271.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="811.3" y="197" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.31" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; -0.02%)</title><rect x="1086.3" y="469" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1089.27" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.52" y="223.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (2 samples, 0.04%; +0.02%)</title><rect x="718.2" y="501" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="721.23" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.06%)</title><rect x="1100.1" y="421" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1103.08" y="431.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="39.7" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.67" y="463.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="383.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (4 samples, 0.08%; -0.04%)</title><rect x="176.2" y="389" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="179.24" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="42.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.39" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="501.7" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.70" y="415.5" ></text>
</g>
<g >
<title>abstract_type::validate&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="895.1" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="898.11" y="415.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.22" y="463.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (233 samples, 4.47%; +0.02%)</title><rect x="986.6" y="421" width="52.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="989.61" y="431.5" >servi..</text>
</g>
<g >
<title>utils::tuple_hash::operator (17 samples, 0.33%; -0.06%)</title><rect x="808.6" y="261" width="3.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="811.60" y="271.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (2 samples, 0.04%; 0.00%)</title><rect x="648.9" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.92" y="591.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (9 samples, 0.17%; +0.10%)</title><rect x="423.1" y="229" width="2.1" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="426.11" y="239.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="759.0" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="761.99" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="871.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.56" y="415.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="136.4" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="139.38" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="620.2" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="623.16" y="479.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.70" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (5 samples, 0.10%; -0.04%)</title><rect x="156.1" y="501" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="159.08" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.10%; +0.04%)</title><rect x="588.7" y="405" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="591.68" y="415.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="367.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (49 samples, 0.94%; 0.00%)</title><rect x="1064.1" y="389" width="11.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1067.07" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.02%; 0.00%)</title><rect x="73.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.87" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="104.4" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="107.45" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; +0.02%)</title><rect x="868.4" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="871.39" y="479.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="685.8" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="688.84" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; +0.02%)</title><rect x="83.8" y="549" width="3.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="86.83" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.70" y="287.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%; +0.02%)</title><rect x="451.2" y="453" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="454.20" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="55.1" y="37" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="58.07" y="47.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1053.4" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1056.43" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="73.6" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="76.64" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="335.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; 0.00%)</title><rect x="992.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.73" y="399.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (5 samples, 0.10%; +0.08%)</title><rect x="129.1" y="485" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="132.13" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="710.3" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="713.30" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="858.0" y="565" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="860.97" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; -0.02%)</title><rect x="579.6" y="437" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="582.62" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="326.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.95" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1124.5" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1127.55" y="319.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (2 samples, 0.04%; +0.04%)</title><rect x="374.6" y="277" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="377.64" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; -0.02%)</title><rect x="864.3" y="421" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="867.31" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="621.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="624.06" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="818.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.79" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (1 samples, 0.02%; 0.00%)</title><rect x="641.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.22" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (1 samples, 0.02%; +0.02%)</title><rect x="71.4" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="74.38" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; +0.02%)</title><rect x="472.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="475.26" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::statements::raw::update_statement*, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.49" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (4 samples, 0.08%; -0.02%)</title><rect x="693.3" y="565" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="696.31" y="575.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (17 samples, 0.33%; 0.00%)</title><rect x="127.3" y="501" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="130.32" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="812.0" y="165" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="814.99" y="175.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (2 samples, 0.04%; 0.00%)</title><rect x="411.6" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="414.56" y="303.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (3 samples, 0.06%; +0.06%)</title><rect x="1133.4" y="421" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1136.38" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (6 samples, 0.12%; 0.00%)</title><rect x="351.1" y="325" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="354.09" y="335.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; -0.04%)</title><rect x="889.9" y="501" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="892.90" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="838.5" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="841.49" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="789.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="792.80" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.06%)</title><rect x="445.3" y="325" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="448.31" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; 0.00%)</title><rect x="719.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.59" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (3 samples, 0.06%; +0.02%)</title><rect x="78.4" y="549" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="81.40" y="559.5" ></text>
</g>
<g >
<title>flush_memory_accounter::~flush_memory_accounter (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; -0.02%)</title><rect x="52.4" y="229" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="55.35" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (2 samples, 0.04%; +0.02%)</title><rect x="535.0" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="538.00" y="367.5" ></text>
</g>
<g >
<title>query_state::query_state (13 samples, 0.25%; +0.02%)</title><rect x="625.1" y="533" width="3.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="628.14" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="864.5" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.54" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (39 samples, 0.75%; -0.04%)</title><rect x="687.0" y="597" width="8.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="689.97" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; +0.02%)</title><rect x="1163.0" y="565" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1166.05" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="335.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="136.6" y="549" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="139.61" y="559.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="274.3" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="277.31" y="287.5" ></text>
</g>
<g >
<title>database::setup_metrics (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; -0.02%)</title><rect x="60.3" y="421" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="63.28" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="351.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="672.9" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.93" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="84.3" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="602.0" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="605.04" y="415.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="687.4" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="690.42" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="122.1" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="125.11" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (262 samples, 5.03%; -0.02%)</title><rect x="22.0" y="597" width="59.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="25.00" y="607.5" >cql3::..</text>
</g>
<g >
<title>db::system_keyspace::v3::built_views (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; +0.06%)</title><rect x="535.9" y="341" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="538.90" y="351.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.02%)</title><rect x="1030.1" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1033.10" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="260.5" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="263.50" y="223.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="261.4" y="261" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="264.40" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%; -0.02%)</title><rect x="686.1" y="549" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="689.07" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="794.6" y="341" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="797.55" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (26 samples, 0.50%; -0.02%)</title><rect x="240.1" y="181" width="5.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="243.11" y="191.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (543 samples, 10.42%; 0.00%)</title><rect x="735.0" y="565" width="123.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.99" y="575.5" >single_node_cql..</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (9 samples, 0.17%; +0.04%)</title><rect x="408.2" y="277" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="411.17" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="684.5" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="687.48" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="661.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.60" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="55.5" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.52" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="188.5" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="191.47" y="319.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="367.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (2 samples, 0.04%; +0.04%)</title><rect x="326.2" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="329.18" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::construct&lt;seastar::shared_ptr&lt;cql3::relation&gt;, seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="61.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="64.87" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (27 samples, 0.52%; 0.00%)</title><rect x="298.8" y="405" width="6.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="301.77" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (1 samples, 0.02%; 0.00%)</title><rect x="759.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.67" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="991.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="994.14" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1120.0" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.02" y="335.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; 0.00%)</title><rect x="352.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="355.00" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="932.0" y="453" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="935.03" y="463.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="527.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="367.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (21 samples, 0.40%; 0.00%)</title><rect x="917.3" y="469" width="4.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="920.31" y="479.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="1142.7" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1145.66" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="51.0" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="53.99" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_recognizer (1 samples, 0.02%; +0.02%)</title><rect x="52.8" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="55.81" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="54.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.39" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (10 samples, 0.19%; 0.00%)</title><rect x="356.5" y="277" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.53" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="797.5" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="800.50" y="335.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.02%)</title><rect x="1146.5" y="501" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1149.51" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (6 samples, 0.12%; 0.00%)</title><rect x="79.1" y="549" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; +0.02%)</title><rect x="864.8" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.76" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (1 samples, 0.02%; +0.02%)</title><rect x="1101.0" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1103.99" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (4 samples, 0.08%; +0.02%)</title><rect x="1016.1" y="245" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1019.06" y="255.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="567.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="570.39" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="99.2" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="102.24" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="367.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="255.5" ></text>
</g>
<g >
<title>operator new (17 samples, 0.33%; 0.00%)</title><rect x="1007.9" y="341" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1010.90" y="351.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (195 samples, 3.74%; 0.00%)</title><rect x="23.8" y="517" width="44.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="527.5" >seas..</text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple&lt;cql3::operation::raw_update*&amp;, std::default_delete&lt;cql3::operation::set_value&gt;, true&gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.7" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_3b4dc39eb84df2f30b1642770599338655846644] (1 samples, 0.02%; +0.02%)</title><rect x="823.5" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="826.54" y="367.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.10%; -0.02%)</title><rect x="46.2" y="373" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="49.24" y="383.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; 0.00%)</title><rect x="117.1" y="549" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="120.13" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="25.9" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="28.85" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="623.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; +0.02%)</title><rect x="870.2" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="873.20" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1032.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.82" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_deallocate (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="610.9" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="613.87" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.4" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="79.36" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.10%; +0.02%)</title><rect x="758.1" y="421" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="761.09" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="341.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="344.80" y="399.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="623.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="57.8" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation::data&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="1134.3" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1137.28" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; +0.06%)</title><rect x="602.7" y="437" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="605.72" y="447.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="979.8" y="421" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="982.82" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (3 samples, 0.06%; -0.12%)</title><rect x="984.3" y="373" width="0.7" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="987.35" y="383.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="661.8" y="549" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="664.83" y="559.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (47 samples, 0.90%; -0.04%)</title><rect x="712.3" y="581" width="10.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="715.34" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__variant_construct_single&lt;std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;&amp;, cql3::expr::binary_operator const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (3 samples, 0.06%; -0.02%)</title><rect x="598.9" y="373" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="601.87" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="268.0" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="270.97" y="255.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; -0.02%)</title><rect x="822.6" y="405" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="825.64" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (27 samples, 0.52%; +0.06%)</title><rect x="979.1" y="437" width="6.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="982.14" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; -0.02%)</title><rect x="101.7" y="549" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="104.73" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1137.2" y="597" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1140.23" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; -0.02%)</title><rect x="769.6" y="453" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="772.64" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="112.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="115.83" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="675.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="678.42" y="591.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (3 samples, 0.06%; 0.00%)</title><rect x="81.6" y="597" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.57" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="642.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="645.81" y="543.5" ></text>
</g>
<g >
<title>libat_load_16_i1 (1 samples, 0.02%; +0.02%)</title><rect x="1178.9" y="725" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1181.90" y="735.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (3 samples, 0.06%; 0.00%)</title><rect x="41.3" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (2 samples, 0.04%; -0.06%)</title><rect x="932.0" y="485" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="935.03" y="495.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.33" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%; +0.06%)</title><rect x="532.7" y="373" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="535.73" y="383.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%; +0.04%)</title><rect x="174.0" y="405" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="176.98" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (17 samples, 0.33%; +0.04%)</title><rect x="769.9" y="453" width="3.8" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="772.87" y="463.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="427.9" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.87" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="98.1" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="101.10" y="543.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (4 samples, 0.08%; +0.04%)</title><rect x="907.1" y="469" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="910.12" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (5 samples, 0.10%; +0.02%)</title><rect x="576.0" y="517" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="578.99" y="527.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="802.7" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="805.71" y="303.5" ></text>
</g>
<g >
<title>table::compact_sstables (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="591.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.12%; +0.10%)</title><rect x="558.3" y="437" width="1.4" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="561.33" y="447.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;void&gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1025.1" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1028.12" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="453.5" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="456.46" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="441.9" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="444.91" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,363 samples, 45.36%; +0.08%)</title><rect x="110.8" y="581" width="535.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="113.79" y="591.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (1 samples, 0.02%; +0.02%)</title><rect x="79.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="82.08" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (1 samples, 0.02%; -0.02%)</title><rect x="210.2" y="309" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="213.21" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::make_conjunction (2 samples, 0.04%; 0.00%)</title><rect x="73.4" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.42" y="415.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="650.1" y="581" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="653.05" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1049.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1052.58" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1006.5" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1009.55" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::leave (2 samples, 0.04%; +0.04%)</title><rect x="634.7" y="533" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="637.65" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;1ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="53" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (9 samples, 0.17%; -0.02%)</title><rect x="853.7" y="469" width="2.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="856.67" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="779.6" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.60" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (2 samples, 0.04%; 0.00%)</title><rect x="866.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.35" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mQUOTED_NAME (1 samples, 0.02%; -0.02%)</title><rect x="36.5" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="39.50" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="23.8" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="26.82" y="303.5" ></text>
</g>
<g >
<title>executor&lt;test_read (583 samples, 11.19%; -0.02%)</title><rect x="729.3" y="581" width="132.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="732.32" y="591.5" >executor&lt;test_read</text>
</g>
<g >
<title>managed_bytes::operator= (1 samples, 0.02%; +0.02%)</title><rect x="341.6" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="344.58" y="383.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (561 samples, 10.77%; 0.00%)</title><rect x="330.7" y="485" width="127.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="333.71" y="495.5" >query::consume_..</text>
</g>
<g >
<title>cql3::expr::prepare_term (8 samples, 0.15%; 0.00%)</title><rect x="69.1" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.11" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="191.5" ></text>
</g>
<g >
<title>table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="527.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="45.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="383.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (2 samples, 0.04%; 0.00%)</title><rect x="742.9" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.91" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.10%)</title><rect x="677.2" y="581" width="0.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="680.23" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (1 samples, 0.02%; -0.02%)</title><rect x="1101.2" y="501" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1104.22" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::move_it (2 samples, 0.04%; +0.02%)</title><rect x="973.9" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="976.93" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (12 samples, 0.23%; -0.02%)</title><rect x="608.2" y="453" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="611.15" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="48.7" y="213" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="51.73" y="223.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="1147.4" y="533" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.42" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="415.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (1 samples, 0.02%; 0.00%)</title><rect x="739.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.29" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.08%)</title><rect x="481.3" y="325" width="1.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="484.32" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (4 samples, 0.08%; -0.08%)</title><rect x="214.3" y="325" width="0.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="217.29" y="335.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%; +0.02%)</title><rect x="273.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="275.95" y="319.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%; +0.02%)</title><rect x="464.6" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="467.56" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%; 0.00%)</title><rect x="26.1" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.08" y="319.5" ></text>
</g>
<g >
<title>flush_reader::~flush_reader (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (2 samples, 0.04%; -0.04%)</title><rect x="848.2" y="517" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="851.23" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="255.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,390 samples, 45.87%; +0.10%)</title><rect x="108.1" y="597" width="541.3" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="111.07" y="607.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (24 samples, 0.46%; 0.00%)</title><rect x="489.0" y="405" width="5.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="492.02" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%; -0.02%)</title><rect x="971.9" y="405" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="974.89" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="229" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="239.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="988.4" y="357" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="991.43" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1123.6" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.64" y="287.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (2 samples, 0.04%; -0.08%)</title><rect x="742.9" y="501" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="745.91" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="335.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (122 samples, 2.34%; +0.08%)</title><rect x="525.9" y="421" width="27.7" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="528.94" y="431.5" >m..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1122.5" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1125.51" y="319.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (44 samples, 0.84%; +0.04%)</title><rect x="513.7" y="405" width="10.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="516.71" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="292.9" y="341" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="295.88" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (2 samples, 0.04%; +0.04%)</title><rect x="709.8" y="565" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="712.85" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (5 samples, 0.10%; 0.00%)</title><rect x="270.5" y="261" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.46" y="271.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="667.9" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="670.95" y="527.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="543.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (3 samples, 0.06%; +0.02%)</title><rect x="500.1" y="421" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="503.12" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::expr::expression, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="62.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="65.77" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (6 samples, 0.12%; -0.02%)</title><rect x="669.8" y="533" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="672.76" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; -0.04%)</title><rect x="210.2" y="293" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="213.21" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%; 0.00%)</title><rect x="1033.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.04" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%; +0.04%)</title><rect x="940.2" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="943.18" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="102.0" y="565" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="104.95" y="575.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_28has_slice_or_needs_filteringERKNS2_10expressionEEUlRKNS2_15binary_operatorEE_EEPS8_S6_T_EUlS9_E_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_8constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_11conjunctionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_12column_valueEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_5tokenEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13function_callEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4castEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_15field_selectionEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_4nullEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_13bind_variableEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_16untyped_constantEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_17tuple_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_22collection_constructorEE_ZNS3_ISA_EESB_S6_SC_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSI_S7_SM_SQ_SU_SY_S12_S16_S1A_S1E_S1I_S1M_SE_S1Q_S1U_S1Y_EEEENSt13invoke_resultISC_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSC_DpOS28_ (2 samples, 0.04%; +0.04%)</title><rect x="938.1" y="485" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="941.15" y="495.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="836.9" y="517" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="839.91" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="978.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="981.23" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="773.7" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="776.72" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="686.5" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="689.52" y="559.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (3 samples, 0.06%; +0.02%)</title><rect x="1122.7" y="325" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1125.73" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="682.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.99" y="575.5" ></text>
</g>
<g >
<title>operator delete (11 samples, 0.21%; +0.13%)</title><rect x="608.4" y="437" width="2.5" height="15.0" fill="rgb(255,87,87)" rx="2" ry="2" />
<text  x="611.38" y="447.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="900.5" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="903.55" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.28" y="383.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (11 samples, 0.21%; 0.00%)</title><rect x="776.2" y="485" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.21" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%; 0.00%)</title><rect x="876.8" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.77" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="303.5" ></text>
</g>
<g >
<title>row::row (2 samples, 0.04%; 0.00%)</title><rect x="296.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.51" y="303.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; +0.02%)</title><rect x="277.5" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="280.48" y="351.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (4 samples, 0.08%; -0.02%)</title><rect x="363.1" y="277" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="366.09" y="287.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (38 samples, 0.73%; 0.00%)</title><rect x="68.7" y="549" width="8.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.66" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="668.6" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="671.63" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="950.1" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="953.15" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="789.1" y="373" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="792.12" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (233 samples, 4.47%; -0.02%)</title><rect x="216.8" y="293" width="52.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="219.78" y="303.5" >parti..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (18 samples, 0.35%; +0.10%)</title><rect x="1046.0" y="405" width="4.0" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="1048.95" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr, false&gt;::uninitialized_set&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%; +0.02%)</title><rect x="752.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="755.65" y="415.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="399.5" ></text>
</g>
<g >
<title>utils::utf8::validate_with_error_position (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="335.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="659.3" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="662.34" y="591.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_token_present (1 samples, 0.02%; +0.02%)</title><rect x="28.1" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="31.12" y="383.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="677" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="687.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::wait_for_one (1 samples, 0.02%; +0.02%)</title><rect x="1135.6" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1138.64" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="78.6" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.63" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="678.1" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="681.14" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (35 samples, 0.67%; -0.08%)</title><rect x="1149.0" y="565" width="7.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1152.01" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="867.0" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.03" y="399.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="977.3" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.33" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (12 samples, 0.23%; -0.02%)</title><rect x="853.0" y="485" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="855.99" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="220.9" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="223.86" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::upgrade_schema (1 samples, 0.02%; +0.02%)</title><rect x="473.2" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="476.17" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.21%; -0.08%)</title><rect x="249.6" y="213" width="2.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="252.62" y="223.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1134.1" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1137.06" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="458.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="460.99" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; -0.08%)</title><rect x="771.0" y="421" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="774.00" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; +0.02%)</title><rect x="80.9" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="83.89" y="463.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.06" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%; 0.00%)</title><rect x="1132.5" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.47" y="255.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (47 samples, 0.90%; +0.02%)</title><rect x="503.1" y="405" width="10.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="506.06" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; -0.04%)</title><rect x="259.1" y="197" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="262.14" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="480.0" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="482.96" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="383.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="915.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="918.27" y="447.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1119.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.34" y="575.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (9 samples, 0.17%; 0.00%)</title><rect x="776.4" y="453" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.43" y="463.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="808.6" y="245" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="811.60" y="255.5" ></text>
</g>
<g >
<title>create_partitions (280 samples, 5.37%; 0.00%)</title><rect x="19.5" y="629" width="63.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.51" y="639.5" >create..</text>
</g>
<g >
<title>service::client_state::has_access (190 samples, 3.65%; 0.00%)</title><rect x="781.4" y="469" width="43.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="784.42" y="479.5" >serv..</text>
</g>
<g >
<title>logalloc::region_impl::object_descriptor::encode (1 samples, 0.02%; +0.02%)</title><rect x="17.2" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="20.25" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="31.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.06" y="335.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="760.1" y="357" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="763.13" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="690.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.14" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="206.1" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="209.14" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="637.6" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="640.60" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="930.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="933.22" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_all_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%; 0.00%)</title><rect x="797.5" y="341" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.50" y="351.5" ></text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (6 samples, 0.12%; 0.00%)</title><rect x="860.0" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.01" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="497.2" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="500.17" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="726.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="729.61" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="383.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10 samples, 0.19%; +0.02%)</title><rect x="1080.8" y="453" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1083.83" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.06%)</title><rect x="156.5" y="485" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="159.54" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1115.3" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1118.26" y="527.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; 0.00%)</title><rect x="834.6" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.64" y="383.5" ></text>
</g>
<g >
<title>database::database (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="463.5" ></text>
</g>
<g >
<title>CryptoPP::Weak1::MD5::Transform (1 samples, 0.02%; +0.02%)</title><rect x="10.0" y="725" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (14 samples, 0.27%; -0.04%)</title><rect x="896.7" y="405" width="3.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="899.70" y="415.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (2 samples, 0.04%; 0.00%)</title><rect x="45.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.4" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.41" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (3 samples, 0.06%; 0.00%)</title><rect x="693.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="696.31" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; +0.02%)</title><rect x="40.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="43.80" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="482.9" y="341" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="485.91" y="351.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="255.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="195.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="198.49" y="351.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%; 0.00%)</title><rect x="867.0" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.03" y="447.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; -0.02%)</title><rect x="180.5" y="373" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="183.55" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (195 samples, 3.74%; 0.00%)</title><rect x="23.8" y="501" width="44.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="511.5" >cql3..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="813.6" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="816.58" y="335.5" ></text>
</g>
<g >
<title>seastar::logger::log&lt;dht::token const&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;&amp;, db::read_repair_decision&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1053.9" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1056.88" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (7 samples, 0.13%; +0.04%)</title><rect x="1078.3" y="421" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1081.34" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; +0.02%)</title><rect x="635.6" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="638.56" y="527.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (5 samples, 0.10%; -0.02%)</title><rect x="922.3" y="485" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="925.29" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (194 samples, 3.72%; -0.06%)</title><rect x="780.5" y="485" width="43.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="783.51" y="495.5" >std:..</text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="549" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="559.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1107.1" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1110.11" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="834.6" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.64" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%; 0.00%)</title><rect x="84.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="399.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="191.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (14 samples, 0.27%; +0.04%)</title><rect x="792.1" y="389" width="3.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="795.06" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; +0.02%)</title><rect x="839.6" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="842.62" y="479.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="674.7" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="677.74" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.94" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,046 samples, 20.08%; +0.21%)</title><rect x="880.8" y="533" width="237.0" height="15.0" fill="rgb(255,17,17)" rx="2" ry="2" />
<text  x="883.84" y="543.5" >cql3::statements::select_statem..</text>
</g>
<g >
<title>seastar::schedule_urgent (1 samples, 0.02%; +0.02%)</title><rect x="659.6" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="662.57" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9 samples, 0.17%; -0.13%)</title><rect x="1072.9" y="357" width="2.0" height="15.0" fill="rgb(87,87,255)" rx="2" ry="2" />
<text  x="1075.91" y="367.5" ></text>
</g>
<g >
<title>partition_entry::read (8 samples, 0.15%; +0.06%)</title><rect x="553.8" y="405" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="556.80" y="415.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.02%)</title><rect x="1135.9" y="597" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1138.87" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="899.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="902.87" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.06%)</title><rect x="573.0" y="437" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="576.05" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="137.7" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="140.74" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="82.7" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="85.70" y="527.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="101" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="111.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (5 samples, 0.10%; 0.00%)</title><rect x="71.8" y="485" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.83" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (7 samples, 0.13%; +0.04%)</title><rect x="1076.5" y="373" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1079.53" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::add_column_to_schema_mutation (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.06%)</title><rect x="813.8" y="309" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="816.80" y="319.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (2 samples, 0.04%; +0.04%)</title><rect x="275.9" y="325" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="278.90" y="335.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; 0.00%)</title><rect x="1024.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.89" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%; 0.00%)</title><rect x="1129.3" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.30" y="319.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (3 samples, 0.06%; 0.00%)</title><rect x="1079.9" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1082.93" y="447.5" ></text>
</g>
<g >
<title>cdc::generation_service::do_handle_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="479.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="447.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (4 samples, 0.08%; 0.00%)</title><rect x="1131.6" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="319.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (7 samples, 0.13%; -0.02%)</title><rect x="332.5" y="469" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="335.52" y="479.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="85.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="88.19" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="287.5" ></text>
</g>
<g >
<title>crc32_nbo::process_fragmented&lt;ser::buffer_view&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.45" y="367.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%; -0.06%)</title><rect x="741.8" y="389" width="0.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="744.78" y="399.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (26 samples, 0.50%; +0.02%)</title><rect x="319.6" y="405" width="5.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="322.61" y="415.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (3 samples, 0.06%; +0.02%)</title><rect x="484.9" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="487.94" y="383.5" ></text>
</g>
<g >
<title>__dynamic_cast (2 samples, 0.04%; -0.02%)</title><rect x="10.5" y="693" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="13.45" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.10%; -0.02%)</title><rect x="831.2" y="389" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="834.24" y="399.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::mutation_partition_serializer (1 samples, 0.02%; +0.02%)</title><rect x="1132.2" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1135.25" y="287.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (53 samples, 1.02%; +0.04%)</title><rect x="27.2" y="389" width="12.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="30.21" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="861.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.59" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="48.5" y="245" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="51.50" y="255.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (127 samples, 2.44%; +0.02%)</title><rect x="376.7" y="277" width="28.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="379.68" y="287.5" >wr..</text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (7 samples, 0.13%; -0.15%)</title><rect x="241.7" y="165" width="1.6" height="15.0" fill="rgb(70,70,255)" rx="2" ry="2" />
<text  x="244.70" y="175.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (490 samples, 9.40%; -0.02%)</title><rect x="462.5" y="485" width="111.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="465.52" y="495.5" >std::function..</text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%; 0.00%)</title><rect x="84.3" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="383.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; +0.02%)</title><rect x="246.0" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="249.00" y="191.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="556.5" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="559.51" y="415.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (450 samples, 8.64%; +0.06%)</title><rect x="343.6" y="373" width="101.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="346.62" y="383.5" >flat_mutatio..</text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; -0.02%)</title><rect x="645.3" y="485" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="648.30" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="81.6" y="549" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="84.57" y="559.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (2 samples, 0.04%; -0.12%)</title><rect x="277.0" y="341" width="0.5" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="280.03" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="712.1" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="715.11" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="639.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="631.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="634.26" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (19 samples, 0.36%; +0.10%)</title><rect x="489.5" y="389" width="4.3" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="492.47" y="399.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; 0.00%)</title><rect x="433.5" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="436.53" y="319.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="819.5" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.47" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.02%)</title><rect x="1149.5" y="549" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1152.46" y="559.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::set_errorRecovery (1 samples, 0.02%; +0.02%)</title><rect x="56.9" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="59.88" y="351.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_rec (1 samples, 0.02%; +0.02%)</title><rect x="42.8" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="45.84" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (2 samples, 0.04%; +0.04%)</title><rect x="940.6" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="943.64" y="511.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.10%; 0.00%)</title><rect x="106.5" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; 0.00%)</title><rect x="984.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="987.12" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="46.2" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="287.5" ></text>
</g>
<g >
<title>db::validate_for_read (1 samples, 0.02%; +0.02%)</title><rect x="1106.2" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1109.20" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_destroy (7 samples, 0.13%; +0.12%)</title><rect x="127.3" y="485" width="1.6" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="130.32" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; -0.02%)</title><rect x="667.3" y="517" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="670.27" y="527.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="607.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (1 samples, 0.02%; -0.02%)</title><rect x="192.8" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="195.78" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1100.3" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.31" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="275.4" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="278.44" y="335.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.02%)</title><rect x="590.5" y="421" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="593.49" y="431.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (9 samples, 0.17%; 0.00%)</title><rect x="20.0" y="613" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.97" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="958.1" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="961.08" y="479.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1141.5" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1144.53" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="135.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="138.25" y="559.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (2 samples, 0.04%; +0.04%)</title><rect x="840.8" y="533" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="843.76" y="543.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%; +0.02%)</title><rect x="716.4" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="719.41" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%; -0.06%)</title><rect x="840.3" y="517" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="843.30" y="527.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (1 samples, 0.02%; -0.04%)</title><rect x="852.8" y="485" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="855.76" y="495.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="623.5" ></text>
</g>
<g >
<title>sstables::metadata_collector::update_min_max_components (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="14.13" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::single_column_primary_key_restrictions (3 samples, 0.06%; 0.00%)</title><rect x="74.3" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.32" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (11 samples, 0.21%; 0.00%)</title><rect x="183.3" y="357" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="186.26" y="367.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (123 samples, 2.36%; -0.04%)</title><rect x="790.2" y="421" width="27.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="793.25" y="431.5" >s..</text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; 0.00%)</title><rect x="635.3" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.33" y="543.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (6 samples, 0.12%; -0.04%)</title><rect x="500.8" y="421" width="1.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="503.80" y="431.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="578.7" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="581.71" y="479.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; 0.00%)</title><rect x="665.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="668.68" y="575.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%; 0.00%)</title><rect x="623.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="626.33" y="495.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="159.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="543.5" ></text>
</g>
<g >
<title>auth::get_permissions (114 samples, 2.19%; -0.02%)</title><rect x="791.6" y="405" width="25.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="794.61" y="415.5" >a..</text>
</g>
<g >
<title>operator new (5 samples, 0.10%; 0.00%)</title><rect x="1055.5" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.47" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::drop_role_statement*, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="67.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1156.9" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1159.93" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="799.5" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="802.54" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="864.3" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::prepare_heap (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="623.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="640.8" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="643.77" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1018.3" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.32" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (6 samples, 0.12%; -0.04%)</title><rect x="934.1" y="485" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="937.07" y="495.5" ></text>
</g>
<g >
<title>make_combined_reader (84 samples, 1.61%; -0.06%)</title><rect x="475.7" y="421" width="19.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="478.66" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="585.1" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="588.05" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::statements::update_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="76.6" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="79.59" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (5 samples, 0.10%; -0.04%)</title><rect x="36.7" y="357" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="39.73" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (11 samples, 0.21%; 0.00%)</title><rect x="740.4" y="469" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="743.42" y="479.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; +0.02%)</title><rect x="47.8" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="50.82" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; -0.04%)</title><rect x="740.9" y="437" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="743.88" y="447.5" ></text>
</g>
<g >
<title>posix_memalign (6 samples, 0.12%; 0.00%)</title><rect x="250.5" y="181" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="253.53" y="191.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (282 samples, 5.41%; 0.00%)</title><rect x="975.7" y="453" width="63.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="978.74" y="463.5" >service..</text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%; -0.02%)</title><rect x="405.9" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="408.90" y="303.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="84.7" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.74" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (52 samples, 1.00%; +0.10%)</title><rect x="234.4" y="197" width="11.8" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="237.45" y="207.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.10%; +0.04%)</title><rect x="946.3" y="453" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="949.30" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="271.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (31 samples, 0.60%; -0.02%)</title><rect x="1171.9" y="725" width="7.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1174.88" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; +0.02%)</title><rect x="327.3" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="330.31" y="463.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::inet_address (1 samples, 0.02%; +0.02%)</title><rect x="974.6" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="977.61" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="1036.2" y="309" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1039.21" y="319.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="1049.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1052.80" y="399.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (6 samples, 0.12%; +0.10%)</title><rect x="375.1" y="277" width="1.4" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="378.10" y="287.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (13 samples, 0.25%; +0.06%)</title><rect x="430.8" y="341" width="3.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="433.81" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (4 samples, 0.08%; +0.06%)</title><rect x="1164.6" y="549" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1167.63" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (3 samples, 0.06%; 0.00%)</title><rect x="661.8" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.83" y="575.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="825.1" y="469" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="828.13" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (3 samples, 0.06%; -0.08%)</title><rect x="263.7" y="261" width="0.6" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="266.67" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (2 samples, 0.04%; 0.00%)</title><rect x="485.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="488.62" y="383.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="501" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1167.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.80" y="607.5" ></text>
</g>
<g >
<title>query::result::result (3 samples, 0.06%; -0.04%)</title><rect x="622.9" y="517" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="625.88" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; +0.02%)</title><rect x="39.4" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="42.44" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%; -0.02%)</title><rect x="658.0" y="581" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="660.98" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mU (1 samples, 0.02%; +0.02%)</title><rect x="36.3" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="39.27" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="658.2" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="661.21" y="575.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1059.1" y="373" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1062.09" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="842.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.79" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (5 samples, 0.10%; +0.06%)</title><rect x="494.7" y="421" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="497.68" y="431.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; -0.02%)</title><rect x="858.9" y="533" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="861.88" y="543.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.10%; 0.00%)</title><rect x="46.2" y="389" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="399.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.4" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.41" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="130.9" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="133.94" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE14then_impl_nrvoIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="333.9" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="336.88" y="463.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (3 samples, 0.06%; +0.04%)</title><rect x="487.9" y="389" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="490.89" y="399.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="846.2" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.19" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (2 samples, 0.04%; -0.02%)</title><rect x="795.7" y="389" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="798.69" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="54.4" y="325" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="57.39" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (22 samples, 0.42%; 0.00%)</title><rect x="757.6" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.64" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="48.5" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.50" y="287.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (2 samples, 0.04%; -0.02%)</title><rect x="840.3" y="533" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="843.30" y="543.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="717.1" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="720.09" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_Deque_base (1 samples, 0.02%; 0.00%)</title><rect x="23.4" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_erase_at_end (2 samples, 0.04%; 0.00%)</title><rect x="22.2" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="495.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (12 samples, 0.23%; -0.02%)</title><rect x="628.8" y="533" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="631.76" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (4 samples, 0.08%; 0.00%)</title><rect x="765.6" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="768.56" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (7 samples, 0.13%; -0.02%)</title><rect x="1145.8" y="549" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1148.83" y="559.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (3 samples, 0.06%; +0.04%)</title><rect x="285.9" y="261" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="288.86" y="271.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.02%)</title><rect x="522.5" y="293" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="525.54" y="303.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="628.8" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="631.76" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="52.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.35" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (214 samples, 4.11%; +0.12%)</title><rect x="887.2" y="517" width="48.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="890.19" y="527.5" >cql3..</text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (2 samples, 0.04%; -0.02%)</title><rect x="286.5" y="277" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="289.54" y="287.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="593.2" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.21" y="399.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="481.3" y="341" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="484.32" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="94.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="97.93" y="591.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="309.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="312.19" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (6 samples, 0.12%; +0.08%)</title><rect x="1102.3" y="485" width="1.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1105.35" y="495.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="1108.5" y="501" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.46" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="463.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.8" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1132.75" y="223.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="1026.7" y="357" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1029.70" y="367.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; 0.00%)</title><rect x="61.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.19" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1033.7" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1036.72" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (14 samples, 0.27%; +0.02%)</title><rect x="288.8" y="309" width="3.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="291.81" y="319.5" ></text>
</g>
<g >
<title>ser::column_view::c (1 samples, 0.02%; 0.00%)</title><rect x="107.2" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::select_on_container_copy_construction (1 samples, 0.02%; +0.02%)</title><rect x="26.5" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="29.53" y="287.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.36" y="463.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="947.7" y="501" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="950.66" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="949.2" y="469" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="952.24" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (2 samples, 0.04%; -0.04%)</title><rect x="932.0" y="501" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="935.03" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (3 samples, 0.06%; +0.02%)</title><rect x="551.1" y="389" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="554.08" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="41.3" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="44.26" y="303.5" ></text>
</g>
<g >
<title>sstables::noop_write_monitor::~noop_write_monitor (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="709" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="719.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="575.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (8 samples, 0.15%; -0.02%)</title><rect x="121.0" y="533" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="123.98" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="727.5" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="730.51" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="207.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (12 samples, 0.23%; 0.00%)</title><rect x="338.9" y="373" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="341.86" y="383.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;boost::iterator_range&lt;boost::intrusive::tree_iterator&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.02%)</title><rect x="267.5" y="245" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="270.52" y="255.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; +0.02%)</title><rect x="45.1" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="48.11" y="431.5" ></text>
</g>
<g >
<title>deletable_row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="47.1" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="50.14" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="42.6" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="45.61" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;2ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="835.5" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="838.55" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="23.4" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="26.36" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="303.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (14 samples, 0.27%; +0.04%)</title><rect x="805.2" y="261" width="3.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="808.20" y="271.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; 0.00%)</title><rect x="534.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="537.77" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="63.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.45" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::remove_registration (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="367.5" ></text>
</g>
<g >
<title>database::find_column_family (8 samples, 0.15%; 0.00%)</title><rect x="1043.5" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1046.46" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::deque (1 samples, 0.02%; 0.00%)</title><rect x="23.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="415.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%; 0.00%)</title><rect x="86.8" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="687.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="695.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.58" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (6 samples, 0.12%; +0.08%)</title><rect x="444.2" y="341" width="1.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="447.18" y="351.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (3 samples, 0.06%; +0.02%)</title><rect x="1169.8" y="581" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1172.84" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="335.7" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="338.69" y="399.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; -0.02%)</title><rect x="287.4" y="293" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="290.45" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.17%)</title><rect x="848.2" y="485" width="0.5" height="15.0" fill="rgb(52,52,255)" rx="2" ry="2" />
<text  x="851.23" y="495.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (9 samples, 0.17%; -0.04%)</title><rect x="393.0" y="261" width="2.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="395.99" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (195 samples, 3.74%; -0.06%)</title><rect x="219.0" y="277" width="44.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="222.05" y="287.5" >muta..</text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.56" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; -0.02%)</title><rect x="680.0" y="581" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="682.95" y="591.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (10 samples, 0.19%; +0.02%)</title><rect x="202.1" y="293" width="2.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="205.06" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (10 samples, 0.19%; 0.00%)</title><rect x="1112.8" y="517" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.77" y="527.5" ></text>
</g>
<g >
<title>ser::column_view::id (1 samples, 0.02%; +0.02%)</title><rect x="1123.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.41" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="749.3" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="752.26" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="303.8" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="306.75" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="868.6" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="871.61" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="367.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="118.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="121.26" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="817.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.43" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.89" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="768.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.51" y="463.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="396.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="399.61" y="271.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.7" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="61.69" y="335.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (12 samples, 0.23%; 0.00%)</title><rect x="269.8" y="293" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.78" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (4 samples, 0.08%; -0.04%)</title><rect x="1132.5" y="309" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1135.47" y="319.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1120.2" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="287.5" ></text>
</g>
<g >
<title>db::block_for (2 samples, 0.04%; +0.02%)</title><rect x="1053.0" y="421" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1055.98" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="571.2" y="437" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="574.24" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.08%)</title><rect x="731.6" y="501" width="1.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="734.59" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="210.2" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="213.21" y="287.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="818.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.33" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (3 samples, 0.06%; -0.02%)</title><rect x="546.8" y="325" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="549.78" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="399.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="64.6" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="67.58" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="78.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.17" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (1 samples, 0.02%; +0.02%)</title><rect x="23.1" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="26.14" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (1 samples, 0.02%; +0.02%)</title><rect x="80.7" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="83.66" y="511.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="453" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="463.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; +0.02%)</title><rect x="405.4" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="408.45" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (4 samples, 0.08%; 0.00%)</title><rect x="58.7" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="607.5" ></text>
</g>
<g >
<title>__dynamic_cast (4 samples, 0.08%; +0.04%)</title><rect x="885.6" y="517" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="888.60" y="527.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="819.0" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.01" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (31 samples, 0.60%; +0.02%)</title><rect x="1054.6" y="437" width="7.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1057.56" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="607.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (4 samples, 0.08%; -0.04%)</title><rect x="1129.3" y="325" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1132.30" y="335.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="1117.8" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1120.75" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; -0.02%)</title><rect x="864.3" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="867.31" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="56.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="58.98" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="13.91" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="723.9" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="726.89" y="223.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (86 samples, 1.65%; 0.00%)</title><rect x="531.6" y="389" width="19.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="534.60" y="399.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (7 samples, 0.13%; -0.02%)</title><rect x="432.2" y="325" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="435.17" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="712.6" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="715.56" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="906.2" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="909.21" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state_component&lt;seastar::future&lt;void&gt; &gt;::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="865.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.99" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="319.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="714.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.60" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (13 samples, 0.25%; -0.02%)</title><rect x="580.1" y="469" width="2.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="583.07" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="903.3" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="906.27" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1111.9" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1114.86" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::stats (4 samples, 0.08%; -0.04%)</title><rect x="525.0" y="405" width="0.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="528.03" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (20 samples, 0.38%; 0.00%)</title><rect x="1096.5" y="485" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1099.46" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="776.2" y="453" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="779.21" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="459.8" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="462.80" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%; +0.02%)</title><rect x="869.7" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="872.75" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%; +0.02%)</title><rect x="1044.4" y="389" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1047.37" y="399.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="1051.2" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1054.16" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (10 samples, 0.19%; -0.04%)</title><rect x="310.8" y="421" width="2.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="313.78" y="431.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.17%; 0.00%)</title><rect x="79.1" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.08" y="575.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (1 samples, 0.02%; +0.02%)</title><rect x="993.2" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="996.18" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (18 samples, 0.35%; +0.02%)</title><rect x="447.1" y="405" width="4.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="450.12" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.34" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (4 samples, 0.08%; +0.04%)</title><rect x="638.0" y="533" width="1.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="641.05" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="53.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="255.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="652.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.32" y="591.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="303.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (6 samples, 0.12%; +0.08%)</title><rect x="604.1" y="469" width="1.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="607.08" y="479.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (51 samples, 0.98%; +0.04%)</title><rect x="910.5" y="485" width="11.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="913.51" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="86.8" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="655.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.02" y="591.5" ></text>
</g>
<g >
<title>make_combined_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="143.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (10 samples, 0.19%; 0.00%)</title><rect x="567.8" y="389" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.84" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="335.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="790.0" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="793.02" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1137.0" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1140.00" y="607.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="206.4" y="277" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="209.36" y="287.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::key (1 samples, 0.02%; 0.00%)</title><rect x="1123.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.64" y="335.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (202 samples, 3.88%; 0.00%)</title><rect x="22.2" y="565" width="45.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="575.5" >cql3..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="52.6" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.58" y="223.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (519 samples, 9.96%; +0.02%)</title><rect x="334.3" y="469" width="117.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="337.33" y="479.5" >flat_mutation_..</text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; +0.02%)</title><rect x="805.7" y="245" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="808.65" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="100.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="103.82" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.06%)</title><rect x="947.7" y="485" width="2.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="950.66" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; +0.02%)</title><rect x="265.9" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="268.93" y="239.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (20 samples, 0.38%; +0.02%)</title><rect x="769.2" y="469" width="4.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="772.19" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="303.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.10%; 0.00%)</title><rect x="10.5" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="719.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::clear (10 samples, 0.19%; 0.00%)</title><rect x="407.9" y="309" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="410.94" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="543.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="1050.5" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1053.48" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%; 0.00%)</title><rect x="134.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="137.57" y="527.5" ></text>
</g>
<g >
<title>dht::tri_compare (3 samples, 0.06%; +0.04%)</title><rect x="1065.4" y="341" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1068.43" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="574.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="577.41" y="495.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::unregister_metric (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="294.0" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="297.02" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="858.9" y="517" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="861.88" y="527.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (29 samples, 0.56%; +0.06%)</title><rect x="1064.8" y="357" width="6.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1067.75" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="229" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1132.53" y="239.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="495.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="370.3" y="277" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="373.34" y="287.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%; 0.00%)</title><rect x="85.4" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (1 samples, 0.02%; +0.02%)</title><rect x="297.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="300.41" y="335.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="60.5" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.51" y="255.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="527.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES28_S2B_ (2 samples, 0.04%; 0.00%)</title><rect x="937.7" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="940.69" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.54" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="552.0" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="554.98" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="75.2" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.23" y="495.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; +0.02%)</title><rect x="344.5" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="347.52" y="367.5" ></text>
</g>
<g >
<title>cql3::statements::raw::cf_statement::prepare_keyspace (1 samples, 0.02%; +0.02%)</title><rect x="81.1" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="84.12" y="591.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (7 samples, 0.13%; +0.02%)</title><rect x="486.1" y="373" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="489.08" y="383.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,193 samples, 22.90%; 0.00%)</title><rect x="865.2" y="597" width="270.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.22" y="607.5" >seastar::lambda_task&lt;seastar::execut..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (6 samples, 0.12%; -0.12%)</title><rect x="720.0" y="533" width="1.4" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="723.04" y="543.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; +0.04%)</title><rect x="1141.8" y="581" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1144.76" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (3 samples, 0.06%; +0.02%)</title><rect x="755.8" y="469" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="758.82" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="605.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.89" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="149" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="159.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (8 samples, 0.15%; +0.02%)</title><rect x="640.3" y="517" width="1.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="643.31" y="527.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (6 samples, 0.12%; +0.06%)</title><rect x="307.2" y="421" width="1.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="310.15" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.3" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.30" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="207.5" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="210.50" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="63.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.22" y="447.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (1 samples, 0.02%; +0.02%)</title><rect x="901.9" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="904.91" y="431.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (3 samples, 0.06%; +0.04%)</title><rect x="450.5" y="357" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="453.52" y="367.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%; +0.04%)</title><rect x="20.9" y="581" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="23.87" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="537.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="540.04" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::consume (2 samples, 0.04%; 0.00%)</title><rect x="695.8" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; 0.00%)</title><rect x="994.1" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="997.09" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.12%; -0.02%)</title><rect x="814.0" y="357" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="817.03" y="367.5" ></text>
</g>
<g >
<title>db::block_for (3 samples, 0.06%; +0.04%)</title><rect x="1051.6" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1054.62" y="447.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (6 samples, 0.12%; 0.00%)</title><rect x="977.3" y="405" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.33" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="1018.5" y="245" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1021.55" y="255.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (8 samples, 0.15%; +0.06%)</title><rect x="33.8" y="341" width="1.8" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="36.78" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="351.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="811.8" y="181" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="814.77" y="191.5" ></text>
</g>
<g >
<title>seastar::deferred_close&lt;flat_mutation_reader&gt;::do_close (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="655.5" ></text>
</g>
<g >
<title>row_cache::make_reader (48 samples, 0.92%; +0.06%)</title><rect x="559.7" y="437" width="10.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="562.69" y="447.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::size (1 samples, 0.02%; +0.02%)</title><rect x="17.9" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="20.93" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="488.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.79" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (1 samples, 0.02%; +0.02%)</title><rect x="75.0" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="78.00" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="399.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; +0.02%)</title><rect x="811.3" y="181" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="814.31" y="191.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (65 samples, 1.25%; +0.04%)</title><rect x="892.4" y="469" width="14.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="895.40" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::never_speculating_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="975.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="978.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; +0.02%)</title><rect x="931.4" y="501" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="934.35" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (54 samples, 1.04%; +0.02%)</title><rect x="27.0" y="405" width="12.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="29.99" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="488.6" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="491.57" y="399.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; +0.02%)</title><rect x="329.1" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="332.12" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; -0.02%)</title><rect x="550.2" y="373" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="553.17" y="383.5" ></text>
</g>
<g >
<title>row::append_cell (2 samples, 0.04%; 0.00%)</title><rect x="1123.0" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.96" y="319.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="656.4" y="581" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="659.40" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="613.8" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="616.82" y="527.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (2 samples, 0.04%; +0.02%)</title><rect x="1020.1" y="309" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1023.13" y="319.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="431.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="59.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.37" y="383.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.17%)</title><rect x="326.0" y="389" width="0.2" height="15.0" fill="rgb(52,52,255)" rx="2" ry="2" />
<text  x="328.95" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::get (1 samples, 0.02%; 0.00%)</title><rect x="364.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="367.45" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (15 samples, 0.29%; 0.00%)</title><rect x="1127.5" y="405" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.49" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1161.7" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1164.69" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="100.6" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="103.60" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="763.1" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="766.07" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; -0.02%)</title><rect x="55.1" y="309" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="58.07" y="319.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (2 samples, 0.04%; 0.00%)</title><rect x="21.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.55" y="575.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (333 samples, 6.39%; -0.04%)</title><rect x="353.1" y="325" width="75.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="356.13" y="335.5" >compact_..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (63 samples, 1.21%; 0.00%)</title><rect x="25.2" y="469" width="14.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.17" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="213" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="223.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1023.1" y="325" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.08" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (7 samples, 0.13%; -0.02%)</title><rect x="452.3" y="453" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="455.33" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="61.0" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.96" y="239.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (2 samples, 0.04%; +0.02%)</title><rect x="373.5" y="261" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="376.51" y="271.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="71.8" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="74.83" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="549.9" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.95" y="383.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="107.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="383.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (1 samples, 0.02%; 0.00%)</title><rect x="1168.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.48" y="591.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; -0.02%)</title><rect x="361.5" y="277" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="364.51" y="287.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="899.2" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="902.19" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="607.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (3 samples, 0.06%; 0.00%)</title><rect x="325.5" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="328.50" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="255.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; 0.00%)</title><rect x="834.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.87" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (2 samples, 0.04%; +0.04%)</title><rect x="260.0" y="181" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="263.04" y="191.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::take (2 samples, 0.04%; +0.04%)</title><rect x="631.5" y="517" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="634.48" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (122 samples, 2.34%; +0.02%)</title><rect x="585.5" y="501" width="27.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="588.50" y="511.5" >f..</text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="851.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.40" y="463.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="766.0" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="769.02" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="662.5" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="665.51" y="591.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (1 samples, 0.02%; +0.02%)</title><rect x="1125.2" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1128.22" y="383.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="978.9" y="437" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="981.91" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; -0.04%)</title><rect x="565.8" y="405" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="568.80" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (3 samples, 0.06%; 0.00%)</title><rect x="49.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.41" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (9 samples, 0.17%; +0.08%)</title><rect x="403.4" y="261" width="2.0" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="406.41" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="363.8" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="366.77" y="271.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (6 samples, 0.12%; -0.02%)</title><rect x="372.2" y="277" width="1.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="375.15" y="287.5" ></text>
</g>
<g >
<title>cql3::update_parameters::make_cell (1 samples, 0.02%; -0.02%)</title><rect x="870.0" y="389" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="872.97" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="1059.8" y="389" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1062.77" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_check_len (1 samples, 0.02%; +0.02%)</title><rect x="51.2" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="54.22" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1084.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.00" y="479.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (3 samples, 0.06%; +0.04%)</title><rect x="37.9" y="357" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="40.86" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (7 samples, 0.13%; 0.00%)</title><rect x="669.5" y="565" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="672.53" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (1 samples, 0.02%; +0.02%)</title><rect x="974.4" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="977.38" y="463.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%; 0.00%)</title><rect x="1129.5" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.53" y="271.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (83 samples, 1.59%; -0.04%)</title><rect x="796.6" y="373" width="18.8" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="799.59" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_check_len (4 samples, 0.08%; +0.08%)</title><rect x="289.3" y="293" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="292.26" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.02%)</title><rect x="518.7" y="293" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="521.69" y="303.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (10 samples, 0.19%; -0.02%)</title><rect x="490.8" y="373" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="493.83" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="431.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="273.6" y="309" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="276.63" y="319.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::~metric_groups (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="431.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; 0.00%)</title><rect x="866.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.58" y="479.5" ></text>
</g>
<g >
<title>row::compact_and_expire (71 samples, 1.36%; -0.02%)</title><rect x="411.1" y="309" width="16.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="414.11" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%; -0.02%)</title><rect x="939.5" y="469" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="942.50" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="209.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.76" y="287.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (1 samples, 0.02%; +0.02%)</title><rect x="1021.3" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1024.27" y="335.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="463.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%; +0.02%)</title><rect x="864.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.08" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; +0.02%)</title><rect x="612.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="615.91" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%; -0.02%)</title><rect x="897.2" y="389" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="900.15" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (507 samples, 9.73%; -0.10%)</title><rect x="460.7" y="517" width="114.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="463.71" y="527.5" >query::querier..</text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (58 samples, 1.11%; -0.08%)</title><rect x="799.5" y="341" width="13.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="802.54" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="321.6" y="389" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="324.65" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="517" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::prepared_statement (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.98" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.02%)</title><rect x="85.4" y="421" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="88.42" y="431.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="187.8" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="190.79" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="600.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="603.45" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="22.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="511.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (3 samples, 0.06%; +0.06%)</title><rect x="624.5" y="533" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="627.46" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (15 samples, 0.29%; -0.02%)</title><rect x="294.2" y="341" width="3.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="297.24" y="351.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (16 samples, 0.31%; -0.02%)</title><rect x="852.3" y="533" width="3.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="855.31" y="543.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.02%)</title><rect x="43.3" y="229" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="46.29" y="239.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (3 samples, 0.06%; 0.00%)</title><rect x="539.8" y="325" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.75" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (10 samples, 0.19%; -0.02%)</title><rect x="258.2" y="213" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="261.23" y="223.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; -0.02%)</title><rect x="363.5" y="245" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="366.55" y="255.5" ></text>
</g>
<g >
<title>tombstone::operator&lt;=&gt; (1 samples, 0.02%; 0.00%)</title><rect x="427.6" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.64" y="287.5" ></text>
</g>
<g >
<title>table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="479.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (12 samples, 0.23%; -0.02%)</title><rect x="1057.5" y="405" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1060.50" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (4 samples, 0.08%; 0.00%)</title><rect x="46.2" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1032.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.59" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="302.8" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="305.85" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.06%)</title><rect x="1144.5" y="581" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1147.48" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (26 samples, 0.50%; -0.06%)</title><rect x="517.8" y="325" width="5.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="520.79" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.04%)</title><rect x="273.9" y="293" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="276.86" y="303.5" ></text>
</g>
<g >
<title>database::parse_system_tables (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (18 samples, 0.35%; +0.06%)</title><rect x="655.7" y="597" width="4.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="658.72" y="607.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; 0.00%)</title><rect x="297.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="299.96" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;reader_permit::impl, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="1024.7" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.66" y="287.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="367.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.06%)</title><rect x="921.2" y="421" width="0.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="924.16" y="431.5" ></text>
</g>
<g >
<title>memtable_list::flush (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="591.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (1 samples, 0.02%; +0.02%)</title><rect x="269.3" y="277" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="272.33" y="287.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; -0.02%)</title><rect x="935.0" y="453" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="937.98" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::query_internal (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (88 samples, 1.69%; +0.04%)</title><rect x="908.5" y="501" width="19.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="911.48" y="511.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (9 samples, 0.17%; +0.06%)</title><rect x="563.5" y="389" width="2.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="566.54" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.06%)</title><rect x="392.3" y="261" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="395.31" y="271.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%; +0.02%)</title><rect x="725.0" y="597" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="728.02" y="607.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (3 samples, 0.06%; -0.08%)</title><rect x="922.7" y="453" width="0.7" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="925.74" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.26" y="479.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (6 samples, 0.12%; 0.00%)</title><rect x="834.2" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.19" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%; +0.02%)</title><rect x="598.4" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="601.41" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="447.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="415.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (645 samples, 12.38%; +0.06%)</title><rect x="167.4" y="453" width="146.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="170.41" y="463.5" >mutation_fragment_..</text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="287.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="787.5" y="405" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="790.53" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="271.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="367.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="675.0" y="581" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="677.97" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (240 samples, 4.61%; 0.00%)</title><rect x="215.2" y="325" width="54.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.20" y="335.5" >parti..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_copy_assign (1 samples, 0.02%; +0.02%)</title><rect x="79.3" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="82.31" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (47 samples, 0.90%; +0.02%)</title><rect x="591.6" y="421" width="10.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="594.62" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="40.3" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="43.35" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (4 samples, 0.08%; +0.04%)</title><rect x="721.4" y="549" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="724.40" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; -0.02%)</title><rect x="764.9" y="501" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="767.88" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%; +0.02%)</title><rect x="23.6" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="26.59" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::await_suspend&lt;seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type&gt; (2 samples, 0.04%; +0.04%)</title><rect x="957.6" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="960.62" y="479.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="898.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="901.51" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="914.4" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="917.36" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1170.5" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1173.52" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; +0.02%)</title><rect x="39.7" y="405" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="42.67" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; -0.02%)</title><rect x="1007.0" y="309" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1010.00" y="319.5" ></text>
</g>
<g >
<title>[unknown] (339 samples, 6.51%; 0.00%)</title><rect x="10.5" y="725" width="76.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.45" y="735.5" >[unknown]</text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; -0.02%)</title><rect x="1111.0" y="485" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1113.96" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="935.0" y="421" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="937.98" y="431.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%; +0.02%)</title><rect x="1114.6" y="501" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1117.58" y="511.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.02%)</title><rect x="1060.4" y="421" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1063.45" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%; +0.02%)</title><rect x="492.0" y="357" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="494.97" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="428.5" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="431.55" y="335.5" ></text>
</g>
<g >
<title>boost::iterator_range_detail::iterator_range_base&lt;boost::iterators::filter_iterator&lt;mutation_partition::non_dummy_rows (1 samples, 0.02%; +0.02%)</title><rect x="1131.6" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1134.57" y="207.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (2 samples, 0.04%; +0.02%)</title><rect x="199.1" y="341" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="202.12" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (12 samples, 0.23%; -0.06%)</title><rect x="1110.0" y="501" width="2.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1113.05" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="431.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; 0.00%)</title><rect x="771.7" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.68" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; +0.04%)</title><rect x="831.9" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="834.92" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (8 samples, 0.15%; +0.02%)</title><rect x="1153.8" y="549" width="1.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1156.76" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; +0.02%)</title><rect x="1168.7" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1171.71" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="487.7" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="490.66" y="399.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; -0.06%)</title><rect x="309.4" y="437" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="312.42" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%; +0.02%)</title><rect x="836.0" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="839.00" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (5 samples, 0.10%; +0.04%)</title><rect x="683.3" y="581" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="686.35" y="591.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.06%; -0.06%)</title><rect x="1084.2" y="453" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1087.23" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (2 samples, 0.04%; +0.02%)</title><rect x="541.6" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="544.57" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.10%; +0.06%)</title><rect x="1086.9" y="501" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1089.95" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="866.6" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="869.58" y="463.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (160 samples, 3.07%; +0.02%)</title><rect x="219.0" y="261" width="36.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="222.05" y="271.5" >clu..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="614.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="617.04" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="46.2" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="303.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (5 samples, 0.10%; 0.00%)</title><rect x="17.2" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="671.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (2 samples, 0.04%; 0.00%)</title><rect x="41.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.48" y="431.5" ></text>
</g>
<g >
<title>logalloc::segment::occupancy (1 samples, 0.02%; +0.02%)</title><rect x="82.9" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="85.93" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="434.0" y="325" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="436.98" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.60" y="303.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (27 samples, 0.52%; -0.02%)</title><rect x="255.3" y="261" width="6.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="258.29" y="271.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata&gt;::~shared_ptr (2 samples, 0.04%; -0.08%)</title><rect x="677.7" y="581" width="0.4" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="680.69" y="591.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (147 samples, 2.82%; +0.15%)</title><rect x="221.3" y="229" width="33.3" height="15.0" fill="rgb(255,70,70)" rx="2" ry="2" />
<text  x="224.31" y="239.5" >co..</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="53.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1103.3" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1106.26" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="575.3" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="578.31" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_view_statement, std::default_delete&lt;cql3::statements::drop_view_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.8" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="69.85" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="1152.0" y="453" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1154.95" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; 0.00%)</title><rect x="801.6" y="261" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.57" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="48.7" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.73" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (648 samples, 12.44%; +0.08%)</title><rect x="942.2" y="517" width="146.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="945.22" y="527.5" >cql3::statements::..</text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="583.9" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="586.92" y="495.5" ></text>
</g>
<g >
<title>cdc::generation_service::scan_cdc_generations (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="527.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (2 samples, 0.04%; +0.04%)</title><rect x="1157.2" y="565" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1160.16" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%; -0.02%)</title><rect x="800.9" y="293" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="803.89" y="303.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, seastar::shared_ptr&lt;service::abstract_write_response_handler&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%; +0.02%)</title><rect x="1132.9" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1135.93" y="255.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1060.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1063.22" y="431.5" ></text>
</g>
<g >
<title>tracing::add_table_name (1 samples, 0.02%; -0.02%)</title><rect x="1119.1" y="533" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1122.11" y="543.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="575.1" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="578.09" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="620.4" y="485" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="623.38" y="495.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (12 samples, 0.23%; +0.06%)</title><rect x="204.3" y="309" width="2.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="207.33" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;empty_flat_reader, std::default_delete&lt;empty_flat_reader&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="570.3" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="573.33" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="213" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (10 samples, 0.19%; 0.00%)</title><rect x="752.4" y="421" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.43" y="431.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::get_error (1 samples, 0.02%; +0.02%)</title><rect x="61.2" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="64.19" y="383.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="889.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="892.90" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (4 samples, 0.08%; 0.00%)</title><rect x="25.9" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.85" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="297.2" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="300.19" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (7 samples, 0.13%; -0.02%)</title><rect x="692.6" y="581" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="695.63" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="216.1" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="219.10" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="900.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="903.32" y="399.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="522.8" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="525.77" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (3 samples, 0.06%; +0.06%)</title><rect x="1096.5" y="469" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1099.46" y="479.5" ></text>
</g>
<g >
<title>dht::shard_of (1 samples, 0.02%; 0.00%)</title><rect x="1130.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.98" y="287.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="511.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="53.7" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.71" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="303.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.02%)</title><rect x="694.4" y="581" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="697.45" y="591.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="786.9" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.85" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="877.2" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="880.22" y="575.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="689.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="692.01" y="575.5" ></text>
</g>
<g >
<title>db::hints::manager::too_many_in_flight_hints_for (1 samples, 0.02%; +0.02%)</title><rect x="1132.5" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1135.47" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (18 samples, 0.35%; -0.02%)</title><rect x="71.6" y="501" width="4.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="74.60" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="336.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="339.60" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (8 samples, 0.15%; 0.00%)</title><rect x="55.8" y="373" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.75" y="383.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; -0.02%)</title><rect x="55.8" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="58.75" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="779.6" y="453" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="782.60" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="55.3" y="117" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="58.30" y="127.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; -0.04%)</title><rect x="742.7" y="389" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="745.69" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::done (2 samples, 0.04%; +0.04%)</title><rect x="623.6" y="533" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="626.55" y="543.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; -0.02%)</title><rect x="356.8" y="261" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="359.75" y="271.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.04%)</title><rect x="161.7" y="517" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="164.75" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="306.9" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="309.93" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="70.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="73.47" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (2 samples, 0.04%; +0.02%)</title><rect x="87.7" y="613" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="90.69" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="696.0" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.03" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="303.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (508 samples, 9.75%; +0.10%)</title><rect x="737.0" y="549" width="115.1" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="740.02" y="559.5" >single_node_cq..</text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="293" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::add_restriction (1 samples, 0.02%; 0.00%)</title><rect x="73.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.87" y="415.5" ></text>
</g>
<g >
<title>boost::algorithm::detail::is_any_ofF&lt;char&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="18.6" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="21.61" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="427.9" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="430.87" y="287.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (4 samples, 0.08%; +0.02%)</title><rect x="266.6" y="245" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="269.61" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; +0.02%)</title><rect x="85.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="87.97" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (3 samples, 0.06%; -0.02%)</title><rect x="599.8" y="389" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="602.77" y="399.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; +0.02%)</title><rect x="139.1" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="142.10" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.5" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.52" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="867.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.26" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.10%)</title><rect x="956.5" y="453" width="0.9" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="959.49" y="463.5" ></text>
</g>
<g >
<title>database::find_uuid (22 samples, 0.42%; 0.00%)</title><rect x="829.2" y="453" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.21" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="864.3" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="607.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.33%; 0.00%)</title><rect x="923.4" y="469" width="3.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="926.42" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="772.1" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="775.13" y="447.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="99.5" y="517" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.46" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (15 samples, 0.29%; 0.00%)</title><rect x="1097.6" y="469" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1100.59" y="479.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="86.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="319.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="101.5" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="104.50" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.04%)</title><rect x="582.8" y="405" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="585.79" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (14 samples, 0.27%; +0.02%)</title><rect x="751.7" y="469" width="3.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="754.75" y="479.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1071.3" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1074.32" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (6 samples, 0.12%; -0.04%)</title><rect x="905.1" y="437" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="908.08" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (3 samples, 0.06%; +0.04%)</title><rect x="472.5" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="475.49" y="447.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (14 samples, 0.27%; 0.00%)</title><rect x="618.8" y="501" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.80" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.02%)</title><rect x="977.3" y="373" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="980.33" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="78.6" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="81.63" y="495.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (13 samples, 0.25%; +0.15%)</title><rect x="13.4" y="677" width="2.9" height="15.0" fill="rgb(255,70,70)" rx="2" ry="2" />
<text  x="16.40" y="687.5" ></text>
</g>
<g >
<title>validation::validate_column_family (36 samples, 0.69%; 0.00%)</title><rect x="827.4" y="485" width="8.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.39" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (23 samples, 0.44%; -0.02%)</title><rect x="52.4" y="405" width="5.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="55.35" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.37" y="335.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; +0.02%)</title><rect x="359.0" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="362.02" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="813.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.80" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.02%; 0.00%)</title><rect x="680.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.40" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1129.1" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1132.07" y="335.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="49.6" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.64" y="383.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (5 samples, 0.10%; +0.08%)</title><rect x="521.4" y="277" width="1.1" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="524.41" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="319.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (3 samples, 0.06%; -0.02%)</title><rect x="680.0" y="549" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="682.95" y="559.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (3 samples, 0.06%; +0.02%)</title><rect x="439.9" y="293" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="442.87" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;3ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="85" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="95.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="549.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="552.72" y="383.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (19 samples, 0.36%; -0.02%)</title><rect x="730.5" y="549" width="4.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="733.46" y="559.5" ></text>
</g>
<g >
<title>evictable_reader::resume_or_create_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="58.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.24" y="383.5" ></text>
</g>
<g >
<title>std::function&lt;frozen_schema  (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; 0.00%)</title><rect x="128.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="131.91" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="341.1" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="344.12" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (2 samples, 0.04%; -0.02%)</title><rect x="637.1" y="533" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="640.14" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.42" y="367.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (462 samples, 8.87%; +0.04%)</title><rect x="342.0" y="389" width="104.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="345.03" y="399.5" >seastar::rep..</text>
</g>
<g >
<title>compound_type&lt; (6 samples, 0.12%; 0.00%)</title><rect x="911.0" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.97" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="723.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.98" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;std::unordered_map&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; &gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="872.7" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="875.69" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%; +0.02%)</title><rect x="849.1" y="485" width="2.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="852.14" y="495.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (3 samples, 0.06%; 0.00%)</title><rect x="475.0" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="477.98" y="431.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.0" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.02" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%; 0.00%)</title><rect x="865.4" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="511.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (3 samples, 0.06%; +0.04%)</title><rect x="606.6" y="437" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="609.57" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; -0.02%)</title><rect x="615.4" y="517" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="618.40" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="866.3" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="869.35" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="853.4" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="856.44" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.04%)</title><rect x="815.4" y="373" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="818.39" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.10%; +0.04%)</title><rect x="667.5" y="533" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="670.49" y="543.5" ></text>
</g>
<g >
<title>__dynamic_cast (1 samples, 0.02%; +0.02%)</title><rect x="16.3" y="677" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="19.34" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (2 samples, 0.04%; +0.02%)</title><rect x="865.4" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="868.44" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (4 samples, 0.08%; +0.06%)</title><rect x="862.3" y="597" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="865.27" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (183 samples, 3.51%; +0.02%)</title><rect x="24.5" y="485" width="41.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="27.50" y="495.5" >cql..</text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (7 samples, 0.13%; 0.00%)</title><rect x="1168.9" y="613" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.94" y="623.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (5 samples, 0.10%; 0.00%)</title><rect x="18.4" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="671.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::batch_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="65.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="68.26" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="584.8" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="587.83" y="527.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (6 samples, 0.12%; -0.04%)</title><rect x="273.2" y="325" width="1.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="276.18" y="335.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (3 samples, 0.06%; 0.00%)</title><rect x="1121.6" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.60" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.08%; 0.00%)</title><rect x="839.2" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.17" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="640.5" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="643.54" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.10%; +0.06%)</title><rect x="828.1" y="405" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="831.07" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="298.1" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="301.09" y="367.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1115.7" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1118.71" y="527.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%; -0.02%)</title><rect x="592.3" y="389" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="595.30" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="616.1" y="517" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="619.08" y="527.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (1 samples, 0.02%; 0.00%)</title><rect x="68.4" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.43" y="559.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%; 0.00%)</title><rect x="80.7" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.66" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1127.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.26" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (11 samples, 0.21%; +0.02%)</title><rect x="869.3" y="437" width="2.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="872.29" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="255.5" ></text>
</g>
<g >
<title>auth::resource::parent (12 samples, 0.23%; 0.00%)</title><rect x="787.3" y="421" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="790.31" y="431.5" ></text>
</g>
<g >
<title>std::apply&lt;table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="447.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_failed (1 samples, 0.02%; 0.00%)</title><rect x="28.3" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.35" y="383.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%; 0.00%)</title><rect x="836.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.68" y="527.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1039.2" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1042.16" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (2 samples, 0.04%; +0.02%)</title><rect x="477.9" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="480.92" y="399.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; -0.02%)</title><rect x="79.5" y="405" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="82.53" y="415.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (24 samples, 0.46%; 0.00%)</title><rect x="1013.6" y="293" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1016.57" y="303.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (2 samples, 0.04%; 0.00%)</title><rect x="847.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.32" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="1126.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.36" y="415.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.04%)</title><rect x="1106.4" y="517" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1109.43" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="72.3" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.28" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; -0.12%)</title><rect x="970.8" y="421" width="2.0" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="973.76" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.28" y="447.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="56.0" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.98" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="787.1" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="790.08" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="1088.5" y="485" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1091.53" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1015.8" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1018.83" y="255.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (11 samples, 0.21%; +0.08%)</title><rect x="982.8" y="389" width="2.5" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="985.76" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.12%)</title><rect x="999.8" y="341" width="0.6" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="1002.75" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (62 samples, 1.19%; -0.06%)</title><rect x="533.4" y="373" width="14.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="536.41" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="76.1" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.13" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::operation::raw_update*&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="58.9" y="325" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="61.92" y="335.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (2 samples, 0.04%; 0.00%)</title><rect x="646.0" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="648.98" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; -0.02%)</title><rect x="607.2" y="437" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="610.25" y="447.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="697.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.39" y="607.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="431.5" ></text>
</g>
<g >
<title>do_io_check&lt;open_checked_directory (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="431.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (1 samples, 0.02%; +0.02%)</title><rect x="1083.6" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1086.55" y="463.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_internal (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="543.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="814.5" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="817.48" y="351.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; -0.02%)</title><rect x="166.3" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="169.28" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%; 0.00%)</title><rect x="46.2" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1167.4" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1170.35" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_query (584 samples, 11.21%; -0.04%)</title><rect x="952.9" y="485" width="132.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="955.87" y="495.5" >service::storage..</text>
</g>
<g >
<title>database::query (103 samples, 1.98%; -0.08%)</title><rect x="1003.1" y="357" width="23.4" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="1006.15" y="367.5" >d..</text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (45 samples, 0.86%; +0.06%)</title><rect x="316.0" y="421" width="10.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="318.98" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="74.1" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="77.10" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (35 samples, 0.67%; 0.00%)</title><rect x="68.7" y="533" width="7.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.66" y="543.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (463 samples, 8.89%; 0.00%)</title><rect x="193.9" y="405" width="104.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="196.91" y="415.5" >partition_sn..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="31.5" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="34.52" y="319.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; -0.02%)</title><rect x="594.3" y="389" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="597.34" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="607.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.10%; 0.00%)</title><rect x="828.1" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.07" y="447.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (9 samples, 0.17%; 0.00%)</title><rect x="68.9" y="517" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.89" y="527.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.02%; +0.02%)</title><rect x="11.4" y="693" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="14.36" y="703.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1017.6" y="245" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1020.64" y="255.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="17.0" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="20.02" y="623.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; -0.02%)</title><rect x="1038.0" y="373" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1041.03" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.02%)</title><rect x="693.3" y="533" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="696.31" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="556.7" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="559.74" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (10 samples, 0.19%; 0.00%)</title><rect x="202.1" y="309" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="205.06" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="712.3" y="565" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="715.34" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%; 0.00%)</title><rect x="262.1" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="265.08" y="271.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; +0.04%)</title><rect x="626.7" y="501" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="629.73" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (1 samples, 0.02%; 0.00%)</title><rect x="136.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="139.15" y="559.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%; +0.02%)</title><rect x="376.5" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="379.46" y="287.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (202 samples, 3.88%; 0.00%)</title><rect x="22.2" y="533" width="45.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="543.5" >cql3..</text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="1059.5" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1062.54" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="766.9" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="769.92" y="479.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="501" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (1 samples, 0.02%; 0.00%)</title><rect x="221.1" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="224.09" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="591.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="594.39" y="415.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="23.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (3 samples, 0.06%; +0.04%)</title><rect x="589.8" y="421" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="592.81" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.56" y="399.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="335.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (4 samples, 0.08%; -0.06%)</title><rect x="644.6" y="517" width="0.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="647.62" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="974.8" y="453" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="977.84" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="328.7" y="485" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="331.67" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="611.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="614.10" y="447.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (2 samples, 0.04%; 0.00%)</title><rect x="1170.1" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.07" y="575.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%; -0.04%)</title><rect x="479.7" y="373" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="482.74" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.12%)</title><rect x="1147.4" y="517" width="1.6" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1150.42" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%; +0.02%)</title><rect x="1129.3" y="293" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1132.30" y="303.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (20 samples, 0.38%; +0.02%)</title><rect x="730.2" y="565" width="4.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="733.23" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1038.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1041.48" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::consume (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="527.5" ></text>
</g>
<g >
<title>dht::maximum_token (1 samples, 0.02%; +0.02%)</title><rect x="479.3" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="482.28" y="383.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; +0.02%)</title><rect x="870.9" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="873.88" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="803.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.61" y="303.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (1 samples, 0.02%; -0.10%)</title><rect x="123.2" y="533" width="0.3" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="126.24" y="543.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="1140.6" y="581" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1143.63" y="591.5" ></text>
</g>
<g >
<title>logalloc::region_impl::occupancy (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt; &gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="271.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mWS (1 samples, 0.02%; +0.02%)</title><rect x="39.0" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="41.99" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.02%)</title><rect x="263.0" y="245" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="265.99" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="152.2" y="533" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="155.23" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.7" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.75" y="223.5" ></text>
</g>
<g >
<title>make_random_seq (1 samples, 0.02%; -0.02%)</title><rect x="734.8" y="565" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="737.76" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.06%)</title><rect x="439.6" y="293" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="442.65" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.04%)</title><rect x="138.2" y="549" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="141.19" y="559.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; +0.02%)</title><rect x="558.1" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="561.10" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (15 samples, 0.29%; -0.06%)</title><rect x="338.4" y="389" width="3.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="341.41" y="399.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1018.5" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.55" y="271.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;cql3::cf_name, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="63.2" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="66.22" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_timeout (1 samples, 0.02%; 0.00%)</title><rect x="945.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.62" y="511.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%; +0.04%)</title><rect x="215.7" y="293" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="218.65" y="303.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (6 samples, 0.12%; +0.02%)</title><rect x="205.7" y="293" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="208.69" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="104.9" y="581" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="107.90" y="591.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (1 samples, 0.02%; 0.00%)</title><rect x="710.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.75" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (2 samples, 0.04%; 0.00%)</title><rect x="51.4" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (63 samples, 1.21%; 0.00%)</title><rect x="25.2" y="437" width="14.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.17" y="447.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (14 samples, 0.27%; 0.00%)</title><rect x="982.1" y="405" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.08" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="805.9" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="808.88" y="223.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.04%)</title><rect x="1097.1" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1100.14" y="479.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS4_12restrictions38single_column_primary_key_restrictionsI13partition_keyE10merge_withEN7seastar10shared_ptrINSC_11restrictionEEEEUlRS7_E_EES8_RKNS5_10expressionET_EUlSK_E_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_8constantEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_11conjunctionEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_12column_valueEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_5tokenEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_13function_callEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_4castEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_15field_selectionEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_4nullEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_13bind_variableEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_16untyped_constantEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_17tuple_constructorEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_22collection_constructorEE_ZNSB_ISL_EES8_SO_SP_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSV_S6_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_S1V_S1Z_SR_S23_S27_S2B_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES2G_S2J_ (1 samples, 0.02%; +0.02%)</title><rect x="73.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="76.19" y="431.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="75.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.23" y="447.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="428.3" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="431.32" y="319.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="823.3" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="826.32" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; 0.00%)</title><rect x="724.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.79" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (2 samples, 0.04%; +0.02%)</title><rect x="308.5" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="311.51" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="607.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="288.4" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="291.35" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.27%; 0.00%)</title><rect x="294.2" y="325" width="3.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="297.24" y="335.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; +0.04%)</title><rect x="591.8" y="405" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="594.85" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (12 samples, 0.23%; +0.02%)</title><rect x="716.6" y="533" width="2.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="719.64" y="543.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="870.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.43" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.37" y="399.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1118.2" y="533" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1121.20" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="859.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.55" y="575.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; +0.02%)</title><rect x="843.0" y="453" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="846.02" y="463.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.02%)</title><rect x="1049.1" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1052.12" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::expression::impl*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.0" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="61.02" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; -0.06%)</title><rect x="643.0" y="533" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="646.03" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,349 samples, 45.09%; +0.02%)</title><rect x="114.0" y="565" width="532.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="116.96" y="575.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (3 samples, 0.06%; +0.04%)</title><rect x="933.4" y="501" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="936.39" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (3 samples, 0.06%; 0.00%)</title><rect x="363.1" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="366.09" y="271.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="84.3" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="351.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (2 samples, 0.04%; +0.04%)</title><rect x="105.4" y="581" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="108.35" y="591.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="655.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="758.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="761.77" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.12%; -0.13%)</title><rect x="244.6" y="133" width="1.4" height="15.0" fill="rgb(87,87,255)" rx="2" ry="2" />
<text  x="247.64" y="143.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="292.0" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="294.98" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="662.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.28" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; -0.04%)</title><rect x="602.3" y="437" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="605.26" y="447.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="290.6" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="293.62" y="287.5" ></text>
</g>
<g >
<title>service::storage_proxy::~storage_proxy (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;seastar::file_impl&gt; &gt;, seastar::reactor::open_file_dma (1 samples, 0.02%; 0.00%)</title><rect x="686.7" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.74" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1130.4" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1133.43" y="351.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.10%; +0.06%)</title><rect x="596.6" y="373" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="599.60" y="383.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="459.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="462.12" y="527.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (28 samples, 0.54%; -0.04%)</title><rect x="605.4" y="469" width="6.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="608.44" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="661.2" y="581" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="664.15" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="49.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.41" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (13 samples, 0.25%; 0.00%)</title><rect x="759.7" y="389" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.67" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="494.5" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="497.46" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1019.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.91" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (34 samples, 0.65%; 0.00%)</title><rect x="865.4" y="533" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.02%; 0.00%)</title><rect x="31.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.52" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="455.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="458.05" y="463.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (19 samples, 0.36%; 0.00%)</title><rect x="739.1" y="533" width="4.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.06" y="543.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (2 samples, 0.04%; +0.04%)</title><rect x="587.8" y="437" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="590.77" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (64 samples, 1.23%; 0.00%)</title><rect x="278.4" y="341" width="14.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="281.39" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (484 samples, 9.29%; +0.04%)</title><rect x="463.7" y="469" width="109.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="466.65" y="479.5" >std::_Functio..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; +0.02%)</title><rect x="268.2" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="271.20" y="239.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; 0.00%)</title><rect x="843.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.47" y="447.5" ></text>
</g>
<g >
<title>posix_memalign (8 samples, 0.15%; -0.02%)</title><rect x="244.2" y="149" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="247.19" y="159.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; -0.06%)</title><rect x="725.7" y="597" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="728.70" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.02%)</title><rect x="814.7" y="341" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="817.71" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="819.7" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.69" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (16 samples, 0.31%; +0.02%)</title><rect x="842.1" y="485" width="3.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="845.12" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (2 samples, 0.04%; 0.00%)</title><rect x="1034.4" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1037.40" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="453" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="463.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="82.0" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="85.02" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIPFbRS7_EEES8_RKNS5_10expressionET_EUlSC_E_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_8constantEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_12column_valueEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_5tokenEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_13function_callEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_4castEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_4nullEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISE_EES8_SH_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm12EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="71.6" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="74.60" y="495.5" ></text>
</g>
<g >
<title>database::find_keyspace (26 samples, 0.50%; 0.00%)</title><rect x="1045.3" y="437" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.27" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="819.2" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="822.24" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="72.1" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.06" y="399.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="696.9" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.94" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.89" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (10 samples, 0.19%; +0.02%)</title><rect x="1131.1" y="389" width="2.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1134.11" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1115.0" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1118.03" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (10 samples, 0.19%; 0.00%)</title><rect x="776.4" y="469" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.43" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (34 samples, 0.65%; 0.00%)</title><rect x="1093.3" y="501" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.29" y="511.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1038.9" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1041.93" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="351.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (2 samples, 0.04%; 0.00%)</title><rect x="758.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="761.54" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1097.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1100.82" y="463.5" ></text>
</g>
<g >
<title>database::find_schema (28 samples, 0.54%; -0.02%)</title><rect x="768.1" y="501" width="6.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="771.05" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.10%; 0.00%)</title><rect x="946.3" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="949.30" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="495.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="175.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1171.0" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.98" y="735.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="97.7" y="549" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="100.65" y="559.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="916.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="919.86" y="479.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.06%)</title><rect x="926.6" y="421" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="929.60" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="199.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.80" y="335.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="399.5" ></text>
</g>
<g >
<title>std::_Bind_front&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="866.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.35" y="463.5" ></text>
</g>
<g >
<title>sstables::write_unsigned_vint&lt;sstables::file_writer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="86.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.33" y="495.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (37 samples, 0.71%; -0.02%)</title><rect x="515.3" y="373" width="8.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="518.29" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%; 0.00%)</title><rect x="695.8" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="463.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%; 0.00%)</title><rect x="292.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="295.20" y="335.5" ></text>
</g>
<g >
<title>reader_permit::impl::impl (1 samples, 0.02%; +0.02%)</title><rect x="1021.7" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1024.72" y="335.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="367.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (14 samples, 0.27%; +0.06%)</title><rect x="1014.7" y="261" width="3.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1017.70" y="271.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; 0.00%)</title><rect x="824.4" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.45" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (602 samples, 11.55%; +0.08%)</title><rect x="170.6" y="421" width="136.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="173.58" y="431.5" >mutation_reader_m..</text>
</g>
<g >
<title>cql3::raw_value_view::with_value&lt;cql3::raw_value_view::validate (1 samples, 0.02%; 0.00%)</title><rect x="899.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="902.87" y="415.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="447.5" ></text>
</g>
<g >
<title>__libc_start_main (4,784 samples, 91.82%; 0.00%)</title><rect x="87.2" y="725" width="1083.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="735.5" >__libc_start_main</text>
</g>
<g >
<title>utils::tuple_hash::operator (13 samples, 0.25%; 0.00%)</title><rect x="759.7" y="405" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.67" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (2 samples, 0.04%; +0.04%)</title><rect x="861.6" y="565" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="864.59" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%; 0.00%)</title><rect x="778.9" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.93" y="447.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info (1 samples, 0.02%; 0.00%)</title><rect x="16.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.34" y="719.5" ></text>
</g>
<g >
<title>partition_version::partition_version (1 samples, 0.02%; 0.00%)</title><rect x="1120.5" y="197" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.47" y="207.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="903.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="906.49" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="701.0" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="704.01" y="575.5" ></text>
</g>
<g >
<title>cql3::constants::value::~value (1 samples, 0.02%; 0.00%)</title><rect x="662.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="665.28" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; -0.04%)</title><rect x="1086.7" y="453" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1089.72" y="463.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (2 samples, 0.04%; -0.02%)</title><rect x="44.2" y="421" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="47.20" y="431.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="22.2" y="469" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="25.23" y="479.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%; 0.00%)</title><rect x="85.4" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; 0.00%)</title><rect x="362.4" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="365.41" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="319.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (2 samples, 0.04%; +0.04%)</title><rect x="298.3" y="373" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="301.32" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (239 samples, 4.59%; -0.02%)</title><rect x="215.4" y="309" width="54.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="218.42" y="319.5" >logal..</text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.04%)</title><rect x="262.3" y="229" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="265.31" y="239.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::emplace_back&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="304.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="306.98" y="383.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="319.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="322.16" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="543.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="523.2" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="526.22" y="303.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; +0.04%)</title><rect x="391.2" y="245" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="394.18" y="255.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="611.3" y="437" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="614.32" y="447.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (13 samples, 0.25%; +0.02%)</title><rect x="567.6" y="405" width="3.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="570.61" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="808.6" y="229" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.60" y="239.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="16.6" y="709" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="19.57" y="719.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; 0.00%)</title><rect x="594.6" y="389" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="597.56" y="399.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="469" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1085.4" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1088.36" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="371.7" y="277" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="374.70" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="683.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="686.12" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (25 samples, 0.48%; -0.04%)</title><rect x="578.0" y="501" width="5.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="581.03" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="751.3" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="754.29" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; 0.00%)</title><rect x="801.6" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="804.57" y="255.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (301 samples, 5.78%; -0.08%)</title><rect x="767.8" y="517" width="68.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="770.83" y="527.5" >cql3::s..</text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%; 0.00%)</title><rect x="1122.3" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.28" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (7 samples, 0.13%; -0.04%)</title><rect x="270.2" y="277" width="1.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="273.23" y="287.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1026.5" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1029.48" y="367.5" ></text>
</g>
<g >
<title>schema_registry::get (23 samples, 0.44%; +0.02%)</title><rect x="968.3" y="453" width="5.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="971.27" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.02%)</title><rect x="364.0" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="367.00" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (3 samples, 0.06%; 0.00%)</title><rect x="79.5" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.53" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (5 samples, 0.10%; 0.00%)</title><rect x="77.9" y="565" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.95" y="575.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (2 samples, 0.04%; +0.04%)</title><rect x="754.2" y="405" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="757.24" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="113.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="116.50" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; +0.02%)</title><rect x="886.7" y="517" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="889.73" y="527.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; -0.08%)</title><rect x="255.1" y="229" width="0.2" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="258.06" y="239.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="469" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (10 samples, 0.19%; +0.12%)</title><rect x="547.5" y="373" width="2.2" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="550.45" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; +0.02%)</title><rect x="1075.4" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1078.40" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (212 samples, 4.07%; 0.00%)</title><rect x="991.4" y="405" width="48.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="994.37" y="415.5" >serv..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::grant_statement*, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="65.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.04" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (3 samples, 0.06%; +0.04%)</title><rect x="130.3" y="469" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="133.26" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.04%)</title><rect x="399.6" y="245" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="402.56" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="399.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="549" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="559.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (12 samples, 0.23%; -0.02%)</title><rect x="659.8" y="597" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="662.79" y="607.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="559.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,885 samples, 36.18%; -0.02%)</title><rect x="158.6" y="533" width="426.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="161.58" y="543.5" >query::querier&lt;</text>
</g>
<g >
<title>intrusive_b::searcher&lt;position_in_partition_view, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="255.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%; 0.00%)</title><rect x="1167.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.58" y="559.5" ></text>
</g>
<g >
<title>tracing::add_table_name (7 samples, 0.13%; +0.08%)</title><rect x="1116.2" y="517" width="1.6" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1119.17" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="463.0" y="469" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="465.98" y="479.5" ></text>
</g>
<g >
<title>database::find_schema (29 samples, 0.56%; 0.00%)</title><rect x="827.6" y="469" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.62" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (7 samples, 0.13%; -0.02%)</title><rect x="1093.5" y="485" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1096.52" y="495.5" ></text>
</g>
<g >
<title>partition_slice_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (19 samples, 0.36%; +0.10%)</title><rect x="820.1" y="453" width="4.3" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="823.15" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::partition_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="74.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.32" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (22 samples, 0.42%; 0.00%)</title><rect x="263.4" y="277" width="5.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="266.44" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (32 samples, 0.61%; -0.02%)</title><rect x="593.9" y="405" width="7.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="596.88" y="415.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (5 samples, 0.10%; -0.02%)</title><rect x="588.7" y="421" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="591.68" y="431.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="21.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.55" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="45.6" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="48.56" y="351.5" ></text>
</g>
<g >
<title>__tls_init (4 samples, 0.08%; +0.06%)</title><rect x="196.6" y="325" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="199.63" y="335.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (5 samples, 0.10%; -0.02%)</title><rect x="705.1" y="533" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="708.09" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="39.7" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.67" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (20 samples, 0.38%; -0.06%)</title><rect x="256.6" y="229" width="4.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="259.64" y="239.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (28 samples, 0.54%; +0.04%)</title><rect x="517.3" y="341" width="6.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="520.33" y="351.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%; -0.02%)</title><rect x="446.0" y="373" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="448.99" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="450.3" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="453.29" y="367.5" ></text>
</g>
<g >
<title>seastar::smp::configure (1 samples, 0.02%; 0.00%)</title><rect x="1170.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.52" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; 0.00%)</title><rect x="680.0" y="565" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="682.95" y="575.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (153 samples, 2.94%; +0.02%)</title><rect x="785.3" y="437" width="34.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="788.27" y="447.5" >se..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="930.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="933.90" y="511.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; +0.02%)</title><rect x="72.5" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.51" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (4 samples, 0.08%; +0.06%)</title><rect x="633.7" y="533" width="1.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="636.75" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="648.5" y="581" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="651.47" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="287.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_initialize_map (1 samples, 0.02%; 0.00%)</title><rect x="23.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="383.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%; +0.02%)</title><rect x="631.0" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="634.03" y="511.5" ></text>
</g>
<g >
<title>reader_permit::mark_used (1 samples, 0.02%; +0.02%)</title><rect x="122.8" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="125.79" y="559.5" ></text>
</g>
<g >
<title>do_cql_test (280 samples, 5.37%; 0.00%)</title><rect x="19.5" y="645" width="63.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.51" y="655.5" >do_cql..</text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="17.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.70" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="351.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="399.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; 0.00%)</title><rect x="523.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.90" y="431.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.02%; 0.00%)</title><rect x="83.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.16" y="719.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (494 samples, 9.48%; -0.08%)</title><rect x="461.6" y="501" width="111.9" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="464.62" y="511.5" >mutation_sour..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="287.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::done (2 samples, 0.04%; +0.04%)</title><rect x="708.3" y="549" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="711.26" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%; +0.04%)</title><rect x="358.1" y="261" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="361.11" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="645.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="648.07" y="495.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; -0.04%)</title><rect x="1055.5" y="405" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1058.47" y="415.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; 0.00%)</title><rect x="17.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.02" y="639.5" ></text>
</g>
<g >
<title>mutation_partition::non_dummy_rows (1 samples, 0.02%; 0.00%)</title><rect x="1131.6" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="255.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="848.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="851.23" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="463.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, memtable_list::flush (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="607.5" ></text>
</g>
<g >
<title>__strlen_avx2 (12 samples, 0.23%; +0.12%)</title><rect x="1003.6" y="341" width="2.7" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1006.60" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="700.6" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="703.56" y="575.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_internal (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="11.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.13" y="575.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; 0.00%)</title><rect x="867.9" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.93" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (128 samples, 2.46%; +0.04%)</title><rect x="1138.6" y="597" width="29.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1141.59" y="607.5" >se..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%; -0.10%)</title><rect x="420.6" y="245" width="1.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="423.62" y="255.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="19.1" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="22.06" y="463.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="57.3" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.34" y="335.5" ></text>
</g>
<g >
<title>schema::column_at (7 samples, 0.13%; -0.06%)</title><rect x="425.6" y="261" width="1.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="428.60" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;::dispose (1 samples, 0.02%; +0.02%)</title><rect x="684.3" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="687.25" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="767.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="770.37" y="511.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.06%)</title><rect x="1166.9" y="517" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1169.90" y="527.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (4 samples, 0.08%; +0.02%)</title><rect x="717.8" y="517" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="720.77" y="527.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (19 samples, 0.36%; +0.08%)</title><rect x="31.7" y="357" width="4.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="34.74" y="367.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="43.1" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="46.07" y="239.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="565.6" y="405" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="568.57" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="351.5" ></text>
</g>
<g >
<title>row::external_memory_usage (22 samples, 0.42%; -0.04%)</title><rect x="256.4" y="245" width="5.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="259.42" y="255.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (33 samples, 0.63%; 0.00%)</title><rect x="1119.6" y="581" width="7.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="591.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::read_cdc_generation (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (10 samples, 0.19%; -0.02%)</title><rect x="869.5" y="421" width="2.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="872.52" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.60" y="287.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (2 samples, 0.04%; 0.00%)</title><rect x="199.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="202.80" y="351.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (161 samples, 3.09%; +0.08%)</title><rect x="783.7" y="453" width="36.4" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="786.68" y="463.5" >ser..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (139 samples, 2.67%; +0.08%)</title><rect x="1001.1" y="373" width="31.5" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1004.11" y="383.5" >se..</text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (26 samples, 0.50%; 0.00%)</title><rect x="201.8" y="325" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="204.83" y="335.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1036.7" y="341" width="0.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1039.67" y="351.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%; 0.00%)</title><rect x="928.9" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="931.86" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (13 samples, 0.25%; 0.00%)</title><rect x="207.7" y="325" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="210.72" y="335.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; +0.02%)</title><rect x="82.5" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="85.48" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (41 samples, 0.79%; +0.08%)</title><rect x="478.4" y="389" width="9.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="481.38" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::hasException (1 samples, 0.02%; +0.02%)</title><rect x="24.0" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="27.04" y="495.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="223.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="719.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="722.81" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="214.7" y="309" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="217.74" y="319.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="84.7" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="87.74" y="303.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="81.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.57" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (4 samples, 0.08%; -0.02%)</title><rect x="130.3" y="485" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="133.26" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="839.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="842.85" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; +0.04%)</title><rect x="344.7" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="347.75" y="367.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="817.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="820.20" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%; -0.04%)</title><rect x="831.2" y="405" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="834.24" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,784 samples, 91.82%; 0.00%)</title><rect x="87.2" y="661" width="1083.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="671.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="813.1" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.12" y="335.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (9 samples, 0.17%; 0.00%)</title><rect x="45.8" y="405" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="335.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (8 samples, 0.15%; 0.00%)</title><rect x="806.3" y="229" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="809.33" y="239.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (1 samples, 0.02%; +0.02%)</title><rect x="495.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="498.82" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; 0.00%)</title><rect x="985.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="988.71" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="877.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="879.99" y="543.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%; 0.00%)</title><rect x="23.1" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.14" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (9 samples, 0.17%; +0.02%)</title><rect x="866.8" y="485" width="2.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="869.80" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.12%; -0.06%)</title><rect x="566.0" y="405" width="1.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="569.03" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="669.1" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="672.08" y="559.5" ></text>
</g>
<g >
<title>std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="616.1" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="619.08" y="511.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; +0.04%)</title><rect x="619.0" y="485" width="1.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="622.02" y="495.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="1029.2" y="357" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1032.19" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="493.8" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="496.78" y="383.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (2 samples, 0.04%; -0.02%)</title><rect x="373.5" y="277" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="376.51" y="287.5" ></text>
</g>
<g >
<title>db::query_context::execute_cql&lt;utils::UUID&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;&amp;, std::chrono::time_point&lt;db_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;, long&amp;, long&amp;, data_value&gt; (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (3 samples, 0.06%; 0.00%)</title><rect x="602.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.72" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="667.0" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="670.04" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; -0.06%)</title><rect x="192.5" y="357" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="195.55" y="367.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (9 samples, 0.17%; +0.02%)</title><rect x="132.5" y="485" width="2.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="135.53" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (53 samples, 1.02%; 0.00%)</title><rect x="711.4" y="597" width="12.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="714.43" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (2 samples, 0.04%; -0.08%)</title><rect x="302.6" y="373" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="305.62" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (1 samples, 0.02%; +0.02%)</title><rect x="1085.1" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1088.14" y="495.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::~_Bvector_base (1 samples, 0.02%; 0.00%)</title><rect x="68.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.43" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="328.4" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="331.44" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::back (1 samples, 0.02%; 0.00%)</title><rect x="52.1" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.13" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="669.3" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="672.31" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; -0.02%)</title><rect x="699.9" y="565" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="702.88" y="575.5" ></text>
</g>
<g >
<title>seastar::make_file_impl (1 samples, 0.02%; +0.02%)</title><rect x="686.7" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="689.74" y="591.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="272.5" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="275.50" y="303.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_response_handler (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.93" y="287.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (202 samples, 3.88%; 0.00%)</title><rect x="22.2" y="549" width="45.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="559.5" >cql3..</text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="47.6" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.60" y="271.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1077.7" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1080.66" y="351.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="87.5" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="90.46" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="672.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="675.48" y="559.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (5 samples, 0.10%; 0.00%)</title><rect x="372.4" y="261" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="375.38" y="271.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; +0.04%)</title><rect x="1111.2" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1114.18" y="479.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (7 samples, 0.13%; -0.02%)</title><rect x="195.9" y="357" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="198.95" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; -0.02%)</title><rect x="739.3" y="485" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="742.29" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt; &gt;::invoke&lt;table::seal_active_memtable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (2 samples, 0.04%; +0.02%)</title><rect x="1029.6" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1032.65" y="367.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="1168.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.03" y="607.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%; +0.04%)</title><rect x="313.7" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="316.72" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.06%)</title><rect x="658.7" y="581" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="661.66" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (21 samples, 0.40%; +0.12%)</title><rect x="829.4" y="421" width="4.8" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="832.43" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (3 samples, 0.06%; +0.04%)</title><rect x="707.6" y="549" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="710.58" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="867.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="870.03" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="803.6" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="806.61" y="287.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (1 samples, 0.02%; -0.06%)</title><rect x="575.8" y="517" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="578.77" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="829.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.98" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="479.5" ></text>
</g>
<g >
<title>boost::range::remove_erase_if&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="335.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%; +0.02%)</title><rect x="89.7" y="613" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="92.72" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (12 samples, 0.23%; -0.04%)</title><rect x="442.8" y="357" width="2.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="445.82" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1167.6" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1170.58" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.04%)</title><rect x="1094.0" y="453" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1096.97" y="463.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (4 samples, 0.08%; +0.02%)</title><rect x="414.3" y="277" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="417.28" y="287.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;logalloc::allocating_section::operator (1 samples, 0.02%; +0.02%)</title><rect x="84.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="87.06" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::create_clustering_ranges (2 samples, 0.04%; 0.00%)</title><rect x="868.8" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.84" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="660.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="663.02" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (4 samples, 0.08%; +0.08%)</title><rect x="131.2" y="501" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="134.17" y="511.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; 0.00%)</title><rect x="1037.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1040.57" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (122 samples, 2.34%; -0.02%)</title><rect x="585.5" y="517" width="27.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="588.50" y="527.5" >s..</text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; -0.02%)</title><rect x="642.1" y="517" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="645.13" y="527.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%; +0.02%)</title><rect x="86.1" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="89.10" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="303.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (7 samples, 0.13%; +0.02%)</title><rect x="283.6" y="277" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="286.60" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::raw_value_view&gt;::allocate (2 samples, 0.04%; +0.04%)</title><rect x="853.0" y="469" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="855.99" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="97.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="99.97" y="559.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (5 samples, 0.10%; +0.02%)</title><rect x="188.9" y="325" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="191.93" y="335.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.8" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.75" y="239.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="1123.0" y="293" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1125.96" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; -0.02%)</title><rect x="135.5" y="549" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="138.47" y="559.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; -0.06%)</title><rect x="12.9" y="677" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="15.94" y="687.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1120.2" y="261" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="271.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; +0.04%)</title><rect x="810.0" y="229" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="812.95" y="239.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; +0.02%)</title><rect x="200.2" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="203.25" y="351.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (58 samples, 1.11%; 0.00%)</title><rect x="799.5" y="357" width="13.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.54" y="367.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (3 samples, 0.06%; 0.00%)</title><rect x="1131.6" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="764.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="767.88" y="495.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="689.5" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="692.46" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::register_cdc_operation_result_tracker (1 samples, 0.02%; +0.02%)</title><rect x="1130.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1133.66" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (73 samples, 1.40%; 0.00%)</title><rect x="891.9" y="501" width="16.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.94" y="511.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%; +0.02%)</title><rect x="1125.0" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1128.00" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1038.7" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1041.71" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="303.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (9 samples, 0.17%; 0.00%)</title><rect x="73.0" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.96" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="900.5" y="389" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="903.55" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="981.4" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="984.40" y="399.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="367.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="656.8" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="659.85" y="591.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.06%)</title><rect x="617.0" y="501" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="619.99" y="511.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1079.5" y="389" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1082.47" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6 samples, 0.12%; +0.02%)</title><rect x="1151.0" y="517" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.04" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="80.4" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.44" y="559.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (15 samples, 0.29%; -0.02%)</title><rect x="918.7" y="453" width="3.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="921.67" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="660.2" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="663.25" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="584.4" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="587.37" y="527.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (3 samples, 0.06%; -0.02%)</title><rect x="918.0" y="453" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="920.99" y="463.5" ></text>
</g>
<g >
<title>sstables::sstables_manager::configure_writer (1 samples, 0.02%; +0.02%)</title><rect x="697.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="700.62" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="290.4" y="277" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="293.39" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (5 samples, 0.10%; +0.08%)</title><rect x="1095.3" y="485" width="1.2" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="1098.33" y="495.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%; +0.02%)</title><rect x="27.9" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="30.89" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (8 samples, 0.15%; 0.00%)</title><rect x="132.8" y="469" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="135.76" y="479.5" ></text>
</g>
<g >
<title>ser::mutation_partition__static_row&lt;bytes_ostream&gt;::start_columns (1 samples, 0.02%; +0.02%)</title><rect x="1131.8" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1134.79" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="863.2" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="866.18" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::operator++ (1 samples, 0.02%; +0.02%)</title><rect x="50.3" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="53.31" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="63.0" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="66.00" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="867.7" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.71" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%; -0.02%)</title><rect x="800.9" y="309" width="2.0" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="803.89" y="319.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (1 samples, 0.02%; +0.02%)</title><rect x="796.4" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="799.36" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="198.4" y="341" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="201.44" y="351.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (10 samples, 0.19%; -0.04%)</title><rect x="690.4" y="581" width="2.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="693.37" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="85.2" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.19" y="383.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="786.9" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.85" y="383.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (7 samples, 0.13%; +0.02%)</title><rect x="400.2" y="245" width="1.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="403.24" y="255.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="327.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="330.76" y="463.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="799.8" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="802.76" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (59 samples, 1.13%; +0.02%)</title><rect x="1011.8" y="341" width="13.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1014.75" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.28" y="399.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,784 samples, 91.82%; 0.00%)</title><rect x="87.2" y="677" width="1083.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="687.5" >seastar::app_template::run</text>
</g>
<g >
<title>partition_snapshot::slide_to_oldest (3 samples, 0.06%; +0.04%)</title><rect x="597.7" y="373" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="600.74" y="383.5" ></text>
</g>
<g >
<title>__start_context (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="645" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="287.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="493.1" y="373" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="496.10" y="383.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="319.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="322.38" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (31 samples, 0.60%; -0.02%)</title><rect x="1127.0" y="437" width="7.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1130.04" y="447.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="195.7" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="198.72" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="48.3" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="51.28" y="319.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::get_deleter (1 samples, 0.02%; 0.00%)</title><rect x="65.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.49" y="463.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="994.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="997.31" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="77.5" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="80.49" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; -0.02%)</title><rect x="55.1" y="357" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="58.07" y="367.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="722.8" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="725.76" y="575.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="40.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.35" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.02%)</title><rect x="280.7" y="309" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="283.65" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (17 samples, 0.33%; 0.00%)</title><rect x="435.8" y="293" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.80" y="303.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="947.2" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="950.21" y="431.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="766.5" y="501" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="769.47" y="511.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.98" y="319.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (716 samples, 13.74%; -0.02%)</title><rect x="165.8" y="485" width="162.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="168.82" y="495.5" >merging_reader&lt;mutat..</text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; 0.00%)</title><rect x="1039.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1042.39" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (13 samples, 0.25%; +0.12%)</title><rect x="246.7" y="213" width="2.9" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="249.68" y="223.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="542.0" y="293" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.02" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::construct&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.56" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="786.6" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.63" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="776.7" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="779.66" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (18 samples, 0.35%; +0.15%)</title><rect x="964.2" y="437" width="4.1" height="15.0" fill="rgb(255,70,70)" rx="2" ry="2" />
<text  x="967.19" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="638.7" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.73" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;cql3::expr::expression&gt;::allocator (1 samples, 0.02%; 0.00%)</title><rect x="60.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.28" y="367.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="870.2" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.20" y="367.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (30 samples, 0.58%; -0.02%)</title><rect x="1119.6" y="421" width="6.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1122.56" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.07" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (14 samples, 0.27%; +0.06%)</title><rect x="987.7" y="373" width="3.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="990.75" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;service::storage_proxy&gt;::stop (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1144.7" y="581" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1147.70" y="591.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (73 samples, 1.40%; +0.21%)</title><rect x="177.4" y="389" width="16.5" height="15.0" fill="rgb(255,17,17)" rx="2" ry="2" />
<text  x="180.37" y="399.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="823.5" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.54" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (26 samples, 0.50%; 0.00%)</title><rect x="1127.5" y="421" width="5.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.49" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="559.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (4 samples, 0.08%; +0.08%)</title><rect x="336.8" y="389" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="339.82" y="399.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="831.2" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="834.24" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%; -0.12%)</title><rect x="834.4" y="421" width="1.1" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="837.41" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="277" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.10%)</title><rect x="853.9" y="437" width="1.8" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="856.89" y="447.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (12 samples, 0.23%; +0.02%)</title><rect x="809.5" y="245" width="2.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="812.50" y="255.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (1 samples, 0.02%; 0.00%)</title><rect x="476.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="479.11" y="415.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="843.2" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="846.25" y="447.5" ></text>
</g>
<g >
<title>local_schema_registry (2 samples, 0.04%; +0.04%)</title><rect x="963.7" y="453" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="966.74" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="239.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.10%; +0.10%)</title><rect x="967.1" y="421" width="1.2" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="970.14" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.10%; +0.04%)</title><rect x="455.3" y="453" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="458.27" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="139.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.10" y="415.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (5 samples, 0.10%; +0.04%)</title><rect x="564.4" y="357" width="1.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="567.44" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (4 samples, 0.08%; +0.04%)</title><rect x="934.5" y="469" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="937.52" y="479.5" ></text>
</g>
<g >
<title>memtable::apply (23 samples, 0.44%; -0.02%)</title><rect x="1119.6" y="357" width="5.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1122.56" y="367.5" ></text>
</g>
<g >
<title>seastar::semaphore_units&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::return_all (2 samples, 0.04%; -0.02%)</title><rect x="98.6" y="533" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="101.56" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; -0.04%)</title><rect x="928.0" y="485" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="930.95" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (5 samples, 0.10%; 0.00%)</title><rect x="771.0" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.00" y="447.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (4 samples, 0.08%; +0.04%)</title><rect x="1079.0" y="405" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1082.02" y="415.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="557.6" y="421" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="560.65" y="431.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; +0.02%)</title><rect x="371.0" y="277" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="374.02" y="287.5" ></text>
</g>
<g >
<title>cql3::expr::constant::make_bool (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.51" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="1000.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1003.66" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (8 samples, 0.15%; 0.00%)</title><rect x="1131.6" y="325" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="335.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (55 samples, 1.06%; +0.12%)</title><rect x="314.4" y="437" width="12.5" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="317.40" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="695.8" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="636.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.46" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.06%)</title><rect x="1164.4" y="549" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1167.41" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::row_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.1" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1127.09" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; -0.02%)</title><rect x="184.8" y="325" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="187.85" y="335.5" ></text>
</g>
<g >
<title>std::apply&lt;distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (6 samples, 0.12%; 0.00%)</title><rect x="654.1" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="657.13" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (1 samples, 0.02%; +0.02%)</title><rect x="264.1" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="267.12" y="255.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%; -0.02%)</title><rect x="832.8" y="405" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="835.83" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.02%)</title><rect x="1007.5" y="293" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1010.45" y="303.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.06%)</title><rect x="979.8" y="405" width="2.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="982.82" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (3 samples, 0.06%; +0.04%)</title><rect x="346.3" y="341" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="349.33" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="63.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.45" y="447.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="575.5" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="578.54" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.05" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (1 samples, 0.02%; -0.02%)</title><rect x="480.0" y="357" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="482.96" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.3" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="676.3" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="679.33" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; 0.00%)</title><rect x="652.5" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="655.55" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (456 samples, 8.75%; 0.00%)</title><rect x="195.0" y="373" width="103.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="198.04" y="383.5" >logalloc::al..</text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%; 0.00%)</title><rect x="85.4" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1163.5" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1166.50" y="559.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="27.7" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="30.67" y="383.5" ></text>
</g>
<g >
<title>gms::gossiper::is_alive (4 samples, 0.08%; +0.04%)</title><rect x="1077.2" y="357" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1080.21" y="367.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="540.2" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="543.21" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (11 samples, 0.21%; +0.02%)</title><rect x="822.0" y="437" width="2.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="824.96" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (2 samples, 0.04%; +0.04%)</title><rect x="287.0" y="293" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="289.99" y="303.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1127.0" y="421" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.04" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_keyspace_statement, std::default_delete&lt;cql3::statements::alter_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.9" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="68.94" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="870.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.20" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="84.3" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::open_directory (1 samples, 0.02%; +0.02%)</title><rect x="697.2" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="700.16" y="399.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%; +0.02%)</title><rect x="754.7" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="757.69" y="431.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, ser::range_tombstone_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.9" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1126.87" y="319.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.94" y="239.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (3 samples, 0.06%; +0.04%)</title><rect x="568.7" y="341" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="571.74" y="351.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="565.8" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="568.80" y="399.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::~metric_groups_impl (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="52.1" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="55.13" y="367.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%; +0.02%)</title><rect x="736.1" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="739.12" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; +0.02%)</title><rect x="865.0" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.99" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; +0.02%)</title><rect x="266.4" y="229" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="269.38" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1135.2" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1138.19" y="591.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="719.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.56" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="48.5" y="309" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.50" y="319.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="928.6" y="485" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="931.63" y="495.5" ></text>
</g>
<g >
<title>locator::everywhere_replication_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="511.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.12%; 0.00%)</title><rect x="1035.3" y="341" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.31" y="351.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (54 samples, 1.04%; -0.06%)</title><rect x="476.3" y="405" width="12.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="479.34" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; -0.04%)</title><rect x="1143.3" y="549" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1146.34" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="569.4" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="572.42" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="1137.7" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1140.68" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (3 samples, 0.06%; -0.02%)</title><rect x="643.5" y="533" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="646.49" y="543.5" ></text>
</g>
<g >
<title>abstract_type::get_string (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="1168.5" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1171.48" y="559.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%; +0.02%)</title><rect x="1144.9" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1147.93" y="591.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="802.5" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="805.48" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1017.4" y="229" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1020.42" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.87" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (2 samples, 0.04%; -0.02%)</title><rect x="488.6" y="405" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="491.57" y="415.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (1 samples, 0.02%; +0.02%)</title><rect x="645.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="648.75" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="952.6" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="955.64" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="825.8" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="828.81" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="802.9" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="805.93" y="319.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1119.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (4 samples, 0.08%; +0.06%)</title><rect x="614.5" y="517" width="0.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="617.50" y="527.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.0" y="245" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1135.02" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (9 samples, 0.17%; 0.00%)</title><rect x="408.2" y="293" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="411.17" y="303.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="696.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.03" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%; 0.00%)</title><rect x="685.2" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="688.16" y="559.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (485 samples, 9.31%; -0.04%)</title><rect x="336.8" y="405" width="109.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="339.82" y="415.5" >std::__invoke..</text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; -0.06%)</title><rect x="334.1" y="469" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="337.10" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%; -0.02%)</title><rect x="1138.4" y="597" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1141.36" y="607.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.02%)</title><rect x="685.2" y="533" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="688.16" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="255.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; +0.02%)</title><rect x="310.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="313.32" y="447.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (5 samples, 0.10%; -0.04%)</title><rect x="1113.4" y="485" width="1.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1116.45" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.12%; -0.02%)</title><rect x="690.6" y="549" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="693.60" y="559.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="207.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="82.9" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.93" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (9 samples, 0.17%; 0.00%)</title><rect x="1131.3" y="357" width="2.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.34" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; -0.06%)</title><rect x="266.2" y="245" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="269.16" y="255.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (3 samples, 0.06%; +0.04%)</title><rect x="337.7" y="389" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="340.73" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (2 samples, 0.04%; +0.02%)</title><rect x="57.1" y="357" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="60.11" y="367.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1123.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.64" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="287.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (22 samples, 0.42%; -0.06%)</title><rect x="185.8" y="357" width="4.9" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="188.75" y="367.5" ></text>
</g>
<g >
<title>position_in_partition::equal_compare::compare&lt;position_in_partition, position_in_partition_view&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.15" y="639.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="21.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.32" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="75.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.91" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (9 samples, 0.17%; +0.04%)</title><rect x="787.8" y="405" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="790.76" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (4 samples, 0.08%; +0.08%)</title><rect x="611.8" y="469" width="0.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="614.78" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="816.7" y="357" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="819.75" y="367.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="899.4" y="373" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="902.42" y="383.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (5 samples, 0.10%; -0.02%)</title><rect x="564.4" y="373" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="567.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1151.7" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.72" y="495.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="39.9" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="42.90" y="271.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; +0.04%)</title><rect x="1015.4" y="245" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1018.38" y="255.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::set&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="94.7" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="97.71" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (9 samples, 0.17%; +0.04%)</title><rect x="646.4" y="581" width="2.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="649.43" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="577.1" y="517" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="580.12" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.02%)</title><rect x="206.6" y="277" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="209.59" y="287.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (7 samples, 0.13%; -0.02%)</title><rect x="281.1" y="277" width="1.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="284.11" y="287.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (106 samples, 2.03%; -0.06%)</title><rect x="39.7" y="469" width="24.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="42.67" y="479.5" >c..</text>
</g>
<g >
<title>database::apply_with_commitlog (25 samples, 0.48%; -0.02%)</title><rect x="1119.6" y="405" width="5.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1122.56" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="593.4" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="596.43" y="367.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="84.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.06" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; 0.00%)</title><rect x="635.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="638.79" y="543.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt;::StackType (1 samples, 0.02%; 0.00%)</title><rect x="23.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.36" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (2 samples, 0.04%; -0.08%)</title><rect x="587.3" y="437" width="0.5" height="15.0" fill="rgb(140,140,255)" rx="2" ry="2" />
<text  x="590.32" y="447.5" ></text>
</g>
<g >
<title>auth::get_permissions (5 samples, 0.10%; 0.00%)</title><rect x="79.3" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.31" y="479.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (41 samples, 0.79%; +0.06%)</title><rect x="514.4" y="389" width="9.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="517.39" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="51.4" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.45" y="175.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="26.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.76" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="928.2" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="931.18" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="57.3" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="60.34" y="319.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="581" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.79" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::insertStatement (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="399.5" ></text>
</g>
<g >
<title>std::apply&lt;table::try_flush_memtable_to_sstable (1 samples, 0.02%; 0.00%)</title><rect x="697.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.62" y="447.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (3 samples, 0.06%; 0.00%)</title><rect x="99.5" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.46" y="511.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; -0.02%)</title><rect x="776.2" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="779.21" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_service_level_statement, std::default_delete&lt;cql3::statements::alter_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.2" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="69.17" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1 samples, 0.02%; +0.02%)</title><rect x="879.3" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="882.26" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (41 samples, 0.79%; -0.04%)</title><rect x="892.8" y="453" width="9.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="895.85" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (2 samples, 0.04%; +0.04%)</title><rect x="216.3" y="293" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="219.33" y="303.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (1 samples, 0.02%; 0.00%)</title><rect x="627.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.18" y="511.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; +0.02%)</title><rect x="864.3" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.31" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (3 samples, 0.06%; 0.00%)</title><rect x="84.3" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (10 samples, 0.19%; 0.00%)</title><rect x="684.5" y="581" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.48" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (25 samples, 0.48%; -0.02%)</title><rect x="681.1" y="597" width="5.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="684.08" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (2 samples, 0.04%; 0.00%)</title><rect x="86.8" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="89.78" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; -0.02%)</title><rect x="1094.9" y="469" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1097.88" y="479.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (6 samples, 0.12%; +0.02%)</title><rect x="752.9" y="405" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="755.88" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="165" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="175.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="572.8" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="575.82" y="431.5" ></text>
</g>
<g >
<title>database::has_keyspace (5 samples, 0.10%; -0.04%)</title><rect x="834.4" y="453" width="1.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="837.41" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.8" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="271.5" ></text>
</g>
<g >
<title>main (4,784 samples, 91.82%; 0.00%)</title><rect x="87.2" y="709" width="1083.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.23" y="719.5" >main</text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (9 samples, 0.17%; -0.04%)</title><rect x="822.4" y="421" width="2.0" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="825.41" y="431.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (6 samples, 0.12%; 0.00%)</title><rect x="11.6" y="677" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.59" y="687.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; 0.00%)</title><rect x="650.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="653.51" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (66 samples, 1.27%; +0.02%)</title><rect x="44.7" y="437" width="14.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="47.65" y="447.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="399.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; +0.02%)</title><rect x="352.2" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="355.22" y="319.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (5 samples, 0.10%; -0.02%)</title><rect x="898.7" y="389" width="1.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="901.74" y="399.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="618.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="621.57" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="208.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="210.95" y="319.5" ></text>
</g>
<g >
<title>utils::crc32::process (1 samples, 0.02%; 0.00%)</title><rect x="1125.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.45" y="351.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="399.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.56" y="431.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::get_bound_terms (1 samples, 0.02%; +0.02%)</title><rect x="736.3" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="739.35" y="559.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="916.0" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="918.95" y="463.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="71.89" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1019.9" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1022.91" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="692.2" y="549" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="695.18" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1130.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1133.21" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (17 samples, 0.33%; 0.00%)</title><rect x="987.3" y="405" width="3.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="990.29" y="415.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="1029.0" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1031.97" y="367.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (51 samples, 0.98%; 0.00%)</title><rect x="123.2" y="549" width="11.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="126.24" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (11 samples, 0.21%; 0.00%)</title><rect x="132.1" y="501" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="135.08" y="511.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (1 samples, 0.02%; 0.00%)</title><rect x="866.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.35" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; -0.02%)</title><rect x="692.0" y="565" width="0.6" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="694.95" y="575.5" ></text>
</g>
<g >
<title>partition_key::partition_key (1 samples, 0.02%; +0.02%)</title><rect x="1121.1" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1124.15" y="335.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (30 samples, 0.58%; +0.02%)</title><rect x="577.6" y="517" width="6.8" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="580.58" y="527.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%; +0.04%)</title><rect x="249.9" y="197" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="252.85" y="207.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1098.0" y="453" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1101.05" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::restriction::restriction (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.51" y="447.5" ></text>
</g>
<g >
<title>database::has_keyspace (12 samples, 0.23%; 0.00%)</title><rect x="849.1" y="501" width="2.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="852.14" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (6 samples, 0.12%; +0.12%)</title><rect x="406.1" y="293" width="1.4" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="409.13" y="303.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="335.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="17.2" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.25" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="678.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="681.36" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="277" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="287.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="75.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.23" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="723.4" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.44" y="607.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (3 samples, 0.06%; +0.02%)</title><rect x="460.0" y="501" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="463.03" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="351.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (29 samples, 0.56%; +0.06%)</title><rect x="935.7" y="517" width="6.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="938.65" y="527.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (1 samples, 0.02%; +0.02%)</title><rect x="445.1" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="448.08" y="335.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (382 samples, 7.33%; +0.10%)</title><rect x="347.2" y="357" width="86.6" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="350.24" y="367.5" >mutation_f..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.04%)</title><rect x="427.9" y="293" width="0.4" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="430.87" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; 0.00%)</title><rect x="861.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.37" y="591.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::column_identifier_raw (1 samples, 0.02%; +0.02%)</title><rect x="44.4" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="47.43" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="620.8" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="623.84" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="866.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.35" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="73.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.42" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="673.6" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="676.61" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (2 samples, 0.04%; +0.04%)</title><rect x="1137.9" y="597" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1140.91" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::swap_tree (1 samples, 0.02%; +0.02%)</title><rect x="1120.2" y="165" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.24" y="175.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (3 samples, 0.06%; +0.02%)</title><rect x="641.4" y="485" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="644.45" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="335.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; +0.02%)</title><rect x="783.2" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="786.23" y="463.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (1 samples, 0.02%; 0.00%)</title><rect x="739.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="742.52" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="815.2" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="818.16" y="303.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="245" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="255.5" ></text>
</g>
<g >
<title>ser::start_frame&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.7" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.68" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="65.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.72" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="749.5" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="752.48" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (7 samples, 0.13%; +0.04%)</title><rect x="776.9" y="437" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="779.89" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="251.9" y="181" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="254.89" y="191.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (4 samples, 0.08%; 0.00%)</title><rect x="695.8" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="698.80" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (21 samples, 0.40%; +0.10%)</title><rect x="299.7" y="389" width="4.7" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="302.68" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="759.4" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="762.45" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="816.1" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="819.07" y="383.5" ></text>
</g>
<g >
<title>posix_memalign (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="303.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (3 samples, 0.06%; 0.00%)</title><rect x="1063.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1066.39" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (4 samples, 0.08%; 0.00%)</title><rect x="84.3" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="415.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; -0.02%)</title><rect x="269.1" y="261" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="272.10" y="271.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="43.3" y="245" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="255.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%; -0.04%)</title><rect x="1032.1" y="357" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="1035.14" y="367.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; +0.02%)</title><rect x="1168.3" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1171.26" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="567.8" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="570.84" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%; +0.02%)</title><rect x="88.8" y="613" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="91.82" y="623.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="463.5" ></text>
</g>
<g >
<title>do_parse_schema_tables (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const&amp;, seastar::shared_ptr&lt;abstract_type const&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="415.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (21 samples, 0.40%; 0.00%)</title><rect x="11.6" y="709" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.59" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="87.51" y="207.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="492.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="495.42" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::batch_statement, std::default_delete&lt;cql3::statements::raw::batch_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="65.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="68.26" y="463.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_channel (1 samples, 0.02%; +0.02%)</title><rect x="31.3" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="34.29" y="367.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="752.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.43" y="415.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%; 0.00%)</title><rect x="78.6" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.63" y="543.5" ></text>
</g>
<g >
<title>seastar::timer_set&lt;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;, &amp;seastar::timer&lt;std::chrono::_V2::steady_clock&gt;::_link&gt;::expire (2 samples, 0.04%; 0.00%)</title><rect x="1170.1" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1173.07" y="543.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (3 samples, 0.06%; -0.06%)</title><rect x="627.4" y="485" width="0.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="630.40" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="642.4" y="517" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="645.35" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (2 samples, 0.04%; 0.00%)</title><rect x="680.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.63" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (3 samples, 0.06%; -0.04%)</title><rect x="598.9" y="357" width="0.6" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="601.87" y="367.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; +0.02%)</title><rect x="727.7" y="597" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="730.74" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (20 samples, 0.38%; +0.13%)</title><rect x="229.9" y="197" width="4.5" height="15.0" fill="rgb(255,87,87)" rx="2" ry="2" />
<text  x="232.92" y="207.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::resize (2 samples, 0.04%; 0.00%)</title><rect x="82.5" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.48" y="575.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="19.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="22.29" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="726.2" y="597" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="729.15" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="724.6" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="727.57" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="814.9" y="309" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="817.94" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="76.8" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="79.81" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (3 samples, 0.06%; 0.00%)</title><rect x="661.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="664.83" y="591.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.12%; -0.06%)</title><rect x="442.8" y="341" width="1.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="445.82" y="351.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (8 samples, 0.15%; 0.00%)</title><rect x="1047.8" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.77" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="736.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.80" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%; 0.00%)</title><rect x="717.3" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="720.32" y="527.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (4 samples, 0.08%; 0.00%)</title><rect x="1120.2" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; 0.00%)</title><rect x="1022.6" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1025.63" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (6 samples, 0.12%; +0.04%)</title><rect x="250.5" y="165" width="1.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="253.53" y="175.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1129.5" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.53" y="255.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="565" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="575.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;char*, __gnu_cxx::__ops::_Iter_pred&lt;boost::algorithm::detail::is_any_ofF&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="303.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="47.6" y="245" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="50.60" y="255.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="559.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.77" y="735.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="303.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (18 samples, 0.35%; +0.08%)</title><rect x="264.3" y="261" width="4.1" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="267.35" y="271.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; +0.02%)</title><rect x="313.5" y="453" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="316.49" y="463.5" ></text>
</g>
<g >
<title>auth::resource::resource (7 samples, 0.13%; 0.00%)</title><rect x="778.7" y="485" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.70" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (2 samples, 0.04%; -0.02%)</title><rect x="1170.1" y="549" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1173.07" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="856.8" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.84" y="543.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (5 samples, 0.10%; -0.02%)</title><rect x="255.3" y="245" width="1.1" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="258.29" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="372.2" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="375.15" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="543.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="812.4" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="815.45" y="303.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="176.7" y="357" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="179.69" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (79 samples, 1.52%; -0.04%)</title><rect x="662.7" y="597" width="17.9" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="665.74" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="800.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="803.21" y="335.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.29" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="901.2" y="405" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="904.23" y="415.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1166.9" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1169.90" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.04%)</title><rect x="45.8" y="229" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="48.79" y="239.5" ></text>
</g>
<g >
<title>mutation_partition::apply_monotonically (2 samples, 0.04%; 0.00%)</title><rect x="1124.3" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.32" y="335.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (8 samples, 0.15%; 0.00%)</title><rect x="1128.8" y="357" width="1.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.85" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="867.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="870.48" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="662.1" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="665.06" y="543.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (1 samples, 0.02%; 0.00%)</title><rect x="84.5" y="229" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.51" y="239.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; -0.04%)</title><rect x="309.0" y="421" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="311.96" y="431.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (5 samples, 0.10%; +0.04%)</title><rect x="554.5" y="389" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="557.48" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1103.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1106.71" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="1019.0" y="293" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1022.00" y="303.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; +0.02%)</title><rect x="1111.6" y="485" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1114.64" y="495.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="544.7" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="547.74" y="319.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; -0.06%)</title><rect x="490.6" y="373" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="493.61" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (75 samples, 1.44%; +0.12%)</title><rect x="1089.0" y="517" width="17.0" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="1091.99" y="527.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (2 samples, 0.04%; 0.00%)</title><rect x="19.1" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="575.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="43.3" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.29" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (2 samples, 0.04%; +0.04%)</title><rect x="750.8" y="485" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="753.84" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (6 samples, 0.12%; 0.00%)</title><rect x="690.6" y="565" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.60" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::shared_ptr_count_for&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="479.5" ></text>
</g>
<g >
<title>row::row (157 samples, 3.01%; +0.02%)</title><rect x="219.7" y="245" width="35.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="222.73" y="255.5" >row..</text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.51" y="383.5" ></text>
</g>
<g >
<title>db::schema_tables::fill_column_info (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="511.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (42 samples, 0.81%; +0.02%)</title><rect x="504.2" y="389" width="9.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="507.20" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="933.2" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="936.16" y="495.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="1054.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1057.11" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.12%; +0.02%)</title><rect x="838.7" y="533" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="841.72" y="543.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="721.2" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="724.17" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="26.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.31" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (3 samples, 0.06%; +0.02%)</title><rect x="458.2" y="485" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="461.22" y="495.5" ></text>
</g>
<g >
<title>utils::utf8::validate (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="319.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="734.5" y="533" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="737.53" y="543.5" ></text>
</g>
<g >
<title>database::apply_in_memory (25 samples, 0.48%; 0.00%)</title><rect x="1119.6" y="389" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="399.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (1 samples, 0.02%; +0.02%)</title><rect x="118.7" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="121.71" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (7 samples, 0.13%; 0.00%)</title><rect x="125.1" y="501" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="128.06" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::free_span (1 samples, 0.02%; +0.02%)</title><rect x="709.6" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="712.62" y="575.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="351.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (2 samples, 0.04%; 0.00%)</title><rect x="847.8" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.78" y="527.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (421 samples, 8.08%; 0.00%)</title><rect x="743.4" y="533" width="95.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="746.37" y="543.5" >cql3::query..</text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="922.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="925.07" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="756.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.28" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (15 samples, 0.29%; +0.02%)</title><rect x="852.3" y="517" width="3.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="855.31" y="527.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (2 samples, 0.04%; 0.00%)</title><rect x="540.0" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.98" y="319.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.10%; 0.00%)</title><rect x="79.3" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.31" y="495.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.12%)</title><rect x="639.9" y="517" width="0.4" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="642.86" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="653.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="656.90" y="559.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="74.3" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="77.32" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::optional&lt;clustering_key_prefix&gt; &gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="457.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="460.77" y="495.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%; 0.00%)</title><rect x="1125.7" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.68" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; 0.00%)</title><rect x="291.1" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="294.07" y="287.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.02%)</title><rect x="676.8" y="581" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="679.78" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (8 samples, 0.15%; 0.00%)</title><rect x="69.1" y="485" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.11" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="677.0" y="581" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="680.01" y="591.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; +0.02%)</title><rect x="49.0" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="51.96" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="826.9" y="469" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="829.94" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.97" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="589.6" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="592.58" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="528.4" y="373" width="0.9" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="531.43" y="383.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (13 samples, 0.25%; 0.00%)</title><rect x="97.2" y="565" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="100.20" y="575.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; +0.02%)</title><rect x="1169.6" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1172.62" y="591.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="195.7" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="198.72" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;std::optional&lt;managed_bytes&gt; &gt;  (1 samples, 0.02%; +0.02%)</title><rect x="904.6" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="907.63" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (2 samples, 0.04%; 0.00%)</title><rect x="17.9" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="415.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="296.3" y="293" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="299.28" y="303.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="367.5" ></text>
</g>
<g >
<title>mutation_querier::consume (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.08" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="1050.3" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1053.26" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="826.0" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.03" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (5 samples, 0.10%; 0.00%)</title><rect x="571.9" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.92" y="447.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (10 samples, 0.19%; -0.04%)</title><rect x="188.0" y="341" width="2.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="191.02" y="351.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; +0.02%)</title><rect x="697.4" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="700.39" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (2 samples, 0.04%; -0.02%)</title><rect x="928.4" y="501" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="931.41" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (35 samples, 0.67%; 0.00%)</title><rect x="356.1" y="309" width="7.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="359.07" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="80.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.44" y="543.5" ></text>
</g>
<g >
<title>sstables::sstable_writer::consume (1 samples, 0.02%; +0.02%)</title><rect x="86.6" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="89.55" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="714.4" y="533" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="717.38" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.10%; -0.06%)</title><rect x="913.7" y="437" width="1.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="916.69" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (5 samples, 0.10%; +0.04%)</title><rect x="670.0" y="517" width="1.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="672.98" y="527.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; -0.02%)</title><rect x="157.7" y="533" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="160.67" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (2 samples, 0.04%; +0.02%)</title><rect x="260.7" y="213" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="263.72" y="223.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="650.7" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="653.73" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="335.7" y="373" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="338.69" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_view_update_backlog (1 samples, 0.02%; 0.00%)</title><rect x="723.4" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.44" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;column_definition const*, std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt;, std::_Select1st&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt;, cql3::restrictions::single_column_restrictions::column_definition_comparator, std::allocator&lt;std::pair&lt;column_definition const* const, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; &gt; &gt;::_M_emplace_hint_unique&lt;column_definition const*, seastar::shared_ptr&lt;cql3::restrictions::single_column_restriction&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.87" y="399.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; +0.02%)</title><rect x="547.2" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="550.23" y="319.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="696.9" y="581" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.94" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (3 samples, 0.06%; 0.00%)</title><rect x="46.5" y="277" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.46" y="287.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; +0.02%)</title><rect x="25.4" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="28.40" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="65.7" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="68.72" y="447.5" ></text>
</g>
<g >
<title>table::make_reader (1 samples, 0.02%; +0.02%)</title><rect x="573.3" y="469" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="576.27" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::add_operation (2 samples, 0.04%; 0.00%)</title><rect x="70.9" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.93" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; +0.02%)</title><rect x="1037.8" y="389" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1040.80" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (45 samples, 0.86%; +0.13%)</title><rect x="537.3" y="357" width="10.2" height="15.0" fill="rgb(255,87,87)" rx="2" ry="2" />
<text  x="540.26" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data (1 samples, 0.02%; 0.00%)</title><rect x="63.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.45" y="431.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="287.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%; +0.02%)</title><rect x="865.9" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="868.90" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="797.7" y="325" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="800.72" y="335.5" ></text>
</g>
<g >
<title>fmt::v7::detail::format_value&lt;char, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="21.3" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="24.32" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="56.4" y="277" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.43" y="287.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; -0.04%)</title><rect x="758.5" y="389" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="761.54" y="399.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (11 samples, 0.21%; -0.02%)</title><rect x="1075.9" y="405" width="2.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1078.85" y="415.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (9 samples, 0.17%; 0.00%)</title><rect x="684.7" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.71" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt;::~_Variant_storage (1 samples, 0.02%; -0.04%)</title><rect x="931.1" y="501" width="0.3" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="934.12" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cql3::expr::expression&gt;::new_allocator (1 samples, 0.02%; +0.02%)</title><rect x="60.3" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.28" y="351.5" ></text>
</g>
<g >
<title>cql3::relation::to_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="72.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.06" y="463.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="59.4" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="62.37" y="335.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.10%; +0.02%)</title><rect x="749.7" y="485" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="752.71" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1130.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.21" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (63 samples, 1.21%; 0.00%)</title><rect x="25.2" y="453" width="14.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.17" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="254.6" y="229" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="257.61" y="239.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;single_fragment_range&lt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="351.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="462.7" y="469" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="465.75" y="479.5" ></text>
</g>
<g >
<title>partition_entry::read (2 samples, 0.04%; +0.04%)</title><rect x="557.0" y="421" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="559.97" y="431.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.28" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (2 samples, 0.04%; 0.00%)</title><rect x="633.3" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="636.29" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::attributes::raw&gt; (2 samples, 0.04%; 0.00%)</title><rect x="62.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.77" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.08%)</title><rect x="988.4" y="341" width="2.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="991.43" y="351.5" ></text>
</g>
<g >
<title>db::get_cdc_generation_mutations (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.06" y="527.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (9 samples, 0.17%; 0.00%)</title><rect x="451.9" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.88" y="479.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="493.8" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="496.78" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::single_column_relation&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.87" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (1 samples, 0.02%; -0.06%)</title><rect x="446.2" y="373" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="449.21" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="851.6" y="453" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="854.63" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (21 samples, 0.40%; +0.08%)</title><rect x="507.8" y="357" width="4.8" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="510.82" y="367.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (4 samples, 0.08%; +0.02%)</title><rect x="922.5" y="469" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="925.52" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="645.5" y="533" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="648.52" y="543.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="935.0" y="437" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="937.98" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="41.3" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="67.1" y="485" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.07" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="814.9" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.94" y="335.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="52.6" y="197" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="55.58" y="207.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (7 samples, 0.13%; +0.04%)</title><rect x="688.3" y="581" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="691.33" y="591.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="50.8" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.77" y="351.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%; -0.06%)</title><rect x="1094.6" y="453" width="0.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1097.65" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="213" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="223.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (95 samples, 1.82%; -0.02%)</title><rect x="502.2" y="421" width="21.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="505.16" y="431.5" >d..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (41 samples, 0.79%; 0.00%)</title><rect x="892.8" y="437" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="895.85" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; +0.04%)</title><rect x="972.8" y="437" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="975.80" y="447.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%; -0.10%)</title><rect x="422.4" y="245" width="2.8" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="425.43" y="255.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (4 samples, 0.08%; 0.00%)</title><rect x="270.7" y="245" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="273.69" y="255.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="61.4" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.41" y="383.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.75%; +0.08%)</title><rect x="803.8" y="309" width="8.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="806.84" y="319.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1134.5" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1137.51" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="303.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%; +0.02%)</title><rect x="696.3" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.26" y="447.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="523.4" y="309" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="526.45" y="319.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; +0.02%)</title><rect x="60.1" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="63.05" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (4 samples, 0.08%; 0.00%)</title><rect x="46.2" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="319.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="367.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="677" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1192.77" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="581" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1 samples, 0.02%; +0.02%)</title><rect x="1189.1" y="725" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1192.09" y="735.5" ></text>
</g>
<g >
<title>ser::serializer&lt;utils::UUID&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.8" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1122.79" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="921.8" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="924.84" y="447.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (9 samples, 0.17%; 0.00%)</title><rect x="760.4" y="357" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.35" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="858.4" y="565" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="861.42" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="95.2" y="581" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="98.16" y="591.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,310 samples, 25.14%; 0.00%)</title><rect x="162.4" y="517" width="296.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="165.43" y="527.5" >query::consume_page&lt;</text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="676.6" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="679.55" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="110.6" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="113.56" y="591.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (7 samples, 0.13%; +0.06%)</title><rect x="1157.6" y="565" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1160.61" y="575.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (1 samples, 0.02%; +0.02%)</title><rect x="407.7" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="410.71" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::maybe_prepare_json_cache (1 samples, 0.02%; +0.02%)</title><rect x="872.5" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="875.46" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (292 samples, 5.60%; +0.02%)</title><rect x="16.8" y="677" width="66.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="19.79" y="687.5" >seastar..</text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (16 samples, 0.31%; +0.04%)</title><rect x="987.3" y="389" width="3.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="990.29" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="732.9" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="735.95" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::raw_value::to_managed_bytes_opt (3 samples, 0.06%; +0.04%)</title><rect x="906.4" y="453" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="909.44" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (1 samples, 0.02%; 0.00%)</title><rect x="723.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.66" y="591.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (6 samples, 0.12%; 0.00%)</title><rect x="84.1" y="517" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.06" y="527.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (2 samples, 0.04%; +0.02%)</title><rect x="646.0" y="565" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="648.98" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="158.1" y="517" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="161.12" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="986.4" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="989.39" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="83.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.61" y="447.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; +0.02%)</title><rect x="42.2" y="437" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="45.16" y="447.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="1130.9" y="389" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1133.89" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.02%; +0.02%)</title><rect x="1149.9" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1152.91" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; 0.00%)</title><rect x="835.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="838.09" y="415.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; 0.00%)</title><rect x="262.8" y="261" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="265.76" y="271.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (191 samples, 3.67%; +0.02%)</title><rect x="994.5" y="389" width="43.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="997.54" y="399.5" >serv..</text>
</g>
<g >
<title>utils::tuple_hash::operator (6 samples, 0.12%; 0.00%)</title><rect x="772.4" y="437" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.36" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (2 samples, 0.04%; +0.02%)</title><rect x="764.4" y="501" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="767.43" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (3 samples, 0.06%; +0.06%)</title><rect x="62.1" y="453" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="65.09" y="463.5" ></text>
</g>
<g >
<title>query::result::builder::build (7 samples, 0.13%; 0.00%)</title><rect x="622.0" y="533" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.97" y="543.5" ></text>
</g>
<g >
<title>from_hex (7 samples, 0.13%; +0.04%)</title><rect x="69.1" y="437" width="1.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="72.11" y="447.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.10%; +0.06%)</title><rect x="902.1" y="453" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="905.13" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="584.6" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="587.60" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (6 samples, 0.12%; +0.02%)</title><rect x="73.0" y="437" width="1.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="75.96" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Uninitialized&lt;cql3::expr::constant, false&gt;::_Uninitialized&lt;cql3::expr::constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.28" y="415.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="292.4" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="295.43" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1168.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.48" y="575.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (2 samples, 0.04%; 0.00%)</title><rect x="107.2" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.16" y="431.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="17.9" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.93" y="559.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (1 samples, 0.02%; +0.02%)</title><rect x="38.8" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="41.76" y="383.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.64" y="319.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="1120.9" y="261" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1123.92" y="271.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="53.9" y="181" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="56.94" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5 samples, 0.10%; -0.06%)</title><rect x="772.6" y="421" width="1.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="775.58" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_M_realloc_insert&lt;cql3::expr::expression const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.6" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.64" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="982.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="985.31" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (34 samples, 0.65%; 0.00%)</title><rect x="1127.0" y="485" width="7.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.04" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="31.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="34.52" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.06%; -0.02%)</title><rect x="26.1" y="293" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="29.08" y="303.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (10 samples, 0.19%; +0.04%)</title><rect x="1075.9" y="389" width="2.2" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1078.85" y="399.5" ></text>
</g>
<g >
<title>freeze (4 samples, 0.08%; 0.00%)</title><rect x="1131.6" y="293" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.57" y="303.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_impl&lt;std::default_delete&lt;cql3::operation::set_value&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.7" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="290.6" y="261" width="0.5" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="293.62" y="271.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (30 samples, 0.58%; -0.02%)</title><rect x="1064.8" y="373" width="6.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1067.75" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="19.7" y="613" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="22.74" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="452.6" y="421" width="0.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="455.56" y="431.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (33 samples, 0.63%; +0.23%)</title><rect x="701.2" y="565" width="7.5" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="704.24" y="575.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (3 samples, 0.06%; -0.02%)</title><rect x="997.5" y="373" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1000.49" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.02%)</title><rect x="313.3" y="421" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="316.27" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="100.4" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="103.37" y="559.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (13 samples, 0.25%; 0.00%)</title><rect x="869.3" y="485" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.29" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (60 samples, 1.15%; +0.06%)</title><rect x="278.4" y="325" width="13.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="281.39" y="335.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (5 samples, 0.10%; 0.00%)</title><rect x="834.4" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.41" y="447.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.38" y="527.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (292 samples, 5.60%; +0.04%)</title><rect x="210.9" y="341" width="66.1" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="213.89" y="351.5" >partiti..</text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (3 samples, 0.06%; +0.04%)</title><rect x="905.8" y="421" width="0.6" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="908.76" y="431.5" ></text>
</g>
<g >
<title>operator delete (13 samples, 0.25%; +0.10%)</title><rect x="149.3" y="533" width="2.9" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="152.29" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.02%)</title><rect x="812.9" y="341" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="815.90" y="351.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (4 samples, 0.08%; 0.00%)</title><rect x="1120.2" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.24" y="335.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1149.2" y="549" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1152.23" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; +0.02%)</title><rect x="1128.6" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1131.62" y="335.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (1 samples, 0.02%; 0.00%)</title><rect x="210.4" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.44" y="319.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="106.7" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="109.71" y="351.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;6ul, cql3::expr::untyped_constant&gt; (2 samples, 0.04%; 0.00%)</title><rect x="55.1" y="133" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="143.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (16 samples, 0.31%; +0.19%)</title><rect x="384.2" y="261" width="3.6" height="15.0" fill="rgb(255,35,35)" rx="2" ry="2" />
<text  x="387.16" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="778.9" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.93" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.73" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="595.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="598.70" y="383.5" ></text>
</g>
<g >
<title>database::do_apply (32 samples, 0.61%; 0.00%)</title><rect x="1119.6" y="437" width="7.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (3 samples, 0.06%; +0.06%)</title><rect x="660.5" y="581" width="0.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="663.47" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="905.3" y="421" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="908.31" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="319.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="78.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.63" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (1 samples, 0.02%; +0.02%)</title><rect x="82.2" y="613" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="85.25" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="49.2" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="52.18" y="383.5" ></text>
</g>
<g >
<title>db::system_keyspace::update_compaction_history (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::operation::set_value*, false&gt;::_Head_base (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.47" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="104.7" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="107.67" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="47.4" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.37" y="351.5" ></text>
</g>
<g >
<title>table::set_hit_rate (6 samples, 0.12%; 0.00%)</title><rect x="720.0" y="549" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.04" y="559.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="545.2" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="548.19" y="335.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.91" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; +0.02%)</title><rect x="635.3" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="638.33" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="559.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="87.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="90.01" y="623.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (13 samples, 0.25%; 0.00%)</title><rect x="83.8" y="661" width="3.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="86.83" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (572 samples, 10.98%; -0.10%)</title><rect x="329.3" y="501" width="129.6" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="332.35" y="511.5" >seastar::future&lt;..</text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; +0.02%)</title><rect x="598.6" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="601.64" y="383.5" ></text>
</g>
<g >
<title>cql3::attributes::fill_prepare_context (1 samples, 0.02%; +0.02%)</title><rect x="68.2" y="549" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="71.21" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="210.7" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="213.67" y="335.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="870.2" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.20" y="335.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; 0.00%)</title><rect x="886.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.51" y="527.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="303.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="77.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.04" y="527.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="496.0" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="499.04" y="431.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,763 samples, 91.42%; -0.06%)</title><rect x="90.0" y="613" width="1078.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="92.95" y="623.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="864.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (4 samples, 0.08%; +0.02%)</title><rect x="754.9" y="453" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="757.92" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (6 samples, 0.12%; -0.02%)</title><rect x="602.7" y="469" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="605.72" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl&lt;cql3::operation::raw_update*&amp;, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (3 samples, 0.06%; 0.00%)</title><rect x="58.7" y="341" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="351.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (1 samples, 0.02%; +0.02%)</title><rect x="1169.2" y="597" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1172.16" y="607.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; 0.00%)</title><rect x="870.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.88" y="399.5" ></text>
</g>
<g >
<title>db::is_datacenter_local (1 samples, 0.02%; +0.02%)</title><rect x="963.5" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="966.51" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%; +0.02%)</title><rect x="85.6" y="405" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="88.65" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="802.0" y="229" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="805.03" y="239.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%; -0.02%)</title><rect x="76.1" y="469" width="0.3" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="79.13" y="479.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (5 samples, 0.10%; +0.02%)</title><rect x="869.5" y="405" width="1.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="872.52" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1168.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.26" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="61.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.96" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (2 samples, 0.04%; -0.02%)</title><rect x="727.1" y="597" width="0.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="730.06" y="607.5" ></text>
</g>
<g >
<title>schema::registry_entry (1 samples, 0.02%; +0.02%)</title><rect x="1000.4" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1003.43" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (3 samples, 0.06%; 0.00%)</title><rect x="41.3" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.26" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="1021.5" y="325" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1024.49" y="335.5" ></text>
</g>
<g >
<title>utils::utf8::internal::validate_partial (1 samples, 0.02%; +0.02%)</title><rect x="106.9" y="293" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="109.94" y="303.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.02%)</title><rect x="399.1" y="245" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="402.11" y="255.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; 0.00%)</title><rect x="754.9" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="757.92" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.04%)</title><rect x="998.4" y="357" width="2.0" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="1001.39" y="367.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="536.8" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="539.81" y="367.5" ></text>
</g>
<g >
<title>compound_type&lt; (13 samples, 0.25%; +0.06%)</title><rect x="912.6" y="453" width="2.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="915.55" y="463.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="855.9" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.93" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; 0.00%)</title><rect x="185.3" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="188.30" y="351.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%; +0.02%)</title><rect x="629.0" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="631.99" y="527.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1018.3" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1021.32" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (4 samples, 0.08%; +0.02%)</title><rect x="858.6" y="565" width="1.0" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="861.65" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~CommonTokenStream (2 samples, 0.04%; 0.00%)</title><rect x="22.2" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="527.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="680.6" y="581" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="683.63" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (38 samples, 0.73%; +0.06%)</title><rect x="893.3" y="421" width="8.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="896.30" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="668.2" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="671.17" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1142.9" y="581" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1145.89" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="53.9" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.94" y="223.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.82" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="904.9" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="907.85" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="46.5" y="261" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.46" y="271.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (5 samples, 0.10%; 0.00%)</title><rect x="1125.2" y="389" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.22" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="523.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="526.67" y="431.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (12 samples, 0.23%; -0.02%)</title><rect x="740.2" y="501" width="2.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="743.20" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (6 samples, 0.12%; +0.02%)</title><rect x="546.1" y="341" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="549.10" y="351.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (31 samples, 0.60%; -0.13%)</title><rect x="418.1" y="261" width="7.1" height="15.0" fill="rgb(87,87,255)" rx="2" ry="2" />
<text  x="421.13" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (6 samples, 0.12%; -0.10%)</title><rect x="1160.3" y="581" width="1.4" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="1163.33" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.12%; +0.10%)</title><rect x="798.0" y="325" width="1.3" height="15.0" fill="rgb(255,122,122)" rx="2" ry="2" />
<text  x="800.95" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="977.1" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="980.10" y="415.5" ></text>
</g>
<g >
<title>v3_columns::from_v2_schema (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.94" y="447.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="1135.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.42" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (101 samples, 1.94%; -0.02%)</title><rect x="529.3" y="405" width="22.9" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="532.34" y="415.5" >s..</text>
</g>
<g >
<title>std::construct_at&lt;mutation, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%; 0.00%)</title><rect x="872.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.01" y="447.5" ></text>
</g>
<g >
<title>mutation::mutation (1 samples, 0.02%; +0.02%)</title><rect x="872.0" y="421" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="875.01" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.10%; 0.00%)</title><rect x="99.0" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="102.01" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="769.4" y="453" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="772.41" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="48.3" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="77.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.72" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (1 samples, 0.02%; 0.00%)</title><rect x="483.4" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.36" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::~vector (3 samples, 0.06%; 0.00%)</title><rect x="1134.1" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1137.06" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (723 samples, 13.88%; -0.12%)</title><rect x="165.4" y="501" width="163.7" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="168.37" y="511.5" >flat_mutation_reader:..</text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1144.0" y="581" width="0.5" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1147.02" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; 0.00%)</title><rect x="208.2" y="293" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="211.18" y="303.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (14 samples, 0.27%; -0.04%)</title><rect x="349.3" y="341" width="3.1" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="352.28" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="834.6" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.64" y="399.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%; 0.00%)</title><rect x="1119.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.56" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.02%)</title><rect x="768.7" y="421" width="0.5" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="771.73" y="431.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;clustering_key_prefix, clustering_key_prefix_view&gt;::equality::operator (1 samples, 0.02%; 0.00%)</title><rect x="18.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.15" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (270 samples, 5.18%; +0.02%)</title><rect x="774.4" y="501" width="61.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="777.40" y="511.5" >servic..</text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="771.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.00" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; 0.00%)</title><rect x="720.9" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.94" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="636.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="639.24" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; -0.04%)</title><rect x="557.4" y="421" width="0.2" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="560.42" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="106.0" y="69" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="109.03" y="79.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="592.3" y="373" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="595.30" y="383.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.02%; +0.02%)</title><rect x="83.2" y="677" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="86.16" y="687.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.71" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (5 samples, 0.10%; 0.00%)</title><rect x="828.1" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.07" y="431.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (3 samples, 0.06%; +0.04%)</title><rect x="583.0" y="485" width="0.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="586.01" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%; +0.02%)</title><rect x="1151.5" y="501" width="0.9" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1154.50" y="511.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="18.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.61" y="655.5" ></text>
</g>
<g >
<title>compound_type&lt; (12 samples, 0.23%; +0.06%)</title><rect x="924.6" y="453" width="2.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="927.56" y="463.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (1 samples, 0.02%; +0.02%)</title><rect x="99.0" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="102.01" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="53.7" y="325" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.71" y="335.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (3 samples, 0.06%; 0.00%)</title><rect x="40.6" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.58" y="447.5" ></text>
</g>
<g >
<title>db::filter_for_query (6 samples, 0.12%; -0.02%)</title><rect x="1052.3" y="437" width="1.4" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1055.30" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="692.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="694.95" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="780.1" y="453" width="0.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="783.06" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (7 samples, 0.13%; 0.00%)</title><rect x="281.1" y="309" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.11" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="152.0" y="517" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="155.01" y="527.5" ></text>
</g>
<g >
<title>position_in_partition_view::position_in_partition_view (1 samples, 0.02%; +0.02%)</title><rect x="275.0" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="277.99" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="856.6" y="501" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="859.61" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.06%)</title><rect x="46.5" y="245" width="0.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="49.46" y="255.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (37 samples, 0.71%; +0.02%)</title><rect x="433.8" y="341" width="8.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="436.76" y="351.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="452.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="455.10" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_ready_permit (2 samples, 0.04%; 0.00%)</title><rect x="1019.7" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.68" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (50 samples, 0.96%; 0.00%)</title><rect x="48.3" y="421" width="11.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.28" y="431.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="696.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="699.71" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::query_options, false&gt;::make&lt;cql3::query_options&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.34" y="607.5" ></text>
</g>
<g >
<title>auth::resource::resource (3 samples, 0.06%; -0.04%)</title><rect x="778.9" y="469" width="0.7" height="15.0" fill="rgb(175,175,255)" rx="2" ry="2" />
<text  x="781.93" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::metrics::impl::metric_id, std::allocator&lt;seastar::metrics::impl::metric_id&gt; &gt;::_M_realloc_insert&lt;seastar::metrics::impl::metric_id const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="18.8" y="373" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="21.83" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (67 samples, 1.29%; -0.10%)</title><rect x="412.0" y="293" width="15.2" height="15.0" fill="rgb(122,122,255)" rx="2" ry="2" />
<text  x="415.02" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (6 samples, 0.12%; +0.02%)</title><rect x="818.1" y="421" width="1.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="821.11" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::partition_key_restrictions&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="75.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.68" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="864.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.76" y="543.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;frozen_schema  (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.80" y="479.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (17 samples, 0.33%; +0.08%)</title><rect x="118.9" y="549" width="3.9" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="121.94" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="540.0" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.98" y="303.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (2 samples, 0.04%; +0.04%)</title><rect x="908.0" y="485" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="911.02" y="495.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; +0.04%)</title><rect x="891.5" y="485" width="0.4" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="894.49" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (7 samples, 0.13%; 0.00%)</title><rect x="592.3" y="405" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.30" y="415.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="48.5" y="261" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.50" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (3 samples, 0.06%; 0.00%)</title><rect x="49.4" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.41" y="399.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (2 samples, 0.04%; 0.00%)</title><rect x="865.4" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="868.44" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="900.1" y="405" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="903.10" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="265.9" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="268.93" y="255.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (5 samples, 0.10%; +0.06%)</title><rect x="1025.3" y="341" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1028.34" y="351.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; 0.00%)</title><rect x="1019.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1022.91" y="287.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="697.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.16" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_istream (1 samples, 0.02%; +0.02%)</title><rect x="56.2" y="309" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="59.20" y="319.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (9 samples, 0.17%; 0.00%)</title><rect x="60.1" y="453" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.05" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="493.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="496.55" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (5 samples, 0.10%; +0.02%)</title><rect x="409.1" y="261" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="412.07" y="271.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="696.7" y="213" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="699.71" y="223.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (2 samples, 0.04%; +0.04%)</title><rect x="628.3" y="533" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="631.31" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5 samples, 0.10%; 0.00%)</title><rect x="1085.8" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.82" y="495.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.12%; +0.08%)</title><rect x="29.3" y="357" width="1.3" height="15.0" fill="rgb(255,140,140)" rx="2" ry="2" />
<text  x="32.25" y="367.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="680.0" y="533" width="0.4" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="682.95" y="543.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (1 samples, 0.02%; 0.00%)</title><rect x="1145.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.38" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;5ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="55.1" y="117" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.07" y="127.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (3 samples, 0.06%; 0.00%)</title><rect x="864.3" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.31" y="559.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (19 samples, 0.36%; +0.02%)</title><rect x="540.9" y="325" width="4.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="543.89" y="335.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (60 samples, 1.15%; +0.02%)</title><rect x="697.8" y="597" width="13.6" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="700.84" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (3 samples, 0.06%; -0.02%)</title><rect x="429.7" y="325" width="0.7" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="432.68" y="335.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="357.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="360.88" y="271.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="85.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.97" y="383.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (1 samples, 0.02%; 0.00%)</title><rect x="723.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.89" y="431.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (5 samples, 0.10%; 0.00%)</title><rect x="84.3" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.29" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (5 samples, 0.10%; +0.02%)</title><rect x="528.2" y="405" width="1.1" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="531.20" y="415.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (251 samples, 4.82%; 0.00%)</title><rect x="22.2" y="581" width="56.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.23" y="591.5" >cql3::..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (63 samples, 1.21%; -0.02%)</title><rect x="25.2" y="421" width="14.2" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="28.17" y="431.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.23%; +0.04%)</title><rect x="792.5" y="373" width="2.7" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="795.51" y="383.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="799.3" y="341" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="802.31" y="351.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="18.8" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.83" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1127.9" y="357" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1130.94" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (3 samples, 0.06%; +0.02%)</title><rect x="503.5" y="373" width="0.7" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="506.52" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (4 samples, 0.08%; 0.00%)</title><rect x="46.2" y="325" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.24" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_type_statement, std::default_delete&lt;cql3::statements::alter_type_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.36" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::select_statement, std::default_delete&lt;cql3::statements::raw::select_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::select_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="67.5" y="485" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="70.53" y="495.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="42.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.61" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; +0.04%)</title><rect x="748.8" y="485" width="0.5" height="15.0" fill="rgb(255,175,175)" rx="2" ry="2" />
<text  x="751.80" y="495.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="341" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.03" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (601 samples, 11.54%; +0.06%)</title><rect x="950.8" y="501" width="136.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="953.83" y="511.5" >service::storage_..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1104.8" y="501" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="1107.84" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8 samples, 0.15%; -0.02%)</title><rect x="1161.9" y="581" width="1.8" height="15.0" fill="rgb(192,192,255)" rx="2" ry="2" />
<text  x="1164.92" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (7 samples, 0.13%; 0.00%)</title><rect x="281.1" y="293" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="284.11" y="303.5" ></text>
</g>
<g >
<title>ser::deserialize&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="107.2" y="357" width="0.2" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="110.16" y="367.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="39.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.90" y="319.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%; 0.00%)</title><rect x="85.4" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.42" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (3 samples, 0.06%; 0.00%)</title><rect x="803.2" y="309" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.16" y="319.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="864.5" y="437" width="0.3" height="15.0" fill="rgb(255,192,192)" rx="2" ry="2" />
<text  x="867.54" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_role_statement, std::default_delete&lt;cql3::statements::drop_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.81" y="479.5" ></text>
</g>
</g>
</svg>
