<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="918.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="901" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="901" > </text>
<g id="frames">
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, memtable&amp;&gt; (99 samples, 1.87%; +0.15%)</title><rect x="536.6" y="517" width="22.1" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="539.64" y="527.5" >s..</text>
</g>
<g >
<title>memtable_entry::memtable_entry (1 samples, 0.02%; 0.00%)</title><rect x="1121.1" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (616 samples, 11.61%; +0.02%)</title><rect x="740.7" y="709" width="137.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="743.72" y="719.5" >seastar::internal..</text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_less_val&gt; (6 samples, 0.11%; +0.04%)</title><rect x="1157.8" y="661" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1160.77" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="841.9" y="549" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="844.87" y="559.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="339.7" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="342.68" y="607.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (2 samples, 0.04%; +0.04%)</title><rect x="478.8" y="549" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="481.84" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="846.1" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="849.09" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message::prepared&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="840.5" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="843.54" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (5 samples, 0.09%; -0.02%)</title><rect x="1146.4" y="645" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1149.43" y="655.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::new_EQ_restriction (2 samples, 0.04%; 0.00%)</title><rect x="69.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="77.1" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="80.14" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1049.7" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1052.72" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="652.2" y="581" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="655.24" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="399.5" ></text>
</g>
<g >
<title>dht::tri_compare (1 samples, 0.02%; +0.02%)</title><rect x="17.6" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="20.56" y="559.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="1141.1" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1144.09" y="703.5" ></text>
</g>
<g >
<title>dht::tri_compare (10 samples, 0.19%; +0.04%)</title><rect x="519.7" y="469" width="2.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="522.75" y="479.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="181" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="191.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="107.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.81" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="496.0" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.96" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="49.3" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="52.35" y="511.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="23.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.12" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="917.9" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="920.90" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="94.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="97.25" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1138.2" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1141.20" y="719.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="623.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::~never_speculating_read_executor (8 samples, 0.15%; 0.00%)</title><rect x="1164.2" y="661" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1167.21" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="951.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.02" y="607.5" ></text>
</g>
<g >
<title>table::query (1 samples, 0.02%; +0.02%)</title><rect x="661.6" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="664.58" y="687.5" ></text>
</g>
<g >
<title>database::find_keyspace (6 samples, 0.11%; +0.04%)</title><rect x="981.0" y="565" width="1.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="984.03" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (1 samples, 0.02%; 0.00%)</title><rect x="16.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.89" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (226 samples, 4.26%; +0.15%)</title><rect x="223.2" y="405" width="50.2" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="226.19" y="415.5" >parti..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="44.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.46" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (6 samples, 0.11%; 0.00%)</title><rect x="1023.0" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1026.05" y="447.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="305.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="308.67" y="431.5" ></text>
</g>
<g >
<title>validation::validate_column_family (3 samples, 0.06%; 0.00%)</title><rect x="73.8" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.80" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="886.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.11" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.25" y="543.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="577.1" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="580.10" y="543.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1145.1" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1148.09" y="687.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (6 samples, 0.11%; 0.00%)</title><rect x="795.4" y="597" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.41" y="607.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (11 samples, 0.21%; -0.02%)</title><rect x="345.5" y="485" width="2.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="348.46" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::pop_back (1 samples, 0.02%; +0.02%)</title><rect x="44.2" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="47.24" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::column_family_id (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.20" y="495.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_1502abaca14bdfb677c669eaa6149754eb6e7075] (1 samples, 0.02%; +0.02%)</title><rect x="725.4" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="728.38" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="560.0" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="562.98" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="306.3" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="309.33" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="721.6" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="724.60" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_tokText (1 samples, 0.02%; 0.00%)</title><rect x="27.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.78" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; -0.02%)</title><rect x="686.3" y="661" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="689.25" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="364.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="367.36" y="383.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; -0.06%)</title><rect x="223.0" y="405" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="225.97" y="415.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="736.9" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.94" y="639.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="525.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="528.08" y="415.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.12" y="351.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="709" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="719.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; -0.02%)</title><rect x="1058.0" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1060.95" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; 0.00%)</title><rect x="197.2" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="200.18" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="924.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="927.57" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="877.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.66" y="719.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%; +0.04%)</title><rect x="1089.3" y="549" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1092.30" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="785.8" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.85" y="575.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperationDifferentiator (63 samples, 1.19%; 0.00%)</title><rect x="42.9" y="549" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.90" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="543.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; 0.00%)</title><rect x="617.8" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="620.78" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (3 samples, 0.06%; +0.02%)</title><rect x="255.0" y="277" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="257.98" y="287.5" ></text>
</g>
<g >
<title>sstring_hash::operator (1 samples, 0.02%; -0.02%)</title><rect x="1058.4" y="501" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1061.39" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (9 samples, 0.17%; +0.09%)</title><rect x="313.7" y="533" width="2.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="316.67" y="543.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="735.5" ></text>
</g>
<g >
<title>ser::get_sizeof&lt;partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="351.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::create_service_level_statement*, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.24" y="543.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="664.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.69" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (2 samples, 0.04%; +0.04%)</title><rect x="23.1" y="389" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="26.12" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="862.1" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="865.10" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (184 samples, 3.47%; +0.06%)</title><rect x="799.0" y="597" width="40.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="801.96" y="607.5" >std..</text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; +0.02%)</title><rect x="353.9" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="356.91" y="415.5" ></text>
</g>
<g >
<title>cql3::attributes::raw::prepare (2 samples, 0.04%; +0.02%)</title><rect x="66.9" y="645" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.91" y="655.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (1,041 samples, 19.61%; +0.06%)</title><rect x="888.6" y="693" width="231.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="891.55" y="703.5" >seastar::concrete_execution_st..</text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="549.5" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="552.54" y="415.5" ></text>
</g>
<g >
<title>fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt;::format&lt;fmt::v7::printf_arg_formatter&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt; (4 samples, 0.08%; -0.04%)</title><rect x="17.8" y="709" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="20.78" y="719.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.89" y="703.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::raw::modification_statement*, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.35" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (630 samples, 11.87%; -0.09%)</title><rect x="176.7" y="549" width="140.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="179.73" y="559.5" >mutation_fragment..</text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.02%)</title><rect x="283.2" y="437" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="286.21" y="447.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="39.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="42.12" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="495.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="229" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="239.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="959.9" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="962.91" y="607.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (3 samples, 0.06%; 0.00%)</title><rect x="612.9" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="615.89" y="559.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; +0.02%)</title><rect x="571.5" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="574.54" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (3 samples, 0.06%; 0.00%)</title><rect x="57.8" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.04%)</title><rect x="320.1" y="533" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="323.12" y="543.5" ></text>
</g>
<g >
<title>query::result_set::result_set (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (5 samples, 0.09%; 0.00%)</title><rect x="21.6" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.56" y="463.5" ></text>
</g>
<g >
<title>do_io_check&lt;checked_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; -0.02%)</title><rect x="1002.8" y="533" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1005.82" y="543.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="1046.6" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1049.61" y="463.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="782.7" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="785.74" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (6 samples, 0.11%; +0.04%)</title><rect x="853.0" y="597" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="855.98" y="607.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="816.7" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.75" y="383.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="1036.8" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.83" y="431.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (2 samples, 0.04%; +0.04%)</title><rect x="564.2" y="533" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="567.21" y="543.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1130.4" y="325" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1133.42" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::allocator&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="72.5" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="75.47" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="1048.2" y="485" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1051.17" y="495.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%; +0.02%)</title><rect x="1120.6" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.64" y="447.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (101 samples, 1.90%; +0.02%)</title><rect x="507.3" y="533" width="22.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="510.30" y="543.5" >d..</text>
</g>
<g >
<title>std::__detail::__variant::_Copy_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="415.5" ></text>
</g>
<g >
<title>std::variant&lt;fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="921.5" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="924.45" y="527.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="642.0" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="645.02" y="607.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="738.1" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="741.05" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.91" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_move_assign (1 samples, 0.02%; -0.02%)</title><rect x="581.1" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="584.10" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="463.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="832.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.09" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (15 samples, 0.28%; +0.04%)</title><rect x="158.7" y="629" width="3.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="161.72" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="655.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (32 samples, 0.60%; +0.04%)</title><rect x="753.8" y="629" width="7.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="756.84" y="639.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="873.0" y="645" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.99" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="343.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.46" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.35" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;scanning_reader::consumer&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="165" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="175.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="56.2" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="59.24" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="817.4" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="820.42" y="431.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="789" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="799.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1045.3" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1048.28" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="725.8" y="677" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="728.83" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (13 samples, 0.24%; +0.04%)</title><rect x="694.7" y="677" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="697.70" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="463.5" ></text>
</g>
<g >
<title>database::database (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="575.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (216 samples, 4.07%; 0.00%)</title><rect x="1003.0" y="533" width="48.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1006.04" y="543.5" >serv..</text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="699.8" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="702.82" y="687.5" ></text>
</g>
<g >
<title>service::shared_mutation::apply_locally (5 samples, 0.09%; 0.00%)</title><rect x="1130.0" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.98" y="447.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="966.4" y="613" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="969.36" y="623.5" ></text>
</g>
<g >
<title>make_random_seq (2 samples, 0.04%; +0.04%)</title><rect x="748.1" y="677" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="751.06" y="687.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; +0.02%)</title><rect x="586.2" y="565" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="589.22" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::process_authorized_statement (14 samples, 0.26%; 0.00%)</title><rect x="674.9" y="709" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.92" y="719.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="453" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt;::consume (6 samples, 0.11%; 0.00%)</title><rect x="80.5" y="661" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.47" y="671.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_permit_inactive (1 samples, 0.02%; 0.00%)</title><rect x="1028.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.83" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="619.1" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.12" y="559.5" ></text>
</g>
<g >
<title>std::optional&lt;dht::decorated_key&gt;::emplace&lt;dht::decorated_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="437.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="440.49" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::single_column_relation&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="60.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.46" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="57.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.35" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="788.3" y="549" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="791.29" y="559.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (2 samples, 0.04%; 0.00%)</title><rect x="1051.3" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1054.28" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier_raw&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="42.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.68" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; -0.02%)</title><rect x="659.4" y="597" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="662.36" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (3 samples, 0.06%; 0.00%)</title><rect x="458.2" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="461.17" y="479.5" ></text>
</g>
<g >
<title>boost::variant&lt;boost::variant&lt;ser::live_cell_view, ser::expiring_cell_view, ser::dead_cell_view, ser::counter_cell_view, ser::unknown_variant_type&gt;, ser::collection_cell_view, ser::unknown_variant_type&gt;::destroy_content (1 samples, 0.02%; +0.02%)</title><rect x="1124.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1126.98" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt;::then_impl&lt;service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="1129.3" y="517" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.31" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;10ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="592.4" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="595.44" y="623.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (2 samples, 0.04%; +0.04%)</title><rect x="246.1" y="277" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="249.09" y="287.5" ></text>
</g>
<g >
<title>database::get_reader_concurrency_semaphore (2 samples, 0.04%; 0.00%)</title><rect x="1024.4" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.38" y="463.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (5 samples, 0.09%; -0.04%)</title><rect x="190.5" y="469" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="193.51" y="479.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (6 samples, 0.11%; +0.02%)</title><rect x="766.1" y="581" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="769.06" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::~shared_ptr_count_for (8 samples, 0.15%; 0.00%)</title><rect x="676.3" y="693" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.25" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="621.8" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="624.79" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.20" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="349.5" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="352.46" y="463.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="319.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::response (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="687.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.04%)</title><rect x="690.7" y="693" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="693.70" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.06%)</title><rect x="829.4" y="437" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="832.42" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; 0.00%)</title><rect x="967.2" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="970.25" y="591.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1049.1" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1052.06" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="725.2" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="728.16" y="687.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; -0.02%)</title><rect x="958.4" y="581" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="961.36" y="591.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="527.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="880.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.33" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="54.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.02" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="880.6" y="645" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.55" y="655.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="838.3" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="841.31" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::attach_service_level_statement, std::default_delete&lt;cql3::statements::attach_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="64.5" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="67.46" y="607.5" ></text>
</g>
<g >
<title>multishard_combining_reader::handle_empty_reader_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.06%)</title><rect x="464.6" y="533" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="467.62" y="543.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (1 samples, 0.02%; +0.02%)</title><rect x="656.2" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="659.24" y="639.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_functions.cc (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="821" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.03" y="831.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (1 samples, 0.02%; +0.02%)</title><rect x="734.5" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="737.50" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (22 samples, 0.41%; +0.04%)</title><rect x="625.1" y="629" width="4.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="628.12" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::untyped_constant_test_assignment (1 samples, 0.02%; 0.00%)</title><rect x="68.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.69" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="471.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="474.28" y="623.5" ></text>
</g>
<g >
<title>keyspace::make_column_family_config (1 samples, 0.02%; 0.00%)</title><rect x="107.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.59" y="703.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::attributes::raw*, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.91" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (3 samples, 0.06%; 0.00%)</title><rect x="714.3" y="709" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.27" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_function_statement, std::default_delete&lt;cql3::statements::create_function_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="64.7" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="67.69" y="607.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relationType (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="543.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; -0.04%)</title><rect x="556.4" y="437" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="559.43" y="447.5" ></text>
</g>
<g >
<title>make_combined_reader (96 samples, 1.81%; -0.06%)</title><rect x="480.8" y="549" width="21.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="483.84" y="559.5" >m..</text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_channel (1 samples, 0.02%; 0.00%)</title><rect x="25.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="28.56" y="495.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1011.3" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.27" y="495.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (47 samples, 0.89%; +0.04%)</title><rect x="1169.8" y="837" width="10.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1172.77" y="847.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (4 samples, 0.08%; +0.02%)</title><rect x="415.9" y="373" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="418.93" y="383.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; +0.06%)</title><rect x="833.2" y="517" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="836.20" y="527.5" ></text>
</g>
<g >
<title>service::never_speculating_read_executor::never_speculating_read_executor (17 samples, 0.32%; +0.04%)</title><rect x="1065.5" y="533" width="3.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1068.51" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql_transport::messages::result_message::rows, false&gt;::make&lt;cql3::result&gt; (5 samples, 0.09%; -0.04%)</title><rect x="687.6" y="677" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="690.59" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (6 samples, 0.11%; +0.06%)</title><rect x="439.7" y="421" width="1.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="442.72" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="653.8" y="565" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="656.80" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="335.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::statements::raw::update_statement, cql3::cf_name, std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;, std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;, bool&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="60.7" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.69" y="575.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (1 samples, 0.02%; +0.02%)</title><rect x="883.2" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="886.22" y="559.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="523.3" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="526.30" y="447.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (22 samples, 0.41%; +0.06%)</title><rect x="295.2" y="421" width="4.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="298.22" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::accept (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="50.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="53.68" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="47.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; 0.00%)</title><rect x="115.4" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.37" y="687.5" ></text>
</g>
<g >
<title>query::result_row_view::iterator (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="527.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="492.4" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="495.40" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="778.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="781.07" y="575.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.68" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (1 samples, 0.02%; 0.00%)</title><rect x="756.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.50" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="870.8" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="873.77" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (1 samples, 0.02%; +0.02%)</title><rect x="885.9" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="888.89" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (19 samples, 0.36%; +0.02%)</title><rect x="211.2" y="437" width="4.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="214.19" y="447.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (2 samples, 0.04%; +0.04%)</title><rect x="138.9" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="141.94" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (2 samples, 0.04%; 0.00%)</title><rect x="44.7" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="399.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="107.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.37" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="302.6" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="305.55" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="1162.9" y="661" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1165.88" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.06%)</title><rect x="55.1" y="485" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="58.13" y="495.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (47 samples, 0.89%; +0.02%)</title><rect x="323.5" y="549" width="10.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="326.45" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="575.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="578.10" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::alter_view_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.80" y="591.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="719.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="857.4" y="565" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="860.43" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::query_options&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="1138.9" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1141.87" y="719.5" ></text>
</g>
<g >
<title>seastar::futurize_apply&lt;single_node_cql_env::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,453 samples, 46.21%; +0.09%)</title><rect x="115.8" y="677" width="545.3" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="118.82" y="687.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>cql3::constants::value::value (1 samples, 0.02%; +0.02%)</title><rect x="68.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="71.91" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;flat_mutation_reader  (473 samples, 8.91%; +0.11%)</title><rect x="473.3" y="581" width="105.1" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="476.29" y="591.5" >std::_Functi..</text>
</g>
<g >
<title>service::storage_proxy::do_query (557 samples, 10.49%; +0.23%)</title><rect x="971.0" y="597" width="123.9" height="15.0" fill="rgb(255,84,84)" rx="2" ry="2" />
<text  x="974.03" y="607.5" >service::storag..</text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; +0.02%)</title><rect x="850.5" y="629" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="853.54" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="736.5" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.50" y="719.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (4 samples, 0.08%; +0.02%)</title><rect x="254.8" y="309" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="257.76" y="319.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="907.4" y="517" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="910.45" y="527.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_unused (4 samples, 0.08%; +0.08%)</title><rect x="124.3" y="645" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="127.27" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="996.4" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="999.37" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; -0.04%)</title><rect x="438.8" y="437" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="441.83" y="447.5" ></text>
</g>
<g >
<title>std::queue&lt;reader_concurrency_semaphore::entry, seastar::circular_buffer&lt;reader_concurrency_semaphore::entry, std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt; &gt;::pop (3 samples, 0.06%; +0.02%)</title><rect x="663.8" y="693" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="666.80" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::process_results (42 samples, 0.79%; -0.06%)</title><rect x="679.4" y="693" width="9.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="682.36" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (1 samples, 0.02%; -0.02%)</title><rect x="828.8" y="437" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="831.75" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="680.9" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="683.92" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.02%)</title><rect x="685.1" y="613" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="688.14" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="539.3" y="485" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="542.31" y="495.5" ></text>
</g>
<g >
<title>to_hex (1 samples, 0.02%; +0.02%)</title><rect x="78.5" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.47" y="719.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; -0.08%)</title><rect x="508.9" y="501" width="0.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="511.85" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="34.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="37.01" y="431.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (31 samples, 0.58%; -0.02%)</title><rect x="705.6" y="709" width="6.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="708.60" y="719.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="479.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="623.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="958.8" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="961.80" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.04%)</title><rect x="746.5" y="597" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="749.50" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="554.4" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="557.43" y="463.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (5 samples, 0.09%; 0.00%)</title><rect x="98.7" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.70" y="671.5" ></text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::intrusive_array&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, dht::decorated_key, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1121.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.15%; 0.00%)</title><rect x="1150.7" y="645" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1153.65" y="655.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="837" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="129.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="132.60" y="607.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (6 samples, 0.11%; -0.04%)</title><rect x="774.5" y="517" width="1.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="777.51" y="527.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (276 samples, 5.20%; 0.00%)</title><rect x="17.8" y="773" width="61.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="783.5" >std::_..</text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="501" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (3 samples, 0.06%; +0.04%)</title><rect x="362.1" y="373" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="365.13" y="383.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;clustering_key_prefix&gt;::wrapping_interval (1 samples, 0.02%; 0.00%)</title><rect x="1101.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1104.52" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.90" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="502.4" y="549" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="505.41" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="1064.8" y="501" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1067.84" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.15%; +0.02%)</title><rect x="833.0" y="533" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.98" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="479.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.5" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1126.53" y="399.5" ></text>
</g>
<g >
<title>rows_entry::memory_usage (2 samples, 0.04%; 0.00%)</title><rect x="16.7" y="741" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.67" y="751.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; 0.00%)</title><rect x="102.5" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="105.48" y="703.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (6 samples, 0.11%; +0.04%)</title><rect x="656.5" y="613" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="659.47" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; -0.02%)</title><rect x="1044.8" y="469" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1047.83" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.32%; +0.02%)</title><rect x="942.6" y="581" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="945.57" y="591.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="501.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.07" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; -0.02%)</title><rect x="883.4" y="581" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="886.44" y="591.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::~abstract_write_response_handler (1 samples, 0.02%; +0.02%)</title><rect x="714.7" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="717.71" y="703.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::do_merge_to (2 samples, 0.04%; 0.00%)</title><rect x="70.0" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.02" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="711.6" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="714.60" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.04%)</title><rect x="638.5" y="565" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="641.46" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; -0.02%)</title><rect x="772.1" y="565" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="775.06" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; +0.02%)</title><rect x="1128.0" y="661" width="6.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1130.98" y="671.5" ></text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (2 samples, 0.04%; +0.04%)</title><rect x="253.9" y="293" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="256.87" y="303.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="736.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.94" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%; +0.06%)</title><rect x="857.9" y="549" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="860.87" y="559.5" ></text>
</g>
<g >
<title>__memchr_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="713.8" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="716.82" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::~vector (1 samples, 0.02%; -0.06%)</title><rect x="705.4" y="661" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="708.37" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::memory_usage (2 samples, 0.04%; 0.00%)</title><rect x="16.7" y="757" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.67" y="767.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1047.7" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.72" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message::prepared&gt; &gt;, cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="447.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (1 samples, 0.02%; +0.02%)</title><rect x="283.9" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="286.88" y="463.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="738.3" y="709" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="741.27" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.68" y="479.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1011.7" y="485" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1014.71" y="495.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; 0.00%)</title><rect x="1050.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1053.39" y="511.5" ></text>
</g>
<g >
<title>locator::token_metadata::pending_endpoints_for (1 samples, 0.02%; 0.00%)</title><rect x="1133.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.76" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.11%; +0.04%)</title><rect x="1023.0" y="421" width="1.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1026.05" y="431.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; -0.02%)</title><rect x="817.2" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="820.19" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (126 samples, 2.37%; -0.02%)</title><rect x="594.0" y="613" width="28.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="597.00" y="623.5" >f..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="79.8" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="82.80" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::constant (5 samples, 0.09%; +0.02%)</title><rect x="53.3" y="485" width="1.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="56.35" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="846.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="849.76" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="941.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.91" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="27.8" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="30.78" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.04%)</title><rect x="734.7" y="693" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="737.72" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.02%)</title><rect x="506.4" y="517" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="509.41" y="527.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::max_backlog (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="58.2" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.24" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (4 samples, 0.08%; +0.02%)</title><rect x="960.6" y="613" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="963.58" y="623.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="716.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="719.71" y="687.5" ></text>
</g>
<g >
<title>query::result::builder::build (7 samples, 0.13%; -0.04%)</title><rect x="630.0" y="645" width="1.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="633.01" y="655.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (5 samples, 0.09%; -0.06%)</title><rect x="428.2" y="357" width="1.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="431.16" y="367.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="805" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="815.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, seastar::lw_shared_ptr&lt;cql3::column_condition::raw&gt; &gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="61.1" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="64.13" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="884.1" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="887.11" y="527.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="213" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="223.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (2 samples, 0.04%; +0.02%)</title><rect x="36.2" y="405" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="39.23" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="884.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.77" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="37.1" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="40.12" y="511.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; +0.02%)</title><rect x="552.6" y="405" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="555.65" y="415.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (5 samples, 0.09%; +0.04%)</title><rect x="912.8" y="485" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="915.78" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (4 samples, 0.08%; +0.04%)</title><rect x="627.8" y="581" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="630.79" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getText[abi:cxx11] (1 samples, 0.02%; 0.00%)</title><rect x="38.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.68" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1094.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1096.96" y="575.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="50.9" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="53.90" y="463.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.87%; 0.00%)</title><rect x="24.4" y="517" width="10.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.45" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; -0.06%)</title><rect x="710.9" y="661" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="713.93" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="823.9" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.86" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="311.4" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="314.45" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="115.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="118.15" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (39 samples, 0.73%; 0.00%)</title><rect x="910.8" y="533" width="8.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="913.78" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (1 samples, 0.02%; +0.02%)</title><rect x="158.5" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="161.50" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1132.9" y="245" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1135.87" y="255.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="53" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="63.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.02%)</title><rect x="466.8" y="565" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="469.84" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (10 samples, 0.19%; +0.02%)</title><rect x="1103.7" y="581" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1106.75" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="686.7" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="689.70" y="687.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement::do_execute (1 samples, 0.02%; 0.00%)</title><rect x="678.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="681.03" y="719.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="655.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; 0.00%)</title><rect x="72.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.91" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="992.1" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="995.15" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="543.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1087.5" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1090.52" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="524.6" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="527.64" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.24%; 0.00%)</title><rect x="21.3" y="501" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.34" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="722.9" y="693" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="725.94" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; 0.00%)</title><rect x="813.9" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.86" y="447.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1119.1" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1122.08" y="639.5" ></text>
</g>
<g >
<title>database::find_schema (1 samples, 0.02%; +0.02%)</title><rect x="73.4" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="76.36" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::awaiter&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::awaiter (1 samples, 0.02%; +0.02%)</title><rect x="976.8" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="979.81" y="591.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (3 samples, 0.06%; -0.04%)</title><rect x="758.3" y="501" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="761.28" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.11%; +0.11%)</title><rect x="1059.5" y="533" width="1.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1062.51" y="543.5" ></text>
</g>
<g >
<title>distributed_loader::populate_column_family (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="834.1" y="501" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="837.09" y="511.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="567.5" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="570.54" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; -0.02%)</title><rect x="997.7" y="501" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1000.71" y="511.5" ></text>
</g>
<g >
<title>db::schema_tables::update_schema_version_and_announce (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="703.5" ></text>
</g>
<g >
<title>std::optional&lt;mutation_querier&gt;::emplace&lt;mutation_querier&gt; (4 samples, 0.08%; +0.02%)</title><rect x="368.6" y="389" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="371.58" y="399.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition (7 samples, 0.13%; 0.00%)</title><rect x="1121.1" y="437" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="447.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.02%)</title><rect x="615.3" y="565" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="618.34" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="431.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (51 samples, 0.96%; -0.04%)</title><rect x="1072.0" y="501" width="11.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1074.96" y="511.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="713.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.15" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="940.6" y="597" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="943.57" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_index_statement, std::default_delete&lt;cql3::statements::create_index_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; +0.02%)</title><rect x="61.4" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="64.35" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; 0.00%)</title><rect x="682.7" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="685.70" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; -0.04%)</title><rect x="675.8" y="693" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="678.81" y="703.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (3 samples, 0.06%; 0.00%)</title><rect x="297.9" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="300.89" y="399.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%; 0.00%)</title><rect x="57.8" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="805.4" y="517" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="808.41" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="81.4" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="84.36" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (15 samples, 0.28%; -0.02%)</title><rect x="1004.4" y="485" width="3.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1007.37" y="495.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::do_flush (32 samples, 0.60%; 0.00%)</title><rect x="881.4" y="693" width="7.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.44" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="785.2" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="788.18" y="607.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="845.4" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="848.43" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="506.9" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="509.85" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::repeater&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (5 samples, 0.09%; 0.00%)</title><rect x="880.1" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.11" y="719.5" ></text>
</g>
<g >
<title>schema_registry::get (25 samples, 0.47%; -0.02%)</title><rect x="984.1" y="565" width="5.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="987.14" y="575.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (99 samples, 1.87%; 0.00%)</title><rect x="810.1" y="501" width="22.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="813.08" y="511.5" >s..</text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; 0.00%)</title><rect x="657.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="660.58" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.25" y="527.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; +0.02%)</title><rect x="354.6" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="357.57" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="993.0" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="996.04" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (3 samples, 0.06%; +0.06%)</title><rect x="137.6" y="661" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="140.60" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.57" y="495.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="295.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="298.00" y="431.5" ></text>
</g>
<g >
<title>seastar::schedule (2 samples, 0.04%; +0.04%)</title><rect x="882.1" y="533" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="885.11" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="844.3" y="501" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="847.31" y="511.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="51.6" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.57" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="687.6" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="690.59" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::do_wait_admission (41 samples, 0.77%; 0.00%)</title><rect x="1027.5" y="437" width="9.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1030.49" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="559.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql39selection10selectableEEEEER18overloaded_functorIJZNS7_18prepare_selectableERK6schemaRKNS6_4expr10expressionEE3$_1ZNS7_18prepare_selectableESE_SI_E3$_2ZNS7_18prepare_selectableESE_SI_E3$_3ZNS7_18prepare_selectableESE_SI_E3$_4ZNS7_18prepare_selectableESE_SI_E3$_5ZNS7_18prepare_selectableESE_SI_E3$_6ZNS7_18prepare_selectableESE_SI_E3$_7ZNS7_18prepare_selectableESE_SI_E3$_0ZNS7_18prepare_selectableESE_SI_E3$_8ZNS7_18prepare_selectableESE_SI_E3$_9ZNS7_18prepare_selectableESE_SI_E4$_10ZNS7_18prepare_selectableESE_SI_E4$_11ZNS7_18prepare_selectableESE_SI_E4$_12ZNS7_18prepare_selectableESE_SI_E4$_13ZNS7_18prepare_selectableESE_SI_E4$_14ZNS7_18prepare_selectableESE_SI_E4$_15EERSt7variantIJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm4EEEE14__visit_invokeES10_S1J_ (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="271.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.04%)</title><rect x="816.1" y="341" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="819.08" y="351.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (13 samples, 0.24%; -0.04%)</title><rect x="127.8" y="613" width="2.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="130.82" y="623.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::set_value (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.08%)</title><rect x="156.1" y="629" width="0.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="159.06" y="639.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="559.5" ></text>
</g>
<g >
<title>seastar::schedule_urgent (2 samples, 0.04%; -0.02%)</title><rect x="1137.3" y="709" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1140.31" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="599.6" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="602.56" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="886.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.33" y="463.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="554.2" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="557.20" y="431.5" ></text>
</g>
<g >
<title>checked_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::add_raw_update (10 samples, 0.19%; 0.00%)</title><rect x="47.3" y="517" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.35" y="527.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (29 samples, 0.55%; 0.00%)</title><rect x="1128.0" y="677" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.98" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (2 samples, 0.04%; +0.02%)</title><rect x="529.8" y="533" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="532.75" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;8ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="303.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;schema const&gt;::operator= (2 samples, 0.04%; -0.02%)</title><rect x="1043.7" y="485" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1046.72" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="830.5" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.53" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (5 samples, 0.09%; +0.08%)</title><rect x="654.2" y="581" width="1.2" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="657.24" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="465.9" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="468.95" y="575.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::abstract_write_response_handler (1 samples, 0.02%; 0.00%)</title><rect x="1134.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.98" y="367.5" ></text>
</g>
<g >
<title>utils::array_search_gt (2 samples, 0.04%; +0.02%)</title><rect x="515.1" y="485" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="518.08" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (1 samples, 0.02%; -0.02%)</title><rect x="405.0" y="373" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="408.04" y="383.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1044.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1047.17" y="495.5" ></text>
</g>
<g >
<title>non-virtual thunk to cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::~single_column_primary_key_restrictions (1 samples, 0.02%; 0.00%)</title><rect x="676.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.25" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="579.8" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.77" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;::do_with_state&lt;std::optional&lt;auth::resource&gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="803.6" y="517" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="806.63" y="527.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; 0.00%)</title><rect x="610.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="613.00" y="527.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="107.1" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="666.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.02" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="887.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="890.00" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::max_size (1 samples, 0.02%; 0.00%)</title><rect x="24.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.01" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::run (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="757" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="767.5" >seastar::reactor::run</text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="619.8" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.79" y="591.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::drop_unneeded_tombstones (1 samples, 0.02%; -0.02%)</title><rect x="417.3" y="405" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="420.26" y="415.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1 samples, 0.02%; +0.02%)</title><rect x="86.9" y="725" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="89.92" y="735.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (5 samples, 0.09%; +0.02%)</title><rect x="615.6" y="565" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="618.56" y="575.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (1 samples, 0.02%; 0.00%)</title><rect x="313.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="316.45" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::reserve (4 samples, 0.08%; 0.00%)</title><rect x="576.9" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="579.88" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1118.0" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1120.97" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::do_flush (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="693" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="703.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="58.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.24" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;range_tombstone*&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="586.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="588.99" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.13%)</title><rect x="1110.4" y="597" width="0.5" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="1113.41" y="607.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (25 samples, 0.47%; 0.00%)</title><rect x="258.3" y="373" width="5.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.32" y="383.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::read_command&gt;::make&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1110.4" y="629" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.41" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="257.2" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="260.20" y="319.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%; +0.02%)</title><rect x="299.0" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="302.00" y="383.5" ></text>
</g>
<g >
<title>table::do_apply&lt;frozen_mutation const&amp;, seastar::lw_shared_ptr&lt;schema const&gt; const&amp;&gt; (26 samples, 0.49%; +0.02%)</title><rect x="1120.4" y="485" width="5.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.42" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (3 samples, 0.06%; +0.06%)</title><rect x="122.3" y="645" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="125.26" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.02%)</title><rect x="591.3" y="629" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="594.33" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="581" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="591.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="855.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.21" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="580.0" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.99" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (3 samples, 0.06%; +0.06%)</title><rect x="910.1" y="517" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="913.12" y="527.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (3 samples, 0.06%; 0.00%)</title><rect x="27.6" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="30.56" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::emplace_back&lt;seastar::lw_shared_ptr&lt;schema const&gt; const&amp;, partition_key const&gt; (1 samples, 0.02%; +0.02%)</title><rect x="887.9" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="890.89" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::mutate_token_metadata (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="671.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (3 samples, 0.06%; 0.00%)</title><rect x="76.0" y="533" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.02" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="136.5" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="139.49" y="671.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (1 samples, 0.02%; +0.02%)</title><rect x="877.7" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="880.66" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="623.5" ></text>
</g>
<g >
<title>table::make_reader (462 samples, 8.70%; -0.08%)</title><rect x="475.7" y="565" width="102.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="478.73" y="575.5" >table::make_..</text>
</g>
<g >
<title>db::system_keyspace_make (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;boost::intrusive::detail::null_disposer, boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="603.8" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="606.78" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="718.7" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="721.71" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="597" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; -0.04%)</title><rect x="93.8" y="693" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="96.81" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;managed_bytes const*, managed_bytes*&gt; (1 samples, 0.02%; -0.04%)</title><rect x="926.8" y="533" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="929.79" y="543.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (6 samples, 0.11%; 0.00%)</title><rect x="940.8" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="943.80" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="789.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="792.40" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="447.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (40 samples, 0.75%; -0.04%)</title><rect x="508.0" y="517" width="8.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="510.97" y="527.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (2 samples, 0.04%; 0.00%)</title><rect x="1133.3" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.31" y="399.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_28has_slice_or_needs_filteringERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; +0.02%)</title><rect x="682.3" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="685.25" y="623.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; +0.02%)</title><rect x="1122.6" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1125.64" y="447.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%; +0.02%)</title><rect x="1134.0" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1136.98" y="351.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="648.9" y="613" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="651.91" y="623.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="598.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="601.00" y="511.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.36%; +0.06%)</title><rect x="754.9" y="565" width="4.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="757.95" y="575.5" ></text>
</g>
<g >
<title>distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::~vector (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.91" y="671.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (18 samples, 0.34%; +0.02%)</title><rect x="819.9" y="373" width="4.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="822.86" y="383.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="84.5" y="725" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="87.47" y="735.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (1 samples, 0.02%; +0.02%)</title><rect x="1083.3" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1086.29" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="366.1" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="369.13" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="575.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="1121.8" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.75" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1044.8" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1047.83" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="507.1" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="510.08" y="527.5" ></text>
</g>
<g >
<title>tombstone::apply (1 samples, 0.02%; +0.02%)</title><rect x="436.4" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="439.38" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_range&lt;std::__detail::_Node_iterator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, false, true&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="463.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.86" y="463.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; -0.06%)</title><rect x="846.5" y="501" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="849.54" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (4 samples, 0.08%; -0.04%)</title><rect x="321.0" y="565" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="324.01" y="575.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.06%)</title><rect x="563.3" y="517" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="566.32" y="527.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (2 samples, 0.04%; 0.00%)</title><rect x="596.2" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.22" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (4 samples, 0.08%; +0.02%)</title><rect x="40.5" y="485" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="43.46" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (127 samples, 2.39%; +0.02%)</title><rect x="593.8" y="629" width="28.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="596.78" y="639.5" >s..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="85" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="95.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (16 samples, 0.30%; 0.00%)</title><rect x="913.9" y="485" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="916.90" y="495.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="783.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="1001.0" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1004.04" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (4 samples, 0.08%; -0.02%)</title><rect x="597.3" y="517" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="600.33" y="527.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (77 samples, 1.45%; -0.02%)</title><rect x="594.4" y="597" width="17.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="597.44" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="960.4" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="963.36" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="607.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache_key::hash (10 samples, 0.19%; +0.02%)</title><rect x="775.8" y="533" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="778.84" y="543.5" ></text>
</g>
<g >
<title>rows_entry::tri_compare::operator (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="559.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="627.1" y="597" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="630.12" y="607.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="759.2" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="762.17" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::validate (1 samples, 0.02%; 0.00%)</title><rect x="849.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="852.20" y="639.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (1 samples, 0.02%; 0.00%)</title><rect x="480.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="483.18" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_urgent_state (6 samples, 0.11%; 0.00%)</title><rect x="710.5" y="693" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.49" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::truncate_statement*, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="64.2" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="67.24" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="45.1" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="48.12" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cqlStatement (197 samples, 3.71%; +0.02%)</title><rect x="20.7" y="597" width="43.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="23.67" y="607.5" >cql3..</text>
</g>
<g >
<title>std::__equal&lt;false&gt;::equal&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*&gt; (8 samples, 0.15%; -0.02%)</title><rect x="822.1" y="357" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="825.08" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;cql3::expr::oper_t&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="60.2" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="63.24" y="543.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="34.7" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="37.68" y="527.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="437.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="440.27" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; 0.00%)</title><rect x="812.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.52" y="447.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;mutation_fragment*&gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="469.1" y="613" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="472.06" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (17 samples, 0.32%; 0.00%)</title><rect x="1004.2" y="501" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.15" y="511.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (36 samples, 0.68%; +0.02%)</title><rect x="622.0" y="645" width="8.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="625.01" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="56.9" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="59.91" y="559.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="706.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="709.26" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.04%)</title><rect x="658.9" y="581" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="661.91" y="591.5" ></text>
</g>
<g >
<title>db::filter_for_query (2 samples, 0.04%; 0.00%)</title><rect x="1061.3" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1064.28" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="255.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="258.87" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%; +0.04%)</title><rect x="1095.5" y="597" width="1.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1098.52" y="607.5" ></text>
</g>
<g >
<title>clustering_row::external_memory_usage (2 samples, 0.04%; +0.04%)</title><rect x="226.3" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="229.30" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_new_partition (2 samples, 0.04%; 0.00%)</title><rect x="81.4" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.36" y="655.5" ></text>
</g>
<g >
<title>std::operator+ (4 samples, 0.08%; +0.02%)</title><rect x="43.3" y="389" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="46.35" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mP (1 samples, 0.02%; +0.02%)</title><rect x="32.0" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="35.01" y="463.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="280.5" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="283.55" y="431.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="767.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (76 samples, 1.43%; +0.02%)</title><rect x="233.9" y="325" width="16.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="236.86" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (82 samples, 1.54%; +0.06%)</title><rect x="540.2" y="501" width="18.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="543.20" y="511.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="815.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="458.8" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="461.84" y="511.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered (4 samples, 0.08%; +0.02%)</title><rect x="80.5" y="613" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="83.47" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy::send_to_live_endpoints (9 samples, 0.17%; 0.00%)</title><rect x="1129.5" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.53" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="329.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="332.01" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; 0.00%)</title><rect x="664.2" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.25" y="671.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (1 samples, 0.02%; +0.02%)</title><rect x="359.9" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="362.91" y="415.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="440.8" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="443.83" y="415.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="10.9" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="13.89" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="111.1" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="114.15" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::reserve (2 samples, 0.04%; +0.04%)</title><rect x="162.1" y="629" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="165.06" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt; &gt;, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (5 samples, 0.09%; -0.04%)</title><rect x="160.9" y="613" width="1.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="163.95" y="623.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (4 samples, 0.08%; 0.00%)</title><rect x="253.4" y="309" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="256.43" y="319.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="881.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.99" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.06%)</title><rect x="1136.4" y="709" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1139.42" y="719.5" ></text>
</g>
<g >
<title>database::apply_in_memory (29 samples, 0.55%; 0.00%)</title><rect x="1120.0" y="501" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="511.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; -0.08%)</title><rect x="524.0" y="421" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="526.97" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%; -0.02%)</title><rect x="18.9" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="21.89" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="618.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="621.90" y="575.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, 128ul&gt;::emplace_back&lt;reader_concurrency_semaphore::entry, seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (20 samples, 0.38%; +0.04%)</title><rect x="1029.9" y="389" width="4.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1032.94" y="399.5" ></text>
</g>
<g >
<title>make_flat_mutation_reader&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (8 samples, 0.15%; 0.00%)</title><rect x="573.5" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.55" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::do_with (3 samples, 0.06%; 0.00%)</title><rect x="17.1" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="783.5" ></text>
</g>
<g >
<title>absl::container_internal::operator== (2 samples, 0.04%; +0.02%)</title><rect x="843.6" y="533" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="846.65" y="543.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%; +0.02%)</title><rect x="31.6" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="34.56" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="302.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="305.78" y="463.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit_item (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="792.1" y="581" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="795.07" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (5 samples, 0.09%; 0.00%)</title><rect x="670.7" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="673.69" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="717.4" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="720.38" y="687.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="736.7" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.72" y="655.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (3 samples, 0.06%; +0.06%)</title><rect x="447.3" y="405" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="450.28" y="415.5" ></text>
</g>
<g >
<title>query_result_builder::consume_end_of_partition (8 samples, 0.15%; -0.02%)</title><rect x="353.0" y="437" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="356.02" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; +0.02%)</title><rect x="415.0" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="418.04" y="415.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="106.0" y="37" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.04" y="47.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all&lt;single_node_cql_env::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="735.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (3 samples, 0.06%; +0.04%)</title><rect x="202.5" y="453" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="205.52" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::read_command&gt;::dispose (9 samples, 0.17%; -0.02%)</title><rect x="98.5" y="677" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="101.48" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (5 samples, 0.09%; +0.08%)</title><rect x="134.7" y="661" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="137.71" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; 0.00%)</title><rect x="881.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.99" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (2 samples, 0.04%; +0.04%)</title><rect x="550.0" y="421" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="552.98" y="431.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="811.2" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="814.19" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (17 samples, 0.32%; +0.06%)</title><rect x="291.2" y="421" width="3.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="294.22" y="431.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (2 samples, 0.04%; 0.00%)</title><rect x="825.9" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.86" y="335.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%; +0.02%)</title><rect x="283.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="285.99" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (23 samples, 0.43%; 0.00%)</title><rect x="1129.3" y="533" width="5.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.31" y="543.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%; +0.02%)</title><rect x="640.2" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="643.24" y="639.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (8 samples, 0.15%; +0.02%)</title><rect x="874.8" y="661" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="877.77" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.89" y="671.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (1 samples, 0.02%; +0.02%)</title><rect x="82.7" y="725" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="85.69" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="643.8" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="646.79" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (1 samples, 0.02%; +0.02%)</title><rect x="70.9" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="73.91" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (2 samples, 0.04%; +0.02%)</title><rect x="657.4" y="597" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="660.35" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="475.1" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="478.06" y="575.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (1 samples, 0.02%; +0.02%)</title><rect x="922.1" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="925.12" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="1069.1" y="517" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1072.07" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1147.5" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1150.54" y="671.5" ></text>
</g>
<g >
<title>reader_permit::set_max_result_size (2 samples, 0.04%; +0.04%)</title><rect x="113.4" y="677" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="116.37" y="687.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="1167.5" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.55" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_service_level_statement, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::create_service_level_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.24" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="452.2" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="455.17" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="564.9" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="567.88" y="543.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="919.2" y="501" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="922.23" y="511.5" ></text>
</g>
<g >
<title>service::client_state::has_access (7 samples, 0.13%; 0.00%)</title><rect x="75.8" y="645" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="655.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="970.4" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="973.36" y="607.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.02%)</title><rect x="616.7" y="565" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="619.67" y="575.5" ></text>
</g>
<g >
<title>reader_selector::~reader_selector (1 samples, 0.02%; 0.00%)</title><rect x="615.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="618.78" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="607.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (7 samples, 0.13%; +0.06%)</title><rect x="300.3" y="421" width="1.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="303.33" y="431.5" ></text>
</g>
<g >
<title>cql3::prepare_context::get_partition_key_bind_indexes (2 samples, 0.04%; +0.02%)</title><rect x="66.5" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.47" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="54.0" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="57.02" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::stats (9 samples, 0.17%; +0.09%)</title><rect x="532.0" y="517" width="2.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="534.97" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="729.6" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="732.60" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.06%)</title><rect x="1148.0" y="629" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1150.98" y="639.5" ></text>
</g>
<g >
<title>cql3::selection::raw_selector::to_selectables (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="303.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::operator= (2 samples, 0.04%; 0.00%)</title><rect x="891.0" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="894.00" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="265.7" y="373" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="268.65" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.02%)</title><rect x="99.8" y="661" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="102.81" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="757" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (1 samples, 0.02%; +0.02%)</title><rect x="590.0" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="593.00" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="36.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.45" y="399.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="809.9" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="812.86" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.04%)</title><rect x="722.5" y="693" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="725.49" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="311.7" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="314.67" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (3 samples, 0.06%; +0.04%)</title><rect x="855.7" y="645" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="858.65" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::get_at (3 samples, 0.06%; +0.06%)</title><rect x="376.4" y="389" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="379.36" y="399.5" ></text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; 0.00%)</title><rect x="602.4" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="605.45" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1058.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1061.62" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="69" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="79.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (240 samples, 4.52%; +0.02%)</title><rect x="220.1" y="437" width="53.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="223.08" y="447.5" >parti..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%; -0.11%)</title><rect x="1057.3" y="517" width="1.5" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="1060.28" y="527.5" ></text>
</g>
<g >
<title>canonical_mutation::canonical_mutation (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="639.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (4 samples, 0.08%; 0.00%)</title><rect x="1123.1" y="437" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.09" y="447.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="832.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.75" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="415.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (10 samples, 0.19%; -0.02%)</title><rect x="292.8" y="405" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="295.77" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (2 samples, 0.04%; -0.09%)</title><rect x="850.8" y="613" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="853.76" y="623.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="732.7" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="735.72" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="601.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="604.56" y="527.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (6 samples, 0.11%; +0.02%)</title><rect x="1084.4" y="517" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1087.40" y="527.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="687.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;locator::snitch_ptr&gt;::local (4 samples, 0.08%; +0.06%)</title><rect x="1086.6" y="517" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1089.63" y="527.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%; 0.00%)</title><rect x="664.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.69" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="703.1" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="706.15" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%; +0.04%)</title><rect x="1153.8" y="613" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1156.76" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="1047.5" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1050.50" y="431.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="133" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::emplace_back&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="33.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="36.56" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (7 samples, 0.13%; +0.06%)</title><rect x="278.1" y="357" width="1.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="281.10" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="553.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="556.09" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%; 0.00%)</title><rect x="814.7" y="405" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.75" y="415.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; +0.04%)</title><rect x="1038.8" y="469" width="2.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1041.83" y="479.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; 0.00%)</title><rect x="213.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="216.85" y="399.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (12 samples, 0.23%; 0.00%)</title><rect x="863.2" y="597" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.21" y="607.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (21 samples, 0.40%; -0.02%)</title><rect x="717.6" y="677" width="4.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="720.60" y="687.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="73.1" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="76.13" y="543.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (25 samples, 0.47%; -0.09%)</title><rect x="307.2" y="501" width="5.6" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="310.22" y="511.5" ></text>
</g>
<g >
<title>frozen_mutation::mutation_view (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.20" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (1 samples, 0.02%; +0.02%)</title><rect x="821.9" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="824.86" y="367.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="607.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="431.5" ></text>
</g>
<g >
<title>make_stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%; 0.00%)</title><rect x="463.7" y="581" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="466.73" y="591.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::modification_statement (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.47" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1124.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.42" y="415.5" ></text>
</g>
<g >
<title>database::query (20 samples, 0.38%; -0.08%)</title><rect x="100.9" y="709" width="4.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="103.92" y="719.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="941.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.68" y="559.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="107.4" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="110.37" y="527.5" ></text>
</g>
<g >
<title>schema::get_partitioner (1 samples, 0.02%; 0.00%)</title><rect x="949.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.91" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.08%; 0.00%)</title><rect x="157.6" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="160.61" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (3 samples, 0.06%; +0.06%)</title><rect x="821.0" y="325" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="823.97" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="365.9" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="368.91" y="399.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="106.9" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.93" y="559.5" ></text>
</g>
<g >
<title>unimplemented::warn (1 samples, 0.02%; +0.02%)</title><rect x="882.6" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="885.55" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="645" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.02%)</title><rect x="622.7" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="625.68" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="983.5" y="533" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="986.48" y="543.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="623.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mK_UPDATE (1 samples, 0.02%; 0.00%)</title><rect x="32.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.01" y="479.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::merging_reader (15 samples, 0.28%; +0.02%)</title><rect x="497.7" y="501" width="3.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="500.74" y="511.5" ></text>
</g>
<g >
<title>seastar::reactor::service_highres_timer (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (2 samples, 0.04%; +0.04%)</title><rect x="84.7" y="725" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="87.69" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set_value&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="103.1" y="693" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="106.15" y="703.5" ></text>
</g>
<g >
<title>compound_type&lt; (7 samples, 0.13%; +0.02%)</title><rect x="931.5" y="581" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="934.46" y="591.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (1 samples, 0.02%; +0.02%)</title><rect x="750.5" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="753.50" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="102.9" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="105.92" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (26 samples, 0.49%; 0.00%)</title><rect x="244.1" y="293" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="247.09" y="303.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="470.2" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="473.17" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.06%)</title><rect x="975.5" y="565" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="978.47" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="708.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.04" y="703.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::emit (1 samples, 0.02%; +0.02%)</title><rect x="24.7" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.67" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="575.5" ></text>
</g>
<g >
<title>hwloc_bitmap_fill (1 samples, 0.02%; +0.02%)</title><rect x="79.4" y="821" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="82.36" y="831.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; +0.02%)</title><rect x="10.4" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="13.44" y="687.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1008.4" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1011.38" y="511.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="844.8" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="847.76" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.09%; +0.09%)</title><rect x="955.2" y="533" width="1.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="958.24" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="665.8" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="668.80" y="703.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (11 samples, 0.21%; +0.13%)</title><rect x="526.4" y="405" width="2.5" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="529.42" y="415.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (9 samples, 0.17%; 0.00%)</title><rect x="495.1" y="517" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.07" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="805.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="808.19" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="710.3" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="713.26" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (18 samples, 0.34%; 0.00%)</title><rect x="774.1" y="549" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="777.07" y="559.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer&gt; (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="741" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="704.9" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.93" y="655.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::create_keyspace_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="62.0" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="65.02" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="864.1" y="549" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="867.10" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="57.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.57" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="660.9" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="663.91" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="287.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%; +0.02%)</title><rect x="455.3" y="437" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="458.28" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="549.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.76" y="447.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::complete (1 samples, 0.02%; 0.00%)</title><rect x="1167.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.77" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="41.8" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="44.79" y="383.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="463.5" ></text>
</g>
<g >
<title>cql3::query_options::prepare (1 samples, 0.02%; 0.00%)</title><rect x="750.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.28" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::~abstract_read_executor (6 samples, 0.11%; 0.00%)</title><rect x="1164.4" y="645" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1167.43" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="447.5" ></text>
</g>
<g >
<title>evictable_reader::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="431.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (4 samples, 0.08%; 0.00%)</title><rect x="886.3" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.33" y="527.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::push (1 samples, 0.02%; 0.00%)</title><rect x="39.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.34" y="543.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; -0.04%)</title><rect x="704.7" y="645" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="707.71" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="49.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.79" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (7 samples, 0.13%; 0.00%)</title><rect x="415.3" y="405" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="418.26" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1045.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1048.72" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; +0.08%)</title><rect x="925.9" y="517" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="928.90" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (3 samples, 0.06%; 0.00%)</title><rect x="491.1" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="494.07" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt; &gt;::~unique_ptr (8 samples, 0.15%; -0.02%)</title><rect x="840.3" y="597" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="843.31" y="607.5" ></text>
</g>
<g >
<title>empty_flat_reader::empty_flat_reader (8 samples, 0.15%; +0.02%)</title><rect x="573.5" y="469" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="576.55" y="479.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (411 samples, 7.74%; +0.02%)</title><rect x="349.9" y="469" width="91.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="352.91" y="479.5" >mutation_f..</text>
</g>
<g >
<title>reader_permit::signal (1 samples, 0.02%; +0.02%)</title><rect x="327.7" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="330.68" y="527.5" ></text>
</g>
<g >
<title>std::operator- (2 samples, 0.04%; +0.04%)</title><rect x="44.7" y="373" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="47.68" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="347.2" y="437" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="350.24" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (45 samples, 0.85%; -0.02%)</title><rect x="441.5" y="453" width="10.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="444.50" y="463.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1123.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.75" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="194.3" y="437" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="197.29" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.57" y="559.5" ></text>
</g>
<g >
<title>locator::simple_strategy::calculate_natural_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="107.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.81" y="703.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="265.0" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="267.98" y="351.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="436.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="439.61" y="447.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (17 samples, 0.32%; +0.04%)</title><rect x="260.1" y="341" width="3.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="263.09" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_permissions_statement, std::default_delete&lt;cql3::statements::list_permissions_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.4" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="68.35" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="677.4" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="680.36" y="655.5" ></text>
</g>
<g >
<title>do_query&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="543.5" ></text>
</g>
<g >
<title>operator delete (14 samples, 0.26%; +0.09%)</title><rect x="453.1" y="453" width="3.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="456.06" y="463.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (5 samples, 0.09%; 0.00%)</title><rect x="941.0" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="944.02" y="575.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1131.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.09" y="463.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; -0.02%)</title><rect x="1130.4" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1133.42" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::execute (18 samples, 0.34%; -0.02%)</title><rect x="992.6" y="549" width="4.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="995.59" y="559.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.04%)</title><rect x="269.9" y="325" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="272.88" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1047.9" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1050.95" y="399.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (9 samples, 0.17%; 0.00%)</title><rect x="698.7" y="693" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="701.70" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (5 samples, 0.09%; -0.02%)</title><rect x="219.0" y="437" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="221.97" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.06%)</title><rect x="264.5" y="357" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="267.54" y="367.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="449.9" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="452.94" y="399.5" ></text>
</g>
<g >
<title>seastar::(anonymous namespace)::thread_wake_task::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="664.5" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.47" y="719.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;rows_entry, schema const&amp;, position_in_partition_view&amp;, seastar::bool_class&lt;dummy_tag&gt;, seastar::bool_class&lt;continuous_tag&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.4" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.45" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="1047.7" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.72" y="431.5" ></text>
</g>
<g >
<title>validation::validate_column_family (28 samples, 0.53%; -0.02%)</title><rect x="842.3" y="597" width="6.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="845.31" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;seastar::measuring_output_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="335.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="208.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="211.07" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_create_storage (4 samples, 0.08%; +0.02%)</title><rect x="160.1" y="613" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="163.06" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="944.6" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="947.57" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="447.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (744 samples, 14.02%; -0.04%)</title><rect x="170.9" y="597" width="165.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="173.95" y="607.5" >merging_reader&lt;mutati..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="447.5" ></text>
</g>
<g >
<title>commitlog_entry_writer::serialize&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1126.4" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.42" y="463.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%; -0.06%)</title><rect x="571.1" y="469" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="574.10" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="852.1" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="855.09" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; -0.02%)</title><rect x="441.5" y="437" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="444.50" y="447.5" ></text>
</g>
<g >
<title>std::set&lt;unsigned int, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="35.1" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="38.12" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (576 samples, 10.85%; +0.02%)</title><rect x="969.3" y="613" width="128.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="972.25" y="623.5" >service::storage..</text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (8 samples, 0.15%; -0.04%)</title><rect x="277.9" y="373" width="1.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="280.88" y="383.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="215.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="217.97" y="431.5" ></text>
</g>
<g >
<title>query_result_builder::consume (195 samples, 3.67%; 0.00%)</title><rect x="371.0" y="421" width="43.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="374.02" y="431.5" >quer..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (6 samples, 0.11%; +0.02%)</title><rect x="847.2" y="533" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="850.20" y="543.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (49 samples, 0.92%; +0.04%)</title><rect x="767.4" y="597" width="10.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="770.40" y="607.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::create_service_level_statement, std::default_delete&lt;cql3::statements::create_service_level_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.24" y="575.5" ></text>
</g>
<g >
<title>query::result_set::result_set (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="543.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="1063.5" y="533" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1066.51" y="543.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="686.9" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="689.92" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; -0.04%)</title><rect x="643.6" y="645" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="646.57" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.58%; 0.00%)</title><rect x="881.7" y="677" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.66" y="687.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (3 samples, 0.06%; +0.04%)</title><rect x="674.0" y="693" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="677.03" y="703.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="75.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.58" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;::set_value&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%; -0.02%)</title><rect x="1143.8" y="693" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1146.76" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="628.7" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="631.68" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_next_bkt (5 samples, 0.09%; 0.00%)</title><rect x="1155.5" y="661" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1158.54" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="399.5" ></text>
</g>
<g >
<title>bytes_ostream::alloc_new (9 samples, 0.17%; +0.02%)</title><rect x="637.8" y="597" width="2.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="640.79" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="798.1" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="801.07" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7 samples, 0.13%; 0.00%)</title><rect x="708.7" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="711.71" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (3 samples, 0.06%; -0.06%)</title><rect x="959.0" y="597" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="962.02" y="607.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (6 samples, 0.11%; 0.00%)</title><rect x="45.8" y="405" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.79" y="415.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnFamilyName (5 samples, 0.09%; 0.00%)</title><rect x="38.2" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="575.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.02%)</title><rect x="924.8" y="565" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="927.79" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (24 samples, 0.45%; +0.02%)</title><rect x="205.9" y="437" width="5.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="208.85" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (489 samples, 9.21%; 0.00%)</title><rect x="197.8" y="501" width="108.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="200.85" y="511.5" >seastar::do_u..</text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (39 samples, 0.73%; +0.02%)</title><rect x="188.1" y="485" width="8.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="191.07" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,026 samples, 19.33%; +0.06%)</title><rect x="891.7" y="677" width="228.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="894.67" y="687.5" >seastar::noncopyable_function&lt;..</text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.01" y="351.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="616.9" y="549" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="619.90" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (2 samples, 0.04%; +0.04%)</title><rect x="922.8" y="533" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="925.79" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (545 samples, 10.27%; -0.04%)</title><rect x="342.6" y="565" width="121.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="345.57" y="575.5" >flat_mutation_r..</text>
</g>
<g >
<title>flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="644.0" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="647.02" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::promise_type::run_and_dispose (1 samples, 0.02%; +0.02%)</title><rect x="86.0" y="725" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="89.03" y="735.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (11 samples, 0.21%; +0.02%)</title><rect x="1145.8" y="677" width="2.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1148.76" y="687.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::with_permit (50 samples, 0.94%; +0.02%)</title><rect x="1027.0" y="453" width="11.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1030.05" y="463.5" ></text>
</g>
<g >
<title>distributed_loader::populate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="703.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; -0.04%)</title><rect x="97.4" y="629" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="100.37" y="639.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.02" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;std::optional&lt;ser::qr_cell_view&gt; &gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="463.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="671.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (1 samples, 0.02%; 0.00%)</title><rect x="269.2" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.21" y="351.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; -0.04%)</title><rect x="437.9" y="453" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="440.94" y="463.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="683.4" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="686.36" y="655.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; -0.02%)</title><rect x="43.1" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="46.12" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::stats (3 samples, 0.06%; +0.04%)</title><rect x="199.6" y="453" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="202.63" y="463.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="453" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="919.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="922.45" y="543.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (1 samples, 0.02%; +0.02%)</title><rect x="768.1" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="771.06" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;utils::UUID&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1146.2" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1149.21" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::vector (11 samples, 0.21%; +0.02%)</title><rect x="1103.5" y="597" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1106.52" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="76.7" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.69" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.91" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%; 0.00%)</title><rect x="589.8" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.77" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;query::querier&lt; (8 samples, 0.15%; 0.00%)</title><rect x="656.2" y="645" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.24" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.80" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="663.4" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="666.36" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; 0.00%)</title><rect x="747.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.39" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (8 samples, 0.15%; 0.00%)</title><rect x="489.3" y="469" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="492.29" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="347.7" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="350.68" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (1 samples, 0.02%; +0.02%)</title><rect x="463.9" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="466.95" y="575.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (18 samples, 0.34%; +0.04%)</title><rect x="867.0" y="645" width="4.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="869.99" y="655.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; 0.00%)</title><rect x="847.9" y="517" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.87" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="872.1" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.10" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::max_size (1 samples, 0.02%; +0.02%)</title><rect x="24.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.01" y="447.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%; +0.02%)</title><rect x="664.5" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="667.47" y="703.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="80.9" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="83.92" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (589 samples, 11.10%; +0.06%)</title><rect x="338.1" y="613" width="131.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="341.12" y="623.5" >seastar::future&lt;..</text>
</g>
<g >
<title>reader_permit::mark_unused (3 samples, 0.06%; +0.06%)</title><rect x="122.9" y="661" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="125.93" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.02%)</title><rect x="94.9" y="661" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="97.92" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="273.2" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="276.21" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::value, true&gt;::make&lt;cql3::raw_value, seastar::shared_ptr&lt;abstract_type const&gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="68.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.91" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="313.0" y="501" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="316.00" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::token&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::token&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::token&gt; const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="977.0" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="980.03" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::attributes::raw*, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.91" y="495.5" ></text>
</g>
<g >
<title>query_state::query_state (1 samples, 0.02%; +0.02%)</title><rect x="121.4" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="124.38" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; +0.02%)</title><rect x="439.5" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="442.50" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_create_nodes (9 samples, 0.17%; 0.00%)</title><rect x="587.3" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.33" y="575.5" ></text>
</g>
<g >
<title>cql3::raw_value::make_value (2 samples, 0.04%; +0.02%)</title><rect x="918.6" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="921.56" y="511.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (1 samples, 0.02%; +0.02%)</title><rect x="54.5" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="57.46" y="527.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (5 samples, 0.09%; +0.02%)</title><rect x="778.7" y="613" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="781.73" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (6 samples, 0.11%; 0.00%)</title><rect x="41.3" y="501" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="511.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compact_mutation_state&lt; (45 samples, 0.85%; 0.00%)</title><rect x="581.3" y="629" width="10.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="584.33" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::_M_realloc_insert&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.09%; -0.04%)</title><rect x="1159.8" y="693" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1162.77" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&amp;&amp;, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="840.1" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="843.09" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="479.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; +0.02%)</title><rect x="470.6" y="629" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="473.62" y="639.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="156.1" y="645" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="159.06" y="655.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1024.8" y="453" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1027.83" y="463.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (17 samples, 0.32%; 0.00%)</title><rect x="823.9" y="373" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.86" y="383.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="559.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_host_id_if_known (5 samples, 0.09%; -0.02%)</title><rect x="1146.4" y="661" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1149.43" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.35" y="591.5" ></text>
</g>
<g >
<title>schema_registry::get_or_load (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="92.7" y="677" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="95.70" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.02%)</title><rect x="255.6" y="325" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="258.65" y="335.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="40.9" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="43.90" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_cql (1 samples, 0.02%; 0.00%)</title><rect x="77.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.36" y="719.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (3 samples, 0.06%; +0.06%)</title><rect x="860.3" y="629" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="863.32" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; -0.02%)</title><rect x="347.0" y="453" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="350.02" y="463.5" ></text>
</g>
<g >
<title>seastar::posix_thread::start_routine (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="821" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="831.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="924.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="927.34" y="575.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (29 samples, 0.55%; 0.00%)</title><rect x="66.9" y="661" width="6.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.91" y="671.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (4 samples, 0.08%; 0.00%)</title><rect x="184.5" y="485" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="187.51" y="495.5" ></text>
</g>
<g >
<title>ser::qr_partition__rows&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="414.2" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="417.15" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;::_S_do_relocate (1 samples, 0.02%; +0.02%)</title><rect x="887.7" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="890.66" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (8 samples, 0.15%; +0.06%)</title><rect x="345.9" y="469" width="1.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="348.90" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="36.0" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.01" y="559.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="17.1" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="20.11" y="367.5" ></text>
</g>
<g >
<title>seastar::metrics::metric_groups::add_group (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="543.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (17 samples, 0.32%; +0.02%)</title><rect x="459.7" y="501" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="462.72" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="834.5" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="837.53" y="511.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="904.3" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="907.34" y="607.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::make_stage_for_group (27 samples, 0.51%; 0.00%)</title><rect x="1128.4" y="613" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.42" y="623.5" ></text>
</g>
<g >
<title>allocation_strategy::destroy&lt;partition_version&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.75" y="447.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.58" y="591.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="25.8" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="28.78" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="446.6" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="449.61" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="619.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="622.12" y="575.5" ></text>
</g>
<g >
<title>db::get_cdc_streams_descriptions_v2_mutation (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;reader_permit::impl, true&gt;::make&lt;reader_concurrency_semaphore&amp;, schema const* const&amp;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, reader_resources&amp;, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (7 samples, 0.13%; 0.00%)</title><rect x="1036.6" y="437" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1039.61" y="447.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; -0.02%)</title><rect x="558.0" y="485" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="560.98" y="495.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1044.2" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1047.17" y="479.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%; +0.04%)</title><rect x="847.9" y="501" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="850.87" y="511.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; -0.06%)</title><rect x="656.0" y="645" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="659.02" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;database, false&gt;::make&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.69" y="639.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="853.7" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="856.65" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::nonwrapping_interval (2 samples, 0.04%; 0.00%)</title><rect x="884.1" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.11" y="543.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cfName (3 samples, 0.06%; 0.00%)</title><rect x="38.7" y="549" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.68" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="495.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="551.3" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.31" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::bstbase&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1125.8" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1128.75" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="76.2" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.25" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="1093.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.30" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="737.6" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="740.61" y="575.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; -0.02%)</title><rect x="983.0" y="565" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="986.03" y="575.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::pop (1 samples, 0.02%; 0.00%)</title><rect x="44.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.24" y="527.5" ></text>
</g>
<g >
<title>db::system_keyspace::make (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="543.5" ></text>
</g>
<g >
<title>__start_context (2 samples, 0.04%; 0.00%)</title><rect x="10.4" y="805" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="815.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="927.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="930.46" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_digest_requests (1 samples, 0.02%; +0.02%)</title><rect x="1051.1" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1054.06" y="543.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (5 samples, 0.09%; +0.02%)</title><rect x="131.2" y="581" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="134.16" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="871.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="874.88" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="677.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="680.36" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="623.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::set_text (1 samples, 0.02%; 0.00%)</title><rect x="28.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.67" y="479.5" ></text>
</g>
<g >
<title>row_cache::invalidate (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="639.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (1 samples, 0.02%; 0.00%)</title><rect x="851.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="854.87" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (15 samples, 0.28%; 0.00%)</title><rect x="843.4" y="549" width="3.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.43" y="559.5" ></text>
</g>
<g >
<title>_ZSt5visitIR18overloaded_functorIJZN4cql34expr9find_atomIZNS2_4findERKNS2_10expressionENS2_6oper_tEEUlRKNS2_15binary_operatorEE_EEPS9_S6_T_EUlSA_E_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_8constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_11conjunctionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_12column_valueEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_5tokenEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_21unresolved_identifierEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_25column_mutation_attributeEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13function_callEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4castEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_15field_selectionEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_4nullEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_13bind_variableEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_16untyped_constantEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_17tuple_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_22collection_constructorEE_ZNS3_ISB_EESC_S6_SD_EUlRKNS2_20usertype_constructorEE_EEJRSt7variantIJSJ_S8_SN_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_SF_S1R_S1V_S1Z_EEEENSt13invoke_resultISD_JDpDTclsr3stdE3getILm0EEclsr3stdE7declvalIT0_EEEEEE4typeEOSD_DpOS29_ (1 samples, 0.02%; +0.02%)</title><rect x="684.9" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="687.92" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::maybe_reclaim (1 samples, 0.02%; +0.02%)</title><rect x="983.9" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="986.92" y="495.5" ></text>
</g>
<g >
<title>row::external_memory_usage (20 samples, 0.38%; -0.08%)</title><rect x="259.4" y="357" width="4.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="262.43" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (12 samples, 0.23%; 0.00%)</title><rect x="303.4" y="437" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="306.44" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_base&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_base&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="495.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::operator== (2 samples, 0.04%; +0.02%)</title><rect x="775.0" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="777.95" y="511.5" ></text>
</g>
<g >
<title>std::apply&lt;row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, query::non_null_data_value&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="431.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; +0.02%)</title><rect x="451.7" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="454.72" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::list_service_level_attachments_statement*, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="62.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="65.46" y="575.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="623.5" ></text>
</g>
<g >
<title>cdc::get_generation_id_for (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="623.5" ></text>
</g>
<g >
<title>row_tombstone::apply (2 samples, 0.04%; +0.02%)</title><rect x="436.8" y="437" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="439.83" y="447.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (1 samples, 0.02%; +0.02%)</title><rect x="814.5" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="817.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="950.6" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="953.58" y="623.5" ></text>
</g>
<g >
<title>seastar::app_template::run_deprecated (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="773" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="783.5" >seastar::app_template::run_deprecated</text>
</g>
<g >
<title>cql3::statements::raw::update_statement::prepare_internal (24 samples, 0.45%; -0.02%)</title><rect x="67.6" y="645" width="5.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="70.58" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="383.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="52.9" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="431.5" ></text>
</g>
<g >
<title>make_empty_flat_reader (9 samples, 0.17%; -0.02%)</title><rect x="573.5" y="517" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="576.55" y="527.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (7 samples, 0.13%; +0.02%)</title><rect x="1115.3" y="597" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1118.31" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::do_fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="79.8" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="575.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%; 0.00%)</title><rect x="265.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.98" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="41.1" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="44.12" y="367.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::finally_body&lt;seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (31 samples, 0.58%; -0.04%)</title><rect x="664.9" y="709" width="6.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="667.91" y="719.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set_value&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%; -0.04%)</title><rect x="720.0" y="661" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="723.05" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;reader_concurrency_semaphore::entry&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="130.3" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="133.27" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1000.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1003.15" y="495.5" ></text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.6" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1129.64" y="431.5" ></text>
</g>
<g >
<title>TLS init function for simple_date_type (1 samples, 0.02%; +0.02%)</title><rect x="67.6" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="70.58" y="639.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (1 samples, 0.02%; 0.00%)</title><rect x="872.5" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="875.55" y="687.5" ></text>
</g>
<g >
<title>db::schema_tables::do_merge_schema (3 samples, 0.06%; 0.00%)</title><rect x="105.4" y="709" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="719.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; -0.04%)</title><rect x="1164.0" y="661" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1166.99" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="864.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.10" y="575.5" ></text>
</g>
<g >
<title>lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="607.3" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="610.34" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (6 samples, 0.11%; +0.02%)</title><rect x="955.0" y="565" width="1.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="958.02" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (2 samples, 0.04%; +0.02%)</title><rect x="222.1" y="405" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="225.08" y="415.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::decorated_key, long, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="1122.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.97" y="383.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (2 samples, 0.04%; +0.04%)</title><rect x="1122.2" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1125.20" y="399.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.09%)</title><rect x="332.1" y="501" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="335.12" y="511.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="383.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="805.6" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="808.63" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="331.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="334.68" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (1 samples, 0.02%; +0.02%)</title><rect x="698.5" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="701.48" y="703.5" ></text>
</g>
<g >
<title>db::system_keyspace_make (6 samples, 0.11%; 0.00%)</title><rect x="106.5" y="709" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="859.9" y="613" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="862.88" y="623.5" ></text>
</g>
<g >
<title>cql3::query_options::get_value_at (1 samples, 0.02%; 0.00%)</title><rect x="918.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="921.34" y="511.5" ></text>
</g>
<g >
<title>std::move&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="56.0" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="59.02" y="527.5" ></text>
</g>
<g >
<title>schema_builder::set_speculative_retry (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="51.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="789.2" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="792.18" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="369.2" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="372.25" y="383.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="533.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="536.75" y="511.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; 0.00%)</title><rect x="431.9" y="373" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="434.94" y="383.5" ></text>
</g>
<g >
<title>_IO_old_init (1 samples, 0.02%; +0.02%)</title><rect x="11.3" y="821" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="14.33" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (3 samples, 0.06%; +0.06%)</title><rect x="592.9" y="629" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="595.89" y="639.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; -0.02%)</title><rect x="947.2" y="613" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="950.24" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="827.9" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="830.86" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_startIndex (1 samples, 0.02%; +0.02%)</title><rect x="27.6" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="30.56" y="463.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (2 samples, 0.04%; 0.00%)</title><rect x="213.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="216.85" y="415.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="719.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="1031.9" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1034.94" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; +0.04%)</title><rect x="845.0" y="501" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="847.98" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::clear (1 samples, 0.02%; -0.04%)</title><rect x="723.6" y="677" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="726.60" y="687.5" ></text>
</g>
<g >
<title>utils::chunked_vector&lt;partition, 131072ul&gt;::chunked_vector (1 samples, 0.02%; +0.02%)</title><rect x="140.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="143.27" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="670.0" y="677" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="673.03" y="687.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::qr_cell_view&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="877.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.66" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::never_speculating_read_executor, true&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, seastar::lw_shared_ptr&lt;table&gt;&amp;, seastar::shared_ptr&lt;service::storage_proxy&gt;&amp;, seastar::lw_shared_ptr&lt;query::read_command&gt;&amp;, nonwrapping_interval&lt;dht::ring_position&gt;, db::consistency_level&amp;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, tracing::trace_state_ptr, service_permit&gt; (30 samples, 0.57%; -0.11%)</title><rect x="1062.8" y="549" width="6.7" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="1065.84" y="559.5" ></text>
</g>
<g >
<title>mutation_querier::consume_end_of_stream (5 samples, 0.09%; 0.00%)</title><rect x="353.0" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="356.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="693.8" y="693" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="696.81" y="703.5" ></text>
</g>
<g >
<title>__strlen_avx2 (6 samples, 0.11%; -0.02%)</title><rect x="1021.5" y="453" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1024.49" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (1 samples, 0.02%; -0.04%)</title><rect x="369.7" y="421" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="372.69" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.02%)</title><rect x="133.4" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="136.38" y="671.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%; +0.02%)</title><rect x="505.1" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="508.08" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (8 samples, 0.15%; 0.00%)</title><rect x="757.4" y="533" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="760.39" y="543.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.86" y="431.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.04%; -0.02%)</title><rect x="1161.1" y="677" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1164.10" y="687.5" ></text>
</g>
<g >
<title>schema::column_at (3 samples, 0.06%; -0.02%)</title><rect x="434.8" y="389" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="437.83" y="399.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%; +0.04%)</title><rect x="943.7" y="565" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="946.69" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (10 samples, 0.19%; 0.00%)</title><rect x="1129.3" y="501" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.31" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="609.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.78" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="842.3" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="845.31" y="527.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (3 samples, 0.06%; -0.02%)</title><rect x="648.7" y="629" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="651.69" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="228.7" y="341" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="231.75" y="351.5" ></text>
</g>
<g >
<title>abstract_type::as_cql3_type (1 samples, 0.02%; +0.02%)</title><rect x="68.0" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="71.02" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (23 samples, 0.43%; +0.04%)</title><rect x="274.8" y="405" width="5.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="277.77" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="798.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="801.52" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (4 samples, 0.08%; +0.06%)</title><rect x="326.8" y="501" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="329.79" y="511.5" ></text>
</g>
<g >
<title>antlr3::DefaultAllocPolicy::StackType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::StackType (1 samples, 0.02%; 0.00%)</title><rect x="19.8" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.78" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_base (1 samples, 0.02%; 0.00%)</title><rect x="57.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.35" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (7 samples, 0.13%; -0.02%)</title><rect x="708.7" y="677" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="711.71" y="687.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="917.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="920.23" y="463.5" ></text>
</g>
<g >
<title>composite::serialize_value&lt;partition_key_view&amp;, signed char*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.58" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="76.9" y="581" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="79.91" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::~shared_ptr_count_for (2 samples, 0.04%; -0.04%)</title><rect x="723.4" y="693" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="726.38" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (4 samples, 0.08%; +0.02%)</title><rect x="162.5" y="629" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="165.50" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (5 samples, 0.09%; +0.02%)</title><rect x="52.2" y="469" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="55.24" y="479.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::find_bucket_index (1 samples, 0.02%; +0.02%)</title><rect x="706.9" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="709.93" y="671.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.02%)</title><rect x="604.0" y="501" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="607.00" y="511.5" ></text>
</g>
<g >
<title>memtable::apply (25 samples, 0.47%; -0.02%)</title><rect x="1120.6" y="469" width="5.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1123.64" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (1 samples, 0.02%; 0.00%)</title><rect x="287.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="289.99" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::allocate (11 samples, 0.21%; +0.02%)</title><rect x="253.2" y="325" width="2.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="256.20" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="777.2" y="501" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="780.18" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="847.6" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="850.65" y="511.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; 0.00%)</title><rect x="1121.3" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.31" y="367.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (54 samples, 1.02%; +0.06%)</title><rect x="321.9" y="565" width="12.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="324.90" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="592.0" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="595.00" y="639.5" ></text>
</g>
<g >
<title>_ZN7seastar12continuationINS_8internal22promise_base_with_typeIvEEZNS_6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14discard_resultEvEUlDpOT_E_ZNSA_14then_impl_nrvoISE_NS4_IvEEEET0_OT_EUlOS3_RSE_ONS_12future_stateIS9_EEE_S9_E15run_and_disposeEv (38 samples, 0.72%; 0.00%)</title><rect x="92.3" y="709" width="8.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="95.25" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="841.2" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="844.20" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="671.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="646.9" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="649.91" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::write_response_handler, true&gt;::make&lt;seastar::shared_ptr&lt;service::storage_proxy&gt;, keyspace&amp;, db::consistency_level&amp;, db::write_type&amp;, std::unique_ptr&lt;service::mutation_holder, std::default_delete&lt;service::mutation_holder&gt; &gt;, utils::small_vector&lt;gms::inet_address, 3ul&gt;, utils::small_vector&lt;gms::inet_address, 1ul&gt; const&amp;, utils::small_vector&lt;gms::inet_address, 1ul&gt;, tracing::trace_state_ptr, service::storage_proxy_stats::write_stats&amp;, service_permit&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1134.0" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.98" y="399.5" ></text>
</g>
<g >
<title>appending_hash&lt;mutation&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="639.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; 0.00%)</title><rect x="702.3" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.26" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="676.0" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="679.03" y="703.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (2 samples, 0.04%; +0.02%)</title><rect x="590.9" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="593.89" y="623.5" ></text>
</g>
<g >
<title>distributed_loader::init_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="767.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.90" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (14 samples, 0.26%; 0.00%)</title><rect x="957.5" y="613" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="960.47" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;cql3::prepared_cache_key_type, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="463.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="383.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="839.0" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.98" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%; +0.06%)</title><rect x="1100.9" y="565" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1103.86" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="49.8" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.79" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; -0.06%)</title><rect x="842.5" y="517" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="845.54" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="110.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="113.70" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::forward_to (2 samples, 0.04%; -0.13%)</title><rect x="738.9" y="709" width="0.5" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="741.94" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="881.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.99" y="543.5" ></text>
</g>
<g >
<title>sstring_hash::operator (4 samples, 0.08%; 0.00%)</title><rect x="859.0" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="861.99" y="591.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="639.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (2 samples, 0.04%; 0.00%)</title><rect x="1085.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.07" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="970.8" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="973.81" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="671.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (1 samples, 0.02%; 0.00%)</title><rect x="77.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.80" y="719.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.12" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::query_options, std::default_delete&lt;cql3::query_options&gt; &gt;::~unique_ptr (13 samples, 0.24%; 0.00%)</title><rect x="702.7" y="693" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.71" y="703.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; -0.06%)</title><rect x="948.6" y="613" width="1.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="951.58" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="961.5" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="964.47" y="623.5" ></text>
</g>
<g >
<title>freeze (8 samples, 0.15%; 0.00%)</title><rect x="1131.5" y="405" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (4 samples, 0.08%; +0.04%)</title><rect x="698.9" y="677" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="701.93" y="687.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (5 samples, 0.09%; 0.00%)</title><rect x="613.6" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="616.56" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="209.0" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="211.96" y="399.5" ></text>
</g>
<g >
<title>table::estimate_read_memory_cost (2 samples, 0.04%; +0.04%)</title><rect x="1043.1" y="469" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1046.06" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (7 samples, 0.13%; +0.02%)</title><rect x="47.8" y="485" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="50.79" y="495.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.04%)</title><rect x="602.9" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="605.89" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::attributes::raw*, false&gt;::_Head_base&lt;cql3::attributes::raw*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="60.9" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="63.91" y="479.5" ></text>
</g>
<g >
<title>write_cell&lt;ser::qr_clustered_row__cells__cells&lt;bytes_ostream&gt; &gt; (137 samples, 2.58%; -0.06%)</title><rect x="383.3" y="389" width="30.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="386.25" y="399.5" >wr..</text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="948.1" y="597" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="951.13" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (7 samples, 0.13%; -0.06%)</title><rect x="1150.9" y="629" width="1.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1153.87" y="639.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%; +0.02%)</title><rect x="612.7" y="565" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="615.67" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; -0.02%)</title><rect x="571.5" y="517" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="574.54" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="990.1" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="993.15" y="575.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, database::query (1 samples, 0.02%; 0.00%)</title><rect x="712.9" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.93" y="719.5" ></text>
</g>
<g >
<title>std::_Enable_default_constructor&lt;true, std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; &gt;::_Enable_default_constructor (1 samples, 0.02%; +0.02%)</title><rect x="59.4" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="62.35" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1033.7" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1036.72" y="383.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="47.1" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="50.13" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (1 samples, 0.02%; +0.02%)</title><rect x="536.2" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="539.20" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (18 samples, 0.34%; +0.11%)</title><rect x="235.6" y="309" width="4.0" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="238.64" y="319.5" ></text>
</g>
<g >
<title>cdc::generation_service::scan_cdc_generations (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="639.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; +0.02%)</title><rect x="16.0" y="757" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.00" y="767.5" ></text>
</g>
<g >
<title>reconcilable_result::reconcilable_result (1 samples, 0.02%; 0.00%)</title><rect x="140.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.27" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="511.5" ></text>
</g>
<g >
<title>mutation_querier::query_static_row (4 samples, 0.08%; +0.04%)</title><rect x="378.8" y="373" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="381.81" y="383.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="501.7" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.74" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; 0.00%)</title><rect x="413.9" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.93" y="415.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="301.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="304.00" y="415.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="789" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="799.5" >seastar::app_template::run</text>
</g>
<g >
<title>std::construct_at&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::entry&gt; (5 samples, 0.09%; 0.00%)</title><rect x="131.2" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.16" y="623.5" ></text>
</g>
<g >
<title>LZ4_compress_fast_extState (1 samples, 0.02%; +0.02%)</title><rect x="10.0" y="821" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::net::inet_address&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="737.8" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="740.83" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (2 samples, 0.04%; +0.04%)</title><rect x="286.3" y="469" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="289.33" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;managed_bytes&gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="887.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="890.22" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="711.2" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="714.15" y="655.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (2 samples, 0.04%; 0.00%)</title><rect x="1126.4" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.42" y="479.5" ></text>
</g>
<g >
<title>tombstone::apply (2 samples, 0.04%; +0.04%)</title><rect x="435.7" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="438.72" y="415.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.51%; 0.00%)</title><rect x="1128.4" y="581" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.42" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;gms::inet_address, std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, table::cache_hit_rate&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3 samples, 0.06%; -0.02%)</title><rect x="733.4" y="645" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="736.38" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; -0.06%)</title><rect x="710.9" y="645" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="713.93" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="351.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (1 samples, 0.02%; +0.02%)</title><rect x="305.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="308.00" y="415.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="639.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="729.2" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="732.16" y="655.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (15 samples, 0.28%; -0.06%)</title><rect x="246.5" y="277" width="3.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="249.53" y="287.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check (3 samples, 0.06%; 0.00%)</title><rect x="354.1" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="357.13" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::has_eq_null (1 samples, 0.02%; 0.00%)</title><rect x="883.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.22" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="475.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="478.51" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="652.2" y="597" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="655.24" y="607.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="140.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.27" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_ptr::~partition_snapshot_ptr (16 samples, 0.30%; +0.02%)</title><rect x="605.8" y="501" width="3.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="608.78" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="828.1" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="831.09" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::check_access (292 samples, 5.50%; 0.00%)</title><rect x="784.3" y="629" width="64.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="787.29" y="639.5" >cql3::s..</text>
</g>
<g >
<title>service::storage_service::replicate_to_all_cores (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="655.5" ></text>
</g>
<g >
<title>partition_entry::make_evictable (1 samples, 0.02%; 0.00%)</title><rect x="10.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="767.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Storage&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false&gt;::_Storage (1 samples, 0.02%; +0.02%)</title><rect x="38.2" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="41.23" y="447.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (3 samples, 0.06%; +0.02%)</title><rect x="1146.9" y="613" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1149.87" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::future_base (1 samples, 0.02%; +0.02%)</title><rect x="793.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="795.96" y="623.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="641.3" y="613" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="644.35" y="623.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;flush_reader::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="79.6" y="661" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="559.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (21 samples, 0.40%; +0.02%)</title><rect x="743.2" y="661" width="4.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="746.17" y="671.5" ></text>
</g>
<g >
<title>schema::rebuild (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="463.5" ></text>
</g>
<g >
<title>mutation_fragment::consume&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt; (8 samples, 0.15%; 0.00%)</title><rect x="80.5" y="677" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.47" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="38.7" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="41.68" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.04%)</title><rect x="535.3" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="538.31" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="459.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="462.28" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="703.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (6 samples, 0.11%; 0.00%)</title><rect x="920.8" y="549" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="923.79" y="559.5" ></text>
</g>
<g >
<title>seastar::gate::enter (1 samples, 0.02%; 0.00%)</title><rect x="1038.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.39" y="447.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::process_partition_key_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="70.5" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.47" y="607.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (2 samples, 0.04%; +0.04%)</title><rect x="32.9" y="437" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="35.90" y="447.5" ></text>
</g>
<g >
<title>database::has_keyspace (14 samples, 0.26%; 0.00%)</title><rect x="856.8" y="629" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.76" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="948.4" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="951.35" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::term&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1114.2" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.19" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (4 samples, 0.08%; +0.08%)</title><rect x="1113.3" y="629" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1116.30" y="639.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="945.0" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="948.02" y="559.5" ></text>
</g>
<g >
<title>locator::token_metadata::get_endpoint (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="607.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1165.5" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1168.55" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="576.0" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="578.99" y="559.5" ></text>
</g>
<g >
<title>posix_memalign (12 samples, 0.23%; -0.02%)</title><rect x="246.8" y="261" width="2.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="249.76" y="271.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; 0.00%)</title><rect x="39.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.34" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.04%)</title><rect x="93.6" y="693" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="96.59" y="703.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (8 samples, 0.15%; -0.06%)</title><rect x="206.3" y="405" width="1.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="209.30" y="415.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; +0.02%)</title><rect x="757.4" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="760.39" y="527.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (25 samples, 0.47%; +0.09%)</title><rect x="442.4" y="421" width="5.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="445.39" y="431.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_metadata.cc (4 samples, 0.08%; +0.08%)</title><rect x="82.9" y="837" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="85.92" y="847.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__timestamp&lt;bytes_ostream&gt;::skip_expiry (18 samples, 0.34%; +0.11%)</title><rect x="399.0" y="373" width="4.0" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="402.04" y="383.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; -0.15%)</title><rect x="1036.8" y="405" width="1.1" height="15.0" fill="rgb(126,126,255)" rx="2" ry="2" />
<text  x="1039.83" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::wait (1 samples, 0.02%; 0.00%)</title><rect x="639.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.79" y="655.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerType (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%; +0.02%)</title><rect x="85.1" y="725" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="88.14" y="735.5" ></text>
</g>
<g >
<title>database::query (102 samples, 1.92%; +0.24%)</title><rect x="1015.9" y="469" width="22.7" height="15.0" fill="rgb(255,73,73)" rx="2" ry="2" />
<text  x="1018.93" y="479.5" >d..</text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (5 samples, 0.09%; -0.04%)</title><rect x="659.4" y="613" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="662.36" y="623.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; 0.00%)</title><rect x="298.6" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="301.55" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="58.9" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.91" y="351.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.08%)</title><rect x="285.4" y="453" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="288.44" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; +0.02%)</title><rect x="663.6" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="666.58" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_get_limit (2 samples, 0.04%; +0.04%)</title><rect x="961.7" y="629" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="964.69" y="639.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (10 samples, 0.19%; 0.00%)</title><rect x="40.5" y="517" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.46" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; -0.09%)</title><rect x="579.3" y="597" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="582.33" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="722.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="725.27" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="1026.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.83" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.04%)</title><rect x="588.4" y="517" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="591.44" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (5 samples, 0.09%; +0.06%)</title><rect x="903.4" y="613" width="1.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="906.45" y="623.5" ></text>
</g>
<g >
<title>db::system_keyspace::query (1 samples, 0.02%; 0.00%)</title><rect x="664.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.69" y="703.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="536.4" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="539.42" y="527.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="702.7" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="705.71" y="687.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="748.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="751.50" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::whereClause (15 samples, 0.28%; 0.00%)</title><rect x="57.4" y="565" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.35" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="830.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.75" y="431.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.02%)</title><rect x="613.6" y="549" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="616.56" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="75.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.58" y="639.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="366.8" y="389" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="369.80" y="399.5" ></text>
</g>
<g >
<title>service::storage_service::join_cluster (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="751.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="94.5" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="97.48" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (6 samples, 0.11%; 0.00%)</title><rect x="41.3" y="421" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;global_schema_ptr, std::allocator&lt;global_schema_ptr&gt; &gt;::_M_realloc_insert&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="655.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (1 samples, 0.02%; +0.02%)</title><rect x="660.5" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="663.47" y="639.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (8 samples, 0.15%; -0.04%)</title><rect x="822.1" y="341" width="1.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="825.08" y="351.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.86" y="415.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEENK4$_43clERKNSF_15binary_operatorEEUlRKNSF_12column_valueEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_17tuple_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlNSF_5tokenEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlSS_E_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_11conjunctionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_8constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_21unresolved_identifierEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_25column_mutation_attributeEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13function_callEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4castEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_15field_selectionEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_4nullEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_13bind_variableEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_16untyped_constantEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_22collection_constructorEE_ZZNSF_19possible_lhs_valuesESI_SL_SO_ENKSP_clESS_EUlRKNSF_20usertype_constructorEE_EERS4_IJS14_SQ_ST_S11_S1C_S1G_S1K_S1O_S1S_S1W_S20_S24_S18_SX_S28_S2C_EEEJEEESt16integer_sequenceImJLm2EEEE14__visit_invokeES2H_S2J_ (98 samples, 1.85%; -0.06%)</title><rect x="905.7" y="581" width="21.8" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="908.67" y="591.5" >_..</text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; +0.02%)</title><rect x="740.5" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="743.50" y="719.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="463.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1112.9" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1115.86" y="591.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="58.7" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.69" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt;::reserve (2 samples, 0.04%; -0.02%)</title><rect x="1147.8" y="661" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1150.76" y="671.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (8 samples, 0.15%; -0.02%)</title><rect x="209.0" y="405" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="211.96" y="415.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; -0.02%)</title><rect x="696.7" y="629" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="699.70" y="639.5" ></text>
</g>
<g >
<title>seastar::promise&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="1119.8" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1122.75" y="687.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_clustered_row&lt;bytes_ostream&gt;::skip_key (3 samples, 0.06%; -0.04%)</title><rect x="382.4" y="389" width="0.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="385.36" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (13 samples, 0.24%; +0.04%)</title><rect x="1149.5" y="661" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1152.54" y="671.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (738 samples, 13.90%; 0.00%)</title><rect x="172.3" y="581" width="164.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="175.28" y="591.5" >seastar::repeat&lt;mergi..</text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="960.1" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="963.14" y="607.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::impl::add_registration (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="44.7" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::_Vector_impl::_Vector_impl (1 samples, 0.02%; +0.02%)</title><rect x="57.4" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="60.35" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="480.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="483.40" y="559.5" ></text>
</g>
<g >
<title>seastar::reactor::run_some_tasks (4,856 samples, 91.48%; +0.09%)</title><rect x="87.1" y="725" width="1079.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="90.14" y="735.5" >seastar::reactor::run_some_tasks</text>
</g>
<g >
<title>ser::writer_of_column&lt;bytes_ostream&gt;::write_id (1 samples, 0.02%; +0.02%)</title><rect x="1132.4" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1135.42" y="319.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_common&lt;false, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%; 0.00%)</title><rect x="852.5" y="629" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="855.54" y="639.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (2 samples, 0.04%; +0.04%)</title><rect x="202.1" y="453" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="205.07" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::_M_realloc_insert&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; -0.04%)</title><rect x="301.4" y="405" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="304.44" y="415.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (4 samples, 0.08%; +0.02%)</title><rect x="838.8" y="501" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="841.76" y="511.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~_Deque_base (8 samples, 0.15%; -0.02%)</title><rect x="652.5" y="597" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="655.46" y="607.5" ></text>
</g>
<g >
<title>__libc_start_main (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="837" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="847.5" >__libc_start_main</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="469" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="191.4" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="194.40" y="463.5" ></text>
</g>
<g >
<title>database::setup_metrics (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="559.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::delete_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="62.9" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="65.91" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; +0.02%)</title><rect x="957.0" y="613" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="960.02" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="542.4" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="545.42" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="469" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; +0.02%)</title><rect x="622.2" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="625.23" y="639.5" ></text>
</g>
<g >
<title>seastar::uninitialized_string&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="78.2" y="709" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.25" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.04%)</title><rect x="1063.5" y="517" width="2.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1066.51" y="527.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%; +0.02%)</title><rect x="1126.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1129.20" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::io_queue_submission_pollfn::poll (2 samples, 0.04%; 0.00%)</title><rect x="1167.3" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.32" y="719.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::optional&lt;auth::resource&gt;&amp;&amp;, service::client_state::check_has_permission (1 samples, 0.02%; +0.02%)</title><rect x="835.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="838.42" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (284 samples, 5.35%; 0.00%)</title><rect x="16.0" y="805" width="63.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.00" y="815.5" >seasta..</text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="270.8" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="273.76" y="351.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.11%; 0.00%)</title><rect x="861.4" y="613" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.43" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="74.2" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.25" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; 0.00%)</title><rect x="880.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.33" y="623.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="82.2" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="85.25" y="607.5" ></text>
</g>
<g >
<title>sstables::file_writer::write (1 samples, 0.02%; 0.00%)</title><rect x="81.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.36" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="646.2" y="645" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="649.24" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::sort_endpoints_by_proximity (9 samples, 0.17%; -0.09%)</title><rect x="1085.7" y="533" width="2.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="1088.74" y="543.5" ></text>
</g>
<g >
<title>std::operator+ (3 samples, 0.06%; 0.00%)</title><rect x="42.0" y="373" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.01" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (4 samples, 0.08%; +0.02%)</title><rect x="700.9" y="693" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="703.93" y="703.5" ></text>
</g>
<g >
<title>table::add_coordinator_read_latency (1 samples, 0.02%; +0.02%)</title><rect x="1157.1" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1160.10" y="687.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="301.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.67" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="57.1" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="60.13" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::push_static_row (15 samples, 0.28%; -0.02%)</title><rect x="302.8" y="469" width="3.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="305.78" y="479.5" ></text>
</g>
<g >
<title>seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;::check (1 samples, 0.02%; +0.02%)</title><rect x="849.4" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="852.43" y="639.5" ></text>
</g>
<g >
<title>ser::canonical_mutation_view::partition (1 samples, 0.02%; 0.00%)</title><rect x="107.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.37" y="559.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; 0.00%)</title><rect x="838.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.09" y="527.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="788.7" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="791.74" y="543.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (3 samples, 0.06%; -0.06%)</title><rect x="18.0" y="693" width="0.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="21.00" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="548.9" y="389" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="551.87" y="399.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="319.5" ></text>
</g>
<g >
<title>__start_context (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="789" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="799.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="528.9" y="405" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="531.86" y="415.5" ></text>
</g>
<g >
<title>_Unwind_IteratePhdrCallback (2 samples, 0.04%; +0.02%)</title><rect x="11.6" y="805" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="14.56" y="815.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="607.5" ></text>
</g>
<g >
<title>query::querier_base::querier_base (490 samples, 9.23%; -0.08%)</title><rect x="471.5" y="629" width="108.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="474.51" y="639.5" >query::querie..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%; +0.02%)</title><rect x="1189.8" y="789" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1192.78" y="799.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::get_local_snitch_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1086.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1088.96" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (24 samples, 0.45%; -0.09%)</title><rect x="956.4" y="629" width="5.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="959.36" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.04%)</title><rect x="873.0" y="629" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="875.99" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (2 samples, 0.04%; 0.00%)</title><rect x="70.0" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.02" y="607.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (9 samples, 0.17%; 0.00%)</title><rect x="938.1" y="549" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="941.13" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="463.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (2 samples, 0.04%; +0.04%)</title><rect x="182.5" y="517" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="185.51" y="527.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%; +0.02%)</title><rect x="825.0" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="827.97" y="351.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="1151.3" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.32" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const*, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="818.7" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="821.75" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="48.2" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="51.24" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="72.0" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="75.02" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="1132.0" y="341" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.98" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cql3::raw_value const*, cql3::raw_value*&gt; (3 samples, 0.06%; 0.00%)</title><rect x="874.1" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="877.10" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::scylla_tables (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="479.5" ></text>
</g>
<g >
<title>ser::deletable_row_view::deleted_at (1 samples, 0.02%; +0.02%)</title><rect x="1124.9" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1127.86" y="447.5" ></text>
</g>
<g >
<title>atomic_cell::make_live (1 samples, 0.02%; 0.00%)</title><rect x="107.1" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="808.1" y="485" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="811.08" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (40 samples, 0.75%; +0.04%)</title><rect x="714.9" y="709" width="8.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="717.93" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (2 samples, 0.04%; 0.00%)</title><rect x="46.7" y="341" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="623.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="479.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::execution_loop (2,499 samples, 47.08%; -0.02%)</title><rect x="108.9" y="709" width="555.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="111.93" y="719.5" >reader_concurrency_semaphore::execution_loop</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="949.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="952.46" y="607.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.04%)</title><rect x="940.1" y="597" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="943.13" y="607.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="70.7" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="73.69" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="1057.5" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1060.51" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (3 samples, 0.06%; 0.00%)</title><rect x="1154.9" y="661" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1157.88" y="671.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="415.5" ></text>
</g>
<g >
<title>query::result::builder::add_partition (8 samples, 0.15%; -0.09%)</title><rect x="362.8" y="389" width="1.8" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="365.80" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::partition_tombstone (9 samples, 0.17%; +0.02%)</title><rect x="554.6" y="453" width="2.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="557.65" y="463.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="37.8" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="40.79" y="415.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (6 samples, 0.11%; -0.02%)</title><rect x="933.9" y="549" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="936.90" y="559.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (3 samples, 0.06%; +0.04%)</title><rect x="1109.7" y="629" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1112.75" y="639.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (7 samples, 0.13%; 0.00%)</title><rect x="75.8" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="37.3" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.34" y="543.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (16 samples, 0.30%; -0.06%)</title><rect x="862.8" y="629" width="3.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="865.77" y="639.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (1 samples, 0.02%; 0.00%)</title><rect x="16.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.45" y="735.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; -0.09%)</title><rect x="617.6" y="549" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="620.56" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="901.2" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="904.22" y="639.5" ></text>
</g>
<g >
<title>database::find_column_family (5 samples, 0.09%; +0.02%)</title><rect x="785.4" y="581" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="788.40" y="591.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;bplus::data&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (3 samples, 0.06%; 0.00%)</title><rect x="1121.1" y="389" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="836.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="839.76" y="543.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (39 samples, 0.73%; -0.06%)</title><rect x="819.2" y="421" width="8.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="822.19" y="431.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="1110.4" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1113.41" y="623.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; 0.00%)</title><rect x="76.0" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.02" y="527.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (4 samples, 0.08%; -0.02%)</title><rect x="1130.2" y="405" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1133.20" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="20.0" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="23.00" y="559.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (1 samples, 0.02%; +0.02%)</title><rect x="1127.8" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1130.75" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; -0.04%)</title><rect x="756.5" y="533" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="759.50" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::finally_body&lt;table::stop (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1143.5" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1146.54" y="703.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.6" y="309" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.65" y="319.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1132.0" y="357" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.98" y="367.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt; &gt;::invoke&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (132 samples, 2.49%; +0.11%)</title><rect x="1014.2" y="485" width="29.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1017.16" y="495.5" >se..</text>
</g>
<g >
<title>cql3::query_processor::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="511.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::clone (1 samples, 0.02%; -0.02%)</title><rect x="535.3" y="517" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="538.31" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; +0.02%)</title><rect x="966.1" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="969.14" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.46" y="479.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="695.6" y="645" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="698.59" y="655.5" ></text>
</g>
<g >
<title>range_tombstone_list::slice (7 samples, 0.13%; +0.02%)</title><rect x="269.4" y="357" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="272.43" y="367.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (2 samples, 0.04%; 0.00%)</title><rect x="880.1" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.11" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="1022.8" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1025.83" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="639.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="74.9" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.91" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="511.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::empty (1 samples, 0.02%; +0.02%)</title><rect x="959.7" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="962.69" y="607.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; +0.04%)</title><rect x="43.6" y="373" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="46.57" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="623.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; -0.02%)</title><rect x="544.6" y="453" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="547.65" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::push_static_row (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.25" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; +0.02%)</title><rect x="501.1" y="485" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="504.07" y="495.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%; +0.02%)</title><rect x="75.1" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="78.14" y="687.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="1031.5" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1034.50" y="367.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedState (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="559.5" ></text>
</g>
<g >
<title>mutation_source::operator= (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="751.5" ></text>
</g>
<g >
<title>cql3::expr::constant::constant (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.80" y="623.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (24 samples, 0.45%; -0.02%)</title><rect x="716.9" y="693" width="5.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="719.93" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; const, column_definition const*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.80" y="623.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1130.4" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.42" y="351.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (2 samples, 0.04%; -0.02%)</title><rect x="846.3" y="517" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="849.31" y="527.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::storage_proxy::send_to_live_endpoints (5 samples, 0.09%; 0.00%)</title><rect x="737.2" y="709" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.16" y="719.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark (8 samples, 0.15%; +0.02%)</title><rect x="640.5" y="629" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="643.46" y="639.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (7 samples, 0.13%; 0.00%)</title><rect x="75.8" y="661" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="671.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; 0.00%)</title><rect x="299.4" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="302.44" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="1003.9" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1006.93" y="511.5" ></text>
</g>
<g >
<title>service::storage_proxy::query (1 samples, 0.02%; +0.02%)</title><rect x="1117.1" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1120.08" y="639.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; +0.02%)</title><rect x="1166.4" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1169.44" y="687.5" ></text>
</g>
<g >
<title>std::optional&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::optional (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="527.5" ></text>
</g>
<g >
<title>std::push_heap&lt;mutation_reader_merger::reader_and_fragment*, mutation_reader_merger::reader_heap_compare&gt; (6 samples, 0.11%; -0.02%)</title><rect x="193.4" y="453" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="196.40" y="463.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="932.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="935.79" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::pop_clustering_row (6 samples, 0.11%; +0.02%)</title><rect x="271.7" y="389" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="274.65" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; +0.04%)</title><rect x="684.0" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="687.03" y="671.5" ></text>
</g>
<g >
<title>partition_snapshot::version_count (2 samples, 0.04%; +0.02%)</title><rect x="279.2" y="341" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="282.21" y="351.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1120.9" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.86" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;query::result_memory_limiter::new_data_read (2 samples, 0.04%; 0.00%)</title><rect x="642.2" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.24" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt; (4 samples, 0.08%; +0.08%)</title><rect x="634.9" y="597" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="637.90" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_partition_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1125.3" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1128.31" y="447.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="534.2" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="537.20" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; 0.00%)</title><rect x="37.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.34" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="719.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="567.3" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="570.32" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="293" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="303.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.47" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;mutation_partition::accept (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="591.5" ></text>
</g>
<g >
<title>query::digester::digester (8 samples, 0.15%; 0.00%)</title><rect x="634.5" y="613" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="637.46" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.17%; +0.04%)</title><rect x="1055.1" y="517" width="2.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1058.06" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (1 samples, 0.02%; +0.02%)</title><rect x="881.9" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="884.88" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; 0.00%)</title><rect x="886.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.33" y="495.5" ></text>
</g>
<g >
<title>appending_hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="883.7" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="886.66" y="447.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (1 samples, 0.02%; +0.02%)</title><rect x="502.2" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="505.19" y="559.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (1 samples, 0.02%; +0.02%)</title><rect x="661.8" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="664.80" y="703.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="884.3" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="887.33" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (2 samples, 0.04%; +0.04%)</title><rect x="249.4" y="261" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="252.42" y="271.5" ></text>
</g>
<g >
<title>partition_entry::evict (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="741" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="751.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (1 samples, 0.02%; +0.02%)</title><rect x="769.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="772.40" y="559.5" ></text>
</g>
<g >
<title>malloc (4 samples, 0.08%; 0.00%)</title><rect x="638.5" y="581" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="641.46" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.02%)</title><rect x="1151.5" y="581" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1154.54" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="1109.1" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1112.08" y="639.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (4 samples, 0.08%; +0.08%)</title><rect x="946.4" y="597" width="0.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="949.35" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (21 samples, 0.40%; -0.02%)</title><rect x="842.3" y="581" width="4.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="845.31" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="959.2" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="962.25" y="591.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::raw_value_view (5 samples, 0.09%; -0.02%)</title><rect x="920.8" y="533" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="923.79" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (3 samples, 0.06%; 0.00%)</title><rect x="50.2" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.24" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; 0.00%)</title><rect x="323.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="326.23" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::list_users_statement*, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.69" y="543.5" ></text>
</g>
<g >
<title>mutation::set_cell (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="678.0" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="681.03" y="703.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="1042.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1045.17" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::swap (1 samples, 0.02%; +0.02%)</title><rect x="1189.3" y="837" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1192.33" y="847.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="865.9" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="868.88" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="829.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="831.98" y="447.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.08%)</title><rect x="819.0" y="373" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="821.97" y="383.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::consume (1 samples, 0.02%; +0.02%)</title><rect x="34.2" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="37.23" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="1041.9" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1044.94" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="261" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="271.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="228.3" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="231.30" y="351.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::relation (14 samples, 0.26%; -0.02%)</title><rect x="57.4" y="549" width="3.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="60.35" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="990.4" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="993.37" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (239 samples, 4.50%; +0.06%)</title><rect x="220.3" y="421" width="53.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="223.30" y="431.5" >logal..</text>
</g>
<g >
<title>seastar::reactor::add_task (2 samples, 0.04%; +0.02%)</title><rect x="720.9" y="661" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="723.93" y="671.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.21%; +0.04%)</title><rect x="329.2" y="485" width="2.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="332.23" y="495.5" ></text>
</g>
<g >
<title>seastar::lambda_task&lt;seastar::execution_stage::flush (1,143 samples, 21.53%; -0.02%)</title><rect x="881.4" y="709" width="254.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="884.44" y="719.5" >seastar::lambda_task&lt;seastar::exe..</text>
</g>
<g >
<title>service::storage_proxy::query_singular (120 samples, 2.26%; -0.06%)</title><rect x="1139.3" y="709" width="26.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1142.31" y="719.5" >s..</text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::arm (1 samples, 0.02%; +0.02%)</title><rect x="999.0" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1002.04" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (30 samples, 0.57%; +0.02%)</title><rect x="425.3" y="373" width="6.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="428.27" y="383.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="110.9" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="113.93" y="703.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="778.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="781.29" y="607.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (1 samples, 0.02%; 0.00%)</title><rect x="269.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="272.88" y="319.5" ></text>
</g>
<g >
<title>database::find_uuid (26 samples, 0.49%; -0.02%)</title><rect x="786.7" y="597" width="5.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="789.74" y="607.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;bool&gt;::the_value (6 samples, 0.11%; +0.06%)</title><rect x="1090.2" y="549" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1093.18" y="559.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (7 samples, 0.13%; 0.00%)</title><rect x="885.9" y="533" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.89" y="543.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; 0.00%)</title><rect x="554.0" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="556.98" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="719.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (6 samples, 0.11%; +0.02%)</title><rect x="45.8" y="389" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="48.79" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::drop_index_statement, std::default_delete&lt;cql3::statements::drop_index_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="64.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="67.91" y="607.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (1 samples, 0.02%; +0.02%)</title><rect x="729.4" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="732.38" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;db::rp_handle&gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="1127.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1130.09" y="495.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_clustering_bounds (30 samples, 0.57%; -0.04%)</title><rect x="1099.3" y="613" width="6.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1102.30" y="623.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, auth::permissions_cache::get (1 samples, 0.02%; +0.02%)</title><rect x="831.9" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="834.87" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result_set&gt; &gt;, db::system_keyspace::query (1 samples, 0.02%; 0.00%)</title><rect x="664.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.69" y="719.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (5 samples, 0.09%; +0.02%)</title><rect x="75.8" y="597" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="78.80" y="607.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (5 samples, 0.09%; 0.00%)</title><rect x="684.5" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.48" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="447.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (61 samples, 1.15%; 0.00%)</title><rect x="907.2" y="549" width="13.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="910.23" y="559.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="681.6" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="684.59" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="1037.3" y="389" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1040.28" y="399.5" ></text>
</g>
<g >
<title>cql3::statements::raw::cf_statement::cf_statement (1 samples, 0.02%; +0.02%)</title><rect x="60.7" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="63.69" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4 samples, 0.08%; 0.00%)</title><rect x="1094.0" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.96" y="591.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::read&lt;seastar::simple_memory_input_stream&gt; (2 samples, 0.04%; 0.00%)</title><rect x="107.1" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="607.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::result_memory_accounter (2 samples, 0.04%; +0.04%)</title><rect x="643.1" y="629" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="646.13" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="69.1" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="72.13" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="57.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.80" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="969.0" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="972.03" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (3 samples, 0.06%; 0.00%)</title><rect x="620.2" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="623.23" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="33.3" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="36.34" y="431.5" ></text>
</g>
<g >
<title>ser::schema_view::mutations (2 samples, 0.04%; 0.00%)</title><rect x="107.1" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; +0.04%)</title><rect x="994.6" y="485" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="997.59" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; -0.04%)</title><rect x="1046.6" y="437" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1049.61" y="447.5" ></text>
</g>
<g >
<title>query::querier&lt; (1,933 samples, 36.42%; +0.02%)</title><rect x="164.1" y="645" width="429.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="167.06" y="655.5" >query::querier&lt;</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="842.1" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.09" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_end (2 samples, 0.04%; 0.00%)</title><rect x="736.7" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.72" y="671.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (2 samples, 0.04%; -0.02%)</title><rect x="691.6" y="693" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="694.59" y="703.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (1 samples, 0.02%; +0.02%)</title><rect x="921.9" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="924.90" y="543.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (2 samples, 0.04%; 0.00%)</title><rect x="1133.3" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.31" y="415.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="880.6" y="613" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.55" y="623.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; 0.00%)</title><rect x="227.9" y="357" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="230.86" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="49.8" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.79" y="431.5" ></text>
</g>
<g >
<title>strcmp (1 samples, 0.02%; +0.02%)</title><rect x="1189.6" y="837" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1192.56" y="847.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="805.9" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="808.86" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::list_users_statement*, false&gt;::_Head_base (1 samples, 0.02%; +0.02%)</title><rect x="62.7" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="65.69" y="527.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="945.0" y="533" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="948.02" y="543.5" ></text>
</g>
<g >
<title>locator::token_metadata::first_token (28 samples, 0.53%; 0.00%)</title><rect x="1072.0" y="485" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1074.96" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (1 samples, 0.02%; 0.00%)</title><rect x="712.9" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.93" y="687.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (8 samples, 0.15%; -0.02%)</title><rect x="318.3" y="533" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="321.34" y="543.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (1 samples, 0.02%; -0.02%)</title><rect x="565.8" y="549" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="568.76" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (7 samples, 0.13%; +0.02%)</title><rect x="623.1" y="629" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="626.12" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (3 samples, 0.06%; +0.02%)</title><rect x="1033.1" y="325" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1036.05" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (11 samples, 0.21%; -0.02%)</title><rect x="1152.4" y="661" width="2.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1155.43" y="671.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (2 samples, 0.04%; 0.00%)</title><rect x="363.9" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="366.91" y="383.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (7 samples, 0.13%; +0.02%)</title><rect x="815.2" y="357" width="1.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="818.19" y="367.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="50.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.02" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="98.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="101.26" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPush (1 samples, 0.02%; +0.02%)</title><rect x="20.4" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="23.45" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (4 samples, 0.08%; -0.06%)</title><rect x="561.5" y="501" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="564.54" y="511.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; +0.02%)</title><rect x="1141.8" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1144.76" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="511.5" ></text>
</g>
<g >
<title>bytes_ostream::view (1 samples, 0.02%; +0.02%)</title><rect x="631.3" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="634.35" y="623.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_move_assign (3 samples, 0.06%; -0.04%)</title><rect x="493.5" y="485" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="496.52" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; 0.00%)</title><rect x="783.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="786.62" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_reset (3 samples, 0.06%; +0.04%)</title><rect x="628.9" y="597" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="631.90" y="607.5" ></text>
</g>
<g >
<title>TLS init function for cql3::query_options::specific_options::DEFAULT (1 samples, 0.02%; 0.00%)</title><rect x="750.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.06" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="671.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser&lt;std::_Mem_fn&lt;std::unique_ptr&lt;cql3::statements::raw::parsed_statement, std::default_delete&lt;cql3::statements::raw::parsed_statement&gt; &gt;  (213 samples, 4.01%; 0.00%)</title><rect x="19.1" y="661" width="47.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.11" y="671.5" >cql3..</text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="210.7" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="213.74" y="415.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared_with_qo (516 samples, 9.72%; +0.02%)</title><rect x="751.6" y="661" width="114.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="754.61" y="671.5" >single_node_cq..</text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; 0.00%)</title><rect x="776.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="779.73" y="495.5" ></text>
</g>
<g >
<title>ser::qr_row_view::cells (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="511.5" ></text>
</g>
<g >
<title>schema_registry::learn (5 samples, 0.09%; 0.00%)</title><rect x="106.5" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="687.5" ></text>
</g>
<g >
<title>global_schema_ptr::global_schema_ptr (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt;, std::allocator&lt;seastar::lw_shared_ptr&lt;cql3::column_specification&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="69.8" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="72.80" y="575.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="756.7" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="759.73" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="437" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="469" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="479.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="399.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::tombstone_for_row (3 samples, 0.06%; +0.04%)</title><rect x="416.8" y="421" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="419.82" y="431.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.5" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="55.46" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::maybe_refresh_state (24 samples, 0.45%; +0.04%)</title><rect x="266.3" y="389" width="5.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="269.32" y="399.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true, false, false&gt;::_Optional_payload (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="479.5" ></text>
</g>
<g >
<title>utils::sequenced_set&lt;gms::inet_address&gt;::insert (1 samples, 0.02%; -0.02%)</title><rect x="107.8" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="110.81" y="687.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="868.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="871.32" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (3 samples, 0.06%; +0.02%)</title><rect x="859.0" y="565" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="861.99" y="575.5" ></text>
</g>
<g >
<title>cql3::constants::value::get (1 samples, 0.02%; 0.00%)</title><rect x="886.6" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.55" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::query_state, false&gt;::make&lt;service::client_state&amp;, service_permit&gt; (7 samples, 0.13%; 0.00%)</title><rect x="861.2" y="629" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.21" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="1093.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.52" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (5 samples, 0.09%; +0.04%)</title><rect x="281.0" y="405" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="283.99" y="415.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node&gt; (1 samples, 0.02%; +0.02%)</title><rect x="233.6" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="236.64" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="850.3" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="853.32" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="160.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="163.28" y="607.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="185.4" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="188.40" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.06%)</title><rect x="744.7" y="613" width="2.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="747.72" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (1 samples, 0.02%; +0.02%)</title><rect x="93.4" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="96.36" y="703.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (24 samples, 0.45%; 0.00%)</title><rect x="773.0" y="581" width="5.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.95" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.06%)</title><rect x="1151.5" y="565" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1154.54" y="575.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; +0.02%)</title><rect x="50.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="53.02" y="367.5" ></text>
</g>
<g >
<title>validation::validate_column_family (2 samples, 0.04%; 0.00%)</title><rect x="72.9" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.91" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (2 samples, 0.04%; 0.00%)</title><rect x="40.0" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.01" y="543.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="495.7" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.74" y="495.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (610 samples, 11.49%; -0.13%)</title><rect x="962.1" y="629" width="135.6" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="965.14" y="639.5" >cql3::statements:..</text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; +0.02%)</title><rect x="825.2" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="828.20" y="351.5" ></text>
</g>
<g >
<title>cql3::relation::to_restriction (2 samples, 0.04%; 0.00%)</title><rect x="69.6" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (18 samples, 0.34%; 0.00%)</title><rect x="952.4" y="613" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="955.35" y="623.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="590.2" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.22" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (5 samples, 0.09%; +0.08%)</title><rect x="334.1" y="565" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="337.12" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (31 samples, 0.58%; +0.08%)</title><rect x="125.4" y="629" width="6.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="128.38" y="639.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="864.1" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="867.10" y="543.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="677" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="687.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (489 samples, 9.21%; -0.04%)</title><rect x="197.8" y="517" width="108.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="200.85" y="527.5" >partition_sna..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="335.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; 0.00%)</title><rect x="700.0" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="703.04" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (78 samples, 1.47%; +0.19%)</title><rect x="418.2" y="405" width="17.3" height="15.0" fill="rgb(255,105,105)" rx="2" ry="2" />
<text  x="421.15" y="415.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1085.3" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1088.29" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1047.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.72" y="447.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="880.6" y="629" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.55" y="639.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="687.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; -0.02%)</title><rect x="139.6" y="661" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="142.60" y="671.5" ></text>
</g>
<g >
<title>cql3::statements::raw::select_statement::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="351.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (1 samples, 0.02%; +0.02%)</title><rect x="1166.2" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1169.21" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::execution_stage_manager::flush (1 samples, 0.02%; +0.02%)</title><rect x="1167.1" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.10" y="719.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Parser (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.00" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="922.6" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="925.57" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (523 samples, 9.85%; +0.04%)</title><rect x="977.3" y="581" width="116.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="980.25" y="591.5" >service::stora..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;abstract_type const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="919.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="922.01" y="511.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="271.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="273.99" y="367.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (2 samples, 0.04%; +0.02%)</title><rect x="15.6" y="821" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="18.56" y="831.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="63.1" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="66.13" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::lw_shared_ptr&lt;schema const&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (16 samples, 0.30%; +0.08%)</title><rect x="191.6" y="469" width="3.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="194.62" y="479.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (6 samples, 0.11%; -0.04%)</title><rect x="12.0" y="789" width="1.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="15.00" y="799.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::get_static_row (1 samples, 0.02%; 0.00%)</title><rect x="80.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.25" y="559.5" ></text>
</g>
<g >
<title>database::get_unlimited_query_max_result_size (10 samples, 0.19%; +0.06%)</title><rect x="1114.6" y="613" width="2.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1117.64" y="623.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; -0.02%)</title><rect x="398.4" y="357" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="401.37" y="367.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::revoke_role_statement, std::default_delete&lt;cql3::statements::revoke_role_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="63.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.80" y="575.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1,357 samples, 25.57%; +0.09%)</title><rect x="168.3" y="629" width="301.7" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="171.28" y="639.5" >query::consume_page&lt;</text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_reserve_map_at_back (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="530.9" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="533.86" y="543.5" ></text>
</g>
<g >
<title>auth::get_permissions (3 samples, 0.06%; 0.00%)</title><rect x="76.0" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.02" y="591.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1165.5" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1168.55" y="623.5" ></text>
</g>
<g >
<title>locator::effective_replication_map::get_natural_endpoints_without_node_being_replaced (61 samples, 1.15%; +0.08%)</title><rect x="1070.8" y="517" width="13.6" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1073.84" y="527.5" ></text>
</g>
<g >
<title>gms::versioned_value::cdc_generation_id_from_string (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="607.5" ></text>
</g>
<g >
<title>local_schema_registry (1 samples, 0.02%; -0.02%)</title><rect x="975.3" y="581" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="978.25" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; +0.02%)</title><rect x="809.2" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="812.19" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="54.2" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.24" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="797.4" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.41" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="728.9" y="645" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="731.94" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;db::rp_handle&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="1127.3" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1130.31" y="543.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (2 samples, 0.04%; -0.04%)</title><rect x="553.5" y="421" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="556.54" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_wrapped_common&lt;false, seastar::future&lt;void&gt;, seastar::future&lt;void&gt;::handle_exception&lt;service::abstract_read_executor::execute (2 samples, 0.04%; 0.00%)</title><rect x="719.6" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.60" y="671.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="664.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.69" y="655.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (2 samples, 0.04%; +0.04%)</title><rect x="837.0" y="533" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="839.98" y="543.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_equals_val&lt;gms::inet_address const&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1087.7" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1090.74" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, seastar::do_recursive_touch_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.82" y="719.5" ></text>
</g>
<g >
<title>__start_context (284 samples, 5.35%; 0.00%)</title><rect x="16.0" y="821" width="63.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.00" y="831.5" >__star..</text>
</g>
<g >
<title>query_result_builder::consume_new_partition (3 samples, 0.06%; +0.04%)</title><rect x="414.4" y="421" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="417.37" y="431.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (4 samples, 0.08%; -0.04%)</title><rect x="701.8" y="693" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="704.82" y="703.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="153.6" y="645" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="156.61" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_requests (227 samples, 4.28%; +0.09%)</title><rect x="1001.3" y="549" width="50.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1004.26" y="559.5" >servi..</text>
</g>
<g >
<title>TLS init function for cql3::statements::select_statement::_default_parameters (2 samples, 0.04%; +0.02%)</title><rect x="780.5" y="597" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="783.51" y="607.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.5" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="45.46" y="351.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="55.1" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="58.13" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (5 samples, 0.09%; 0.00%)</title><rect x="925.9" y="565" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.90" y="575.5" ></text>
</g>
<g >
<title>db::data_listeners::on_write (1 samples, 0.02%; +0.02%)</title><rect x="1120.0" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1122.97" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::size (2 samples, 0.04%; +0.02%)</title><rect x="901.4" y="629" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="904.45" y="639.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.12" y="543.5" ></text>
</g>
<g >
<title>std::move&lt;std::tuple&lt;cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="54.9" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="57.91" y="447.5" ></text>
</g>
<g >
<title>abstract_type::without_reversed (1 samples, 0.02%; +0.02%)</title><rect x="912.6" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="915.56" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (485 samples, 9.14%; -0.02%)</title><rect x="198.7" y="485" width="107.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="201.74" y="495.5" >logalloc::all..</text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="750.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="753.72" y="671.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="49.6" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.57" y="511.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::node_size (2 samples, 0.04%; 0.00%)</title><rect x="259.0" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.98" y="367.5" ></text>
</g>
<g >
<title>std::__lower_bound&lt;__gnu_cxx::__normal_iterator&lt;dht::token const*, std::vector&lt;dht::token, std::allocator&lt;dht::token&gt; &gt; &gt;, dht::token, __gnu_cxx::__ops::_Iter_less_val&gt; (20 samples, 0.38%; -0.23%)</title><rect x="1073.7" y="453" width="4.5" height="15.0" fill="rgb(84,84,255)" rx="2" ry="2" />
<text  x="1076.73" y="463.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (7 samples, 0.13%; 0.00%)</title><rect x="1121.1" y="405" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (9 samples, 0.17%; 0.00%)</title><rect x="1055.1" y="533" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1058.06" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="107.6" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="110.59" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="718.9" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.93" y="671.5" ></text>
</g>
<g >
<title>std::addressof&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="23.6" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="26.56" y="367.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (5 samples, 0.09%; +0.06%)</title><rect x="195.2" y="469" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="198.18" y="479.5" ></text>
</g>
<g >
<title>schema::column_at (5 samples, 0.09%; 0.00%)</title><rect x="433.7" y="373" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="436.72" y="383.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_erase_at_end (7 samples, 0.13%; 0.00%)</title><rect x="415.3" y="389" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="418.26" y="399.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (27 samples, 0.51%; 0.00%)</title><rect x="1128.4" y="597" width="6.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.42" y="607.5" ></text>
</g>
<g >
<title>database::has_keyspace (7 samples, 0.13%; -0.02%)</title><rect x="847.0" y="565" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="849.98" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (1 samples, 0.02%; +0.02%)</title><rect x="655.6" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="658.58" y="639.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (2 samples, 0.04%; -0.06%)</title><rect x="608.7" y="469" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="611.67" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::_M_range_initialize&lt;cql3::raw_value const*&gt; (8 samples, 0.15%; -0.02%)</title><rect x="873.0" y="661" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="875.99" y="671.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::signal (1 samples, 0.02%; +0.02%)</title><rect x="122.0" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="125.04" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="128.3" y="597" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="131.27" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::emplace_back&lt;flat_mutation_reader&gt; (3 samples, 0.06%; +0.02%)</title><rect x="576.2" y="549" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="579.21" y="559.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::range_or_slice_eq_null (3 samples, 0.06%; 0.00%)</title><rect x="883.0" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.00" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="722.7" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="725.71" y="703.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_large_cells (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.92" y="527.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="844.5" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="847.54" y="479.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_tokenStartLine (2 samples, 0.04%; +0.04%)</title><rect x="28.2" y="469" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="31.23" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="447.5" ></text>
</g>
<g >
<title>cql3::selection::selection::from_selectors (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="319.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (2 samples, 0.04%; +0.04%)</title><rect x="665.4" y="677" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="668.36" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (4 samples, 0.08%; -0.04%)</title><rect x="842.3" y="565" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="845.31" y="575.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; 0.00%)</title><rect x="534.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="536.98" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (1 samples, 0.02%; 0.00%)</title><rect x="487.3" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="490.29" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::do_until_state&lt;executor&lt;test_read (3 samples, 0.06%; +0.04%)</title><rect x="86.3" y="725" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="89.25" y="735.5" ></text>
</g>
<g >
<title>std::default_delete&lt;bytes_ostream::chunk&gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="98.0" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.03" y="639.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="535.3" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="538.31" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::delete_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.91" y="591.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="451.5" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="454.50" y="463.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.80" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (31 samples, 0.58%; -0.06%)</title><rect x="603.1" y="517" width="6.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="606.11" y="527.5" ></text>
</g>
<g >
<title>utils::estimated_histogram::add (8 samples, 0.15%; 0.00%)</title><rect x="1157.3" y="677" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1160.32" y="687.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;dht::decorated_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="459.9" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="462.95" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (30 samples, 0.57%; 0.00%)</title><rect x="911.7" y="501" width="6.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="914.67" y="511.5" ></text>
</g>
<g >
<title>schema::schema (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (10 samples, 0.19%; +0.02%)</title><rect x="756.9" y="549" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="759.95" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="551.3" y="389" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="554.31" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (62 samples, 1.17%; +0.06%)</title><rect x="288.1" y="437" width="13.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="291.10" y="447.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="882.1" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.11" y="575.5" ></text>
</g>
<g >
<title>seastar::do_until&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="607.5" ></text>
</g>
<g >
<title>query::result::result (4 samples, 0.08%; 0.00%)</title><rect x="630.7" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.68" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (7 samples, 0.13%; -0.02%)</title><rect x="706.5" y="693" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="709.48" y="703.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::weed_from_slot&lt;row::remove_if&lt;row::compact_and_expire (58 samples, 1.09%; -0.11%)</title><rect x="421.9" y="389" width="12.9" height="15.0" fill="rgb(147,147,255)" rx="2" ry="2" />
<text  x="424.93" y="399.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="38.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.90" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::check_access (10 samples, 0.19%; 0.00%)</title><rect x="75.1" y="693" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.14" y="703.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, lister::scan_dir (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="511.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; -0.02%)</title><rect x="364.6" y="389" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="367.58" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="659.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="662.80" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; -0.09%)</title><rect x="983.0" y="549" width="1.1" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="986.03" y="559.5" ></text>
</g>
<g >
<title>dht::ring_position_tri_compare (46 samples, 0.87%; 0.00%)</title><rect x="519.1" y="485" width="10.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="522.08" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt; &gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="415.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="1164.2" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1167.21" y="655.5" ></text>
</g>
<g >
<title>database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="713.2" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="716.15" y="687.5" ></text>
</g>
<g >
<title>auth::data_resource_view::data_resource_view (1 samples, 0.02%; +0.02%)</title><rect x="836.5" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="839.53" y="543.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="51.3" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="54.35" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="1035.7" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1038.72" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1107.5" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1110.52" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (8 samples, 0.15%; +0.02%)</title><rect x="852.5" y="613" width="1.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="855.54" y="623.5" ></text>
</g>
<g >
<title>database::find_column_family (9 samples, 0.17%; -0.04%)</title><rect x="1055.1" y="549" width="2.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1058.06" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%; +0.06%)</title><rect x="616.0" y="549" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="619.01" y="559.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="818.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="821.08" y="415.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.08%)</title><rect x="688.7" y="693" width="1.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="691.70" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::emplace_back&lt;cql3::raw_value_view&gt; (8 samples, 0.15%; 0.00%)</title><rect x="868.5" y="597" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="871.55" y="607.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (10 samples, 0.19%; 0.00%)</title><rect x="40.5" y="533" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.46" y="543.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (2,476 samples, 46.65%; +0.09%)</title><rect x="111.4" y="693" width="550.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="114.37" y="703.5" >seastar::noncopyable_function&lt;seastar::future&lt;void&gt; </text>
</g>
<g >
<title>cql3_parser::CqlParser::term (1 samples, 0.02%; +0.02%)</title><rect x="56.7" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="59.68" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (22 samples, 0.41%; +0.09%)</title><rect x="787.0" y="565" width="4.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="789.96" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="783.8" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="786.85" y="623.5" ></text>
</g>
<g >
<title>cql3::get_cql3_kind (1 samples, 0.02%; +0.02%)</title><rect x="68.7" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="71.69" y="575.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::check_queue_size (1 samples, 0.02%; 0.00%)</title><rect x="1028.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1031.61" y="415.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.03" y="543.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::get_or_load&lt;utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::keyspace (1 samples, 0.02%; 0.00%)</title><rect x="837.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.87" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (10 samples, 0.19%; +0.02%)</title><rect x="789.6" y="549" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="792.63" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1113.1" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1116.08" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="649.4" y="645" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="652.35" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (4 samples, 0.08%; 0.00%)</title><rect x="315.7" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="318.67" y="543.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; 0.00%)</title><rect x="258.1" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.09" y="351.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::query_options&gt;::operator (10 samples, 0.19%; -0.02%)</title><rect x="703.4" y="677" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="706.37" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="989.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="992.92" y="575.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; -0.02%)</title><rect x="185.2" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="188.18" y="479.5" ></text>
</g>
<g >
<title>backlog_controller::adjust (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="367.5" ></text>
</g>
<g >
<title>perf_simple_que (5,307 samples, 99.98%; 0.00%)</title><rect x="10.0" y="853" width="1179.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >perf_simple_que</text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="727.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.83" y="671.5" ></text>
</g>
<g >
<title>managed_bytes::operator= (5 samples, 0.09%; +0.04%)</title><rect x="947.5" y="613" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="950.46" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; +0.02%)</title><rect x="880.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.55" y="607.5" ></text>
</g>
<g >
<title>mutation_source::make_reader (480 samples, 9.04%; 0.00%)</title><rect x="472.2" y="613" width="106.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="475.17" y="623.5" >mutation_sour..</text>
</g>
<g >
<title>mutation_querier::consume (189 samples, 3.56%; -0.08%)</title><rect x="371.7" y="405" width="42.0" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="374.69" y="415.5" >mut..</text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.80" y="575.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;partition_snapshot&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, logalloc::region&amp;, mutation_cleaner&amp;, partition_entry*, cache_tracker*&amp;, unsigned long&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="562.4" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="565.43" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::emplace_back&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;&amp;&gt; (3 samples, 0.06%; +0.02%)</title><rect x="798.3" y="581" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="801.30" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="191.2" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="194.18" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (5 samples, 0.09%; -0.02%)</title><rect x="880.1" y="661" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="883.11" y="671.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (1 samples, 0.02%; +0.02%)</title><rect x="885.4" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="888.44" y="559.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="49.6" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="52.57" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="110.5" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="113.48" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="831.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.42" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (1 samples, 0.02%; +0.02%)</title><rect x="1128.4" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1131.42" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::emplace&lt;atomic_cell_or_collection, seastar::optimized_optional&lt;cell_hash&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1124.6" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1127.64" y="431.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.12" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (2 samples, 0.04%; +0.02%)</title><rect x="849.9" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="852.87" y="623.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (249 samples, 4.69%; +0.11%)</title><rect x="793.2" y="613" width="55.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="796.18" y="623.5" >servi..</text>
</g>
<g >
<title>composite::serialize_value&lt;partition_key_view&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.58" y="623.5" ></text>
</g>
<g >
<title>auth::get_permissions (114 samples, 2.15%; +0.04%)</title><rect x="807.2" y="517" width="25.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="810.19" y="527.5" >a..</text>
</g>
<g >
<title>allocation_strategy::destroy&lt;rows_entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="671.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (1 samples, 0.02%; 0.00%)</title><rect x="413.7" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="416.71" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (2 samples, 0.04%; +0.02%)</title><rect x="909.4" y="501" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="912.45" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="114.9" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="117.93" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (7 samples, 0.13%; +0.04%)</title><rect x="1106.0" y="613" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1108.97" y="623.5" ></text>
</g>
<g >
<title>db::schema_tables::prepare_builder_from_table_row (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (177 samples, 3.33%; 0.00%)</title><rect x="226.7" y="389" width="39.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="229.75" y="399.5" >mut..</text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="831.2" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="834.20" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; 0.00%)</title><rect x="996.4" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="999.37" y="511.5" ></text>
</g>
<g >
<title>empty_flat_reader::~empty_flat_reader (11 samples, 0.21%; -0.02%)</title><rect x="597.3" y="533" width="2.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="600.33" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::clear (2 samples, 0.04%; +0.02%)</title><rect x="644.2" y="645" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="647.24" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;database&gt;::shared_ptr_count_for&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="591.5" ></text>
</g>
<g >
<title>partition_version::~partition_version (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.75" y="431.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.6" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="831.0" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.98" y="431.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.09%; 0.00%)</title><rect x="838.5" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="841.53" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13 samples, 0.24%; -0.02%)</title><rect x="986.6" y="533" width="2.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="989.59" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="945.7" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="948.69" y="575.5" ></text>
</g>
<g >
<title>dht::tri_compare (12 samples, 0.23%; +0.06%)</title><rect x="1075.5" y="437" width="2.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1078.51" y="447.5" ></text>
</g>
<g >
<title>row::row (134 samples, 2.52%; -0.02%)</title><rect x="228.5" y="357" width="29.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="231.53" y="367.5" >ro..</text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="44.7" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="543.5" ></text>
</g>
<g >
<title>boost::algorithm::any_of&lt;std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;, std::_Bind_front&lt;bool  (2 samples, 0.04%; 0.00%)</title><rect x="883.0" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.00" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (4 samples, 0.08%; 0.00%)</title><rect x="41.8" y="389" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.79" y="399.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;mutation_reader_merger::reader_and_fragment*, long, mutation_reader_merger::reader_and_fragment, __gnu_cxx::__ops::_Iter_comp_val&lt;mutation_reader_merger::reader_heap_compare&gt; &gt; (3 samples, 0.06%; +0.06%)</title><rect x="193.6" y="437" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="196.62" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;7ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; +0.02%)</title><rect x="59.6" y="277" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="62.57" y="287.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="821" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="831.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%; +0.04%)</title><rect x="138.5" y="661" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="141.49" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (5 samples, 0.09%; +0.02%)</title><rect x="919.7" y="533" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="922.68" y="543.5" ></text>
</g>
<g >
<title>ser::after_qr_cell__value&lt;bytes_ostream&gt;::skip_ttl (9 samples, 0.17%; -0.06%)</title><rect x="403.0" y="373" width="2.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="406.04" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::then_impl&lt;query::consume_page&lt; (2 samples, 0.04%; +0.02%)</title><rect x="580.4" y="629" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="583.44" y="639.5" ></text>
</g>
<g >
<title>std::optional&lt;position_in_partition&gt;::operator=&lt;position_in_partition&gt; (1 samples, 0.02%; +0.02%)</title><rect x="285.2" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="288.21" y="463.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::~result_memory_accounter (2 samples, 0.04%; +0.04%)</title><rect x="120.7" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="123.71" y="671.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;11ul, cql3::expr::untyped_constant, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="463.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::grant_statement, std::default_delete&lt;cql3::statements::grant_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::grant_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.1" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="68.13" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::then_impl&lt;service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="559.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::iterator_at (1 samples, 0.02%; +0.02%)</title><rect x="858.8" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="861.76" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="34.5" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="37.45" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (8 samples, 0.15%; -0.08%)</title><rect x="966.4" y="597" width="1.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="969.36" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="22.4" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.45" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="818.3" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="821.30" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="49.8" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.79" y="463.5" ></text>
</g>
<g >
<title>free (7 samples, 0.13%; +0.09%)</title><rect x="448.6" y="405" width="1.6" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="451.61" y="415.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::mark (2 samples, 0.04%; -0.02%)</title><rect x="33.3" y="437" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="36.34" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::local (3 samples, 0.06%; -0.02%)</title><rect x="1062.0" y="549" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1064.95" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler_helper (5 samples, 0.09%; 0.00%)</title><rect x="1133.3" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.31" y="431.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (363 samples, 6.84%; +0.21%)</title><rect x="355.9" y="437" width="80.7" height="15.0" fill="rgb(255,94,94)" rx="2" ry="2" />
<text  x="358.91" y="447.5" >compact_m..</text>
</g>
<g >
<title>tests::random::get_int&lt;unsigned long&gt; (8 samples, 0.15%; 0.00%)</title><rect x="874.8" y="677" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="877.77" y="687.5" ></text>
</g>
<g >
<title>database::has_keyspace (13 samples, 0.24%; 0.00%)</title><rect x="863.2" y="613" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="866.21" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::mutation_fragment_merger (10 samples, 0.19%; -0.02%)</title><rect x="498.2" y="485" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="501.18" y="495.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.86" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="52.7" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="55.68" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="815.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="817.97" y="367.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="542.6" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="545.65" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="261" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="885.0" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="888.00" y="591.5" ></text>
</g>
<g >
<title>auth::resource::resource (10 samples, 0.19%; +0.04%)</title><rect x="796.7" y="597" width="2.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="799.74" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::do_refresh_state (22 samples, 0.41%; +0.09%)</title><rect x="266.8" y="373" width="4.9" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="269.76" y="383.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (2 samples, 0.04%; +0.02%)</title><rect x="268.5" y="341" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="271.54" y="351.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::guard (1 samples, 0.02%; 0.00%)</title><rect x="199.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.96" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="383.5" ></text>
</g>
<g >
<title>bound_view::tri_compare::operator (1 samples, 0.02%; +0.02%)</title><rect x="100.7" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="103.70" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (19 samples, 0.36%; -0.04%)</title><rect x="316.8" y="549" width="4.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="319.78" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="661.1" y="677" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="664.13" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, boost::icl::interval_map&lt;dht::token, std::unordered_set&lt;gms::inet_address, std::hash&lt;gms::inet_address&gt;, std::equal_to&lt;gms::inet_address&gt;, std::allocator&lt;gms::inet_address&gt; &gt;, boost::icl::partial_absorber, std::less, boost::icl::inplace_plus, boost::icl::inter_section, boost::icl::continuous_interval&lt;dht::token, std::less&gt;, std::allocator&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; 0.00%)</title><rect x="1133.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.76" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (2 samples, 0.04%; +0.04%)</title><rect x="682.7" y="613" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="685.70" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="485" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="495.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="751.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::parse_statement (213 samples, 4.01%; 0.00%)</title><rect x="19.1" y="677" width="47.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.11" y="687.5" >cql3..</text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; +0.09%)</title><rect x="209.2" y="373" width="1.5" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="212.19" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_insert&lt;flat_mutation_reader&gt; (2 samples, 0.04%; -0.02%)</title><rect x="493.1" y="485" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="496.07" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (3 samples, 0.06%; +0.02%)</title><rect x="104.0" y="693" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="107.04" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="533" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="543.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::build_partition_keys (8 samples, 0.15%; -0.02%)</title><rect x="883.7" y="597" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="886.66" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (11 samples, 0.21%; -0.02%)</title><rect x="695.1" y="661" width="2.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="698.15" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;service::digest_read_resolver, false&gt;::make&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (17 samples, 0.32%; 0.00%)</title><rect x="997.3" y="549" width="3.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.26" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="951.2" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="954.24" y="607.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="463.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::maybe_admit_waiters (1 samples, 0.02%; -0.04%)</title><rect x="438.6" y="437" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="441.61" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="883.4" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="886.44" y="559.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.25" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (4 samples, 0.08%; 0.00%)</title><rect x="43.3" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.35" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_value (1 samples, 0.02%; +0.02%)</title><rect x="740.1" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="743.05" y="719.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::operation::set_value, cql3::expr::expression&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="54.7" y="517" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.68" y="527.5" ></text>
</g>
<g >
<title>__dynamic_cast (5 samples, 0.09%; -0.06%)</title><rect x="899.2" y="629" width="1.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="902.22" y="639.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_statement, std::default_delete&lt;cql3::statements::list_service_level_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="65.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="68.58" y="607.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; +0.04%)</title><rect x="865.0" y="533" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="867.99" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (1 samples, 0.02%; 0.00%)</title><rect x="884.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.77" y="559.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%; +0.02%)</title><rect x="121.6" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="124.60" y="655.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%; +0.04%)</title><rect x="870.3" y="613" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="873.32" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_impl&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (543 samples, 10.23%; -0.02%)</title><rect x="342.8" y="533" width="120.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="345.79" y="543.5" >seastar::intern..</text>
</g>
<g >
<title>range_tombstone_accumulator::clear (8 samples, 0.15%; -0.04%)</title><rect x="415.0" y="421" width="1.8" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="418.04" y="431.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_tables_and_views (3 samples, 0.06%; 0.00%)</title><rect x="105.4" y="693" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="703.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; 0.00%)</title><rect x="344.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="347.57" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="841.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="843.98" y="575.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, std::allocator&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt; (10 samples, 0.19%; -0.02%)</title><rect x="582.2" y="581" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="585.22" y="591.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (2 samples, 0.04%; 0.00%)</title><rect x="46.7" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="49.68" y="335.5" ></text>
</g>
<g >
<title>mutation_querier::prepare_writers (10 samples, 0.19%; +0.04%)</title><rect x="377.5" y="389" width="2.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="380.47" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (2 samples, 0.04%; +0.04%)</title><rect x="163.6" y="629" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="166.61" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="22.9" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="25.89" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (2 samples, 0.04%; +0.04%)</title><rect x="900.6" y="629" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="903.56" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="610.2" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="613.23" y="527.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;lister&gt;::make&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="697.1" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="700.15" y="623.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (3 samples, 0.06%; +0.04%)</title><rect x="1042.4" y="469" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1045.39" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (10 samples, 0.19%; +0.06%)</title><rect x="1045.9" y="469" width="2.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1048.95" y="479.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="367.5" ></text>
</g>
<g >
<title>logalloc::region_impl::free (1 samples, 0.02%; +0.02%)</title><rect x="82.5" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="85.47" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::token&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::token&gt; &gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="463.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.06%)</title><rect x="96.5" y="661" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="99.48" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="751.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="997.5" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1000.48" y="543.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="655.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (35 samples, 0.66%; -0.06%)</title><rect x="567.8" y="533" width="7.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="570.77" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="671.5" ></text>
</g>
<g >
<title>cql3::selection::prepare_selectable (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="287.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::get_currentLine (2 samples, 0.04%; +0.04%)</title><rect x="26.2" y="469" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="29.23" y="479.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="845.9" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="848.87" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (6 samples, 0.11%; +0.08%)</title><rect x="573.8" y="453" width="1.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="576.77" y="463.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_M_deallocate (1 samples, 0.02%; +0.02%)</title><rect x="66.7" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.69" y="639.5" ></text>
</g>
<g >
<title>mutation::set_clustered_cell (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="623.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_1502abaca14bdfb677c669eaa6149754eb6e7075] (1 samples, 0.02%; +0.02%)</title><rect x="391.0" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="394.03" y="383.5" ></text>
</g>
<g >
<title>range_tombstone_accumulator::range_tombstone_accumulator (22 samples, 0.41%; +0.04%)</title><rect x="584.4" y="597" width="4.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="587.44" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="495.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cell (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.92" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="76.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.02" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; 0.00%)</title><rect x="590.2" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="593.22" y="607.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (72 samples, 1.36%; -0.04%)</title><rect x="1069.7" y="533" width="16.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1072.73" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="78.7" y="741" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.69" y="751.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (6 samples, 0.11%; 0.00%)</title><rect x="883.7" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="591.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; +0.02%)</title><rect x="80.2" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="83.25" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::set&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="720.0" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="723.05" y="655.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (1 samples, 0.02%; +0.02%)</title><rect x="85.6" y="725" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="88.58" y="735.5" ></text>
</g>
<g >
<title>table::query (2 samples, 0.04%; 0.00%)</title><rect x="1166.2" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="719.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (32 samples, 0.60%; +0.04%)</title><rect x="547.3" y="453" width="7.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="550.31" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, gms::inet_address&gt;, std::allocator&lt;std::pair&lt;dht::token const, gms::inet_address&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; -0.02%)</title><rect x="17.6" y="581" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="20.56" y="591.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (409 samples, 7.71%; +0.02%)</title><rect x="760.9" y="645" width="91.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="763.95" y="655.5" >cql3::quer..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="215.2" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="218.19" y="431.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (6 samples, 0.11%; 0.00%)</title><rect x="795.4" y="565" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="798.41" y="575.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="992.8" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="995.81" y="527.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;void&gt;::satisfy_with_result_of&lt;seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::make_data_requests (42 samples, 0.79%; 0.00%)</title><rect x="725.4" y="693" width="9.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="728.38" y="703.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (182 samples, 3.43%; +0.02%)</title><rect x="1008.8" y="501" width="40.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1011.82" y="511.5" >ser..</text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (2 samples, 0.04%; +0.02%)</title><rect x="1049.3" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1052.28" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_S_construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="23.1" y="437" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.12" y="447.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (2 samples, 0.04%; 0.00%)</title><rect x="213.9" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="216.85" y="431.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (8 samples, 0.15%; +0.06%)</title><rect x="569.8" y="517" width="1.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="572.77" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="700.7" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="703.70" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="100.0" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="103.03" y="671.5" ></text>
</g>
<g >
<title>atomic_cell_or_collection::copy (1 samples, 0.02%; 0.00%)</title><rect x="228.5" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="231.53" y="351.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="40.5" y="501" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.46" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (1 samples, 0.02%; +0.02%)</title><rect x="28.7" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="31.67" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;bool, bool  (1 samples, 0.02%; +0.02%)</title><rect x="1085.5" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1088.52" y="511.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::alter_role_statement*, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.57" y="543.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; +0.02%)</title><rect x="848.3" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="851.32" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;9ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="319.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (3 samples, 0.06%; 0.00%)</title><rect x="965.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="968.69" y="607.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="51.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="463.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_group (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="527.5" ></text>
</g>
<g >
<title>mutation_partition::upper_bound (2 samples, 0.04%; +0.04%)</title><rect x="268.1" y="357" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="271.10" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; 0.00%)</title><rect x="925.5" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="928.46" y="559.5" ></text>
</g>
<g >
<title>from_hex (2 samples, 0.04%; -0.13%)</title><rect x="68.2" y="549" width="0.5" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="71.24" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (3 samples, 0.06%; 0.00%)</title><rect x="36.0" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.01" y="575.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::timer (1 samples, 0.02%; -0.04%)</title><rect x="1032.2" y="357" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1035.16" y="367.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (1 samples, 0.02%; 0.00%)</title><rect x="51.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.35" y="479.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; 0.00%)</title><rect x="817.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="819.97" y="431.5" ></text>
</g>
<g >
<title>bytes_view_hasher::update (1 samples, 0.02%; 0.00%)</title><rect x="758.9" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="761.95" y="511.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.06%)</title><rect x="782.7" y="597" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="785.74" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="82.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="85.03" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="469" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%; +0.04%)</title><rect x="21.6" y="421" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="24.56" y="431.5" ></text>
</g>
<g >
<title>range_tombstone_stream::get_next (1 samples, 0.02%; -0.09%)</title><rect x="279.7" y="373" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="282.66" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="565.1" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="568.10" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; -0.09%)</title><rect x="648.5" y="645" width="0.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="651.46" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.69" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="54.7" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="57.68" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="543.5" ></text>
</g>
<g >
<title>set_field&lt;long&gt; (2 samples, 0.04%; +0.04%)</title><rect x="1123.1" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1126.09" y="415.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (37 samples, 0.70%; 0.00%)</title><rect x="819.4" y="405" width="8.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="822.42" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt; &gt;::reserve (1 samples, 0.02%; 0.00%)</title><rect x="1131.3" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.31" y="463.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%; +0.04%)</title><rect x="279.9" y="405" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="282.88" y="415.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="245" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="255.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (18 samples, 0.34%; -0.09%)</title><rect x="327.9" y="517" width="4.0" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="330.90" y="527.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="52.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.02" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; 0.00%)</title><rect x="57.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.57" y="543.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::writer_of_query_result (10 samples, 0.19%; 0.00%)</title><rect x="637.6" y="613" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="640.57" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="736.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.27" y="703.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%; 0.00%)</title><rect x="60.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.02" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="659.4" y="581" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="662.36" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (2 samples, 0.04%; 0.00%)</title><rect x="854.8" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.76" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1131.3" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.31" y="415.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; 0.00%)</title><rect x="732.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="735.27" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.09%)</title><rect x="211.9" y="405" width="2.0" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="214.85" y="415.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.02%)</title><rect x="1007.0" y="437" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1010.04" y="447.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (2 samples, 0.04%; +0.04%)</title><rect x="835.0" y="549" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="837.98" y="559.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.02%)</title><rect x="916.6" y="469" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="919.56" y="479.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (5 samples, 0.09%; +0.08%)</title><rect x="457.1" y="437" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="460.06" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.53%; +0.02%)</title><rect x="1128.2" y="629" width="6.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1131.20" y="639.5" ></text>
</g>
<g >
<title>sstring_hash::operator (3 samples, 0.06%; +0.04%)</title><rect x="1058.8" y="517" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1061.84" y="527.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (1 samples, 0.02%; 0.00%)</title><rect x="655.4" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.35" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (4 samples, 0.08%; 0.00%)</title><rect x="812.3" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.30" y="463.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; 0.00%)</title><rect x="36.5" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.45" y="383.5" ></text>
</g>
<g >
<title>do_cql_test (276 samples, 5.20%; 0.00%)</title><rect x="17.8" y="757" width="61.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="767.5" >do_cql..</text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="671.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (3 samples, 0.06%; +0.02%)</title><rect x="681.8" y="629" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="684.81" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (2 samples, 0.04%; 0.00%)</title><rect x="710.9" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="713.93" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="197.0" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="199.96" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data_aux (2 samples, 0.04%; +0.02%)</title><rect x="416.4" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="419.38" y="367.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::need_filtering (16 samples, 0.30%; 0.00%)</title><rect x="680.5" y="677" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.47" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::prepare_term (5 samples, 0.09%; 0.00%)</title><rect x="68.0" y="613" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.02" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="847.0" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="849.98" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (3 samples, 0.06%; +0.06%)</title><rect x="134.0" y="661" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="137.05" y="671.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="709" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="719.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (1 samples, 0.02%; +0.02%)</title><rect x="66.2" y="645" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.24" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (36 samples, 0.68%; +0.02%)</title><rect x="911.5" y="517" width="8.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="914.45" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="98.5" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="101.48" y="655.5" ></text>
</g>
<g >
<title>auth::resource::parent (5 samples, 0.09%; -0.02%)</title><rect x="804.7" y="533" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="807.74" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="1133.3" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.31" y="383.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::~small_vector (15 samples, 0.28%; 0.00%)</title><rect x="1162.7" y="693" width="3.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1165.66" y="703.5" ></text>
</g>
<g >
<title>service::endpoints_to_replica_ids (1 samples, 0.02%; 0.00%)</title><rect x="1145.5" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1148.54" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (207 samples, 3.90%; 0.00%)</title><rect x="20.2" y="629" width="46.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="639.5" >seas..</text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::pop_front (1 samples, 0.02%; 0.00%)</title><rect x="133.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="136.16" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.04%)</title><rect x="811.2" y="437" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="814.19" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="128.0" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="131.04" y="607.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (4 samples, 0.08%; +0.06%)</title><rect x="692.7" y="693" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="695.70" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="98.5" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="101.48" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;seastar::directory_entry_type, seastar::directory_entry_type, std::allocator&lt;seastar::directory_entry_type&gt;, std::__detail::_Identity, std::equal_to&lt;seastar::directory_entry_type&gt;, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="713.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="716.38" y="559.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.12" y="399.5" ></text>
</g>
<g >
<title>row_cache::make_reader (41 samples, 0.77%; +0.04%)</title><rect x="566.7" y="549" width="9.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="569.65" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (2 samples, 0.04%; +0.04%)</title><rect x="194.7" y="453" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="197.74" y="463.5" ></text>
</g>
<g >
<title>query_result_builder::consume_new_partition (42 samples, 0.79%; 0.00%)</title><rect x="360.1" y="405" width="9.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="363.13" y="415.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.02%; +0.02%)</title><rect x="713.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="716.60" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; -0.02%)</title><rect x="646.0" y="645" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="649.02" y="655.5" ></text>
</g>
<g >
<title>antlr3::RecognizerSharedState&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_error (1 samples, 0.02%; +0.02%)</title><rect x="25.3" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="28.34" y="495.5" ></text>
</g>
<g >
<title>hashing_partition_visitor&lt;hasher&gt;::accept_row_cell (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="575.5" ></text>
</g>
<g >
<title>abstract_type::from_string (2 samples, 0.04%; 0.00%)</title><rect x="68.2" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.24" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="1104.2" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1107.19" y="575.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (1 samples, 0.02%; +0.02%)</title><rect x="856.3" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="859.32" y="655.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (24 samples, 0.45%; +0.15%)</title><rect x="393.5" y="373" width="5.3" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="396.48" y="383.5" ></text>
</g>
<g >
<title>canonical_mutation::to_mutation (2 samples, 0.04%; 0.00%)</title><rect x="107.1" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::clone&lt;row::row (130 samples, 2.45%; +0.13%)</title><rect x="229.2" y="341" width="28.9" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="232.19" y="351.5" >co..</text>
</g>
<g >
<title>allocation_strategy::get_standard_migrator&lt;blob_storage&gt; (3 samples, 0.06%; +0.02%)</title><rect x="245.4" y="261" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="248.42" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (4 samples, 0.08%; +0.04%)</title><rect x="46.2" y="357" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="49.24" y="367.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; +0.02%)</title><rect x="881.7" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="884.66" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; 0.00%)</title><rect x="1135.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.31" y="703.5" ></text>
</g>
<g >
<title>std::ostream::write (1 samples, 0.02%; +0.02%)</title><rect x="17.8" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="20.78" y="671.5" ></text>
</g>
<g >
<title>validation::is_cql_key_invalid (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::stats (2 samples, 0.04%; +0.02%)</title><rect x="573.1" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="576.10" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="639.6" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="642.57" y="591.5" ></text>
</g>
<g >
<title>db::system_keyspace::all_tables (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="511.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry::touch (6 samples, 0.11%; +0.06%)</title><rect x="759.4" y="613" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="762.39" y="623.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (4 samples, 0.08%; 0.00%)</title><rect x="26.7" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="29.67" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; 0.00%)</title><rect x="592.2" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.22" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="676.5" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="679.47" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (7 samples, 0.13%; -0.02%)</title><rect x="774.3" y="533" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="777.29" y="543.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (4 samples, 0.08%; 0.00%)</title><rect x="820.7" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="823.75" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (1 samples, 0.02%; +0.02%)</title><rect x="786.5" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="789.51" y="591.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.02%)</title><rect x="119.4" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="122.37" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::emplace_back&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (2 samples, 0.04%; +0.02%)</title><rect x="271.2" y="357" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="274.21" y="367.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="828.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.75" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::authenticated_user, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;::pair (1 samples, 0.02%; -0.06%)</title><rect x="772.7" y="581" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="775.73" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5 samples, 0.09%; +0.09%)</title><rect x="1144.0" y="661" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="1146.98" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="805" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="815.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (2 samples, 0.04%; +0.02%)</title><rect x="1048.8" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1051.84" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="804.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="807.52" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::set_value&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="138.3" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="141.27" y="671.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::end (1 samples, 0.02%; +0.02%)</title><rect x="34.9" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="37.90" y="495.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.02%; +0.02%)</title><rect x="1136.0" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1138.98" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.02%)</title><rect x="873.9" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="876.88" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; 0.00%)</title><rect x="680.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="683.25" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="1044.8" y="453" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1047.83" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="843.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="845.98" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="623.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::Parser (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="623.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="1135.5" y="709" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1138.54" y="719.5" ></text>
</g>
<g >
<title>memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; +0.02%)</title><rect x="1122.9" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1125.86" y="399.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (4 samples, 0.08%; 0.00%)</title><rect x="883.9" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.88" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="818.3" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.30" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="847.6" y="517" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="850.65" y="527.5" ></text>
</g>
<g >
<title>query::result_set::from_raw_result (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::set&lt;service::digest_read_result&gt; (2 samples, 0.04%; -0.06%)</title><rect x="729.8" y="613" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="732.83" y="623.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (1 samples, 0.02%; -0.04%)</title><rect x="382.1" y="389" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="385.14" y="399.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="102.3" y="693" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="105.26" y="703.5" ></text>
</g>
<g >
<title>do_query_on_all_shards&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="559.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="543.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (8 samples, 0.15%; +0.02%)</title><rect x="430.2" y="341" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="433.16" y="351.5" ></text>
</g>
<g >
<title>atomic_cell::atomic_cell (1 samples, 0.02%; +0.02%)</title><rect x="107.1" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="110.15" y="495.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (18 samples, 0.34%; -0.02%)</title><rect x="942.4" y="597" width="4.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="945.35" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; +0.02%)</title><rect x="38.9" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="41.90" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::multi_column_restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="686.5" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="689.48" y="687.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::then_impl&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (16 samples, 0.30%; -0.02%)</title><rect x="768.5" y="581" width="3.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="771.51" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%; -0.06%)</title><rect x="933.5" y="565" width="1.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="936.46" y="575.5" ></text>
</g>
<g >
<title>utils::phased_barrier::start (2 samples, 0.04%; 0.00%)</title><rect x="1038.2" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1041.17" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; -0.06%)</title><rect x="939.5" y="533" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="942.46" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.04%)</title><rect x="546.2" y="469" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="549.20" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (5 samples, 0.09%; +0.09%)</title><rect x="98.7" y="645" width="1.1" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="101.70" y="655.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1135.1" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.09" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="399.5" ></text>
</g>
<g >
<title>service::client_state::set_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="77.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="80.80" y="703.5" ></text>
</g>
<g >
<title>dht::i_partitioner::decorate_key (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.86" y="447.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="485" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="687.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (22 samples, 0.41%; -0.02%)</title><rect x="49.6" y="517" width="4.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="52.57" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="45.3" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="48.35" y="415.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="60.0" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="63.02" y="479.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="821.6" y="341" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="824.64" y="351.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::enqueue_waiter (32 samples, 0.60%; -0.02%)</title><rect x="1027.9" y="421" width="7.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1030.94" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_p (1 samples, 0.02%; +0.02%)</title><rect x="40.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="43.01" y="511.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="1058.0" y="485" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1060.95" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="431.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.04%)</title><rect x="284.3" y="453" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="287.33" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.69" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (72 samples, 1.36%; +0.02%)</title><rect x="286.8" y="469" width="16.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="289.77" y="479.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.02%; +0.02%)</title><rect x="84.0" y="805" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="87.03" y="815.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::conjunction&gt; (3 samples, 0.06%; +0.02%)</title><rect x="50.2" y="485" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="53.24" y="495.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (2 samples, 0.04%; 0.00%)</title><rect x="859.2" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.21" y="559.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="751.5" ></text>
</g>
<g >
<title>make_partition_snapshot_flat_reader_from_snp_schema (115 samples, 2.17%; -0.02%)</title><rect x="534.4" y="533" width="25.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="537.42" y="543.5" >m..</text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="864.3" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="867.32" y="575.5" ></text>
</g>
<g >
<title>db::schema_tables::diff_table_or_view (3 samples, 0.06%; 0.00%)</title><rect x="105.4" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::at&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt; &gt; (11 samples, 0.21%; -0.02%)</title><rect x="1057.1" y="533" width="2.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1060.06" y="543.5" ></text>
</g>
<g >
<title>db::commitlog::segment::allocate (3 samples, 0.06%; -0.02%)</title><rect x="1126.4" y="485" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1129.42" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="735.6" y="693" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="738.61" y="703.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="495.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (1 samples, 0.02%; +0.02%)</title><rect x="886.8" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.77" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="41.3" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="44.35" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="858.5" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="861.54" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::check_has_permission (120 samples, 2.26%; +0.06%)</title><rect x="806.1" y="533" width="26.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="809.08" y="543.5" >s..</text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (2 samples, 0.04%; -0.02%)</title><rect x="901.9" y="629" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="904.89" y="639.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="1109.3" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1112.30" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false, false&gt;::_Optional_payload (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="495.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="805" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="815.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="949.7" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="952.69" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (10 samples, 0.19%; +0.02%)</title><rect x="391.3" y="373" width="2.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="394.25" y="383.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (2 samples, 0.04%; +0.02%)</title><rect x="958.6" y="565" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="961.58" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;service::storage_proxy::send_to_live_endpoints (1 samples, 0.02%; +0.02%)</title><rect x="714.5" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="717.49" y="703.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::emplace_back&lt;unsigned int const&amp;&gt; (2 samples, 0.04%; -0.04%)</title><rect x="1107.7" y="613" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1110.75" y="623.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (2 samples, 0.04%; 0.00%)</title><rect x="880.8" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.77" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="809.6" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="812.63" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_Optional_payload_base (5 samples, 0.09%; +0.04%)</title><rect x="1068.0" y="517" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1070.95" y="527.5" ></text>
</g>
<g >
<title>db::commitlog::segment_manager::allocate_when_possible&lt;db::commitlog::add_entry (4 samples, 0.08%; 0.00%)</title><rect x="1126.4" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.42" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::create_service_level_statement, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="62.2" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.24" y="559.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="447.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="105.4" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="108.37" y="399.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; 0.00%)</title><rect x="190.7" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="193.73" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; -0.02%)</title><rect x="998.8" y="501" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1001.82" y="511.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="479.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (8 samples, 0.15%; -0.04%)</title><rect x="184.1" y="501" width="1.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="187.07" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; +0.02%)</title><rect x="589.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="592.11" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="468.0" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="470.95" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="447.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;query::result&gt;::dispose (5 samples, 0.09%; -0.02%)</title><rect x="97.4" y="661" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="100.37" y="671.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="285.0" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="287.99" y="463.5" ></text>
</g>
<g >
<title>query_mutations_on_all_shards (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="798.7" y="565" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="801.74" y="575.5" ></text>
</g>
<g >
<title>query::querier_base::~querier_base (2 samples, 0.04%; +0.04%)</title><rect x="120.3" y="661" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="123.26" y="671.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::do_execute (1,008 samples, 18.99%; +0.04%)</title><rect x="895.4" y="645" width="224.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="898.44" y="655.5" >cql3::statements::select_stat..</text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="629.6" y="597" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="632.57" y="607.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="821" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="831.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="691.8" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="694.81" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="527.5" ></text>
</g>
<g >
<title>list_reader_selector::~list_reader_selector (2 samples, 0.04%; -0.06%)</title><rect x="614.7" y="581" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="617.67" y="591.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="367.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::query (207 samples, 3.90%; -0.02%)</title><rect x="20.2" y="613" width="46.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="23.23" y="623.5" >cql3..</text>
</g>
<g >
<title>ser::safe_serialize_as_uint32&lt;bytes_ostream&gt; (3 samples, 0.06%; -0.19%)</title><rect x="409.0" y="357" width="0.7" height="15.0" fill="rgb(105,105,255)" rx="2" ry="2" />
<text  x="412.04" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (6 samples, 0.11%; -0.02%)</title><rect x="795.4" y="581" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="798.41" y="591.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; +0.02%)</title><rect x="1000.4" y="485" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1003.37" y="495.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (29 samples, 0.55%; 0.00%)</title><rect x="1120.0" y="517" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="527.5" ></text>
</g>
<g >
<title>database::find_column_family (4 samples, 0.08%; -0.02%)</title><rect x="842.3" y="549" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="845.31" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="23.1" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.12" y="463.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; +0.06%)</title><rect x="48.7" y="421" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="51.68" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (1 samples, 0.02%; +0.02%)</title><rect x="54.2" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="57.24" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; 0.00%)</title><rect x="501.7" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="504.74" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::find_and_unlink_span_reclaiming (1 samples, 0.02%; +0.02%)</title><rect x="1026.8" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1029.83" y="383.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (4 samples, 0.08%; 0.00%)</title><rect x="823.9" y="341" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="826.86" y="351.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="593.6" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="596.55" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_range_initialize&lt;managed_bytes const*&gt; (5 samples, 0.09%; -0.02%)</title><rect x="925.9" y="549" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="928.90" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (7 samples, 0.13%; -0.02%)</title><rect x="808.1" y="469" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="811.08" y="479.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::single_column_relation, true&gt;::make&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (2 samples, 0.04%; 0.00%)</title><rect x="59.8" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.80" y="527.5" ></text>
</g>
<g >
<title>cql3::keyspace_element_name::keyspace_element_name (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="543.5" ></text>
</g>
<g >
<title>ser::deserialize_array_helper&lt;false, std::optional&lt;ser::qr_cell_view&gt; &gt;::doit&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt;, std::vector&lt;std::optional&lt;ser::qr_cell_view&gt;, std::allocator&lt;std::optional&lt;ser::qr_cell_view&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="767.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="953.5" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="956.47" y="591.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (13 samples, 0.24%; -0.04%)</title><rect x="438.2" y="453" width="2.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="441.16" y="463.5" ></text>
</g>
<g >
<title>compare_unsigned&lt;managed_bytes_basic_view&lt; (5 samples, 0.09%; +0.04%)</title><rect x="524.2" y="421" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="527.19" y="431.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.25" y="623.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare_column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.80" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="1026.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1029.83" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="735.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="746.9" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="749.94" y="639.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (67 samples, 1.26%; +0.06%)</title><rect x="813.2" y="453" width="14.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="816.19" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="803.4" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="806.41" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (1 samples, 0.02%; +0.02%)</title><rect x="791.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="794.85" y="575.5" ></text>
</g>
<g >
<title>utils::timed_rate_moving_average_and_histogram::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (4 samples, 0.08%; +0.02%)</title><rect x="707.2" y="677" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="710.15" y="687.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (36 samples, 0.68%; +0.02%)</title><rect x="819.6" y="389" width="8.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="822.64" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="832.3" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.31" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.80" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; +0.06%)</title><rect x="1152.7" y="629" width="2.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1155.65" y="639.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_direct (264 samples, 4.97%; 0.00%)</title><rect x="18.7" y="709" width="58.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.67" y="719.5" >cql3::..</text>
</g>
<g >
<title>std::get&lt;0ul, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt; (1 samples, 0.02%; +0.02%)</title><rect x="868.1" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="871.10" y="591.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (1 samples, 0.02%; 0.00%)</title><rect x="603.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="606.56" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (4 samples, 0.08%; +0.08%)</title><rect x="203.2" y="453" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="206.18" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; -0.02%)</title><rect x="698.3" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="701.26" y="687.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%; +0.02%)</title><rect x="26.0" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="29.01" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::make_partition_slice (47 samples, 0.89%; +0.04%)</title><rect x="1097.7" y="629" width="10.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1100.74" y="639.5" ></text>
</g>
<g >
<title>memtable::upgrade_entry (2 samples, 0.04%; +0.04%)</title><rect x="560.2" y="533" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="563.21" y="543.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="62.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.91" y="575.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::invoke&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="335.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="338.68" y="575.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_clustered&lt;clustering_row&gt; (4 samples, 0.08%; 0.00%)</title><rect x="80.5" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.47" y="639.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="548.9" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="551.87" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="479.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::setupInputStream (1 samples, 0.02%; +0.02%)</title><rect x="19.1" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="22.11" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="44.5" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="47.46" y="527.5" ></text>
</g>
<g >
<title>boost::circular_buffer&lt;long, std::allocator&lt;long&gt; &gt;::push_back_impl&lt;long const&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="707.6" y="645" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="710.60" y="655.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="105.6" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="108.59" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, utils::UUID&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, utils::UUID&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.08%; +0.02%)</title><rect x="1146.7" y="629" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1149.65" y="639.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (3 samples, 0.06%; +0.06%)</title><rect x="1102.4" y="597" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1105.41" y="607.5" ></text>
</g>
<g >
<title>database::find_column_family (2 samples, 0.04%; +0.04%)</title><rect x="71.1" y="613" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="74.13" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.04%; -0.06%)</title><rect x="822.3" y="325" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="825.31" y="335.5" ></text>
</g>
<g >
<title>mutation_partition_view::from_view (1 samples, 0.02%; +0.02%)</title><rect x="1125.5" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1128.53" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="527.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="818.5" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="821.53" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (3 samples, 0.06%; +0.02%)</title><rect x="114.3" y="677" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="117.26" y="687.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.02%)</title><rect x="658.7" y="597" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="661.69" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (6 samples, 0.11%; +0.09%)</title><rect x="367.2" y="389" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="370.25" y="399.5" ></text>
</g>
<g >
<title>table::as_mutation_source (11 samples, 0.21%; +0.02%)</title><rect x="658.2" y="645" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="661.24" y="655.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (13 samples, 0.24%; +0.06%)</title><rect x="611.8" y="581" width="2.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="614.78" y="591.5" ></text>
</g>
<g >
<title>std::_Enable_default_constructor&lt;true, std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt; &gt;::_Enable_default_constructor (1 samples, 0.02%; +0.02%)</title><rect x="52.0" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="55.02" y="447.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%; +0.02%)</title><rect x="171.2" y="581" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="174.17" y="591.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (4 samples, 0.08%; 0.00%)</title><rect x="627.8" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.79" y="607.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="804.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="807.08" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (2 samples, 0.04%; +0.02%)</title><rect x="1035.1" y="421" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1038.05" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.02%)</title><rect x="696.0" y="645" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="699.04" y="655.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (12 samples, 0.23%; -0.08%)</title><rect x="429.3" y="357" width="2.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="432.27" y="367.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; -0.02%)</title><rect x="907.4" y="501" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="910.45" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="719.8" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="722.82" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; +0.04%)</title><rect x="715.6" y="693" width="1.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="718.60" y="703.5" ></text>
</g>
<g >
<title>abstract_type::decompose (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="399.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; +0.02%)</title><rect x="996.6" y="549" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="999.59" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;*&gt; &gt;::_M_erase_at_end (1 samples, 0.02%; +0.02%)</title><rect x="19.3" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="22.34" y="607.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (2 samples, 0.04%; +0.04%)</title><rect x="801.4" y="565" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="804.41" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_row_cursor::ensure_entry_if_complete (1 samples, 0.02%; 0.00%)</title><rect x="16.4" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.45" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.04%)</title><rect x="100.5" y="677" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="103.48" y="687.5" ></text>
</g>
<g >
<title>global_schema_ptr::get (1 samples, 0.02%; +0.02%)</title><rect x="1038.6" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1041.61" y="479.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (1 samples, 0.02%; 0.00%)</title><rect x="712.9" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.93" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="785.6" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="788.63" y="575.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (2 samples, 0.04%; +0.02%)</title><rect x="463.1" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="466.06" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_Deque_base (1 samples, 0.02%; +0.02%)</title><rect x="19.8" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="22.78" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4 samples, 0.08%; +0.08%)</title><rect x="1083.5" y="501" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1086.52" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="782.1" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="785.07" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="927.7" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="930.68" y="591.5" ></text>
</g>
<g >
<title>mutation_partition::apply_weak (1 samples, 0.02%; 0.00%)</title><rect x="107.1" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::statements::update_statement, false&gt;::make&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.47" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (7 samples, 0.13%; 0.00%)</title><rect x="684.0" y="677" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.03" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; &gt;::base (1 samples, 0.02%; +0.02%)</title><rect x="47.3" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="50.35" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (4 samples, 0.08%; +0.08%)</title><rect x="319.2" y="517" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="322.23" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (1 samples, 0.02%; +0.02%)</title><rect x="882.8" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="885.77" y="607.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::find (39 samples, 0.73%; +0.02%)</title><rect x="752.3" y="645" width="8.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="755.28" y="655.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (146 samples, 2.75%; +0.02%)</title><rect x="802.5" y="549" width="32.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="805.52" y="559.5" >se..</text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (2 samples, 0.04%; -0.04%)</title><rect x="865.0" y="549" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="867.99" y="559.5" ></text>
</g>
<g >
<title>cql_transport::messages::result_message::rows::rows (2 samples, 0.04%; +0.04%)</title><rect x="688.0" y="645" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="691.03" y="655.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (3 samples, 0.06%; 0.00%)</title><rect x="772.1" y="581" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.06" y="591.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureISt5tupleIJEEE9then_implIZNS3_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; +0.02%)</title><rect x="1128.9" y="533" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1131.87" y="543.5" ></text>
</g>
<g >
<title>std::make_unique&lt;merging_reader&lt;mutation_reader_merger&gt;, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, reader_permit, seastar::bool_class&lt;streamed_mutation::forwarding_tag&gt;&amp;, mutation_reader_merger&gt; (21 samples, 0.40%; +0.04%)</title><rect x="497.1" y="517" width="4.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="500.07" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; 0.00%)</title><rect x="276.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="279.10" y="399.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.68" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (4 samples, 0.08%; +0.08%)</title><rect x="543.3" y="469" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="546.31" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry, std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt; &gt;::reset (1 samples, 0.02%; +0.02%)</title><rect x="1034.8" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1037.83" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;::vector (8 samples, 0.15%; -0.02%)</title><rect x="873.0" y="677" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="875.99" y="687.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="683.8" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="686.81" y="655.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (3 samples, 0.06%; 0.00%)</title><rect x="1159.1" y="677" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1162.10" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice, std::default_delete&lt;query::partition_slice&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="575.5" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="578.55" y="543.5" ></text>
</g>
<g >
<title>std::variant&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::variant&lt;cql3::expr::untyped_constant, void, void, cql3::expr::untyped_constant, void&gt; (2 samples, 0.04%; 0.00%)</title><rect x="59.4" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.35" y="479.5" ></text>
</g>
<g >
<title>row_cache::do_make_reader (1 samples, 0.02%; +0.02%)</title><rect x="566.4" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="569.43" y="559.5" ></text>
</g>
<g >
<title>TLS wrapper function for unimplemented::_warnings (1 samples, 0.02%; +0.02%)</title><rect x="18.7" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="21.67" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1096.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1099.85" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (40 samples, 0.75%; +0.04%)</title><rect x="324.8" y="533" width="8.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="327.79" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1004.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1007.15" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::forward_to (1 samples, 0.02%; 0.00%)</title><rect x="738.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="741.72" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (25 samples, 0.47%; 0.00%)</title><rect x="882.8" y="613" width="5.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.77" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="619.3" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="622.34" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="694.3" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.26" y="703.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (494 samples, 9.31%; -0.08%)</title><rect x="348.3" y="485" width="109.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="351.35" y="495.5" >flat_mutation..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_construct&lt;interval_bound&lt;dht::ring_position&gt; const&amp;&gt; (3 samples, 0.06%; 0.00%)</title><rect x="648.7" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="651.69" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::make_ready&lt; (2 samples, 0.04%; +0.02%)</title><rect x="878.5" y="709" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="881.55" y="719.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; 0.00%)</title><rect x="122.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="125.04" y="639.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.06%)</title><rect x="561.8" y="469" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="564.76" y="479.5" ></text>
</g>
<g >
<title>schema_registry_entry::get_schema (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="591.5" ></text>
</g>
<g >
<title>compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="884.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.55" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (3 samples, 0.06%; 0.00%)</title><rect x="841.4" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.42" y="575.5" ></text>
</g>
<g >
<title>read_simple&lt;unsigned short, managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.06%)</title><rect x="935.9" y="581" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="938.90" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (3 samples, 0.06%; 0.00%)</title><rect x="23.1" y="405" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.12" y="415.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%; +0.02%)</title><rect x="814.7" y="389" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="817.75" y="399.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::truncate_statement, std::default_delete&lt;cql3::statements::truncate_statement&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="64.0" y="581" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="67.02" y="591.5" ></text>
</g>
<g >
<title>row::~row (1 samples, 0.02%; -0.02%)</title><rect x="305.9" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="308.89" y="431.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::push_back (13 samples, 0.24%; +0.02%)</title><rect x="21.3" y="485" width="2.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="24.34" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; 0.00%)</title><rect x="23.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.56" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (3 samples, 0.06%; -0.02%)</title><rect x="951.0" y="613" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="954.02" y="623.5" ></text>
</g>
<g >
<title>main (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="821" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="831.5" >main</text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_destroy_data (5 samples, 0.09%; -0.02%)</title><rect x="654.2" y="597" width="1.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="657.24" y="607.5" ></text>
</g>
<g >
<title>visit&lt;(anonymous namespace)::from_string_visitor&gt; (2 samples, 0.04%; 0.00%)</title><rect x="68.2" y="565" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.24" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_users_statement, std::default_delete&lt;cql3::statements::list_users_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::list_users_statement&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.69" y="591.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%; 0.00%)</title><rect x="886.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.33" y="511.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (1 samples, 0.02%; +0.02%)</title><rect x="284.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="287.10" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (26 samples, 0.49%; 0.00%)</title><rect x="1128.6" y="565" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.64" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; -0.04%)</title><rect x="130.0" y="581" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="133.05" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (3 samples, 0.06%; +0.04%)</title><rect x="136.9" y="661" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="139.94" y="671.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="851.2" y="629" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="854.21" y="639.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; -0.02%)</title><rect x="871.0" y="645" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="873.99" y="655.5" ></text>
</g>
<g >
<title>schema::column_at (8 samples, 0.15%; 0.00%)</title><rect x="261.9" y="309" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="264.87" y="319.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="886.6" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.55" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (41 samples, 0.77%; -0.02%)</title><rect x="602.0" y="533" width="9.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="605.00" y="543.5" ></text>
</g>
<g >
<title>dht::ring_position_comparator::operator (54 samples, 1.02%; +0.08%)</title><rect x="517.7" y="501" width="12.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="520.75" y="511.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (7 samples, 0.13%; -0.04%)</title><rect x="781.2" y="581" width="1.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="784.18" y="591.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%; +0.04%)</title><rect x="365.2" y="389" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="368.24" y="399.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (4 samples, 0.08%; +0.02%)</title><rect x="752.5" y="613" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="755.50" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (46 samples, 0.87%; +0.02%)</title><rect x="205.4" y="453" width="10.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="208.41" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.08%)</title><rect x="329.7" y="469" width="2.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="332.68" y="479.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_partition_end (1 samples, 0.02%; +0.02%)</title><rect x="664.7" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="667.69" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="620.0" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="623.01" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%; +0.04%)</title><rect x="263.0" y="293" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="265.98" y="303.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="719.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.04%)</title><rect x="840.3" y="581" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="843.31" y="591.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;float  (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (43 samples, 0.81%; +0.02%)</title><rect x="441.9" y="437" width="9.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="444.94" y="447.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1148.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1150.98" y="655.5" ></text>
</g>
<g >
<title>schema_registry_entry::load (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="671.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::~set_value (1 samples, 0.02%; 0.00%)</title><rect x="74.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.91" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;managed_bytes&gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="951.5" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="954.47" y="591.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (1 samples, 0.02%; +0.02%)</title><rect x="610.9" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="613.89" y="527.5" ></text>
</g>
<g >
<title>std::construct_at&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (4 samples, 0.08%; 0.00%)</title><rect x="21.6" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.56" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="45.1" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="48.12" y="319.5" ></text>
</g>
<g >
<title>utils::config_file::named_value&lt;unsigned long&gt;::the_value (1 samples, 0.02%; 0.00%)</title><rect x="1116.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1119.86" y="623.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (4 samples, 0.08%; -0.02%)</title><rect x="548.9" y="421" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="551.87" y="431.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (2 samples, 0.04%; +0.04%)</title><rect x="1032.4" y="341" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1035.39" y="351.5" ></text>
</g>
<g >
<title>logalloc::segment_pool::refill_emergency_reserve (1 samples, 0.02%; +0.02%)</title><rect x="531.8" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="534.75" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; +0.02%)</title><rect x="953.5" y="565" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="956.47" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1132.2" y="325" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.20" y="335.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="915.7" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="918.67" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="76.2" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.25" y="511.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (29 samples, 0.55%; +0.04%)</title><rect x="156.9" y="645" width="6.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="159.94" y="655.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; 0.00%)</title><rect x="75.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.58" y="655.5" ></text>
</g>
<g >
<title>seastar::internal::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::_M_clear (6 samples, 0.11%; -0.09%)</title><rect x="617.6" y="565" width="1.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="620.56" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.91" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (63 samples, 1.19%; 0.00%)</title><rect x="542.9" y="485" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="545.87" y="495.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_tri_compare (27 samples, 0.51%; -0.04%)</title><rect x="523.3" y="453" width="6.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="526.30" y="463.5" ></text>
</g>
<g >
<title>write&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1126.9" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1129.87" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::~small_vector (1 samples, 0.02%; 0.00%)</title><rect x="495.7" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="498.74" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="740.3" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="743.28" y="719.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%; +0.02%)</title><rect x="1061.3" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1064.28" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="499.7" y="469" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="502.74" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="196.3" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="199.29" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="479.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="712.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="469.5" y="613" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="472.51" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="70.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.47" y="591.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="76.5" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.47" y="479.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (2 samples, 0.04%; +0.02%)</title><rect x="566.0" y="549" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="568.99" y="559.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="869.4" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="872.43" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="52.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.46" y="415.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; -0.06%)</title><rect x="876.5" y="693" width="0.3" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="879.55" y="703.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="575.5" ></text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::start_cells (2 samples, 0.04%; 0.00%)</title><rect x="361.2" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="364.24" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="50.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.02" y="383.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="757" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="767.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (8 samples, 0.15%; +0.02%)</title><rect x="1166.7" y="725" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1169.66" y="735.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::~_Variant_storage (1 samples, 0.02%; 0.00%)</title><rect x="655.8" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="658.80" y="655.5" ></text>
</g>
<g >
<title>bytes_view_hasher::finalize (4 samples, 0.08%; -0.04%)</title><rect x="777.2" y="469" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="780.18" y="479.5" ></text>
</g>
<g >
<title>allocation_strategy::alloc&lt;blob_storage&gt; (4 samples, 0.08%; -0.08%)</title><rect x="245.2" y="277" width="0.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="248.20" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="453" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="463.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="68.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.47" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="1027.3" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1030.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mTokens (10 samples, 0.19%; -0.04%)</title><rect x="32.2" y="469" width="2.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="35.23" y="479.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::query_processor::execute_direct (1 samples, 0.02%; 0.00%)</title><rect x="674.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="677.69" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.04%)</title><rect x="921.0" y="485" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="924.01" y="495.5" ></text>
</g>
<g >
<title>ser::set_size&lt;bytes_ostream, partition_key&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (7 samples, 0.13%; 0.00%)</title><rect x="47.8" y="501" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.79" y="511.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (3 samples, 0.06%; +0.02%)</title><rect x="13.3" y="789" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="16.33" y="799.5" ></text>
</g>
<g >
<title>query::partition_slice::row_ranges (1 samples, 0.02%; 0.00%)</title><rect x="370.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="373.80" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; -0.02%)</title><rect x="736.5" y="677" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="739.50" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::process_authorized_statement (20 samples, 0.38%; 0.00%)</title><rect x="779.8" y="629" width="4.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="782.85" y="639.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (1 samples, 0.02%; +0.02%)</title><rect x="46.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="49.01" y="367.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate (2 samples, 0.04%; 0.00%)</title><rect x="882.1" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.11" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::disable_abort_on_alloc_failure_temporarily::~disable_abort_on_alloc_failure_temporarily (1 samples, 0.02%; +0.02%)</title><rect x="565.3" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="568.32" y="543.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (1 samples, 0.02%; +0.02%)</title><rect x="900.3" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="903.34" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; 0.00%)</title><rect x="881.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.99" y="575.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write&lt;seastar::memory_output_stream&lt;__gnu_cxx::__normal_iterator&lt;seastar::temporary_buffer&lt;char&gt;*, std::vector&lt;seastar::temporary_buffer&lt;char&gt;, std::allocator&lt;seastar::temporary_buffer&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1126.4" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.42" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="471.1" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="474.06" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="437" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; +0.04%)</title><rect x="1133.3" y="357" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1136.31" y="367.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::_Move_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="657.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="660.80" y="623.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.04%)</title><rect x="685.6" y="677" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="688.59" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::restrictions::single_column_restriction, false&gt;::make&lt;column_definition const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="69.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="575.5" ></text>
</g>
<g >
<title>db::commitlog::add_entry (4 samples, 0.08%; 0.00%)</title><rect x="1126.4" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1129.42" y="527.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, cql3::operation::set_value*, std::default_delete&lt;cql3::operation::set_value&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="56.5" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="59.46" y="495.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::release (2 samples, 0.04%; 0.00%)</title><rect x="52.5" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.46" y="431.5" ></text>
</g>
<g >
<title>seastar::syscall_work_queue::submit&lt;seastar::syscall_result&lt;long&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="543.5" ></text>
</g>
<g >
<title>reader_permit::impl::on_admission (3 samples, 0.06%; -0.02%)</title><rect x="126.7" y="613" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="129.71" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::clear (2 samples, 0.04%; 0.00%)</title><rect x="642.7" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="645.68" y="655.5" ></text>
</g>
<g >
<title>fmt::v7::detail::buffer&lt;char&gt;::push_back (3 samples, 0.06%; +0.04%)</title><rect x="18.0" y="677" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="21.00" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="160.5" y="581" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="163.50" y="591.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="1145.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1148.32" y="703.5" ></text>
</g>
<g >
<title>serialize (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="591.5" ></text>
</g>
<g >
<title>position_in_partition_view::for_range_end (3 samples, 0.06%; +0.02%)</title><rect x="282.1" y="437" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="285.10" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, gms::inet_address, std::allocator&lt;gms::inet_address&gt;, std::__detail::_Identity, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;gms::inet_address const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;gms::inet_address, false&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="107.8" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="110.81" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="784.1" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="787.07" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (6 samples, 0.11%; 0.00%)</title><rect x="41.3" y="453" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; +0.02%)</title><rect x="601.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="604.78" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::create_local_service&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, seastar::internal::either_sharded_or_local&lt;service::migration_notifier&gt;, seastar::internal::either_sharded_or_local&lt;gms::feature_service&gt;, seastar::internal::either_sharded_or_local&lt;locator::shared_token_metadata&gt;, seastar::internal::either_sharded_or_local&lt;seastar::abort_source&gt;, seastar::internal::either_sharded_or_local&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="623.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; +0.04%)</title><rect x="310.6" y="485" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="313.56" y="495.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%; 0.00%)</title><rect x="446.8" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.83" y="399.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::abstract_read_executor (8 samples, 0.15%; 0.00%)</title><rect x="1066.2" y="517" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1069.18" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*&gt; (2 samples, 0.04%; +0.02%)</title><rect x="1103.1" y="597" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1106.08" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;compact_for_query&lt; (8 samples, 0.15%; +0.02%)</title><rect x="464.2" y="565" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="467.17" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lower_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="268.5" y="357" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.54" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="891.2" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="894.22" y="655.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::BaseRecognizer (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="581" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="591.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; +0.04%)</title><rect x="578.9" y="613" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="581.88" y="623.5" ></text>
</g>
<g >
<title>__libc_siglongjmp (1 samples, 0.02%; +0.02%)</title><rect x="84.3" y="837" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="87.25" y="847.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (4 samples, 0.08%; +0.02%)</title><rect x="730.7" y="629" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="733.72" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="447.1" y="405" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="450.05" y="415.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (4 samples, 0.08%; +0.02%)</title><rect x="682.5" y="645" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="685.48" y="655.5" ></text>
</g>
<g >
<title>std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="447.5" ></text>
</g>
<g >
<title>ser::serializer&lt;clustering_key_prefix&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.6" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.65" y="335.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%; +0.04%)</title><rect x="528.4" y="389" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="531.42" y="399.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (4 samples, 0.08%; -0.06%)</title><rect x="1067.1" y="501" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1070.06" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_memory (3 samples, 0.06%; 0.00%)</title><rect x="552.0" y="405" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.98" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="834.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="837.76" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%; 0.00%)</title><rect x="825.4" y="341" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="828.42" y="351.5" ></text>
</g>
<g >
<title>create_partitions (274 samples, 5.16%; 0.00%)</title><rect x="17.8" y="741" width="60.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="751.5" >create..</text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; +0.02%)</title><rect x="602.7" y="501" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="605.67" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="431.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (4 samples, 0.08%; 0.00%)</title><rect x="37.1" y="549" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.12" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;void  (1 samples, 0.02%; +0.02%)</title><rect x="51.6" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="54.57" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.06%)</title><rect x="997.5" y="517" width="0.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1000.48" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (3 samples, 0.06%; +0.02%)</title><rect x="1134.4" y="693" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1137.42" y="703.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::_LA (6 samples, 0.11%; -0.08%)</title><rect x="30.2" y="453" width="1.4" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="33.23" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.08%; 0.00%)</title><rect x="41.8" y="405" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.79" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="52.9" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.91" y="415.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (544 samples, 10.25%; +0.02%)</title><rect x="342.6" y="549" width="120.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="345.57" y="559.5" >seastar::futuri..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="702.5" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="705.48" y="671.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="399.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="383.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; -0.04%)</title><rect x="829.2" y="453" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="832.20" y="463.5" ></text>
</g>
<g >
<title>partition_key::from_range&lt;std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt; const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="884.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.55" y="559.5" ></text>
</g>
<g >
<title>mutation_partition::clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="639.5" ></text>
</g>
<g >
<title>cdc::generation_service::after_join (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="655.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="367.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1166.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.44" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::lsa_partition_reader (5 samples, 0.09%; +0.02%)</title><rect x="556.9" y="485" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="559.87" y="495.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::mhtraits&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, boost::intrusive::list_member_hook&lt;boost::intrusive::link_mode&lt; (1 samples, 0.02%; +0.02%)</title><rect x="753.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="756.61" y="607.5" ></text>
</g>
<g >
<title>std::optional&lt;clustering_key_prefix&gt;::operator=&lt;clustering_key_prefix const&amp;&gt; (6 samples, 0.11%; +0.02%)</title><rect x="280.8" y="421" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="283.77" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; 0.00%)</title><rect x="490.0" y="437" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="492.96" y="447.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (16 samples, 0.30%; +0.02%)</title><rect x="907.2" y="533" width="3.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="910.23" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="831.6" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="834.64" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; +0.02%)</title><rect x="301.4" y="389" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="304.44" y="399.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="751.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="1165.8" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1168.77" y="655.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (1 samples, 0.02%; -0.04%)</title><rect x="966.1" y="581" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="969.14" y="591.5" ></text>
</g>
<g >
<title>service::storage_service::join_token_ring (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="687.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (2 samples, 0.04%; +0.04%)</title><rect x="270.3" y="309" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="273.32" y="319.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (2 samples, 0.04%; 0.00%)</title><rect x="10.4" y="789" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.02%)</title><rect x="700.3" y="677" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="703.26" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair (4 samples, 0.08%; 0.00%)</title><rect x="818.3" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="821.30" y="431.5" ></text>
</g>
<g >
<title>seastar::deferred_action&lt;table::query (10 samples, 0.19%; -0.06%)</title><rect x="640.0" y="645" width="2.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="643.02" y="655.5" ></text>
</g>
<g >
<title>compound_type&lt; (17 samples, 0.32%; +0.06%)</title><rect x="525.3" y="421" width="3.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="528.31" y="431.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::needs_filtering (13 samples, 0.24%; +0.04%)</title><rect x="681.1" y="661" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="684.14" y="671.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::restriction&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="70.2" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="73.24" y="575.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::make_empty (10 samples, 0.19%; -0.04%)</title><rect x="582.2" y="597" width="2.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="585.22" y="607.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_1502abaca14bdfb677c669eaa6149754eb6e7075] (1 samples, 0.02%; +0.02%)</title><rect x="1131.8" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.76" y="351.5" ></text>
</g>
<g >
<title>cql3::to_managed_bytes_opt (2 samples, 0.04%; +0.04%)</title><rect x="923.9" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="926.90" y="575.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::make_open_ended_both_sides (13 samples, 0.24%; +0.06%)</title><rect x="1099.5" y="597" width="2.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1102.52" y="607.5" ></text>
</g>
<g >
<title>all (5,308 samples, 100%)</title><rect x="10.0" y="869" width="1180.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="879.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt; &gt;::invoke&lt;utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (14 samples, 0.26%; +0.02%)</title><rect x="769.0" y="565" width="3.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="771.95" y="575.5" ></text>
</g>
<g >
<title>seastar::smp::submit_to&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="671.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::destroy (1 samples, 0.02%; 0.00%)</title><rect x="690.5" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.48" y="703.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::find (4 samples, 0.08%; 0.00%)</title><rect x="684.7" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="687.70" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="343.7" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="346.68" y="527.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="901.0" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="904.00" y="639.5" ></text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (40 samples, 0.75%; -0.08%)</title><rect x="1180.2" y="837" width="8.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1183.22" y="847.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="265.2" y="341" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="268.21" y="351.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::qr_clustered_row__cells (1 samples, 0.02%; 0.00%)</title><rect x="381.3" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="384.25" y="399.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1134.2" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1137.20" y="367.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (54 samples, 1.02%; +0.06%)</title><rect x="185.8" y="501" width="12.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="188.84" y="511.5" ></text>
</g>
<g >
<title>utils::approx_exponential_histogram&lt;512ul, 33554432ul, 4ul&gt;::add (1 samples, 0.02%; 0.00%)</title><rect x="706.9" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="709.93" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::do_execute (31 samples, 0.58%; 0.00%)</title><rect x="881.7" y="645" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.66" y="655.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::size (1 samples, 0.02%; +0.02%)</title><rect x="683.6" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="686.59" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large_and_trim (1 samples, 0.02%; 0.00%)</title><rect x="983.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.92" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="928.3" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="931.35" y="591.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="106.3" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.26" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (3 samples, 0.06%; -0.02%)</title><rect x="818.5" y="405" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="821.53" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (5 samples, 0.09%; 0.00%)</title><rect x="857.4" y="581" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.43" y="591.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="671.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (1 samples, 0.02%; +0.02%)</title><rect x="1130.2" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1133.20" y="367.5" ></text>
</g>
<g >
<title>dht::minimum_token (3 samples, 0.06%; +0.02%)</title><rect x="482.2" y="533" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="485.18" y="543.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; -0.02%)</title><rect x="53.8" y="437" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="56.79" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;tracking_allocator&lt;mutation_fragment&gt; &gt;::_S_destroy&lt;tracking_allocator&lt;mutation_fragment&gt;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="451.9" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="454.94" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextTokenStr (40 samples, 0.75%; -0.06%)</title><rect x="25.8" y="485" width="8.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="28.78" y="495.5" ></text>
</g>
<g >
<title>cql3::attributes::is_timeout_set (1 samples, 0.02%; +0.02%)</title><rect x="965.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="968.03" y="623.5" ></text>
</g>
<g >
<title>dht::tri_compare (4 samples, 0.08%; 0.00%)</title><rect x="1072.8" y="453" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1075.84" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="254.3" y="309" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="257.31" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="333.5" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="336.46" y="495.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="489.1" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="492.07" y="479.5" ></text>
</g>
<g >
<title>partition_entry::apply (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.75" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%; 0.00%)</title><rect x="951.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="954.47" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; 0.00%)</title><rect x="741.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.16" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="677.8" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="680.81" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="527.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (557 samples, 10.49%; +0.02%)</title><rect x="748.7" y="677" width="123.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="751.72" y="687.5" >single_node_cql..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;, service::storage_proxy::query_result_local (13 samples, 0.24%; +0.02%)</title><rect x="671.8" y="709" width="2.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="674.80" y="719.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::operator= (3 samples, 0.06%; 0.00%)</title><rect x="849.6" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="852.65" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="447.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::upper_bound&lt;mutation_partition, schema const&amp;, nonwrapping_interval&lt;clustering_key_prefix&gt; const&amp;&gt; (2 samples, 0.04%; +0.02%)</title><rect x="269.0" y="357" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="271.99" y="367.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="703.5" ></text>
</g>
<g >
<title>bytes_ostream::chunk::~chunk (2 samples, 0.04%; -0.09%)</title><rect x="98.0" y="613" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="101.03" y="623.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.02%)</title><rect x="669.4" y="677" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="672.36" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::pair&lt;seastar::shared_ptr&lt;service::abstract_read_executor&gt;, nonwrapping_interval&lt;dht::token&gt; &gt;, 1ul&gt;::clear (15 samples, 0.28%; -0.02%)</title><rect x="1162.7" y="677" width="3.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1165.66" y="687.5" ></text>
</g>
<g >
<title>row_tombstone::apply (3 samples, 0.06%; 0.00%)</title><rect x="435.5" y="421" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="438.49" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_read_executor (181 samples, 3.41%; -0.04%)</title><rect x="1051.7" y="565" width="40.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1054.73" y="575.5" >ser..</text>
</g>
<g >
<title>ser::qr_partition__static_row&lt;bytes_ostream&gt;::qr_partition__static_row (3 samples, 0.06%; -0.02%)</title><rect x="360.6" y="373" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="363.58" y="383.5" ></text>
</g>
<g >
<title>database::apply_with_commitlog (33 samples, 0.62%; -0.02%)</title><rect x="1120.0" y="533" width="7.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1122.97" y="543.5" ></text>
</g>
<g >
<title>service::storage_proxy_stats::split_stats::get_ep_stat (1 samples, 0.02%; +0.02%)</title><rect x="1050.8" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1053.84" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; -0.02%)</title><rect x="711.2" y="661" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="714.15" y="671.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (2 samples, 0.04%; +0.02%)</title><rect x="827.2" y="293" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="830.20" y="303.5" ></text>
</g>
<g >
<title>seastar::task_quota_aio_completion::complete_with (1 samples, 0.02%; +0.02%)</title><rect x="1136.2" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1139.20" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;query::read_command&gt;::shared_ptr_no_esft&lt;utils::UUID const&amp;, utils::UUID, query::partition_slice, query::max_result_size, query::row_limit, query::partition_limit, std::chrono::time_point&lt;gc_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1l&gt; &gt; &gt;&amp;, std::optional&lt;tracing::trace_info&gt;, utils::UUID, seastar::bool_class&lt;query::is_first_page_tag&gt; const&amp;, long&gt; (11 samples, 0.21%; +0.06%)</title><rect x="1110.9" y="613" width="2.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1113.86" y="623.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="328.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="331.56" y="511.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;mutation_reader_merger::reader_and_last_fragment_kind*, mutation_reader_merger::prepare_next (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="293" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="303.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="739.4" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="742.39" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="874.3" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="877.33" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="431.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (3 samples, 0.06%; +0.06%)</title><rect x="281.4" y="389" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="284.44" y="399.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (5 samples, 0.09%; +0.06%)</title><rect x="755.6" y="549" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="758.61" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::add_readers (19 samples, 0.36%; -0.06%)</title><rect x="488.2" y="485" width="4.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="491.18" y="495.5" ></text>
</g>
<g >
<title>service::storage_proxy::new_read_repair_decision (1 samples, 0.02%; +0.02%)</title><rect x="1092.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1094.96" y="575.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; -0.04%)</title><rect x="197.6" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="200.63" y="495.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="948.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="951.13" y="591.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; 0.00%)</title><rect x="722.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.05" y="655.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="563.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="566.32" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::operator (1 samples, 0.02%; 0.00%)</title><rect x="187.8" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="190.84" y="495.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each_state::parallel_for_each_state (1 samples, 0.02%; +0.02%)</title><rect x="1129.3" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1132.31" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (48 samples, 0.90%; 0.00%)</title><rect x="239.6" y="309" width="10.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="242.64" y="319.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="465.7" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="468.73" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::raw::modification_statement*, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="63.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.35" y="559.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (44 samples, 0.83%; +0.06%)</title><rect x="123.6" y="661" width="9.8" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="126.60" y="671.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, distributed_loader::populate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="719.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::specific_ranges, std::default_delete&lt;query::specific_ranges&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="592.7" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="595.66" y="639.5" ></text>
</g>
<g >
<title>seastar::reactor::add_timer (1 samples, 0.02%; -0.02%)</title><rect x="1031.7" y="357" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1034.72" y="367.5" ></text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="556.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="559.65" y="463.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; -0.02%)</title><rect x="1002.4" y="533" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1005.37" y="543.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::update_and_check (1 samples, 0.02%; 0.00%)</title><rect x="379.7" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="382.69" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.03" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="673.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="676.81" y="703.5" ></text>
</g>
<g >
<title>range_tombstone_list::~range_tombstone_list (2 samples, 0.04%; 0.00%)</title><rect x="609.3" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.34" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::_Tuple_impl (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="367.5" ></text>
</g>
<g >
<title>multishard_combining_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="479.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; 0.00%)</title><rect x="703.6" y="661" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="706.59" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::operator (3 samples, 0.06%; +0.02%)</title><rect x="776.5" y="501" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="779.51" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="736.1" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.05" y="703.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="921.0" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="924.01" y="511.5" ></text>
</g>
<g >
<title>cql3::column_identifier::column_identifier (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.80" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="830.3" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.31" y="463.5" ></text>
</g>
<g >
<title>std::operator==&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="775.4" y="501" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="778.40" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; +0.02%)</title><rect x="611.3" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="614.34" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1119.3" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1122.31" y="639.5" ></text>
</g>
<g >
<title>libat_store_16_i1 (2 samples, 0.04%; +0.04%)</title><rect x="737.2" y="693" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="740.16" y="703.5" ></text>
</g>
<g >
<title>std::variant&lt;query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::operator=&lt;query::noop_hasher&gt; (2 samples, 0.04%; +0.04%)</title><rect x="635.8" y="597" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="638.79" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;wrapping_interval&lt;dht::token&gt; &gt;::operator (2 samples, 0.04%; +0.04%)</title><rect x="1156.7" y="661" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1159.65" y="671.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (7 samples, 0.13%; -0.08%)</title><rect x="781.2" y="597" width="1.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="784.18" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="712.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="715.49" y="575.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="399.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.04%)</title><rect x="945.9" y="565" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="948.91" y="575.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (4 samples, 0.08%; +0.02%)</title><rect x="902.6" y="613" width="0.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="905.56" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (2 samples, 0.04%; 0.00%)</title><rect x="675.4" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.36" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::create_service_level_statement*, std::default_delete&lt;cql3::statements::create_service_level_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="62.2" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="65.24" y="527.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (1 samples, 0.02%; +0.02%)</title><rect x="1049.5" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1052.50" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::value&lt;fmt::v7::basic_printf_context&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char&gt; &gt;::format_custom_arg&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.8" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="703.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::shared_ptr&lt;database&gt;, seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="639.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="864.5" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="867.54" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; -0.08%)</title><rect x="711.8" y="693" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="714.82" y="703.5" ></text>
</g>
<g >
<title>frozen_schema::unfreeze (3 samples, 0.06%; 0.00%)</title><rect x="106.9" y="629" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="639.5" ></text>
</g>
<g >
<title>cql3::raw_value_view::make_temporary (1 samples, 0.02%; 0.00%)</title><rect x="886.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.77" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="76.9" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="79.91" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="575.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="578.77" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::~deque (15 samples, 0.28%; -0.04%)</title><rect x="652.0" y="613" width="3.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="655.02" y="623.5" ></text>
</g>
<g >
<title>memtable::find_or_create_partition_slow (9 samples, 0.17%; 0.00%)</title><rect x="1120.9" y="453" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.86" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (1 samples, 0.02%; 0.00%)</title><rect x="880.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.77" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="44.0" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.01" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;reader_concurrency_semaphore::entry&gt; &gt;::destroy&lt;reader_concurrency_semaphore::entry&gt; (1 samples, 0.02%; 0.00%)</title><rect x="664.2" y="677" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="667.25" y="687.5" ></text>
</g>
<g >
<title>antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;::RecognizerSharedStateType&lt;antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::RecognizerSharedStateType (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_relocate (4 samples, 0.08%; 0.00%)</title><rect x="48.5" y="469" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.46" y="479.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; 0.00%)</title><rect x="1108.2" y="629" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1111.19" y="639.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;managed_bytes&gt;::make&lt;managed_bytes&gt; (3 samples, 0.06%; 0.00%)</title><rect x="920.8" y="517" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="923.79" y="527.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; -0.04%)</title><rect x="1034.6" y="405" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1037.61" y="415.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="335.9" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="338.90" y="575.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; -0.04%)</title><rect x="545.8" y="437" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="548.76" y="447.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.9" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.86" y="399.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (2 samples, 0.04%; 0.00%)</title><rect x="589.3" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.33" y="607.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (77 samples, 1.45%; -0.08%)</title><rect x="594.4" y="581" width="17.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="597.44" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (2 samples, 0.04%; 0.00%)</title><rect x="494.2" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="497.18" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (5 samples, 0.09%; +0.02%)</title><rect x="696.5" y="645" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="699.48" y="655.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry::touch (5 samples, 0.09%; +0.06%)</title><rect x="770.7" y="517" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="773.73" y="527.5" ></text>
</g>
<g >
<title>row::external_memory_usage (2 samples, 0.04%; 0.00%)</title><rect x="16.7" y="725" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.67" y="735.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::sharded_parallel_for_each (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="1163.1" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1166.10" y="671.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::touch (1 samples, 0.02%; -0.02%)</title><rect x="771.8" y="533" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="774.84" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::expr::expression::impl&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="51.8" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.79" y="463.5" ></text>
</g>
<g >
<title>partition_entry::evict (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;::then_impl&lt;query::querier&lt; (2 samples, 0.04%; -0.02%)</title><rect x="580.9" y="629" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="583.88" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="453" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="463.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIN5utils15timestamped_valINS_11checked_ptrINS_8weak_ptrIN4cql310statements18prepared_statementEEENS_25default_null_deref_actionEEENS5_40authorized_prepared_statements_cache_keyENS5_41authorized_prepared_statements_cache_sizeESt4hashISB_ESt8equal_toISB_ENS5_36authorized_prepared_statements_cache50authorized_prepared_statements_cache_stats_updaterEE9value_ptrEE9then_implIZNSL_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="765.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="768.62" y="607.5" ></text>
</g>
<g >
<title>locator::calculate_effective_replication_map (1 samples, 0.02%; 0.00%)</title><rect x="17.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.56" y="639.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (307 samples, 5.78%; -0.09%)</title><rect x="215.6" y="453" width="68.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="218.63" y="463.5" >partiti..</text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="670.5" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="673.47" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (21 samples, 0.40%; 0.00%)</title><rect x="458.8" y="517" width="4.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="461.84" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="312.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="315.78" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="589.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="592.11" y="511.5" ></text>
</g>
<g >
<title>std::function&lt;flat_mutation_reader  (477 samples, 8.99%; +0.02%)</title><rect x="472.8" y="597" width="106.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="475.84" y="607.5" >std::functio..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.08%)</title><rect x="398.8" y="373" width="0.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="401.81" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt; &gt;::get_deleter (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.46" y="511.5" ></text>
</g>
<g >
<title>table::mutation_query (1 samples, 0.02%; 0.00%)</title><rect x="140.3" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.27" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%; +0.06%)</title><rect x="1096.2" y="581" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1099.19" y="591.5" ></text>
</g>
<g >
<title>partition_entry::read (5 samples, 0.09%; -0.02%)</title><rect x="561.3" y="517" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="564.32" y="527.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; +0.02%)</title><rect x="880.1" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.11" y="639.5" ></text>
</g>
<g >
<title>database::shard_of (1 samples, 0.02%; 0.00%)</title><rect x="1130.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.98" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;service::digest_read_result&gt;::set_value&lt;service::digest_read_result&gt; (2 samples, 0.04%; 0.00%)</title><rect x="729.8" y="629" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="732.83" y="639.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="343.0" y="501" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="346.01" y="511.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::sharded&lt;database&gt;::start&lt;std::reference_wrapper&lt;db::config&gt;, database_config&amp;, std::reference_wrapper&lt;seastar::sharded&lt;service::migration_notifier&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;gms::feature_service&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;locator::shared_token_metadata&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::abort_source&gt; &gt;, std::reference_wrapper&lt;seastar::sharded&lt;seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt; &gt; &gt;, utils::cross_shard_barrier&gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.57" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::construct&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="21.6" y="469" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.56" y="479.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; -0.02%)</title><rect x="38.2" y="549" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="41.23" y="559.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="112.7" y="677" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="115.71" y="687.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="591.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (2 samples, 0.04%; +0.04%)</title><rect x="965.7" y="581" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="968.69" y="591.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cql3::expr::expression::impl&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="920.6" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="923.57" y="527.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (3 samples, 0.06%; +0.04%)</title><rect x="530.2" y="533" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="533.20" y="543.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (2 samples, 0.04%; +0.02%)</title><rect x="381.7" y="389" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="384.70" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1130.6" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.64" y="399.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume_end_of_partition (2 samples, 0.04%; +0.02%)</title><rect x="81.8" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="84.80" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;mutation_fragment&gt;::allocate (1 samples, 0.02%; 0.00%)</title><rect x="328.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="331.34" y="511.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::set_latency (1 samples, 0.02%; 0.00%)</title><rect x="660.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="663.69" y="655.5" ></text>
</g>
<g >
<title>operator delete (6 samples, 0.11%; 0.00%)</title><rect x="724.0" y="693" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="727.05" y="703.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="623.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (1 samples, 0.02%; +0.02%)</title><rect x="81.6" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="84.58" y="575.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="735.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.04%)</title><rect x="586.4" y="549" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="589.44" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4 samples, 0.08%; -0.04%)</title><rect x="1151.5" y="613" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1154.54" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1126.4" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1129.42" y="431.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (4 samples, 0.08%; 0.00%)</title><rect x="58.9" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.91" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; +0.02%)</title><rect x="80.0" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="83.03" y="495.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="735.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc (2 samples, 0.04%; 0.00%)</title><rect x="1121.3" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.31" y="383.5" ></text>
</g>
<g >
<title>boost::range_detail::default_constructible_unary_fn_wrapper&lt;service::abstract_write_response_handler::max_backlog (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="623.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="804.3" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="807.30" y="495.5" ></text>
</g>
<g >
<title>cql3::cf_name::set_column_family (1 samples, 0.02%; +0.02%)</title><rect x="38.5" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="41.46" y="559.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (2 samples, 0.04%; +0.02%)</title><rect x="1106.9" y="597" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1109.86" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;partition_key, clustering_key_prefix&gt;, std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt;, std::_Select1st&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt;, cql3::update_parameters::prefetch_data::key_less, std::allocator&lt;std::pair&lt;std::pair&lt;partition_key, clustering_key_prefix&gt; const, cql3::update_parameters::prefetch_data::row&gt; &gt; &gt;::_Rb_tree_impl&lt;cql3::update_parameters::prefetch_data::key_less, false&gt;::_Rb_tree_impl (1 samples, 0.02%; +0.02%)</title><rect x="888.1" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="891.11" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1189.1" y="837" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1192.11" y="847.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1069.3" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.29" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::~impl (5 samples, 0.09%; +0.04%)</title><rect x="602.0" y="517" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="605.00" y="527.5" ></text>
</g>
<g >
<title>frozen_schema::frozen_schema (2 samples, 0.04%; 0.00%)</title><rect x="106.5" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="671.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; +0.04%)</title><rect x="817.6" y="421" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="820.64" y="431.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get_promise (2 samples, 0.04%; +0.02%)</title><rect x="1041.3" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1044.28" y="479.5" ></text>
</g>
<g >
<title>schema::partition_key_size (1 samples, 0.02%; +0.02%)</title><rect x="71.6" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="74.58" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="602.9" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="605.89" y="479.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (7 samples, 0.13%; -0.08%)</title><rect x="14.0" y="789" width="1.6" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="17.00" y="799.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (2 samples, 0.04%; +0.02%)</title><rect x="712.0" y="693" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="715.04" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="53.8" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.79" y="383.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (13 samples, 0.24%; +0.04%)</title><rect x="296.3" y="405" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="299.33" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (1 samples, 0.02%; +0.02%)</title><rect x="847.6" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="850.65" y="495.5" ></text>
</g>
<g >
<title>compare_row_marker_for_merge (1 samples, 0.02%; +0.02%)</title><rect x="1124.2" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1127.20" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;gms::inet_address, std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt;, std::allocator&lt;std::pair&lt;gms::inet_address const, service::view_update_backlog_timestamped&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;gms::inet_address&gt;, std::hash&lt;gms::inet_address&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="597" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.04%)</title><rect x="219.6" y="421" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="222.63" y="431.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (3 samples, 0.06%; +0.06%)</title><rect x="135.8" y="661" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="138.83" y="671.5" ></text>
</g>
<g >
<title>evictable_reader::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="431.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (26 samples, 0.49%; -0.02%)</title><rect x="523.5" y="437" width="5.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="526.53" y="447.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1132.2" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1135.20" y="303.5" ></text>
</g>
<g >
<title>db::system_keyspace::query_mutations (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; +0.02%)</title><rect x="711.4" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="714.38" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;static_row&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="441.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="444.05" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::storage_proxy&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="1062.6" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1065.62" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="273.0" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="275.99" y="399.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (3 samples, 0.06%; -0.06%)</title><rect x="707.4" y="661" width="0.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="710.37" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (3 samples, 0.06%; 0.00%)</title><rect x="82.2" y="757" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="767.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.04%)</title><rect x="1026.2" y="421" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1029.16" y="431.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (5 samples, 0.09%; 0.00%)</title><rect x="880.1" y="693" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.11" y="703.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="399.5" ></text>
</g>
<g >
<title>query::querier_base::close (127 samples, 2.39%; 0.00%)</title><rect x="593.8" y="645" width="28.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="596.78" y="655.5" >q..</text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::~vector (2 samples, 0.04%; +0.04%)</title><rect x="52.9" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="55.91" y="399.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="940.4" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="943.35" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (39 samples, 0.73%; -0.04%)</title><rect x="581.5" y="613" width="8.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="584.55" y="623.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.8" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="495.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, service::client_state::has_column_family_access (1 samples, 0.02%; +0.02%)</title><rect x="839.9" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="842.87" y="607.5" ></text>
</g>
<g >
<title>logalloc::region_impl::alloc_small (1 samples, 0.02%; +0.02%)</title><rect x="16.4" y="709" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.45" y="719.5" ></text>
</g>
<g >
<title>seastar::execution_stage::flush (2 samples, 0.04%; +0.02%)</title><rect x="781.6" y="565" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="784.62" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="614.4" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="617.45" y="543.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="37.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.12" y="527.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="468.8" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="471.84" y="607.5" ></text>
</g>
<g >
<title>partition_snapshot::static_row (6 samples, 0.11%; -0.04%)</title><rect x="304.3" y="421" width="1.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="307.33" y="431.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="559.5" ></text>
</g>
<g >
<title>compaction_backlog_manager::backlog (1 samples, 0.02%; +0.02%)</title><rect x="1168.2" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1171.21" y="623.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="958.1" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="961.13" y="591.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="1151.5" y="597" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1154.54" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::move_it (1 samples, 0.02%; 0.00%)</title><rect x="666.7" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="669.69" y="687.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;(anonymous namespace)::write_row_cells&lt;ser::deletable_row__cells&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="575.5" ></text>
</g>
<g >
<title>service::storage_proxy::got_response (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="703.5" ></text>
</g>
<g >
<title>wrapping_interval&lt;dht::ring_position&gt;::wrapping_interval (1 samples, 0.02%; +0.02%)</title><rect x="942.1" y="581" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="945.13" y="591.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, service::storage_proxy::mutate_internal&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="736.5" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="739.50" y="703.5" ></text>
</g>
<g >
<title>local_schema_registry (3 samples, 0.06%; -0.02%)</title><rect x="982.4" y="565" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="985.37" y="575.5" ></text>
</g>
<g >
<title>mutation_source::mutation_source (9 samples, 0.17%; -0.04%)</title><rect x="658.5" y="629" width="2.0" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="661.47" y="639.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (2 samples, 0.04%; +0.02%)</title><rect x="222.5" y="405" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="225.52" y="415.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (6 samples, 0.11%; 0.00%)</title><rect x="844.3" y="517" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.31" y="527.5" ></text>
</g>
<g >
<title>intrusive_b::node&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="677" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="687.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_one (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="277" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="287.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureIvE9then_implIZZN5query12consume_pageIL19emit_only_live_rows1E20query_result_builderEEDaR20flat_mutation_readerNS_13lw_shared_ptrI22compact_mutation_stateIXT_EL20compact_for_sstables0EEEERKNS3_15partition_sliceEOT0_mjNSt6chrono10time_pointI8gc_clockNSJ_8durationIlSt5ratioILl1ELl1EEEEEEENUlP17mutation_fragmentE_clESS_EUlDpOT_E_NS0_ISt5tupleIJSt8optionalI21clustering_key_prefixEEEEEEESH_OT_ (4 samples, 0.08%; +0.06%)</title><rect x="341.2" y="581" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="344.24" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::~small_vector (2 samples, 0.04%; 0.00%)</title><rect x="830.8" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.75" y="447.5" ></text>
</g>
<g >
<title>db::system_distributed_keyspace::create_cdc_desc (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="703.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::get_promise (2 samples, 0.04%; +0.04%)</title><rect x="976.4" y="581" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="979.36" y="591.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (1 samples, 0.02%; +0.02%)</title><rect x="22.9" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="25.89" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="714.0" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="717.04" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (3 samples, 0.06%; 0.00%)</title><rect x="42.0" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.01" y="367.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (4 samples, 0.08%; -0.02%)</title><rect x="777.2" y="485" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="780.18" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; +0.04%)</title><rect x="917.5" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="920.45" y="495.5" ></text>
</g>
<g >
<title>mutation_reader_merger::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (5 samples, 0.09%; -0.02%)</title><rect x="46.0" y="373" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="49.01" y="383.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (2 samples, 0.04%; 0.00%)</title><rect x="53.6" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="479.5" ></text>
</g>
<g >
<title>double_decker&lt;long, cache_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (1 samples, 0.02%; 0.00%)</title><rect x="16.0" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.00" y="783.5" ></text>
</g>
<g >
<title>db::schema_tables::merge_schema (2 samples, 0.04%; 0.00%)</title><rect x="106.0" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="719.5" ></text>
</g>
<g >
<title>cql3::statements::raw::modification_statement::prepare (36 samples, 0.68%; 0.00%)</title><rect x="66.5" y="677" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.47" y="687.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (10 samples, 0.19%; -0.02%)</title><rect x="780.5" y="613" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="783.51" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::get0 (1 samples, 0.02%; +0.02%)</title><rect x="738.5" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="741.50" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate_to_raw_view (80 samples, 1.51%; 0.00%)</title><rect x="906.1" y="565" width="17.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="909.12" y="575.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (6 samples, 0.11%; +0.11%)</title><rect x="598.2" y="517" width="1.4" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="601.22" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::take_value (2 samples, 0.04%; +0.04%)</title><rect x="335.2" y="565" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="338.23" y="575.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="591.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="765.8" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="768.84" y="607.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (16 samples, 0.30%; 0.00%)</title><rect x="12.0" y="821" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.00" y="831.5" ></text>
</g>
<g >
<title>std::type_info::operator== (1 samples, 0.02%; 0.00%)</title><rect x="722.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="725.05" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="693.6" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="696.59" y="703.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::~resource_units (2 samples, 0.04%; +0.02%)</title><rect x="456.2" y="453" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="459.17" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="437" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="53.6" y="261" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="56.57" y="271.5" ></text>
</g>
<g >
<title>table::query (2,342 samples, 44.12%; +0.38%)</title><rect x="140.5" y="661" width="520.6" height="15.0" fill="rgb(255,0,0)" rx="2" ry="2" />
<text  x="143.49" y="671.5" >table::query</text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; +0.04%)</title><rect x="562.7" y="533" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="565.65" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (2 samples, 0.04%; 0.00%)</title><rect x="832.1" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="835.09" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="619.6" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="622.56" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.15%; +0.11%)</title><rect x="987.7" y="517" width="1.8" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="990.70" y="527.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (1 samples, 0.02%; +0.02%)</title><rect x="67.4" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="70.35" y="655.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::partition_snapshot_flat_reader&lt;schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="607.5" ></text>
</g>
<g >
<title>ser::serializer&lt;tombstone&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1131.8" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.76" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (3 samples, 0.06%; +0.02%)</title><rect x="499.1" y="469" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="502.07" y="479.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; -0.02%)</title><rect x="796.5" y="533" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="799.52" y="543.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::move_it (10 samples, 0.19%; +0.02%)</title><rect x="708.3" y="693" width="2.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="711.26" y="703.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.02%; +0.02%)</title><rect x="153.4" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="156.39" y="655.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers_at_partition_boundary (3 samples, 0.06%; +0.06%)</title><rect x="181.8" y="517" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="184.84" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::digest_read_result&gt;::take (1 samples, 0.02%; 0.00%)</title><rect x="718.9" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="721.93" y="655.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (4 samples, 0.08%; 0.00%)</title><rect x="52.5" y="437" width="0.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.46" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="349.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="352.68" y="463.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::apply_updates (11 samples, 0.21%; 0.00%)</title><rect x="885.4" y="581" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.44" y="591.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (36 samples, 0.68%; 0.00%)</title><rect x="697.6" y="709" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="700.59" y="719.5" ></text>
</g>
<g >
<title>std::default_delete&lt;compact_for_query&lt; (5 samples, 0.09%; +0.06%)</title><rect x="462.4" y="469" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="465.39" y="479.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;single_node_cql_env::core_local_state&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="861.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="863.99" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::prepare_next (67 samples, 1.26%; 0.00%)</title><rect x="183.0" y="517" width="14.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="185.95" y="527.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.26%; 0.00%)</title><rect x="1004.6" y="469" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1007.60" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::coroutine_traits_base&lt;service::storage_proxy_coordinator_query_result&gt;::promise_type::run_and_dispose (1 samples, 0.02%; 0.00%)</title><rect x="85.8" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.81" y="735.5" ></text>
</g>
<g >
<title>schema::get_column_definition (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.80" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1034.6" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1037.61" y="399.5" ></text>
</g>
<g >
<title>seastar::future&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (10 samples, 0.19%; 0.00%)</title><rect x="814.7" y="421" width="2.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.75" y="431.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="479.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::initial_key_restrictions&lt;partition_key&gt;::merge_to (1 samples, 0.02%; +0.02%)</title><rect x="69.4" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="72.36" y="623.5" ></text>
</g>
<g >
<title>reader_permit::impl::mark_unused (37 samples, 0.70%; -0.02%)</title><rect x="125.2" y="645" width="8.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="128.15" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::revoke_statement, std::default_delete&lt;cql3::statements::revoke_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; +0.02%)</title><rect x="66.0" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="69.02" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;, nonwrapping_interval&lt;managed_bytes&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="950.8" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="953.80" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="45.6" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_destroy_data&lt;antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.00" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; -0.06%)</title><rect x="587.3" y="533" width="2.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="590.33" y="543.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (4 samples, 0.08%; -0.04%)</title><rect x="1032.8" y="341" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1035.83" y="351.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::promise&lt;void&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="712.9" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="715.93" y="671.5" ></text>
</g>
<g >
<title>database::shard_of (2 samples, 0.04%; 0.00%)</title><rect x="1130.2" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.20" y="399.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::reserve (1 samples, 0.02%; +0.02%)</title><rect x="1159.5" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1162.54" y="671.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (2 samples, 0.04%; -0.02%)</title><rect x="37.6" y="533" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="40.57" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (7 samples, 0.13%; +0.11%)</title><rect x="336.3" y="581" width="1.6" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="339.35" y="591.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_result_local (1 samples, 0.02%; +0.02%)</title><rect x="1050.6" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1053.61" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier_raw, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="42.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.68" y="527.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (1 samples, 0.02%; -0.02%)</title><rect x="492.8" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="495.85" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (1 samples, 0.02%; +0.02%)</title><rect x="333.7" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="336.68" y="543.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="676.3" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="679.25" y="639.5" ></text>
</g>
<g >
<title>mutation_reader_merger::~mutation_reader_merger (21 samples, 0.40%; -0.04%)</title><rect x="615.1" y="581" width="4.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="618.12" y="591.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="357" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="367.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (1 samples, 0.02%; 0.00%)</title><rect x="827.4" y="277" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.42" y="287.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (2 samples, 0.04%; +0.04%)</title><rect x="479.3" y="549" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="482.29" y="559.5" ></text>
</g>
<g >
<title>query::result_set_builder::accept_new_row (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="479.5" ></text>
</g>
<g >
<title>schema::partition_key_columns (1 samples, 0.02%; +0.02%)</title><rect x="73.6" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="76.58" y="671.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::local (1 samples, 0.02%; 0.00%)</title><rect x="855.4" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="858.43" y="655.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="511.5" ></text>
</g>
<g >
<title>std::default_delete&lt;mutation_fragment::data&gt;::operator (7 samples, 0.13%; +0.02%)</title><rect x="456.6" y="453" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="459.61" y="463.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_impl&lt;boost::intrusive::mhtraits&lt;range_tombstone_entry, boost::intrusive::set_member_hook&lt;boost::intrusive::link_mode&lt; (2 samples, 0.04%; 0.00%)</title><rect x="609.3" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="612.34" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::memory_usage&lt;row::external_memory_usage (10 samples, 0.19%; -0.09%)</title><rect x="261.4" y="325" width="2.3" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="264.43" y="335.5" ></text>
</g>
<g >
<title>__start_context (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="789" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="799.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (3 samples, 0.06%; -0.08%)</title><rect x="163.4" y="645" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="166.39" y="655.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_9has_tokenERKNS5_10expressionEEUlRS7_E_EES8_SE_T_EUlSF_E_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_8constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_11conjunctionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_12column_valueEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_5tokenEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13function_callEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4castEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_15field_selectionEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_4nullEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_13bind_variableEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_16untyped_constantEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_17tuple_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_22collection_constructorEE_ZNSB_ISG_EES8_SE_SH_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSN_S6_SR_SV_SZ_S13_S17_S1B_S1F_S1J_S1N_S1R_SJ_S1V_S1Z_S23_EEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES28_S2B_ (1 samples, 0.02%; -0.04%)</title><rect x="904.1" y="597" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="907.11" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; +0.04%)</title><rect x="577.1" y="517" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="580.10" y="527.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="466.8" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="469.84" y="591.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (4 samples, 0.08%; +0.04%)</title><rect x="1142.6" y="693" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1145.65" y="703.5" ></text>
</g>
<g >
<title>std::deque&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::clear (1 samples, 0.02%; -0.02%)</title><rect x="436.2" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="439.16" y="431.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, true&gt;::operator (3 samples, 0.06%; 0.00%)</title><rect x="826.5" y="309" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.53" y="319.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (3 samples, 0.06%; +0.02%)</title><rect x="470.0" y="629" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="472.95" y="639.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (95 samples, 1.79%; -0.02%)</title><rect x="810.3" y="485" width="21.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="813.30" y="495.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="597" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;mutation_fragment::calculate_memory_usage (3 samples, 0.06%; +0.06%)</title><rect x="263.9" y="373" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="266.87" y="383.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::find (2 samples, 0.04%; -0.02%)</title><rect x="685.1" y="629" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="688.14" y="639.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="389" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="399.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::indirect_move (1 samples, 0.02%; +0.02%)</title><rect x="1035.5" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1038.50" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::apply (1 samples, 0.02%; 0.00%)</title><rect x="107.1" y="549" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="559.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="117" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="127.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::columnOperation (81 samples, 1.53%; 0.00%)</title><rect x="39.3" y="565" width="18.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.34" y="575.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="41.6" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="44.57" y="351.5" ></text>
</g>
<g >
<title>std::type_info::operator== (2 samples, 0.04%; +0.02%)</title><rect x="1067.5" y="485" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1070.51" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::possible_lhs_values (108 samples, 2.03%; 0.00%)</title><rect x="904.6" y="613" width="24.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="907.56" y="623.5" >c..</text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%; -0.02%)</title><rect x="458.2" y="485" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="461.17" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="950.1" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="953.13" y="623.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="651.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.57" y="639.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::process_where_clause (12 samples, 0.23%; 0.00%)</title><rect x="69.1" y="629" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.13" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;auth::resource&gt;::_Optional_payload_base (3 samples, 0.06%; 0.00%)</title><rect x="803.9" y="501" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="806.85" y="511.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="101" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="111.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_max_result_size (11 samples, 0.21%; 0.00%)</title><rect x="1114.6" y="629" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1117.64" y="639.5" ></text>
</g>
<g >
<title>sstables::key::make_key&lt;partition_key_view&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="81.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="84.58" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::partition_key_restrictions::merge_to (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.02" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="378.6" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="381.58" y="367.5" ></text>
</g>
<g >
<title>[perf_simple_query_flame_1502abaca14bdfb677c669eaa6149754eb6e7075] (1 samples, 0.02%; +0.02%)</title><rect x="10.2" y="805" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="13.22" y="815.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; -0.02%)</title><rect x="282.5" y="421" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="285.55" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;schema const&amp;, reader_permit&amp;, partition_start&gt; (1 samples, 0.02%; +0.02%)</title><rect x="79.6" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="82.58" y="575.5" ></text>
</g>
<g >
<title>read_simple&lt;long, managed_bytes_basic_view&lt; (4 samples, 0.08%; -0.04%)</title><rect x="432.8" y="373" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="435.83" y="383.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (545 samples, 10.27%; 0.00%)</title><rect x="342.6" y="581" width="121.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="345.57" y="591.5" >flat_mutation_r..</text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (6 samples, 0.11%; +0.08%)</title><rect x="1012.6" y="453" width="1.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1015.60" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;lister&gt;::shared_ptr_no_esft&lt;seastar::file, std::unordered_set&lt;seastar::directory_entry_type, seastar::enum_hash&lt;seastar::directory_entry_type&gt;, std::equal_to&lt;seastar::directory_entry_type&gt;, std::allocator&lt;seastar::directory_entry_type&gt; &gt; const, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="671.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%; +0.02%)</title><rect x="1121.5" y="357" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1124.53" y="367.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::selection::selection const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="688.5" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="691.48" y="655.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (2 samples, 0.04%; +0.04%)</title><rect x="719.2" y="645" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="722.16" y="655.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (2 samples, 0.04%; 0.00%)</title><rect x="342.1" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="345.13" y="591.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%; 0.00%)</title><rect x="992.4" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.37" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::unique_ptr&lt;cql3::operation::set_value, std::default_delete&lt;cql3::operation::set_value&gt;, void&gt; (1 samples, 0.02%; 0.00%)</title><rect x="56.5" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="59.46" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor::syscall_pollfn::poll (1 samples, 0.02%; 0.00%)</title><rect x="1167.8" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.77" y="719.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="880.8" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.77" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::at (4 samples, 0.08%; 0.00%)</title><rect x="842.3" y="533" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.31" y="543.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="674.7" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="677.69" y="703.5" ></text>
</g>
<g >
<title>write_tombstones&lt;ser::mutation_partition__range_tombstones&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1133.1" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1136.09" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (3 samples, 0.06%; +0.06%)</title><rect x="1094.9" y="597" width="0.6" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1097.85" y="607.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="1058.2" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1061.17" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;std::function&lt;flat_mutation_reader  (2 samples, 0.04%; +0.02%)</title><rect x="645.6" y="645" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="648.57" y="655.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;service::storage_proxy::unique_response_handler*, service::storage_proxy::mutate_begin (10 samples, 0.19%; 0.00%)</title><rect x="1129.3" y="485" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.31" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%; +0.04%)</title><rect x="361.7" y="373" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="364.69" y="383.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::single_column_relation (2 samples, 0.04%; 0.00%)</title><rect x="59.8" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.80" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;cql3::expr::expression&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="67.1" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="70.13" y="639.5" ></text>
</g>
<g >
<title>operator delete (10 samples, 0.19%; -0.02%)</title><rect x="153.8" y="645" width="2.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="156.83" y="655.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; +0.02%)</title><rect x="736.5" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="739.50" y="671.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::key_is_in_relation (1 samples, 0.02%; +0.02%)</title><rect x="965.2" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="968.25" y="623.5" ></text>
</g>
<g >
<title>service::client_state::check_has_permission (6 samples, 0.11%; 0.00%)</title><rect x="75.8" y="613" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.80" y="623.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::apply_locally (5 samples, 0.09%; 0.00%)</title><rect x="1130.0" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.98" y="463.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="76.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.47" y="495.5" ></text>
</g>
<g >
<title>std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="591.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;cql3::authorized_prepared_statements_cache_key, seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;,  (11 samples, 0.21%; +0.06%)</title><rect x="769.6" y="549" width="2.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="772.62" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; -0.02%)</title><rect x="850.1" y="597" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="853.09" y="607.5" ></text>
</g>
<g >
<title>single_node_cql_env::make_query_state (44 samples, 0.83%; -0.02%)</title><rect x="856.5" y="645" width="9.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="859.54" y="655.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::insertToken (13 samples, 0.24%; -0.02%)</title><rect x="21.3" y="517" width="2.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="24.34" y="527.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="50.7" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="53.68" y="479.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;auth::role_or_anonymous&gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="832.5" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="835.53" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (3 samples, 0.06%; +0.02%)</title><rect x="1163.3" y="661" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1166.32" y="671.5" ></text>
</g>
<g >
<title>[[vdso]] (29 samples, 0.55%; -0.02%)</title><rect x="1171.1" y="821" width="6.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1174.10" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::~modification_statement (8 samples, 0.15%; 0.00%)</title><rect x="676.3" y="677" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.25" y="687.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (14 samples, 0.26%; -0.02%)</title><rect x="443.9" y="405" width="3.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="446.94" y="415.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.04%)</title><rect x="725.6" y="677" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="728.60" y="687.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (12 samples, 0.23%; +0.06%)</title><rect x="352.1" y="453" width="2.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="355.13" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::expression::~expression (1 samples, 0.02%; +0.02%)</title><rect x="51.1" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="54.13" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::optimized_optional&lt;mutation_fragment&gt; &gt;::then_impl&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (2 samples, 0.04%; -0.06%)</title><rect x="171.8" y="581" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="174.84" y="591.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;std::function&lt;flat_mutation_reader  (4 samples, 0.08%; +0.02%)</title><rect x="658.5" y="613" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="661.47" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::when_all_state&lt;seastar::internal::extract_values_from_futures_tuple&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;, seastar::future&lt;void&gt;, seastar::future&lt;void&gt; &gt;::~when_all_state (1 samples, 0.02%; 0.00%)</title><rect x="881.2" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.22" y="719.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::get_static_row (14 samples, 0.26%; +0.04%)</title><rect x="303.0" y="453" width="3.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="306.00" y="463.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="768.7" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="771.73" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.03" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (3 samples, 0.06%; +0.02%)</title><rect x="760.1" y="597" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="763.06" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (8 samples, 0.15%; 0.00%)</title><rect x="573.5" y="485" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="576.55" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="666.5" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="669.47" y="687.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;void&gt;, database*, seastar::lw_shared_ptr&lt;schema const&gt;, frozen_mutation const&amp;, tracing::trace_state_ptr, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, seastar::bool_class&lt;db::force_sync_tag&gt; &gt;::make_stage_for_group (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="613" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="623.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="839.6" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="842.65" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.00" y="607.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (2 samples, 0.04%; 0.00%)</title><rect x="915.9" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="918.90" y="479.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;clustering_key_prefix&gt;::nonwrapping_interval (7 samples, 0.13%; +0.04%)</title><rect x="1100.2" y="581" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1103.19" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.02%)</title><rect x="692.3" y="693" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="695.26" y="703.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="629" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="639.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="693" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="703.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; -0.02%)</title><rect x="1058.4" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1061.39" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; -0.02%)</title><rect x="624.9" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="627.90" y="623.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::~unique_ptr (3 samples, 0.06%; +0.06%)</title><rect x="923.2" y="549" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="926.23" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="463.5" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="466.50" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (2 samples, 0.04%; +0.04%)</title><rect x="348.8" y="469" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="351.79" y="479.5" ></text>
</g>
<g >
<title>write_row&lt;ser::writer_of_deletable_row&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="607.5" ></text>
</g>
<g >
<title>partition_builder::accept_row (2 samples, 0.04%; 0.00%)</title><rect x="1124.2" y="437" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.20" y="447.5" ></text>
</g>
<g >
<title>cql3::authorized_prepared_statements_cache::insert (60 samples, 1.13%; +0.02%)</title><rect x="765.0" y="613" width="13.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="767.95" y="623.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::got_response (13 samples, 0.24%; -0.06%)</title><rect x="729.6" y="645" width="2.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="732.60" y="655.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (8 samples, 0.15%; +0.13%)</title><rect x="790.1" y="533" width="1.8" height="15.0" fill="rgb(255,136,136)" rx="2" ry="2" />
<text  x="793.07" y="543.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; -0.21%)</title><rect x="1112.6" y="597" width="0.3" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="1115.64" y="607.5" ></text>
</g>
<g >
<title>antlr3::TokenSource&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::nextToken (46 samples, 0.87%; -0.02%)</title><rect x="24.4" y="501" width="10.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="27.45" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="777.0" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="779.96" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="304.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="307.78" y="415.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="10.4" y="741" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="751.5" ></text>
</g>
<g >
<title>list_reader_selector::list_reader_selector (4 samples, 0.08%; +0.08%)</title><rect x="482.8" y="533" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="485.84" y="543.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::~Lexer (1 samples, 0.02%; 0.00%)</title><rect x="19.3" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.34" y="639.5" ></text>
</g>
<g >
<title>speculative_retry::from_sstring (1 samples, 0.02%; 0.00%)</title><rect x="106.9" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.93" y="575.5" ></text>
</g>
<g >
<title>database::find_uuid (17 samples, 0.32%; +0.02%)</title><rect x="843.2" y="565" width="3.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="846.20" y="575.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="77.8" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="80.80" y="687.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; const*, nonwrapping_interval&lt;clustering_key_prefix&gt;*&gt; (3 samples, 0.06%; +0.02%)</title><rect x="1105.3" y="565" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1108.30" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::value_ptr&gt;::future_state&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry_ptr&gt; (6 samples, 0.11%; +0.02%)</title><rect x="770.5" y="533" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="773.51" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;bool&gt; (1 samples, 0.02%; +0.02%)</title><rect x="42.7" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="45.68" y="495.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (12 samples, 0.23%; -0.06%)</title><rect x="1177.6" y="821" width="2.6" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1180.55" y="831.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="842.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="845.09" y="591.5" ></text>
</g>
<g >
<title>antlr3::IntStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::rewind (2 samples, 0.04%; -0.02%)</title><rect x="33.8" y="437" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="36.79" y="447.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="565" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; -0.06%)</title><rect x="155.6" y="629" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="158.61" y="639.5" ></text>
</g>
<g >
<title>operator delete (3 samples, 0.06%; 0.00%)</title><rect x="621.1" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="624.12" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;schema_registry_entry&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="989.5" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="992.48" y="559.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::take (2 samples, 0.04%; +0.04%)</title><rect x="321.5" y="549" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="324.45" y="559.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="891.4" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="894.44" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (2 samples, 0.04%; +0.02%)</title><rect x="927.9" y="581" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="930.90" y="591.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="747.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="750.61" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; +0.02%)</title><rect x="862.5" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="865.54" y="607.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (1 samples, 0.02%; 0.00%)</title><rect x="854.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.10" y="591.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; +0.02%)</title><rect x="57.8" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="60.80" y="479.5" ></text>
</g>
<g >
<title>seastar::scheduling_group_get_specific&lt;service::storage_proxy_stats::stats&gt; (1 samples, 0.02%; -0.02%)</title><rect x="706.7" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="709.71" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_realloc_insert&lt;cql3::raw_value_view&gt; (7 samples, 0.13%; +0.04%)</title><rect x="868.8" y="581" width="1.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="871.77" y="591.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;char&gt; (5 samples, 0.09%; +0.06%)</title><rect x="822.8" y="325" width="1.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="825.75" y="335.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="149" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="159.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; -0.02%)</title><rect x="1011.7" y="469" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1014.71" y="479.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (517 samples, 9.74%; +0.04%)</title><rect x="343.9" y="517" width="114.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="346.90" y="527.5" >std::__invoke_..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (6 samples, 0.11%; -0.02%)</title><rect x="41.3" y="485" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="44.35" y="495.5" ></text>
</g>
<g >
<title>__start_context (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="655.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIRKNS0_13basic_sstringIcjLj15ELb1EEEN4auth8resourceEJZNK7service12client_state24has_column_family_accessERK8databaseS6_S6_NS7_10permissionENS7_12command_desc4typeEE3$_4EEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJS6_OS8_EEEDcSJ_SL_ (1 samples, 0.02%; 0.00%)</title><rect x="75.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.36" y="671.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="490.0" y="453" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="492.96" y="463.5" ></text>
</g>
<g >
<title>dht::ring_position::as_decorated_key (7 samples, 0.13%; +0.02%)</title><rect x="505.7" y="533" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="508.74" y="543.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="463.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::restrictions::has_eq_null (1 samples, 0.02%; +0.02%)</title><rect x="883.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="886.00" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (2 samples, 0.04%; +0.04%)</title><rect x="1150.9" y="613" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1153.87" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7 samples, 0.13%; -0.02%)</title><rect x="1161.1" y="693" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1164.10" y="703.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;flush_reader::fill_buffer (3 samples, 0.06%; 0.00%)</title><rect x="79.8" y="645" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="655.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (23 samples, 0.43%; -0.02%)</title><rect x="754.3" y="613" width="5.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="757.28" y="623.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (2 samples, 0.04%; +0.02%)</title><rect x="302.1" y="437" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="305.11" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="479.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator (3 samples, 0.06%; +0.04%)</title><rect x="555.8" y="437" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="558.76" y="447.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1117.5" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1120.53" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="500.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="503.41" y="495.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (5 samples, 0.09%; 0.00%)</title><rect x="180.7" y="517" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="183.73" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; +0.04%)</title><rect x="103.6" y="693" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="106.59" y="703.5" ></text>
</g>
<g >
<title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (1 samples, 0.02%; +0.02%)</title><rect x="845.6" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="848.65" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="421" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="431.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="1068.6" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1071.62" y="511.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_cql (268 samples, 5.05%; 0.00%)</title><rect x="18.7" y="725" width="59.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.67" y="735.5" >single..</text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; -0.02%)</title><rect x="529.1" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="532.08" y="431.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (14 samples, 0.26%; +0.04%)</title><rect x="512.0" y="485" width="3.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="514.97" y="495.5" ></text>
</g>
<g >
<title>[unknown] (5 samples, 0.09%; 0.00%)</title><rect x="10.2" y="821" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.22" y="831.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (1 samples, 0.02%; 0.00%)</title><rect x="323.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="326.01" y="559.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="11.1" y="805" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="14.11" y="815.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="53.8" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="56.79" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::update_statement (1 samples, 0.02%; 0.00%)</title><rect x="60.7" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.69" y="559.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="539.3" y="501" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="542.31" y="511.5" ></text>
</g>
<g >
<title>merging_reader&lt;mutation_reader_merger&gt;::~merging_reader (43 samples, 0.81%; +0.02%)</title><rect x="611.6" y="597" width="9.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="614.56" y="607.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (499 samples, 9.40%; +0.02%)</title><rect x="347.9" y="501" width="110.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="350.91" y="511.5" >seastar::repe..</text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (5 samples, 0.09%; +0.02%)</title><rect x="957.9" y="597" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="960.91" y="607.5" ></text>
</g>
<g >
<title>query::result_set_builder::deserialize (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (23 samples, 0.43%; +0.06%)</title><rect x="1078.2" y="485" width="5.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1081.18" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;partition_key, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="591.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="594.77" y="639.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (3 samples, 0.06%; +0.04%)</title><rect x="257.4" y="325" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="260.43" y="335.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="587.3" y="549" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="590.33" y="559.5" ></text>
</g>
<g >
<title>query_result_builder::query_result_builder (1 samples, 0.02%; +0.02%)</title><rect x="121.2" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="124.15" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;query::partition_slice const, std::default_delete&lt;query::partition_slice const&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="658.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="661.02" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="817.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="819.97" y="415.5" ></text>
</g>
<g >
<title>schema_registry::get_entry (24 samples, 0.45%; +0.15%)</title><rect x="984.1" y="549" width="5.4" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="987.14" y="559.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%; 0.00%)</title><rect x="552.0" y="389" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="554.98" y="399.5" ></text>
</g>
<g >
<title>database::find_column_family (7 samples, 0.13%; -0.02%)</title><rect x="1022.8" y="453" width="1.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1025.83" y="463.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;unsigned long&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="872.8" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="875.77" y="687.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="786.7" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="789.74" y="575.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.04%)</title><rect x="371.2" y="405" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="374.25" y="415.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::~statement_restrictions (2 samples, 0.04%; 0.00%)</title><rect x="676.3" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.25" y="671.5" ></text>
</g>
<g >
<title>db::schema_tables::create_table_from_mutations (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (2 samples, 0.04%; 0.00%)</title><rect x="40.0" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.01" y="527.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; 0.00%)</title><rect x="854.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="857.10" y="575.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (41 samples, 0.77%; +0.02%)</title><rect x="931.0" y="597" width="9.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="934.01" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="130.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="133.49" y="607.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1093.7" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1096.74" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (2 samples, 0.04%; +0.04%)</title><rect x="1036.2" y="421" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1039.16" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (1 samples, 0.02%; -0.02%)</title><rect x="1061.5" y="533" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1064.51" y="543.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement::execute (87 samples, 1.64%; -0.04%)</title><rect x="678.3" y="709" width="19.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="681.25" y="719.5" ></text>
</g>
<g >
<title>std::forward&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; const&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="22.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="25.67" y="463.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; 0.00%)</title><rect x="377.0" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="380.03" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10bool_classIN22mutation_reader_merger15needs_merge_tagEEEE9then_implIZNS5_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; +0.04%)</title><rect x="187.4" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="190.40" y="495.5" ></text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;service::storage_proxy_coordinator_query_result&gt;, seastar::future&lt;service::storage_proxy_coordinator_query_result&gt;::finally_body&lt;service::storage_proxy::do_query (1 samples, 0.02%; 0.00%)</title><rect x="85.4" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="88.36" y="735.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_destroyed (1 samples, 0.02%; 0.00%)</title><rect x="121.8" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="124.82" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::query_state&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="751.4" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="754.39" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt;, std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="76.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.91" y="607.5" ></text>
</g>
<g >
<title>mutation_fragment::destroy_data (47 samples, 0.89%; -0.02%)</title><rect x="441.3" y="469" width="10.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="444.27" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="62.9" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.91" y="559.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="264.5" y="373" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.54" y="383.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="830.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="833.09" y="463.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (46 samples, 0.87%; 0.00%)</title><rect x="359.5" y="421" width="10.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="362.46" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="57.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="60.57" y="511.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="773" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="783.5" ></text>
</g>
<g >
<title>mutation_fragment::visit&lt;partition_snapshot_read_accounter&amp;&gt; (4 samples, 0.08%; +0.02%)</title><rect x="204.3" y="437" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="207.30" y="447.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="757" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="767.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource, auth::resource, std::allocator&lt;auth::resource&gt;, std::__detail::_Identity, std::equal_to&lt;auth::resource&gt;, std::hash&lt;auth::resource&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (18 samples, 0.34%; +0.04%)</title><rect x="835.6" y="565" width="4.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="838.64" y="575.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; 0.00%)</title><rect x="572.7" y="501" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="575.66" y="511.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="990.8" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="993.81" y="575.5" ></text>
</g>
<g >
<title>table::stop (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="671.5" ></text>
</g>
<g >
<title>double_decker&lt;long, memtable_entry, dht::raw_token_less_comparator, dht::ring_position_comparator, 16,  (7 samples, 0.13%; 0.00%)</title><rect x="1121.1" y="421" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1124.09" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.09%; -0.02%)</title><rect x="914.6" y="469" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="917.56" y="479.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="664.9" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="667.91" y="703.5" ></text>
</g>
<g >
<title>std::default_delete&lt;query::partition_slice const&gt;::operator (13 samples, 0.24%; 0.00%)</title><rect x="627.1" y="613" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="630.12" y="623.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::metadata, false&gt;::make&lt;cql3::metadata&amp;&gt; (3 samples, 0.06%; -0.02%)</title><rect x="686.9" y="677" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="689.92" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (14 samples, 0.26%; +0.11%)</title><rect x="1004.6" y="453" width="3.1" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1007.60" y="463.5" ></text>
</g>
<g >
<title>reader_permit::resource_units::reset (3 samples, 0.06%; +0.02%)</title><rect x="214.3" y="421" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="217.30" y="431.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_endpoints (1 samples, 0.02%; 0.00%)</title><rect x="1069.5" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.51" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (3 samples, 0.06%; +0.02%)</title><rect x="951.7" y="613" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="954.69" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt; &gt;::future (1 samples, 0.02%; +0.02%)</title><rect x="989.7" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="992.70" y="575.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (6 samples, 0.11%; +0.06%)</title><rect x="795.4" y="549" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="798.41" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::maybe_add_readers (37 samples, 0.70%; +0.06%)</title><rect x="486.4" y="501" width="8.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="489.40" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::~small_vector (3 samples, 0.06%; +0.02%)</title><rect x="496.4" y="501" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="499.41" y="511.5" ></text>
</g>
<g >
<title>validation::validate_keyspace (7 samples, 0.13%; -0.02%)</title><rect x="847.0" y="581" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="849.98" y="591.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="607.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt; const&amp;, mutation_fragment&gt; (1 samples, 0.02%; +0.02%)</title><rect x="196.5" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="199.51" y="479.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (2 samples, 0.04%; 0.00%)</title><rect x="812.7" y="437" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="815.75" y="447.5" ></text>
</g>
<g >
<title>locator::token_metadata_impl::first_token_index (28 samples, 0.53%; +0.04%)</title><rect x="1072.0" y="469" width="6.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1074.96" y="479.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::global_trace_state_ptr (1 samples, 0.02%; -0.04%)</title><rect x="1050.2" y="501" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1053.17" y="511.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%; +0.02%)</title><rect x="291.9" y="405" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="294.88" y="415.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="199.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="201.96" y="463.5" ></text>
</g>
<g >
<title>memtable_entry::snapshot (9 samples, 0.17%; +0.04%)</title><rect x="560.7" y="533" width="2.0" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="563.65" y="543.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::push_back (24 samples, 0.45%; +0.08%)</title><rect x="1029.1" y="405" width="5.3" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="1032.05" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_S_do_relocate (3 samples, 0.06%; 0.00%)</title><rect x="48.7" y="453" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.68" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="369.5" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="372.47" y="415.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.04%)</title><rect x="496.6" y="485" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="499.63" y="495.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="773" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="783.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::execute (1 samples, 0.02%; 0.00%)</title><rect x="1119.5" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.53" y="655.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.11%; 0.00%)</title><rect x="379.9" y="389" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="382.92" y="399.5" ></text>
</g>
<g >
<title>seastar::preempt_io_context::reset_preemption_monitor (3 samples, 0.06%; +0.02%)</title><rect x="1135.8" y="709" width="0.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1138.76" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="543.5" ></text>
</g>
<g >
<title>ser::integral_serializer&lt;unsigned int&gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1125.1" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1128.09" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::emplace_back&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="107.6" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.59" y="687.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="49.8" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="52.79" y="415.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="50.9" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.90" y="479.5" ></text>
</g>
<g >
<title>compound_type&lt; (8 samples, 0.15%; +0.04%)</title><rect x="582.2" y="565" width="1.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="585.22" y="575.5" ></text>
</g>
<g >
<title>database::find_schema (6 samples, 0.11%; -0.02%)</title><rect x="785.4" y="597" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="788.40" y="607.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (3 samples, 0.06%; +0.02%)</title><rect x="647.1" y="645" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="650.13" y="655.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; +0.02%)</title><rect x="775.2" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="778.18" y="495.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variadic_union&lt;cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variadic_union&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="341" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="351.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_no_esft&lt;std::function&lt;std::function&lt;partition_presence_checker_result  (2 samples, 0.04%; -0.02%)</title><rect x="660.0" y="597" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="663.02" y="607.5" ></text>
</g>
<g >
<title>utils::loading_cache&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, enum_set&lt;super_enum&lt;auth::permission,  (60 samples, 1.13%; 0.00%)</title><rect x="814.7" y="437" width="13.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="817.75" y="447.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;::compare (2 samples, 0.04%; +0.04%)</title><rect x="788.7" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="791.74" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (2 samples, 0.04%; +0.02%)</title><rect x="1097.3" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1100.30" y="623.5" ></text>
</g>
<g >
<title>seastar::posix_file_impl::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="591.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (1 samples, 0.02%; -0.02%)</title><rect x="348.6" y="469" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="351.57" y="479.5" ></text>
</g>
<g >
<title>memtable::make_flat_reader (283 samples, 5.33%; -0.06%)</title><rect x="502.9" y="549" width="62.9" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="505.85" y="559.5" >memtab..</text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::pop_back (1 samples, 0.02%; +0.02%)</title><rect x="312.6" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="315.56" y="495.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; +0.02%)</title><rect x="814.3" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="817.30" y="431.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::select_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="781.0" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="783.96" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="527.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::cancel (2 samples, 0.04%; +0.02%)</title><rect x="731.6" y="629" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="734.61" y="639.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_view_statement, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="61.8" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.80" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;query::querier&lt; (28 samples, 0.53%; +0.09%)</title><rect x="649.6" y="645" width="6.2" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="652.57" y="655.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="558.4" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="561.43" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::pop_mutation_fragment (3 samples, 0.06%; -0.04%)</title><rect x="349.2" y="469" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="352.24" y="479.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (4 samples, 0.08%; +0.06%)</title><rect x="128.7" y="597" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="131.71" y="607.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (6 samples, 0.11%; -0.02%)</title><rect x="121.6" y="661" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="124.60" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_data (1 samples, 0.02%; 0.00%)</title><rect x="54.9" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.91" y="463.5" ></text>
</g>
<g >
<title>ser::query_result__partitions&lt;bytes_ostream&gt;::add (1 samples, 0.02%; +0.02%)</title><rect x="363.7" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="366.69" y="383.5" ></text>
</g>
<g >
<title>seastar::gate::leave (4 samples, 0.08%; +0.08%)</title><rect x="644.7" y="645" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="647.68" y="655.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; -0.02%)</title><rect x="1097.1" y="597" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1100.08" y="607.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (14 samples, 0.26%; 0.00%)</title><rect x="836.5" y="549" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="839.53" y="559.5" ></text>
</g>
<g >
<title>row_cache::do_update (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="575.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_erase_at_end (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.00" y="591.5" ></text>
</g>
<g >
<title>database::add_column_family (5 samples, 0.09%; 0.00%)</title><rect x="106.5" y="693" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="703.5" ></text>
</g>
<g >
<title>seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;::swap (6 samples, 0.11%; 0.00%)</title><rect x="766.1" y="597" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="769.06" y="607.5" ></text>
</g>
<g >
<title>make_combined_reader (81 samples, 1.53%; 0.00%)</title><rect x="483.7" y="533" width="18.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="486.73" y="543.5" ></text>
</g>
<g >
<title>intrusive_b::member_hook::attach_first (1 samples, 0.02%; +0.02%)</title><rect x="16.2" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.22" y="687.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureISt5tupleIJEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS3_14discard_resultEvEUlDpOT_E_ZNS3_14then_impl_nrvoISB_NS0_IvEEEET0_OT_EUlOS7_RSB_ONS_12future_stateIS2_EEE_EEvSG_OSE_OT1_ (1 samples, 0.02%; +0.02%)</title><rect x="1129.1" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1132.09" y="511.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (18 samples, 0.34%; 0.00%)</title><rect x="1003.9" y="517" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1006.93" y="527.5" ></text>
</g>
<g >
<title>row::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="881.0" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.99" y="511.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::operator== (2 samples, 0.04%; +0.04%)</title><rect x="774.5" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="777.51" y="511.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN7seastar10shared_ptrIN4cql34termEEEEER18overloaded_functorIJZNS6_4expr12prepare_termERKNSB_10expressionER8databaseRKNS4_13basic_sstringIcjLj15ELb1EEENS4_13lw_shared_ptrINS6_20column_specificationEEEE3$_0ZNSB_12prepare_termESE_SG_SK_SN_E3$_1ZNSB_12prepare_termESE_SG_SK_SN_E3$_2ZNSB_12prepare_termESE_SG_SK_SN_E3$_3ZNSB_12prepare_termESE_SG_SK_SN_E3$_4ZNSB_12prepare_termESE_SG_SK_SN_E3$_5ZNSB_12prepare_termESE_SG_SK_SN_E3$_6ZNSB_12prepare_termESE_SG_SK_SN_E3$_7ZNSB_12prepare_termESE_SG_SK_SN_E3$_8ZNSB_12prepare_termESE_SG_SK_SN_E3$_9ZNSB_12prepare_termESE_SG_SK_SN_E4$_10ZNSB_12prepare_termESE_SG_SK_SN_E4$_11ZNSB_12prepare_termESE_SG_SK_SN_E4$_12ZNSB_12prepare_termESE_SG_SK_SN_E4$_13ZNSB_12prepare_termESE_SG_SK_SN_E4$_14ZNSB_12prepare_termESE_SG_SK_SN_E4$_15EERSt7variantIJNSB_11conjunctionENSB_15binary_operatorENSB_12column_valueENSB_5tokenENSB_21unresolved_identifierENSB_25column_mutation_attributeENSB_13function_callENSB_4castENSB_15field_selectionENSB_4nullENSB_13bind_variableENSB_16untyped_constantENSB_8constantENSB_17tuple_constructorENSB_22collection_constructorENSB_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm11EEEE14__visit_invokeES15_S1O_ (5 samples, 0.09%; 0.00%)</title><rect x="68.0" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.02" y="607.5" ></text>
</g>
<g >
<title>database::find_schema (2 samples, 0.04%; 0.00%)</title><rect x="73.8" y="645" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.80" y="655.5" ></text>
</g>
<g >
<title>db::schema_tables::add_table_params_to_mutations (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="639.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.02%; +0.02%)</title><rect x="17.3" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="20.34" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (20 samples, 0.38%; +0.09%)</title><rect x="405.3" y="373" width="4.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="408.26" y="383.5" ></text>
</g>
<g >
<title>service::shared_mutation::shared_mutation (8 samples, 0.15%; 0.00%)</title><rect x="1131.5" y="421" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="431.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.04%)</title><rect x="313.0" y="517" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="316.00" y="527.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::await_events (2 samples, 0.04%; +0.02%)</title><rect x="1168.0" y="693" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.99" y="703.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::column_identifier_raw, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="42.7" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.68" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::hash_data (10 samples, 0.19%; 0.00%)</title><rect x="837.4" y="533" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="840.42" y="543.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; +0.02%)</title><rect x="45.6" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="48.57" y="383.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="258.3" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="261.32" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4 samples, 0.08%; +0.02%)</title><rect x="1161.5" y="677" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1164.54" y="687.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt8optionalIN4auth8resourceEEZNK7service12client_state20check_has_permissionENS4_12command_descEE3$_7JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS6_EEEDcSC_SE_ (6 samples, 0.11%; -0.02%)</title><rect x="803.4" y="533" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="806.41" y="543.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (2 samples, 0.04%; +0.04%)</title><rect x="879.0" y="709" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="881.99" y="719.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (2 samples, 0.04%; -0.02%)</title><rect x="1109.3" y="629" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1112.30" y="639.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::maybe_drop_from (1 samples, 0.02%; +0.02%)</title><rect x="417.9" y="405" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="420.93" y="415.5" ></text>
</g>
<g >
<title>sstring_hash::operator (2 samples, 0.04%; 0.00%)</title><rect x="865.0" y="565" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="867.99" y="575.5" ></text>
</g>
<g >
<title>cql3::raw_value::to_view (2 samples, 0.04%; -0.02%)</title><rect x="867.9" y="597" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="870.88" y="607.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::modification_statement, std::default_delete&lt;cql3::statements::raw::modification_statement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;cql3::statements::raw::modification_statement&gt;, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="65.8" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="68.80" y="607.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (4 samples, 0.08%; +0.02%)</title><rect x="272.1" y="373" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="275.10" y="383.5" ></text>
</g>
<g >
<title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.02%; 0.00%)</title><rect x="640.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="643.90" y="623.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, query::noop_hasher, md5_hasher, xx_hasher, legacy_xx_hasher_without_null_digest&gt;::_Move_ctor_base (2 samples, 0.04%; +0.04%)</title><rect x="366.4" y="389" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="369.36" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (5 samples, 0.09%; +0.04%)</title><rect x="908.3" y="485" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="911.34" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="469" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="479.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::get_mutations (12 samples, 0.23%; 0.00%)</title><rect x="885.4" y="597" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.44" y="607.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; 0.00%)</title><rect x="1168.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.21" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="888.3" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="891.33" y="639.5" ></text>
</g>
<g >
<title>_dl_runtime_resolve_xsavec (1 samples, 0.02%; +0.02%)</title><rect x="10.7" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="13.67" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="28.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.67" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::find (2 samples, 0.04%; -0.02%)</title><rect x="34.7" y="501" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="37.68" y="511.5" ></text>
</g>
<g >
<title>reader_permit::consume_resources (3 samples, 0.06%; 0.00%)</title><rect x="265.0" y="357" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="267.98" y="367.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::delete_statement, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="63.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="66.13" y="591.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reserve&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="877.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.66" y="703.5" ></text>
</g>
<g >
<title>tracing::global_trace_state_ptr::get (1 samples, 0.02%; 0.00%)</title><rect x="1048.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1051.61" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::on_new_range (1 samples, 0.02%; 0.00%)</title><rect x="877.7" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="880.66" y="671.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (5 samples, 0.09%; +0.02%)</title><rect x="293.9" y="373" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="296.88" y="383.5" ></text>
</g>
<g >
<title>partition_version::partition_version (1 samples, 0.02%; 0.00%)</title><rect x="10.4" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (3 samples, 0.06%; +0.04%)</title><rect x="975.7" y="549" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="978.70" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; 0.00%)</title><rect x="1047.7" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1050.72" y="415.5" ></text>
</g>
<g >
<title>database::find_uuid (2 samples, 0.04%; 0.00%)</title><rect x="73.8" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.80" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="944.4" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="947.35" y="559.5" ></text>
</g>
<g >
<title>is_system_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="72.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="75.47" y="575.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::read_next (2 samples, 0.04%; 0.00%)</title><rect x="79.8" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.80" y="559.5" ></text>
</g>
<g >
<title>absl::hash_internal::HashState::combine_contiguous (1 samples, 0.02%; 0.00%)</title><rect x="859.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.65" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::_M_create_storage (1 samples, 0.02%; +0.02%)</title><rect x="950.4" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="953.35" y="623.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.26%; -0.04%)</title><rect x="856.8" y="597" width="3.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="859.76" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%; +0.02%)</title><rect x="699.4" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="702.37" y="671.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1112.6" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.64" y="591.5" ></text>
</g>
<g >
<title>single_node_cql_env::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_M_set_node (2 samples, 0.04%; +0.02%)</title><rect x="42.0" y="341" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="45.01" y="351.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (3 samples, 0.06%; 0.00%)</title><rect x="882.1" y="613" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.11" y="623.5" ></text>
</g>
<g >
<title>mutation_querier::mutation_querier (11 samples, 0.21%; 0.00%)</title><rect x="360.4" y="389" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="363.35" y="399.5" ></text>
</g>
<g >
<title>posix_memalign (3 samples, 0.06%; 0.00%)</title><rect x="255.0" y="293" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="257.98" y="303.5" ></text>
</g>
<g >
<title>TLS init function for bound_view::_empty_prefix (4 samples, 0.08%; -0.13%)</title><rect x="297.0" y="389" width="0.9" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="300.00" y="399.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;merging_reader&lt;mutation_reader_merger&gt;::fill_buffer (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="373" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="383.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="673.4" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="676.36" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (1 samples, 0.02%; +0.02%)</title><rect x="887.4" y="565" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="890.44" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; 0.00%)</title><rect x="702.9" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="705.93" y="687.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::bool_class&lt;mutation_reader_merger::needs_merge_tag&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="196.7" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="199.74" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::with_reclaiming_disabled&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;::lsa_partition_reader::next_range_tombstone (1 samples, 0.02%; 0.00%)</title><rect x="80.0" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.03" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (3 samples, 0.06%; -0.04%)</title><rect x="869.4" y="549" width="0.7" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="872.43" y="559.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (660 samples, 12.43%; +0.02%)</title><rect x="174.3" y="565" width="146.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="177.28" y="575.5" >mutation_fragment_..</text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; 0.00%)</title><rect x="824.1" y="325" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="827.08" y="335.5" ></text>
</g>
<g >
<title>utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;::touch (1 samples, 0.02%; 0.00%)</title><rect x="760.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="763.73" y="623.5" ></text>
</g>
<g >
<title>std::operator+ (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="383.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="466.2" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="469.17" y="591.5" ></text>
</g>
<g >
<title>partition_builder::accept_row_cell (1 samples, 0.02%; 0.00%)</title><rect x="1124.6" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.64" y="447.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (2 samples, 0.04%; 0.00%)</title><rect x="826.5" y="293" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.53" y="303.5" ></text>
</g>
<g >
<title>db::schema_tables::v3::scylla_tables (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (8 samples, 0.15%; 0.00%)</title><rect x="544.4" y="469" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="547.42" y="479.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (1 samples, 0.02%; 0.00%)</title><rect x="38.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.90" y="543.5" ></text>
</g>
<g >
<title>query::result::builder::builder (28 samples, 0.53%; +0.02%)</title><rect x="633.6" y="629" width="6.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="636.57" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;dht::token, std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt;, std::allocator&lt;std::pair&lt;dht::token const, utils::small_vector&lt;gms::inet_address, 3ul&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;dht::token&gt;, std::hash&lt;dht::token&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.34%; -0.06%)</title><rect x="1079.3" y="469" width="4.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="1082.29" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::operator (1 samples, 0.02%; +0.02%)</title><rect x="827.0" y="293" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="829.97" y="303.5" ></text>
</g>
<g >
<title>std::apply&lt;service::storage_proxy::query_nonsingular_mutations_locally (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_assign_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="431.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (7 samples, 0.13%; -0.04%)</title><rect x="940.8" y="597" width="1.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="943.80" y="607.5" ></text>
</g>
<g >
<title>std::make_unique&lt;empty_flat_reader, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit&gt; (1 samples, 0.02%; +0.02%)</title><rect x="575.3" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="578.32" y="511.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.13%; 0.00%)</title><rect x="209.2" y="389" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="212.19" y="399.5" ></text>
</g>
<g >
<title>utils::fb_utilities::get_broadcast_address (6 samples, 0.11%; +0.11%)</title><rect x="1088.0" y="533" width="1.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="1090.96" y="543.5" ></text>
</g>
<g >
<title>position_in_partition::position_in_partition (7 samples, 0.13%; 0.00%)</title><rect x="280.5" y="437" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="283.55" y="447.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::matchToken (4 samples, 0.08%; 0.00%)</title><rect x="37.1" y="565" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.12" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (2 samples, 0.04%; +0.04%)</title><rect x="626.7" y="597" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="629.68" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1 samples, 0.02%; +0.02%)</title><rect x="1024.2" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1027.16" y="415.5" ></text>
</g>
<g >
<title>sstables::mc::writer::maybe_record_too_many_rows (1 samples, 0.02%; 0.00%)</title><rect x="82.0" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.03" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::create_keyspace_statement, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.02" y="591.5" ></text>
</g>
<g >
<title>std::chrono::_V2::steady_clock::now (1 samples, 0.02%; +0.02%)</title><rect x="1168.4" y="725" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1171.44" y="735.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::shared_ptr_count_for&lt;cql3::result&gt; (4 samples, 0.08%; -0.02%)</title><rect x="687.8" y="661" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="690.81" y="671.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="71.8" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="74.80" y="591.5" ></text>
</g>
<g >
<title>frozen_mutation::partition (1 samples, 0.02%; 0.00%)</title><rect x="1120.6" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.64" y="463.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (14 samples, 0.26%; 0.00%)</title><rect x="856.8" y="613" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="859.76" y="623.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="881.4" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="884.44" y="687.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="527.5" ></text>
</g>
<g >
<title>db::block_for (1 samples, 0.02%; +0.02%)</title><rect x="1061.1" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1064.06" y="559.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;clustering_key_prefix&gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="282.8" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="285.77" y="447.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="82.7" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.69" y="751.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIPKN4cql34expr15binary_operatorEEER18overloaded_functorIJZNS5_9find_atomIZNS5_4findERKNS5_10expressionENS5_6oper_tEEUlRS7_E_EES8_SE_T_EUlSG_E_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_8constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_11conjunctionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_12column_valueEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_5tokenEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_21unresolved_identifierEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_25column_mutation_attributeEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13function_callEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4castEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_15field_selectionEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_4nullEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_13bind_variableEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_16untyped_constantEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_17tuple_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_22collection_constructorEE_ZNSB_ISH_EES8_SE_SI_EUlRKNS5_20usertype_constructorEE_EERSt7variantIJSO_S6_SS_SW_S10_S14_S18_S1C_S1G_S1K_S1O_S1S_SK_S1W_S20_S24_EEEJEEESt16integer_sequenceImJLm0EEEE14__visit_invokeES29_S2C_ (1 samples, 0.02%; +0.02%)</title><rect x="684.5" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="687.48" y="655.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.12" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (3 samples, 0.06%; 0.00%)</title><rect x="49.6" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="52.57" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="105.8" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="108.81" y="367.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.02%)</title><rect x="250.3" y="309" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="253.31" y="319.5" ></text>
</g>
<g >
<title>antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;::InputStream (1 samples, 0.02%; 0.00%)</title><rect x="19.1" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.11" y="639.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_row (1 samples, 0.02%; +0.02%)</title><rect x="205.2" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="208.18" y="463.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::normalColumnOperation (50 samples, 0.94%; -0.02%)</title><rect x="45.6" y="533" width="11.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="48.57" y="543.5" ></text>
</g>
<g >
<title>cql3::cf_name::cf_name (1 samples, 0.02%; +0.02%)</title><rect x="38.0" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="41.01" y="575.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::~_Bvector_base (1 samples, 0.02%; 0.00%)</title><rect x="66.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="69.69" y="655.5" ></text>
</g>
<g >
<title>utils::murmur_hash::hash3_x64_128&lt;legacy_compound_view&lt;compound_type&lt; (16 samples, 0.30%; 0.00%)</title><rect x="936.6" y="581" width="3.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="939.57" y="591.5" ></text>
</g>
<g >
<title>cql3::constants::setter::execute (2 samples, 0.04%; 0.00%)</title><rect x="885.9" y="517" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.89" y="527.5" ></text>
</g>
<g >
<title>operator delete (9 samples, 0.17%; +0.06%)</title><rect x="599.8" y="533" width="2.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="602.78" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="535.5" y="517" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="538.53" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (1 samples, 0.02%; 0.00%)</title><rect x="50.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.02" y="399.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="501.5" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="504.52" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (63 samples, 1.19%; 0.00%)</title><rect x="21.3" y="549" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.34" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;column_definition const*, column_definition const*, std::allocator&lt;column_definition const*&gt;, std::__detail::_Identity, std::equal_to&lt;column_definition const*&gt;, std::hash&lt;column_definition const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="676.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="679.47" y="655.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::operator= (3 samples, 0.06%; +0.04%)</title><rect x="1142.0" y="693" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1144.98" y="703.5" ></text>
</g>
<g >
<title>seastar::futurize_invoke&lt;seastar::future&lt;void&gt;  (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="639.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (4 samples, 0.08%; 0.00%)</title><rect x="43.3" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.35" y="431.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (6 samples, 0.11%; +0.08%)</title><rect x="515.5" y="485" width="1.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="518.52" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;nonwrapping_interval&lt;dht::ring_position&gt; const, std::default_delete&lt;nonwrapping_interval&lt;dht::ring_position&gt; const&gt; &gt;::~unique_ptr (2 samples, 0.04%; -0.02%)</title><rect x="624.7" y="629" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="627.68" y="639.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.02" y="543.5" ></text>
</g>
<g >
<title>service::get_local_priority_manager (3 samples, 0.06%; +0.06%)</title><rect x="647.8" y="645" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="650.80" y="655.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (3 samples, 0.06%; 0.00%)</title><rect x="80.7" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.69" y="575.5" ></text>
</g>
<g >
<title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (1 samples, 0.02%; +0.02%)</title><rect x="863.2" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="866.21" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="50.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="53.46" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (12 samples, 0.23%; +0.02%)</title><rect x="998.4" y="533" width="2.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1001.37" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.02%; 0.00%)</title><rect x="883.4" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.44" y="575.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.08%)</title><rect x="652.7" y="581" width="1.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="655.69" y="591.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::permissions_cache::get (67 samples, 1.26%; 0.00%)</title><rect x="813.2" y="469" width="14.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="816.19" y="479.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (1 samples, 0.02%; 0.00%)</title><rect x="712.5" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="607.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_partition&lt;bytes_ostream&gt;::skip_key (1 samples, 0.02%; +0.02%)</title><rect x="365.7" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="368.69" y="399.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="159.8" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="162.83" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; -0.02%)</title><rect x="871.0" y="629" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="873.99" y="639.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="575.5" ></text>
</g>
<g >
<title>ser::writer_of_query_result&lt;bytes_ostream&gt;::start_partitions (6 samples, 0.11%; +0.09%)</title><rect x="636.2" y="613" width="1.4" height="15.0" fill="rgb(255,157,157)" rx="2" ry="2" />
<text  x="639.24" y="623.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="415.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_channel (1 samples, 0.02%; +0.02%)</title><rect x="37.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="40.57" y="511.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::emplace_back&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_fragment::kind&gt; (3 samples, 0.06%; 0.00%)</title><rect x="491.7" y="469" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="494.74" y="479.5" ></text>
</g>
<g >
<title>cql3::query_processor::get_statement (252 samples, 4.75%; -0.02%)</title><rect x="19.1" y="693" width="56.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="22.11" y="703.5" >cql3:..</text>
</g>
<g >
<title>seastar::continuation&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::make_data_requests (57 samples, 1.07%; 0.00%)</title><rect x="723.8" y="709" width="12.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="726.82" y="719.5" ></text>
</g>
<g >
<title>service::write_response_handler::write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="1134.0" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.98" y="383.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="607.5" ></text>
</g>
<g >
<title>row::apply_monotonically (1 samples, 0.02%; 0.00%)</title><rect x="886.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.11" y="511.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="495.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::has_available_units (1 samples, 0.02%; 0.00%)</title><rect x="327.5" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="330.45" y="495.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="495.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (13 samples, 0.24%; +0.04%)</title><rect x="531.1" y="533" width="2.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="534.09" y="543.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;mutation_fragment*&gt;::then_impl_nrvo&lt;query::consume_page&lt; (2 samples, 0.04%; 0.00%)</title><rect x="712.5" y="693" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.49" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="768.3" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="771.29" y="591.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (9 samples, 0.17%; +0.06%)</title><rect x="1039.3" y="453" width="2.0" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="1042.28" y="463.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;void&gt; &gt;::satisfy_with_result_of&lt;seastar::future&lt;void&gt;::then_wrapped_nrvo&lt;seastar::future&lt;void&gt;, database::update_write_metrics&lt;seastar::future&lt;void&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="713.2" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.15" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt;, reconcilable_result&gt; &gt;::then_impl&lt;query::querier&lt; (1 samples, 0.02%; 0.00%)</title><rect x="140.3" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="143.27" y="639.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="623.5" ></text>
</g>
<g >
<title>db::is_serial_consistency (1 samples, 0.02%; +0.02%)</title><rect x="970.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="973.58" y="607.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::column_identifier&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="78.9" y="229" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.91" y="239.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::metadata&gt;::shared_ptr_count_for&lt;cql3::metadata&amp;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="687.1" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="690.14" y="671.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.02%)</title><rect x="697.6" y="693" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="700.59" y="703.5" ></text>
</g>
<g >
<title>mutation_fragment::operator= (1 samples, 0.02%; +0.02%)</title><rect x="192.7" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="195.74" y="463.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_with_triggers (3 samples, 0.06%; 0.00%)</title><rect x="882.1" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.11" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="927.0" y="565" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="930.01" y="575.5" ></text>
</g>
<g >
<title>database::find_keyspace (17 samples, 0.32%; -0.02%)</title><rect x="1057.1" y="549" width="3.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1060.06" y="559.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="886.3" y="437" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.33" y="447.5" ></text>
</g>
<g >
<title>fmt::v7::detail::fallback_formatter&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, char, void&gt;::format&lt;fmt::v7::detail::buffer_appender&lt;char&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="17.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="687.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (1 samples, 0.02%; 0.00%)</title><rect x="44.2" y="533" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.24" y="543.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="772.7" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="775.73" y="575.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (6 samples, 0.11%; +0.02%)</title><rect x="820.5" y="357" width="1.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="823.53" y="367.5" ></text>
</g>
<g >
<title>auth::permissions_cache::get (3 samples, 0.06%; 0.00%)</title><rect x="76.0" y="549" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.02" y="559.5" ></text>
</g>
<g >
<title>compound_wrapper&lt;partition_key, partition_key_view&gt;::explode (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="309" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="319.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::move_it (2 samples, 0.04%; +0.04%)</title><rect x="782.3" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="785.29" y="575.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::operator= (4 samples, 0.08%; -0.02%)</title><rect x="52.5" y="453" width="0.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="55.46" y="463.5" ></text>
</g>
<g >
<title>ser::writer_of_qr_cell&lt;bytes_ostream&gt;::skip_timestamp (11 samples, 0.21%; 0.00%)</title><rect x="409.7" y="373" width="2.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="412.71" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="214.1" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="217.08" y="399.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (2 samples, 0.04%; +0.02%)</title><rect x="272.5" y="357" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="275.54" y="367.5" ></text>
</g>
<g >
<title>boost::any::holder&lt;seastar::lw_shared_ptr&lt;memtable&gt; &gt;::~holder (2 samples, 0.04%; +0.04%)</title><rect x="505.3" y="533" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="508.30" y="543.5" ></text>
</g>
<g >
<title>antlr3::CyclicDFA&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, cql3_parser::CqlLexer&gt;::predict&lt;cql3_parser::CqlLexerCyclicDFA44&gt; (9 samples, 0.17%; 0.00%)</title><rect x="32.2" y="453" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="35.23" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14 samples, 0.26%; -0.02%)</title><rect x="694.5" y="693" width="3.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="697.48" y="703.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="714.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="717.27" y="703.5" ></text>
</g>
<g >
<title>db::schema_tables::make_schema_mutations (1 samples, 0.02%; 0.00%)</title><rect x="106.5" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.48" y="655.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt;  (3 samples, 0.06%; 0.00%)</title><rect x="16.4" y="773" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.45" y="783.5" ></text>
</g>
<g >
<title>seastar::sprint&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="17.8" y="725" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.78" y="735.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (2 samples, 0.04%; -0.06%)</title><rect x="509.1" y="485" width="0.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="512.08" y="495.5" ></text>
</g>
<g >
<title>db::schema_tables::calculate_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="645" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="655.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="1152.7" y="645" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1155.65" y="655.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;mutation_querier, std::_Optional_base&lt;mutation_querier, false, false&gt; &gt;::_M_construct&lt;mutation_querier&gt; (2 samples, 0.04%; 0.00%)</title><rect x="368.8" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="371.80" y="383.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::operation::raw_update*, std::default_delete&lt;cql3::operation::raw_update&gt; &gt;::tuple (1 samples, 0.02%; 0.00%)</title><rect x="48.0" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="51.01" y="383.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; +0.02%)</title><rect x="437.7" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="440.72" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::forward_to (2 samples, 0.04%; -0.02%)</title><rect x="891.0" y="677" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="894.00" y="687.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (6 samples, 0.11%; -0.02%)</title><rect x="572.2" y="517" width="1.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="575.21" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="316.6" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="319.56" y="543.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; -0.02%)</title><rect x="53.6" y="293" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="56.57" y="303.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (5 samples, 0.09%; -0.02%)</title><rect x="52.2" y="485" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="55.24" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (1 samples, 0.02%; 0.00%)</title><rect x="1100.6" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1103.63" y="575.5" ></text>
</g>
<g >
<title>seastar::reactor::del_timer (1 samples, 0.02%; 0.00%)</title><rect x="731.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="734.83" y="623.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; +0.04%)</title><rect x="779.2" y="597" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="782.18" y="607.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (1 samples, 0.02%; +0.02%)</title><rect x="673.6" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="676.58" y="703.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (11 samples, 0.21%; -0.02%)</title><rect x="852.3" y="645" width="2.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="855.32" y="655.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::term (5 samples, 0.09%; 0.00%)</title><rect x="58.7" y="533" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::small_vector (1 samples, 0.02%; -0.04%)</title><rect x="500.2" y="469" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="503.18" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, std::allocator&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="78.0" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="81.03" y="719.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;std::unique_ptr&lt;ser::deletable_row_view [], utils::chunked_vector_free_deleter&gt;, 1ul&gt;::~small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1126.0" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1128.98" y="463.5" ></text>
</g>
<g >
<title>row::row (1 samples, 0.02%; 0.00%)</title><rect x="305.4" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="308.44" y="415.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="886.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.55" y="495.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, 3ul&gt;::small_vector (4 samples, 0.08%; +0.02%)</title><rect x="828.3" y="453" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="831.31" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;column_definition, std::allocator&lt;column_definition&gt; &gt;::_M_range_check (1 samples, 0.02%; +0.02%)</title><rect x="381.0" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="384.03" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (284 samples, 5.35%; 0.00%)</title><rect x="16.0" y="789" width="63.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.00" y="799.5" >seasta..</text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="571.8" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.77" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::size (1 samples, 0.02%; 0.00%)</title><rect x="37.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.79" y="431.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="421.7" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="424.71" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="1130.6" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1133.64" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="42.2" y="325" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="45.23" y="335.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="697.4" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="700.37" y="639.5" ></text>
</g>
<g >
<title>service::client_state::has_column_family_access (9 samples, 0.17%; 0.00%)</title><rect x="75.4" y="677" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.36" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes, std::allocator&lt;managed_bytes&gt; &gt;::vector (1 samples, 0.02%; +0.02%)</title><rect x="1117.8" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1120.75" y="639.5" ></text>
</g>
<g >
<title>query_state::query_state (37 samples, 0.70%; +0.06%)</title><rect x="631.6" y="645" width="8.2" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="634.57" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::read_next (1 samples, 0.02%; +0.02%)</title><rect x="306.1" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="309.11" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt; &gt;::operator (7 samples, 0.13%; -0.04%)</title><rect x="757.6" y="517" width="1.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="760.61" y="527.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (373 samples, 7.03%; +0.04%)</title><rect x="354.8" y="453" width="82.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="357.80" y="463.5" >flat_muta..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::digest_read_resolver&gt;::~shared_ptr (2 samples, 0.04%; 0.00%)</title><rect x="1138.4" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1141.43" y="719.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="511.5" ></text>
</g>
<g >
<title>legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%; -0.02%)</title><rect x="933.0" y="581" width="2.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="936.01" y="591.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; 0.00%)</title><rect x="675.1" y="693" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="678.14" y="703.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; -0.02%)</title><rect x="909.9" y="517" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="912.89" y="527.5" ></text>
</g>
<g >
<title>ser::qr_clustered_row__cells&lt;bytes_ostream&gt;::start_cells (1 samples, 0.02%; +0.02%)</title><rect x="381.5" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="384.47" y="399.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; 0.00%)</title><rect x="213.4" y="389" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="216.41" y="399.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="517" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="527.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (3 samples, 0.06%; +0.04%)</title><rect x="839.0" y="469" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="841.98" y="479.5" ></text>
</g>
<g >
<title>db::schema_tables::feed_hash_for_schema_digest (1 samples, 0.02%; 0.00%)</title><rect x="106.3" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.26" y="655.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (1 samples, 0.02%; +0.02%)</title><rect x="667.1" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="670.14" y="703.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="536.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="538.98" y="527.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::clear (1 samples, 0.02%; +0.02%)</title><rect x="1013.9" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1016.93" y="495.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::BitsetList&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::push_back (1 samples, 0.02%; +0.02%)</title><rect x="39.3" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="42.34" y="527.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all&lt;single_node_cql_env::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="719.5" ></text>
</g>
<g >
<title>utils::basic_ihistogram&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt; &gt;::mark (1 samples, 0.02%; -0.02%)</title><rect x="641.1" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="644.13" y="623.5" ></text>
</g>
<g >
<title>cql3::terminal::to_expression (1 samples, 0.02%; 0.00%)</title><rect x="883.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="886.66" y="495.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::skip&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1120.2" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1123.20" y="447.5" ></text>
</g>
<g >
<title>set_value&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (2 samples, 0.04%; 0.00%)</title><rect x="1123.5" y="405" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.53" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt;::do_with_state&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource&gt; (1 samples, 0.02%; 0.00%)</title><rect x="75.4" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="78.36" y="655.5" ></text>
</g>
<g >
<title>clustering_row::clustering_row (140 samples, 2.64%; +0.04%)</title><rect x="227.2" y="373" width="31.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="230.19" y="383.5" >cl..</text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="466.4" y="581" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="469.39" y="591.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::execute (273 samples, 5.14%; -0.09%)</title><rect x="991.0" y="565" width="60.7" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="994.04" y="575.5" >servic..</text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::then_wrapped_nrvo&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally_body&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; +0.04%)</title><rect x="854.3" y="629" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="857.32" y="639.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;void&gt;, service::abstract_read_executor::execute (15 samples, 0.28%; +0.06%)</title><rect x="993.3" y="517" width="3.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="996.26" y="527.5" ></text>
</g>
<g >
<title>cql3::prepared_statements_cache::get&lt;cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="431.5" ></text>
</g>
<g >
<title>cql3::single_column_relation::~single_column_relation (1 samples, 0.02%; +0.02%)</title><rect x="74.5" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.47" y="671.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (4 samples, 0.08%; -0.08%)</title><rect x="548.9" y="437" width="0.9" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="551.87" y="447.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="598.0" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="601.00" y="495.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1034.2" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1037.16" y="383.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (15 samples, 0.28%; +0.08%)</title><rect x="276.5" y="389" width="3.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="279.54" y="399.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::value (14 samples, 0.26%; -0.02%)</title><rect x="51.3" y="501" width="3.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="54.35" y="511.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="945.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="948.46" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1034.4" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1037.39" y="415.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (5 samples, 0.09%; 0.00%)</title><rect x="43.1" y="501" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="511.5" ></text>
</g>
<g >
<title>compact_mutation_state&lt; (3 samples, 0.06%; +0.06%)</title><rect x="339.0" y="597" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="342.01" y="607.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%; +0.02%)</title><rect x="1168.7" y="837" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1171.66" y="847.5" ></text>
</g>
<g >
<title>seastar::internal::future_base::set_coroutine (1 samples, 0.02%; +0.02%)</title><rect x="1041.7" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1044.72" y="479.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="543.5" ></text>
</g>
<g >
<title>ser::mutation_partition_view::rows (1 samples, 0.02%; 0.00%)</title><rect x="1125.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.09" y="447.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="10.7" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.67" y="703.5" ></text>
</g>
<g >
<title>mutation_partition::clear_gently (2 samples, 0.04%; 0.00%)</title><rect x="82.2" y="709" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="719.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (1 samples, 0.02%; -0.04%)</title><rect x="1104.9" y="533" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1107.86" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::~vector (3 samples, 0.06%; +0.04%)</title><rect x="577.8" y="549" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="580.77" y="559.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::do_flush (29 samples, 0.55%; 0.00%)</title><rect x="1128.0" y="693" width="6.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1130.98" y="703.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="569.3" y="517" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="572.32" y="527.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position*, std::vector&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::heap_compare&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="300.1" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="303.11" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="69.6" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="72.58" y="559.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (11 samples, 0.21%; +0.06%)</title><rect x="250.8" y="325" width="2.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="253.76" y="335.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (2 samples, 0.04%; +0.02%)</title><rect x="127.4" y="613" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="130.38" y="623.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::consume (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="511.5" ></text>
</g>
<g >
<title>seastar::future_state_base::any::operator= (1 samples, 0.02%; +0.02%)</title><rect x="876.8" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="879.77" y="703.5" ></text>
</g>
<g >
<title>cql3_parser::CqlLexer::mHEXNUMBER (14 samples, 0.26%; +0.06%)</title><rect x="28.9" y="469" width="3.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="31.90" y="479.5" ></text>
</g>
<g >
<title>query::result_view::consume&lt;query::result_set_builder&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="105.6" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.59" y="495.5" ></text>
</g>
<g >
<title>antlr3::Lexer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_input (2 samples, 0.04%; +0.04%)</title><rect x="24.9" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="27.89" y="495.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="859.9" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="862.88" y="639.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::operator= (1 samples, 0.02%; +0.02%)</title><rect x="739.8" y="709" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="742.83" y="719.5" ></text>
</g>
<g >
<title>cql3::util::do_with_parser_impl (212 samples, 3.99%; 0.00%)</title><rect x="19.1" y="645" width="47.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.11" y="655.5" >cql3..</text>
</g>
<g >
<title>seastar::shared_ptr&lt;service::abstract_read_executor&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="990.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="993.59" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="130.5" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="133.49" y="591.5" ></text>
</g>
<g >
<title>seastar::circular_buffer&lt;mutation_fragment, tracking_allocator&lt;mutation_fragment&gt; &gt;::expand (11 samples, 0.21%; +0.04%)</title><rect x="208.3" y="421" width="2.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="211.30" y="431.5" ></text>
</g>
<g >
<title>ser::serializer&lt;schema_mutations&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator+= (1 samples, 0.02%; +0.02%)</title><rect x="58.5" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.46" y="367.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="639.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::allocate (14 samples, 0.26%; 0.00%)</title><rect x="328.8" y="501" width="3.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="331.79" y="511.5" ></text>
</g>
<g >
<title>validation::validate_cql_key (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="591.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, cql3::statements::alter_view_statement*, std::default_delete&lt;cql3::statements::alter_view_statement&gt; &gt;::_Tuple_impl (1 samples, 0.02%; +0.02%)</title><rect x="61.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="64.80" y="543.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; -0.02%)</title><rect x="926.8" y="517" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="929.79" y="527.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="421" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; &gt;::construct&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position, partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::rows_position&gt; (1 samples, 0.02%; +0.02%)</title><rect x="301.2" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="304.22" y="415.5" ></text>
</g>
<g >
<title>cql3::statements::raw::update_statement::~update_statement (3 samples, 0.06%; 0.00%)</title><rect x="74.5" y="677" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.47" y="687.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::optional&lt;auth::resource&gt; &gt;, seastar::future&lt;bool&gt; &gt; &gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="834.5" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="837.53" y="527.5" ></text>
</g>
<g >
<title>std::__copy_n_a&lt;legacy_compound_view&lt;compound_type&lt; (10 samples, 0.19%; -0.09%)</title><rect x="937.9" y="565" width="2.2" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="940.91" y="575.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.02%; +0.02%)</title><rect x="23.8" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="26.78" y="383.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::get_partition_key_ranges (243 samples, 4.58%; -0.06%)</title><rect x="902.3" y="629" width="54.1" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="905.34" y="639.5" >cql3:..</text>
</g>
<g >
<title>seastar::future_state&lt;utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (8 samples, 0.15%; -0.02%)</title><rect x="815.0" y="373" width="1.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="817.97" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (1 samples, 0.02%; +0.02%)</title><rect x="884.8" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="887.77" y="543.5" ></text>
</g>
<g >
<title>_start (4 samples, 0.08%; 0.00%)</title><rect x="1168.9" y="837" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1171.88" y="847.5" ></text>
</g>
<g >
<title>seastar::repeat&lt;flat_mutation_reader::impl::consume_pausable&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (1 samples, 0.02%; 0.00%)</title><rect x="712.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="715.71" y="591.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_last_fragment_kind, 4ul&gt;::~small_vector (1 samples, 0.02%; -0.04%)</title><rect x="620.9" y="581" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="623.90" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::list_service_level_attachments_statement, std::default_delete&lt;cql3::statements::list_service_level_attachments_statement&gt; &gt;::~unique_ptr (1 samples, 0.02%; 0.00%)</title><rect x="62.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.46" y="591.5" ></text>
</g>
<g >
<title>validation::validate_column_family (1 samples, 0.02%; +0.02%)</title><rect x="849.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="851.98" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;query::result_memory_accounter&gt;::get0 (1 samples, 0.02%; 0.00%)</title><rect x="133.8" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="136.82" y="671.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="45.1" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.12" y="335.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; 0.00%)</title><rect x="38.2" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.23" y="511.5" ></text>
</g>
<g >
<title>query::querier&lt; (1 samples, 0.02%; +0.02%)</title><rect x="119.8" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="122.82" y="671.5" ></text>
</g>
<g >
<title>cql3::query_options::query_options (14 samples, 0.26%; -0.02%)</title><rect x="867.7" y="629" width="3.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="870.66" y="639.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (33 samples, 0.62%; +0.02%)</title><rect x="509.5" y="501" width="7.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="512.52" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; +0.02%)</title><rect x="1162.4" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1165.43" y="687.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; -0.04%)</title><rect x="1058.4" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1061.39" y="495.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="1124.4" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1127.42" y="399.5" ></text>
</g>
<g >
<title>seastar::reactor_backend_aio::reap_kernel_completions (2 samples, 0.04%; -0.02%)</title><rect x="1168.0" y="709" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1170.99" y="719.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (1 samples, 0.02%; +0.02%)</title><rect x="1061.7" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1064.73" y="559.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; +0.04%)</title><rect x="676.7" y="661" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="679.70" y="671.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="664.0" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="667.02" y="687.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="70.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="73.47" y="575.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.02%)</title><rect x="494.2" y="469" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="497.18" y="479.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::push_mutation_fragment&lt;mutation_fragment&gt; (4 samples, 0.08%; +0.02%)</title><rect x="201.2" y="453" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="204.18" y="463.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="1123.8" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1126.75" y="383.5" ></text>
</g>
<g >
<title>emptyable&lt;double&gt;::verify (1 samples, 0.02%; +0.02%)</title><rect x="106.5" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.48" y="575.5" ></text>
</g>
<g >
<title>service::client_state::has_access (177 samples, 3.33%; -0.06%)</title><rect x="800.5" y="581" width="39.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="803.52" y="591.5" >ser..</text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="446.4" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="449.39" y="383.5" ></text>
</g>
<g >
<title>bytes_ostream::linearize (1 samples, 0.02%; 0.00%)</title><rect x="630.5" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="633.46" y="639.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (1 samples, 0.02%; +0.02%)</title><rect x="1130.9" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1133.87" y="399.5" ></text>
</g>
<g >
<title>single_node_cql_env::execute_prepared (3 samples, 0.06%; +0.06%)</title><rect x="877.0" y="693" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="879.99" y="703.5" ></text>
</g>
<g >
<title>std::operator- (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::raw_value_view, std::allocator&lt;cql3::raw_value_view&gt; &gt;::_M_check_len (1 samples, 0.02%; 0.00%)</title><rect x="870.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="873.10" y="575.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (2 samples, 0.04%; 0.00%)</title><rect x="36.2" y="485" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="39.23" y="495.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::InputStream&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt;::get_state (1 samples, 0.02%; +0.02%)</title><rect x="24.4" y="485" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.45" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::uninitialized_wrapper_base&lt;service::storage_proxy_coordinator_query_result, false&gt;::uninitialized_set&lt;service::storage_proxy_coordinator_query_result&gt; (5 samples, 0.09%; 0.00%)</title><rect x="1144.0" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1146.98" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_primary_key_restrictions&lt;partition_key&gt;::merge_with (1 samples, 0.02%; 0.00%)</title><rect x="70.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="73.02" y="559.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="40.2" y="341" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="43.23" y="351.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="886.6" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.55" y="447.5" ></text>
</g>
<g >
<title>mutation_reader_merger::operator (612 samples, 11.53%; +0.17%)</title><rect x="177.6" y="533" width="136.1" height="15.0" fill="rgb(255,115,115)" rx="2" ry="2" />
<text  x="180.62" y="543.5" >mutation_reader_m..</text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (15 samples, 0.28%; +0.04%)</title><rect x="460.2" y="485" width="3.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="463.17" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.06%)</title><rect x="229.0" y="341" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="231.97" y="351.5" ></text>
</g>
<g >
<title>mutation_querier::consume (4 samples, 0.08%; +0.08%)</title><rect x="369.9" y="421" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="372.91" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::relation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::relation&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="74.7" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.69" y="671.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="215.4" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="218.41" y="447.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, managed_bytes, cql3::null_value, cql3::unset_value&gt;::~_Variant_storage (2 samples, 0.04%; 0.00%)</title><rect x="922.8" y="549" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="925.79" y="559.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (22 samples, 0.41%; +0.04%)</title><rect x="754.5" y="581" width="4.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="757.50" y="591.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (1 samples, 0.02%; -0.02%)</title><rect x="844.5" y="485" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="847.54" y="495.5" ></text>
</g>
<g >
<title>seastar::app_template::run (4,877 samples, 91.88%; 0.00%)</title><rect x="84.5" y="805" width="1084.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.47" y="815.5" >seastar::app_template::run</text>
</g>
<g >
<title>partition_snapshot::~partition_snapshot (5 samples, 0.09%; +0.04%)</title><rect x="607.6" y="485" width="1.1" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="610.56" y="495.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="690.3" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="693.26" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; +0.02%)</title><rect x="68.5" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="71.47" y="511.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.04%; 0.00%)</title><rect x="160.5" y="597" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="163.50" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_reader_merger::operator (29 samples, 0.55%; -0.06%)</title><rect x="306.6" y="517" width="6.4" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="309.56" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (1 samples, 0.02%; 0.00%)</title><rect x="639.3" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="642.35" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; 0.00%)</title><rect x="1105.1" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1108.08" y="575.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;service::storage_proxy_coordinator_query_result&gt;::set&lt;service::storage_proxy_coordinator_query_result&gt; (1 samples, 0.02%; -0.02%)</title><rect x="1143.8" y="677" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1146.76" y="687.5" ></text>
</g>
<g >
<title>query::partition_slice::partition_slice (1 samples, 0.02%; +0.02%)</title><rect x="579.5" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="582.55" y="623.5" ></text>
</g>
<g >
<title>logalloc::segment::record_alloc (1 samples, 0.02%; +0.02%)</title><rect x="1121.3" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1124.31" y="351.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; +0.02%)</title><rect x="717.2" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="720.16" y="687.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;query::result_digest, 3ul&gt;::emplace_back&lt;query::result_digest const&gt; (1 samples, 0.02%; -0.06%)</title><rect x="732.5" y="645" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="735.49" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3 samples, 0.06%; +0.02%)</title><rect x="797.4" y="549" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="800.41" y="559.5" ></text>
</g>
<g >
<title>ser::serializer&lt;ser::qr_cell_view&gt;::skip&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="431.5" ></text>
</g>
<g >
<title>empty_flat_reader::close (1 samples, 0.02%; 0.00%)</title><rect x="596.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="599.00" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;std::_List_iterator&lt;flat_mutation_reader&gt;, mutation_reader_merger::close (75 samples, 1.41%; +0.04%)</title><rect x="594.9" y="565" width="16.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="597.89" y="575.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt;::_M_reset (1 samples, 0.02%; +0.02%)</title><rect x="284.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="287.77" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::partition_tombstone (4 samples, 0.08%; +0.02%)</title><rect x="554.9" y="437" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="557.87" y="447.5" ></text>
</g>
<g >
<title>bound_view::from_range_end&lt;nonwrapping_interval&gt; (1 samples, 0.02%; +0.02%)</title><rect x="299.2" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="302.22" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5 samples, 0.09%; -0.04%)</title><rect x="1092.2" y="565" width="1.1" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1095.19" y="575.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::get0 (2 samples, 0.04%; 0.00%)</title><rect x="727.4" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="730.38" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.02%; +0.02%)</title><rect x="1132.6" y="293" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1135.65" y="303.5" ></text>
</g>
<g >
<title>cql3::operation::set_value::prepare (5 samples, 0.09%; 0.00%)</title><rect x="68.0" y="629" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.02" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="649.1" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="652.13" y="607.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::bool_class&lt;seastar::stop_iteration_tag&gt; &gt;::get0 (3 samples, 0.06%; +0.06%)</title><rect x="344.8" y="501" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="347.79" y="511.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="343.0" y="485" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="346.01" y="495.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::CqlParser (2 samples, 0.04%; 0.00%)</title><rect x="19.6" y="629" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="22.56" y="639.5" ></text>
</g>
<g >
<title>cql3::restrictions::single_column_restrictions::empty (1 samples, 0.02%; +0.02%)</title><rect x="70.0" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="73.02" y="543.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (1 samples, 0.02%; +0.02%)</title><rect x="1122.0" y="357" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1124.97" y="367.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.11%; 0.00%)</title><rect x="41.3" y="469" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="479.5" ></text>
</g>
<g >
<title>std::apply&lt;service::client_state::has_column_family_access (2 samples, 0.04%; +0.02%)</title><rect x="848.5" y="613" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="851.54" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (2 samples, 0.04%; 0.00%)</title><rect x="40.9" y="389" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.90" y="399.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::in_alloc_section&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (27 samples, 0.51%; +0.02%)</title><rect x="274.3" y="421" width="6.0" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="277.32" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (5 samples, 0.09%; 0.00%)</title><rect x="861.4" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="864.43" y="607.5" ></text>
</g>
<g >
<title>seastar::gate::leave (3 samples, 0.06%; +0.06%)</title><rect x="104.7" y="677" width="0.7" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="107.70" y="687.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (4 samples, 0.08%; +0.04%)</title><rect x="670.9" y="661" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="673.92" y="671.5" ></text>
</g>
<g >
<title>operator delete (4 samples, 0.08%; +0.06%)</title><rect x="108.0" y="709" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="111.04" y="719.5" ></text>
</g>
<g >
<title>schema_mutations::schema_mutations (2 samples, 0.04%; 0.00%)</title><rect x="107.1" y="581" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="110.15" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::external_memory_usage (1 samples, 0.02%; +0.02%)</title><rect x="16.9" y="677" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.89" y="687.5" ></text>
</g>
<g >
<title>query::result::result (1 samples, 0.02%; +0.02%)</title><rect x="646.7" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="649.68" y="639.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digest_read_resolver (11 samples, 0.21%; 0.00%)</title><rect x="998.6" y="517" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1001.59" y="527.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (12 samples, 0.23%; 0.00%)</title><rect x="844.1" y="533" width="2.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="847.09" y="543.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::free (1 samples, 0.02%; +0.02%)</title><rect x="451.3" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="454.28" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;antlr3::LexState&lt;antlr3::TraitsBase&lt;antlr3::CustomTraitsBase&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="33.6" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="36.56" y="415.5" ></text>
</g>
<g >
<title>__GI___tunables_init (1 samples, 0.02%; +0.02%)</title><rect x="83.8" y="837" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="86.81" y="847.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::maybe_decay_reserve (1 samples, 0.02%; +0.02%)</title><rect x="572.0" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="574.99" y="527.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;2ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (5 samples, 0.09%; 0.00%)</title><rect x="826.5" y="325" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="829.53" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::updateStatement (117 samples, 2.20%; +0.06%)</title><rect x="35.3" y="581" width="26.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="38.34" y="591.5" >c..</text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="24.2" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="27.23" y="527.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="865.4" y="565" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="868.43" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::digest_read_resolver&gt;::shared_ptr_count_for&lt;seastar::lw_shared_ptr&lt;schema const&gt;&amp;, db::consistency_level&amp;, unsigned long&amp;, unsigned long, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="997.0" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1000.04" y="559.5" ></text>
</g>
<g >
<title>reader_permit::impl::~impl (2 samples, 0.04%; -0.09%)</title><rect x="121.8" y="645" width="0.5" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="124.82" y="655.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.17%; 0.00%)</title><rect x="211.9" y="421" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="214.85" y="431.5" ></text>
</g>
<g >
<title>reader_concurrency_semaphore::on_permit_created (1 samples, 0.02%; +0.02%)</title><rect x="1037.9" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1040.94" y="431.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Variant_storage&lt;11ul, cql3::expr::untyped_constant&gt; (1 samples, 0.02%; 0.00%)</title><rect x="59.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.57" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_urgent_state (3 samples, 0.06%; 0.00%)</title><rect x="879.4" y="709" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="882.44" y="719.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;sstables::mc::writer::write_cells (2 samples, 0.04%; +0.02%)</title><rect x="80.7" y="549" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="83.69" y="559.5" ></text>
</g>
<g >
<title>seastar::parallel_for_each&lt;boost::range_detail::integer_iterator&lt;unsigned int&gt;, std::function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="719.5" ></text>
</g>
<g >
<title>__libc_csu_init (1 samples, 0.02%; 0.00%)</title><rect x="84.0" y="837" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="87.03" y="847.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (4 samples, 0.08%; -0.04%)</title><rect x="326.8" y="517" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="329.79" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; -0.02%)</title><rect x="665.1" y="693" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="668.14" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::column_identifier&gt;::shared_ptr_count_for&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.80" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (4 samples, 0.08%; -0.21%)</title><rect x="1104.2" y="549" width="0.9" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="1107.19" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_reader_merger::reader_and_fragment, 4ul&gt;::emplace_back&lt;mutation_reader_merger::reader_and_fragment&gt; (3 samples, 0.06%; +0.02%)</title><rect x="311.9" y="485" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="314.89" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="1049.9" y="501" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1052.95" y="511.5" ></text>
</g>
<g >
<title>cql3::query_options::fill_value_views (11 samples, 0.21%; -0.04%)</title><rect x="867.9" y="613" width="2.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="870.88" y="623.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; +0.02%)</title><rect x="721.4" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="724.38" y="671.5" ></text>
</g>
<g >
<title>cql3::expr::evaluate (2 samples, 0.04%; +0.04%)</title><rect x="911.0" y="517" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="914.01" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;service::digest_read_result&gt;::then_wrapped_nrvo&lt;void, service::abstract_read_executor::execute (18 samples, 0.34%; 0.00%)</title><rect x="992.6" y="533" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="995.59" y="543.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="10.4" y="709" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="719.5" ></text>
</g>
<g >
<title>operator delete (5 samples, 0.09%; +0.02%)</title><rect x="92.3" y="693" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="95.25" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (5 samples, 0.09%; -0.02%)</title><rect x="97.4" y="645" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="100.37" y="655.5" ></text>
</g>
<g >
<title>[unknown] (16 samples, 0.30%; 0.00%)</title><rect x="12.0" y="805" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="15.00" y="815.5" ></text>
</g>
<g >
<title>cql3::constants::marker::to_expression (5 samples, 0.09%; +0.08%)</title><rect x="906.1" y="549" width="1.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="909.12" y="559.5" ></text>
</g>
<g >
<title>table::set_hit_rate (5 samples, 0.09%; +0.04%)</title><rect x="732.9" y="661" width="1.2" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="735.94" y="671.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::set_urgent_state (3 samples, 0.06%; -0.08%)</title><rect x="666.2" y="693" width="0.7" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="669.25" y="703.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::~basic_sstring (2 samples, 0.04%; 0.00%)</title><rect x="841.4" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="844.42" y="559.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (7 samples, 0.13%; 0.00%)</title><rect x="45.6" y="517" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.57" y="527.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="623.5" ></text>
</g>
<g >
<title>tracing::add_table_name (4 samples, 0.08%; +0.04%)</title><rect x="1118.2" y="629" width="0.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1121.20" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::empty_destroy (1 samples, 0.02%; +0.02%)</title><rect x="1031.5" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1034.50" y="351.5" ></text>
</g>
<g >
<title>__tls_init (1 samples, 0.02%; 0.00%)</title><rect x="530.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="532.97" y="527.5" ></text>
</g>
<g >
<title>ser::read_frame_size&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="415.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="105.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.81" y="399.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; -0.02%)</title><rect x="1122.9" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1125.86" y="431.5" ></text>
</g>
<g >
<title>seastar::memory::stats (6 samples, 0.11%; +0.02%)</title><rect x="544.9" y="453" width="1.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="547.87" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (2 samples, 0.04%; +0.02%)</title><rect x="290.8" y="421" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="293.77" y="431.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::signal (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;mutation_fragment::data, std::default_delete&lt;mutation_fragment::data&gt; &gt;::~unique_ptr (25 samples, 0.47%; +0.02%)</title><rect x="452.6" y="469" width="5.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="455.61" y="479.5" ></text>
</g>
<g >
<title>mutation_partition_view::do_accept&lt;partition_builder&gt; (11 samples, 0.21%; 0.00%)</title><rect x="1123.1" y="453" width="2.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.09" y="463.5" ></text>
</g>
<g >
<title>std::apply&lt;auth::get_permissions (3 samples, 0.06%; 0.00%)</title><rect x="76.0" y="565" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="79.02" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;void&gt;::set_value&lt;&gt; (2 samples, 0.04%; +0.04%)</title><rect x="730.3" y="629" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="733.27" y="639.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="139.4" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="142.38" y="671.5" ></text>
</g>
<g >
<title>ser::serializer&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt;::write_fragmented&lt;bytes_ostream, fragment_range&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="106.7" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="109.70" y="559.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::restrictions::single_column_restrictions&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="677.1" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="680.14" y="671.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_cells (3 samples, 0.06%; 0.00%)</title><rect x="80.7" y="581" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.69" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::EqualElement&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt;&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="843.4" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="846.43" y="543.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.02%)</title><rect x="214.5" y="405" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="217.52" y="415.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Move_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Move_ctor_base (2 samples, 0.04%; -0.02%)</title><rect x="909.4" y="517" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="912.45" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; 0.00%)</title><rect x="597.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="600.78" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment&lt;schema const&amp;, rows_entry const&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="881.0" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.99" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (2 samples, 0.04%; -0.02%)</title><rect x="37.6" y="517" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="40.57" y="527.5" ></text>
</g>
<g >
<title>utils::loading_shared_values&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::timestamped_val&lt;std::unique_ptr&lt;cql3::statements::prepared_statement, std::default_delete&lt;cql3::statements::prepared_statement&gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, cql3::prepared_cache_entry_size, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt;, cql3::prepared_statements_cache::prepared_cache_stats_updater, 256ul&gt;::find&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt;, utils::tuple_hash, std::equal_to&lt;std::pair&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;, long&gt; &gt; &gt; (23 samples, 0.43%; +0.02%)</title><rect x="754.3" y="597" width="5.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="757.28" y="607.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (3 samples, 0.06%; 0.00%)</title><rect x="830.5" y="453" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="833.53" y="463.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::add_data (21 samples, 0.40%; +0.02%)</title><rect x="728.0" y="661" width="4.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="731.05" y="671.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="886.1" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="889.11" y="463.5" ></text>
</g>
<g >
<title>to_hex (2 samples, 0.04%; 0.00%)</title><rect x="78.2" y="725" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.25" y="735.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;query::result_memory_accounter&gt;::move_it (2 samples, 0.04%; -0.02%)</title><rect x="643.1" y="645" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="646.13" y="655.5" ></text>
</g>
<g >
<title>partition_snapshot::versions (1 samples, 0.02%; +0.02%)</title><rect x="279.4" y="325" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="282.43" y="335.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; +0.02%)</title><rect x="1107.3" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1110.30" y="607.5" ></text>
</g>
<g >
<title>logalloc::basic_region_impl::set_reclaiming_enabled (1 samples, 0.02%; +0.02%)</title><rect x="276.3" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="279.32" y="399.5" ></text>
</g>
<g >
<title>standard_allocation_strategy::alloc (2 samples, 0.04%; +0.04%)</title><rect x="249.9" y="293" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="252.87" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (3 samples, 0.06%; 0.00%)</title><rect x="857.9" y="565" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="860.87" y="575.5" ></text>
</g>
<g >
<title>std::make_unique&lt;partition_snapshot_flat_reader&lt;false, partition_snapshot_flush_accounter&gt;, seastar::lw_shared_ptr&lt;schema const&gt;, reader_permit, dht::decorated_key, partition_snapshot_ptr&amp;, query::clustering_key_filter_ranges, bool&amp;, logalloc::region&amp;, logalloc::allocating_section&amp;, boost::any, schema const&amp;, flush_memory_accounter&amp;&gt; (1 samples, 0.02%; 0.00%)</title><rect x="79.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="639.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt; &gt; (2 samples, 0.04%; -0.02%)</title><rect x="788.7" y="517" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="791.74" y="527.5" ></text>
</g>
<g >
<title>bound_view::from_range&lt;nonwrapping_interval&gt; (5 samples, 0.09%; +0.02%)</title><rect x="269.7" y="341" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="272.65" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::create_write_response_handler (2 samples, 0.04%; 0.00%)</title><rect x="1134.0" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1136.98" y="415.5" ></text>
</g>
<g >
<title>partition_version_ref::operator* (1 samples, 0.02%; 0.00%)</title><rect x="305.2" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="308.22" y="415.5" ></text>
</g>
<g >
<title>ser::writer_of_deletable_row&lt;bytes_ostream&gt;::write_key (1 samples, 0.02%; 0.00%)</title><rect x="1132.6" y="341" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.65" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.02%; +0.02%)</title><rect x="22.2" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="25.23" y="431.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::impl (1 samples, 0.02%; -0.06%)</title><rect x="542.2" y="485" width="0.2" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="545.20" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;mutation_fragment*&gt;::schedule&lt;seastar::internal::promise_base_with_type&lt;std::tuple&lt;std::optional&lt;clustering_key_prefix&gt; &gt; &gt;, query::consume_page&lt; (1 samples, 0.02%; +0.02%)</title><rect x="468.4" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="471.39" y="607.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::visit_slot&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::walking_visitor&lt;row::for_each_cell&lt;memtable::memtable_encoding_stats_collector::update (1 samples, 0.02%; 0.00%)</title><rect x="1122.9" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1125.86" y="415.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_no_esft&lt;compact_mutation_state&lt; (16 samples, 0.30%; 0.00%)</title><rect x="651.8" y="629" width="3.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="654.80" y="639.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_singular (63 samples, 1.19%; -0.02%)</title><rect x="1145.8" y="693" width="14.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1148.76" y="703.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="609.1" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="612.11" y="495.5" ></text>
</g>
<g >
<title>query::result_memory_accounter::check_local_limit (1 samples, 0.02%; 0.00%)</title><rect x="379.7" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="382.69" y="383.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (2 samples, 0.04%; 0.00%)</title><rect x="210.7" y="421" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="213.74" y="431.5" ></text>
</g>
<g >
<title>reader_permit::used_guard::~used_guard (2 samples, 0.04%; +0.04%)</title><rect x="113.8" y="677" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="116.82" y="687.5" ></text>
</g>
<g >
<title>cql3::restrictions::clustering_key_restrictions::needs_filtering (1 samples, 0.02%; +0.02%)</title><rect x="680.0" y="677" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="683.03" y="687.5" ></text>
</g>
<g >
<title>schema::column_at (1 samples, 0.02%; -0.04%)</title><rect x="263.7" y="325" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="266.65" y="335.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::~CqlParser (1 samples, 0.02%; 0.00%)</title><rect x="20.0" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.00" y="639.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implIN4auth17role_or_anonymousEZNS3_15get_permissionsERKNS3_7serviceERKNS3_18authenticated_userERKNS3_8resourceEE3$_9JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS4_EEEDcSG_SI_ (9 samples, 0.17%; -0.02%)</title><rect x="807.6" y="501" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="810.63" y="511.5" ></text>
</g>
<g >
<title>std::__apply_impl&lt;seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; 0.00%)</title><rect x="1120.0" y="677" width="8.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="687.5" ></text>
</g>
<g >
<title>single_node_cql_env::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="741" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="751.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; 0.00%)</title><rect x="451.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="454.06" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;compact_for_query&lt; (1 samples, 0.02%; +0.02%)</title><rect x="468.2" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="471.17" y="591.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;cql3::expr::constant&gt;  (1 samples, 0.02%; 0.00%)</title><rect x="886.3" y="469" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.33" y="479.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::get_promise (2 samples, 0.04%; 0.00%)</title><rect x="968.1" y="613" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="971.14" y="623.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::raw::modification_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="63.4" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="66.35" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::fillBuffer (62 samples, 1.17%; 0.00%)</title><rect x="21.3" y="533" width="13.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.34" y="543.5" ></text>
</g>
<g >
<title>_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultISt7variantIJSt6vectorI13managed_bytesSaIS6_EE20nonwrapping_intervalIS6_EEEEER18overloaded_functorIJZN4cql34expr19possible_lhs_valuesEPK17column_definitionRKNSF_10expressionERKNSE_13query_optionsEE4$_44ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_45ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_43ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_46ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_47ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_48ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_49ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_50ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_51ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_52ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_53ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_54ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_55ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_56ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_57ZNSF_19possible_lhs_valuesESI_SL_SO_E4$_58EERS4_IJNSF_11conjunctionENSF_15binary_operatorENSF_12column_valueENSF_5tokenENSF_21unresolved_identifierENSF_25column_mutation_attributeENSF_13function_callENSF_4castENSF_15field_selectionENSF_4nullENSF_13bind_variableENSF_16untyped_constantENSF_8constantENSF_17tuple_constructorENSF_22collection_constructorENSF_20usertype_constructorEEEEJEEESt16integer_sequenceImJLm1EEEE14__visit_invokeES16_S1O_ (105 samples, 1.98%; 0.00%)</title><rect x="905.2" y="597" width="23.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="908.23" y="607.5" >_..</text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="565" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="575.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::~basic_sstring (1 samples, 0.02%; +0.02%)</title><rect x="67.8" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="70.80" y="575.5" ></text>
</g>
<g >
<title>schema::column_at (6 samples, 0.11%; -0.04%)</title><rect x="256.1" y="325" width="1.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="259.09" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="415.5" ></text>
</g>
<g >
<title>std::basic_string_view&lt;signed char, std::char_traits&lt;signed char&gt; &gt;::substr (2 samples, 0.04%; +0.04%)</title><rect x="934.8" y="533" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="937.79" y="543.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::small_vector (2 samples, 0.04%; +0.02%)</title><rect x="1091.5" y="549" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1094.52" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.04%; +0.04%)</title><rect x="757.8" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="760.84" y="511.5" ></text>
</g>
<g >
<title>flat_mutation_reader::peek (756 samples, 14.24%; +0.06%)</title><rect x="169.8" y="613" width="168.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="172.84" y="623.5" >flat_mutation_reader:..</text>
</g>
<g >
<title>std::hash&lt;auth::resource&gt;::operator (13 samples, 0.24%; +0.02%)</title><rect x="824.8" y="357" width="2.8" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="827.75" y="367.5" ></text>
</g>
<g >
<title>seastar::file::list_directory (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="629" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="639.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;gms::inet_address, 3ul&gt;::emplace_back&lt;gms::inet_address const&amp;&gt; (2 samples, 0.04%; 0.00%)</title><rect x="734.1" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="737.05" y="671.5" ></text>
</g>
<g >
<title>mutation_partition_serializer::write_serialized&lt;ser::writer_of_mutation_partition&lt;bytes_ostream&gt; &gt; (6 samples, 0.11%; +0.02%)</title><rect x="1131.5" y="373" width="1.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1134.53" y="383.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="501" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="511.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::add_update_for_key (9 samples, 0.17%; 0.00%)</title><rect x="885.4" y="565" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.44" y="575.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="459.5" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="462.50" y="511.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::statements::alter_role_statement, std::default_delete&lt;cql3::statements::alter_role_statement&gt; &gt;::_M_ptr (1 samples, 0.02%; 0.00%)</title><rect x="61.6" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="64.57" y="575.5" ></text>
</g>
<g >
<title>_ZSt13__invoke_implISt10unique_ptrIN7seastar8internal13do_with_stateISt5tupleIJN20flat_mutation_reader4impl16consumer_adapterI35stable_flattened_mutations_consumerI17compact_for_queryIL19emit_only_live_rows1EN5query27clustering_position_trackerI20query_result_builderEEEEEEEENS1_6futureIvEEEESt14default_deleteISL_EEZNS2_12do_with_implISH_ZNS6_7consumeISG_EEDaT_EUlRSH_E_JEEEDaOSR_OT0_DpOT1_EUlDpOT_E_JSH_EESR_St14__invoke_otherSW_SZ_ (4 samples, 0.08%; 0.00%)</title><rect x="342.8" y="517" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="345.79" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned int, unsigned int, std::_Identity&lt;unsigned int&gt;, std::less&lt;unsigned int&gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;unsigned int&gt; &gt;::_M_lower_bound (1 samples, 0.02%; +0.02%)</title><rect x="34.7" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="37.68" y="495.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql_transport::messages::result_message&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1138.0" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1140.98" y="719.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; 0.00%)</title><rect x="975.5" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="978.47" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (9 samples, 0.17%; +0.08%)</title><rect x="293.0" y="389" width="2.0" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="296.00" y="399.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::getCurrentInputSymbol (1 samples, 0.02%; 0.00%)</title><rect x="37.1" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="40.12" y="543.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::iterator::operator* (1 samples, 0.02%; +0.02%)</title><rect x="74.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="77.02" y="623.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; +0.02%)</title><rect x="480.6" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="483.62" y="559.5" ></text>
</g>
<g >
<title>std::__optional_hash_call_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, true&gt;::operator (4 samples, 0.08%; +0.02%)</title><rect x="776.3" y="517" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="779.29" y="527.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;unsigned int, 8ul&gt;::small_vector (1 samples, 0.02%; 0.00%)</title><rect x="1107.1" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1110.08" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::searcher&lt;clustering_key_prefix, rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare,  (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="575.5" ></text>
</g>
<g >
<title>database::has_keyspace (1 samples, 0.02%; 0.00%)</title><rect x="74.2" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="77.25" y="639.5" ></text>
</g>
<g >
<title>partition_key_view::legacy_form (3 samples, 0.06%; +0.02%)</title><rect x="935.2" y="581" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="938.24" y="591.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; +0.04%)</title><rect x="584.0" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="586.99" y="575.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;8ul&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1000.6" y="469" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1003.60" y="479.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::allocate_on (1 samples, 0.02%; 0.00%)</title><rect x="886.1" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="889.11" y="479.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.19%; 0.00%)</title><rect x="744.7" y="629" width="2.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="747.72" y="639.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base_with_type&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::set_urgent_state (1 samples, 0.02%; -0.04%)</title><rect x="692.0" y="693" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="695.03" y="703.5" ></text>
</g>
<g >
<title>lister::lister (1 samples, 0.02%; 0.00%)</title><rect x="713.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.60" y="655.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE8scheduleINS_8internal22promise_base_with_typeIvEEZNS6_14discard_resultEvEUlDpOT_E_ZNS6_14then_impl_nrvoISE_NS0_IvEEEET0_OT_EUlOSA_RSE_ONS_12future_stateIS5_EEE_EEvSJ_OSH_OT1_ (15 samples, 0.28%; +0.04%)</title><rect x="743.8" y="645" width="3.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="746.83" y="655.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="43.1" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="46.12" y="383.5" ></text>
</g>
<g >
<title>free (8 samples, 0.15%; -0.02%)</title><rect x="444.8" y="389" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="447.83" y="399.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::~_Variant_storage (1 samples, 0.02%; +0.02%)</title><rect x="920.3" y="517" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="923.34" y="527.5" ></text>
</g>
<g >
<title>operator new (3 samples, 0.06%; 0.00%)</title><rect x="561.8" y="485" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="564.76" y="495.5" ></text>
</g>
<g >
<title>std::default_delete&lt;seastar::internal::do_with_state&lt;std::tuple&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;, seastar::future&lt;void&gt; &gt; &gt;::operator (6 samples, 0.11%; 0.00%)</title><rect x="840.8" y="581" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="843.76" y="591.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_M_move_assign (3 samples, 0.06%; -0.02%)</title><rect x="1101.7" y="581" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1104.74" y="591.5" ></text>
</g>
<g >
<title>partition_snapshot::get_change_mark (1 samples, 0.02%; +0.02%)</title><rect x="266.1" y="389" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="269.10" y="399.5" ></text>
</g>
<g >
<title>utils::tuple_hash::hash_impl&lt;1ul, auth::resource_kind, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::optional&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="827.2" y="309" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.20" y="319.5" ></text>
</g>
<g >
<title>range_tombstone_stream::empty (1 samples, 0.02%; +0.02%)</title><rect x="280.3" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="283.32" y="431.5" ></text>
</g>
<g >
<title>operator delete (8 samples, 0.15%; +0.08%)</title><rect x="460.6" y="469" width="1.8" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="463.61" y="479.5" ></text>
</g>
<g >
<title>ser::serializer&lt;partition_key&gt;::write&lt;bytes_ostream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1132.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1135.87" y="383.5" ></text>
</g>
<g >
<title>seastar::reactor::add_urgent_task (6 samples, 0.11%; -0.02%)</title><rect x="662.0" y="693" width="1.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="665.02" y="703.5" ></text>
</g>
<g >
<title>cql3::statements::select_statement::needs_post_query_ordering (4 samples, 0.08%; +0.02%)</title><rect x="965.5" y="613" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="968.47" y="623.5" ></text>
</g>
<g >
<title>seastar::internal::noncopyable_function_base::trivial_direct_move&lt;16ul&gt; (2 samples, 0.04%; 0.00%)</title><rect x="1031.1" y="357" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1034.05" y="367.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_requests (37 samples, 0.70%; 0.00%)</title><rect x="726.3" y="677" width="8.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="729.27" y="687.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql_transport::messages::result_message::rows&gt;::~shared_ptr_count_for (28 samples, 0.53%; 0.00%)</title><rect x="94.5" y="693" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="97.48" y="703.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.06%)</title><rect x="705.8" y="693" width="0.5" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="708.82" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::sharded&lt;database&gt;::invoke_on&lt;service::storage_proxy::query_result_local (20 samples, 0.38%; +0.08%)</title><rect x="667.4" y="693" width="4.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="670.36" y="703.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; +0.02%)</title><rect x="81.1" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="84.14" y="559.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Variant_storage&lt;false, flat_mutation_reader, reader_concurrency_semaphore::inactive_read_handle&gt;::~_Variant_storage (3 samples, 0.06%; -0.02%)</title><rect x="622.5" y="629" width="0.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="625.45" y="639.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::reserve (5 samples, 0.09%; -0.02%)</title><rect x="199.2" y="469" width="1.1" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="202.18" y="479.5" ></text>
</g>
<g >
<title>database::find_uuid (1 samples, 0.02%; +0.02%)</title><rect x="792.5" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="795.52" y="623.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%; +0.04%)</title><rect x="130.7" y="613" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="133.71" y="623.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;void  (2 samples, 0.04%; 0.00%)</title><rect x="10.4" y="773" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="783.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::move_it (1 samples, 0.02%; -0.02%)</title><rect x="792.7" y="613" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="795.74" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;mutation_querier, false, false&gt;::_Optional_base (2 samples, 0.04%; +0.04%)</title><rect x="467.5" y="581" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="470.51" y="591.5" ></text>
</g>
<g >
<title>seastar::timer&lt;seastar::lowres_clock&gt;::~timer (2 samples, 0.04%; -0.02%)</title><rect x="129.8" y="597" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="132.82" y="607.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;query::result&gt;::make&lt;query::result&gt; (2 samples, 0.04%; -0.02%)</title><rect x="646.5" y="645" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="649.46" y="655.5" ></text>
</g>
<g >
<title>flat_mutation_reader::impl::consume_pausable_in_thread&lt;std::reference_wrapper&lt;flat_mutation_reader::impl::consumer_adapter&lt;sstables::sstable_writer&gt; &gt;, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="693" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="703.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;service::query_state&gt;::~shared_ptr_count_for (1 samples, 0.02%; +0.02%)</title><rect x="1139.1" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1142.09" y="719.5" ></text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__deduce_visit_result&lt;seastar::future&lt;void&gt; &gt;  (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="687.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::allocate_large (1 samples, 0.02%; 0.00%)</title><rect x="983.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="986.92" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (63 samples, 1.19%; 0.00%)</title><rect x="21.3" y="565" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.34" y="575.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, cql3::statements::alter_role_statement*, false&gt;::_M_head (1 samples, 0.02%; +0.02%)</title><rect x="61.6" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="64.57" y="527.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (14 samples, 0.26%; +0.06%)</title><rect x="95.4" y="677" width="3.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="98.37" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.02%; 0.00%)</title><rect x="694.5" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="697.48" y="687.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1033.9" y="373" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1036.94" y="383.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::column_identifier, false&gt;::make&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, bool&gt; (1 samples, 0.02%; 0.00%)</title><rect x="67.8" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="70.80" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned char, std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned char const, std::optional&lt;seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned char&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3 samples, 0.06%; 0.00%)</title><rect x="704.7" y="661" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="707.71" y="671.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%; +0.02%)</title><rect x="1082.8" y="453" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1085.85" y="463.5" ></text>
</g>
<g >
<title>locator::abstract_replication_strategy::get_natural_endpoints (1 samples, 0.02%; +0.02%)</title><rect x="1070.6" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1073.62" y="527.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;mutation_fragment_merger&lt;mutation_reader_merger&gt;::operator (1 samples, 0.02%; -0.02%)</title><rect x="333.9" y="565" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="336.90" y="575.5" ></text>
</g>
<g >
<title>db::assure_sufficient_live_nodes&lt;utils::small_vector&lt;gms::inet_address, 3ul&gt;, std::array&lt;gms::inet_address, 0ul&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="1060.8" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1063.84" y="559.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (3 samples, 0.06%; +0.04%)</title><rect x="932.1" y="565" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="935.13" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cql3::expr::expression, std::allocator&lt;cql3::expr::expression&gt; &gt;::vector (1 samples, 0.02%; 0.00%)</title><rect x="57.4" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="60.35" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;auth::role_or_anonymous, auth::resource&gt;::pair&lt;auth::role_or_anonymous, auth::resource, true&gt; (4 samples, 0.08%; 0.00%)</title><rect x="828.3" y="469" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="831.31" y="479.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;::_Optional_payload_base (1 samples, 0.02%; +0.02%)</title><rect x="851.7" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="854.65" y="639.5" ></text>
</g>
<g >
<title>seastar::thread_context::thread_context (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="58.5" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.46" y="463.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; 0.00%)</title><rect x="268.8" y="325" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="271.76" y="335.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::peek (7 samples, 0.13%; 0.00%)</title><rect x="336.3" y="597" width="1.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="339.35" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; 0.00%)</title><rect x="885.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.22" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_slice_or_needs_filtering (4 samples, 0.08%; 0.00%)</title><rect x="681.6" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="684.59" y="655.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_locally (5 samples, 0.09%; 0.00%)</title><rect x="1130.0" y="421" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.98" y="431.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="866.1" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="869.10" y="623.5" ></text>
</g>
<g >
<title>locator::i_endpoint_snitch::snitch_instance (1 samples, 0.02%; +0.02%)</title><rect x="1129.5" y="453" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1132.53" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; 0.00%)</title><rect x="58.0" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.02" y="399.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::query_options, db::consistency_level&amp;, std::vector&lt;cql3::raw_value, std::allocator&lt;cql3::raw_value&gt; &gt;, cql3::query_options::specific_options&gt; (26 samples, 0.49%; -0.02%)</title><rect x="866.8" y="661" width="5.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="869.77" y="671.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;std::vector&lt;std::optional&lt;ser::qr_cell_view&gt;, std::allocator&lt;std::optional&lt;ser::qr_cell_view&gt; &gt; &gt; &gt;::read&lt;seastar::fragmented_memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="105.4" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="108.37" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (1 samples, 0.02%; 0.00%)</title><rect x="106.7" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.70" y="591.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::raw::delete_statement*, std::default_delete&lt;cql3::statements::raw::delete_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.9" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.91" y="543.5" ></text>
</g>
<g >
<title>schema_builder::build (1 samples, 0.02%; 0.00%)</title><rect x="17.1" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.11" y="447.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (1 samples, 0.02%; -0.02%)</title><rect x="729.6" y="629" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="732.60" y="639.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; +0.02%)</title><rect x="606.0" y="485" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="609.00" y="495.5" ></text>
</g>
<g >
<title>reader_permit::consume (1 samples, 0.02%; -0.02%)</title><rect x="552.9" y="389" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="555.87" y="399.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureISt5tupleIJEEE14then_impl_nrvoIZNS3_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (1 samples, 0.02%; 0.00%)</title><rect x="1129.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1132.09" y="527.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_make_helper&lt;cql3::constants::setter, false&gt;::make&lt;column_definition const&amp;, seastar::shared_ptr&lt;cql3::term&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="72.2" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="75.25" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;flat_mutation_reader, std::allocator&lt;flat_mutation_reader&gt; &gt;::splice (1 samples, 0.02%; +0.02%)</title><rect x="880.3" y="597" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="883.33" y="607.5" ></text>
</g>
<g >
<title>flush_reader::get_next_partition (1 samples, 0.02%; 0.00%)</title><rect x="79.6" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="655.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; +0.02%)</title><rect x="55.8" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="58.80" y="511.5" ></text>
</g>
<g >
<title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::EqualElement&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt;&amp;&gt; (1 samples, 0.02%; +0.02%)</title><rect x="1057.1" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1060.06" y="527.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LA (1 samples, 0.02%; 0.00%)</title><rect x="20.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="23.23" y="591.5" ></text>
</g>
<g >
<title>database::do_apply (34 samples, 0.64%; 0.00%)</title><rect x="1120.0" y="549" width="7.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1122.97" y="559.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="574.7" y="437" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="577.66" y="447.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_data&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt;, true, true&gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="51.8" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="54.79" y="447.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; 0.00%)</title><rect x="605.6" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="608.56" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_base&lt;cell_and_hash, compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::indirect_layout&lt;cell_and_hash,  (2 samples, 0.04%; +0.02%)</title><rect x="16.7" y="709" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="19.67" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::node_head::~node_head (4 samples, 0.08%; +0.06%)</title><rect x="450.2" y="421" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="453.17" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (1 samples, 0.02%; +0.02%)</title><rect x="1166.0" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1168.99" y="719.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::entry::entry (12 samples, 0.23%; -0.02%)</title><rect x="1031.1" y="373" width="2.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1034.05" y="383.5" ></text>
</g>
<g >
<title>seastar::chunked_fifo&lt;seastar::concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::work_item, 128ul&gt;::back_chunk_new (1 samples, 0.02%; +0.02%)</title><rect x="18.9" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="21.89" y="639.5" ></text>
</g>
<g >
<title>reader_selector::has_new_readers (2 samples, 0.04%; +0.04%)</title><rect x="494.6" y="501" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="497.63" y="511.5" ></text>
</g>
<g >
<title>service::abstract_read_resolver::abstract_read_resolver (8 samples, 0.15%; +0.02%)</title><rect x="999.3" y="501" width="1.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1002.26" y="511.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (31 samples, 0.58%; 0.00%)</title><rect x="881.7" y="661" width="6.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="884.66" y="671.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::make_data_request (192 samples, 3.62%; -0.17%)</title><rect x="1007.9" y="517" width="42.7" height="15.0" fill="rgb(115,115,255)" rx="2" ry="2" />
<text  x="1010.93" y="527.5" >serv..</text>
</g>
<g >
<title>std::__detail::__variant::__gen_vtable_impl&lt;std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie  (1 samples, 0.02%; +0.02%)</title><rect x="874.5" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="877.55" y="639.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (2 samples, 0.04%; -0.02%)</title><rect x="345.5" y="469" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="348.46" y="479.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (2 samples, 0.04%; -0.02%)</title><rect x="1040.8" y="437" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1043.83" y="447.5" ></text>
</g>
<g >
<title>[unknown] (328 samples, 6.18%; 0.00%)</title><rect x="10.0" y="837" width="72.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.00" y="847.5" >[unknown]</text>
</g>
<g >
<title>intrusive_array&lt;memtable_entry&gt;::lower_bound&lt;dht::ring_position, dht::ring_position_comparator&gt; (58 samples, 1.09%; +0.04%)</title><rect x="516.9" y="517" width="12.9" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="519.86" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::_S_buffer_size (1 samples, 0.02%; 0.00%)</title><rect x="41.6" y="357" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.57" y="367.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (3 samples, 0.06%; +0.04%)</title><rect x="877.9" y="709" width="0.6" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="880.88" y="719.5" ></text>
</g>
<g >
<title>seastar::weakly_referencable&lt;cql3::statements::prepared_statement&gt;::weak_from_this (2 samples, 0.04%; 0.00%)</title><rect x="753.4" y="613" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="756.39" y="623.5" ></text>
</g>
<g >
<title>antlr3::BaseRecognizer&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt;, antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt;::match (1 samples, 0.02%; 0.00%)</title><rect x="39.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="42.12" y="527.5" ></text>
</g>
<g >
<title>bplus::node&lt;long, intrusive_array&lt;memtable_entry&gt;, dht::raw_token_less_comparator, 16ul,  (1 samples, 0.02%; 0.00%)</title><rect x="10.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.89" y="655.5" ></text>
</g>
<g >
<title>utils::array_search_gt_impl (12 samples, 0.23%; -0.21%)</title><rect x="512.4" y="469" width="2.7" height="15.0" fill="rgb(94,94,255)" rx="2" ry="2" />
<text  x="515.41" y="479.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE14then_impl_nrvoIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (2 samples, 0.04%; +0.04%)</title><rect x="742.3" y="677" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="745.28" y="687.5" ></text>
</g>
<g >
<title>database::find_schema (33 samples, 0.62%; 0.00%)</title><rect x="785.2" y="613" width="7.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="788.18" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (6 samples, 0.11%; 0.00%)</title><rect x="41.3" y="437" width="1.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="44.35" y="447.5" ></text>
</g>
<g >
<title>service::storage_proxy::do_mutate (26 samples, 0.49%; 0.00%)</title><rect x="1128.6" y="549" width="5.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.64" y="559.5" ></text>
</g>
<g >
<title>utils::small_vector&lt;mutation_fragment, 4ul&gt;::clear (2 samples, 0.04%; -0.04%)</title><rect x="311.2" y="485" width="0.5" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="314.22" y="495.5" ></text>
</g>
<g >
<title>seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;::~foreign_ptr (3 samples, 0.06%; -0.02%)</title><rect x="672.7" y="693" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="675.69" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.04%; +0.04%)</title><rect x="1162.0" y="661" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1164.99" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::vector (12 samples, 0.23%; +0.02%)</title><rect x="1045.5" y="485" width="2.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1048.50" y="495.5" ></text>
</g>
<g >
<title>std::apply&lt;distributed_loader::cleanup_column_family_temp_sst_dirs (1 samples, 0.02%; 0.00%)</title><rect x="713.4" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="716.38" y="591.5" ></text>
</g>
<g >
<title>seastar::concrete_execution_stage&lt;seastar::future&lt;void&gt;, service::storage_proxy*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt;, db::consistency_level, std::chrono::time_point&lt;seastar::lowres_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt; &gt;, tracing::trace_state_ptr, service_permit, bool, seastar::lw_shared_ptr&lt;cdc::operation_result_tracker&gt; &gt;::operator (2 samples, 0.04%; 0.00%)</title><rect x="882.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="885.11" y="559.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; +0.02%)</title><rect x="51.8" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="54.79" y="431.5" ></text>
</g>
<g >
<title>ser::idl::serializers::internal::vector_serializer&lt;utils::chunked_vector&lt;ser::deletable_row_view, 131072ul&gt; &gt;::read&lt;seastar::simple_memory_input_stream&gt; (1 samples, 0.02%; 0.00%)</title><rect x="1125.1" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.09" y="431.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (9 samples, 0.17%; -0.02%)</title><rect x="206.3" y="421" width="2.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="209.30" y="431.5" ></text>
</g>
<g >
<title>cql3::query_processor::execute_prepared (72 samples, 1.36%; 0.00%)</title><rect x="763.8" y="629" width="16.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="766.84" y="639.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_startIndex (1 samples, 0.02%; +0.02%)</title><rect x="20.2" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="23.23" y="575.5" ></text>
</g>
<g >
<title>free (1 samples, 0.02%; +0.02%)</title><rect x="712.7" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="715.71" y="479.5" ></text>
</g>
<g >
<title>antlr3::TokenIntStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get_cachedSize (1 samples, 0.02%; +0.02%)</title><rect x="36.0" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="39.01" y="543.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_range_check (2 samples, 0.04%; 0.00%)</title><rect x="44.7" y="405" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;nonwrapping_interval&lt;dht::token&gt;, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; (40 samples, 0.75%; +0.02%)</title><rect x="1148.2" y="677" width="8.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1151.21" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::statements::raw::update_statement, std::default_delete&lt;cql3::statements::raw::update_statement&gt; &gt;::release (1 samples, 0.02%; +0.02%)</title><rect x="63.6" y="581" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="66.58" y="591.5" ></text>
</g>
<g >
<title>frozen_mutation::frozen_mutation (8 samples, 0.15%; 0.00%)</title><rect x="1131.5" y="389" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="399.5" ></text>
</g>
<g >
<title>mutation_partition::~mutation_partition (1 samples, 0.02%; 0.00%)</title><rect x="1125.8" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1128.75" y="415.5" ></text>
</g>
<g >
<title>sstables::mc::writer::consume (4 samples, 0.08%; 0.00%)</title><rect x="80.5" y="645" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.47" y="655.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::followPop (2 samples, 0.04%; +0.04%)</title><rect x="36.7" y="565" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="39.68" y="575.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (1 samples, 0.02%; +0.02%)</title><rect x="1035.9" y="421" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1038.94" y="431.5" ></text>
</g>
<g >
<title>boost::intrusive::list_impl&lt;boost::intrusive::bhtraits&lt;utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;::lru_entry, boost::intrusive::list_node_traits&lt;void*&gt;,  (1 samples, 0.02%; 0.00%)</title><rect x="771.6" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="774.62" y="511.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (2 samples, 0.04%; +0.04%)</title><rect x="968.6" y="613" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="971.58" y="623.5" ></text>
</g>
<g >
<title>service::abstract_read_executor::on_read_resolved (2 samples, 0.04%; 0.00%)</title><rect x="721.8" y="661" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="724.82" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;cql3::statements::revoke_role_statement*, std::default_delete&lt;cql3::statements::revoke_role_statement&gt; &gt;::tuple&lt;true, true&gt; (1 samples, 0.02%; +0.02%)</title><rect x="63.8" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="66.80" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="686.9" y="661" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="689.92" y="671.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; -0.04%)</title><rect x="1007.7" y="485" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="1010.71" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::next_range_tombstone (32 samples, 0.60%; +0.06%)</title><rect x="273.4" y="437" width="7.1" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="276.43" y="447.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="72.9" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="75.91" y="623.5" ></text>
</g>
<g >
<title>operator delete (2 samples, 0.04%; -0.02%)</title><rect x="919.9" y="517" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="922.90" y="527.5" ></text>
</g>
<g >
<title>antlr3::Parser&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::LA (63 samples, 1.19%; 0.00%)</title><rect x="21.3" y="581" width="14.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="24.34" y="591.5" ></text>
</g>
<g >
<title>seastar::make_shared&lt;cql3::single_column_relation, seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, cql3::expr::oper_t&amp;, cql3::expr::expression&gt; (2 samples, 0.04%; 0.00%)</title><rect x="59.8" y="533" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.80" y="543.5" ></text>
</g>
<g >
<title>executor&lt;test_read (608 samples, 11.45%; 0.00%)</title><rect x="741.4" y="693" width="135.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="744.39" y="703.5" >executor&lt;test_read</text>
</g>
<g >
<title>ser::serializer&lt;ser::mutation_view&gt;::read&lt;seastar::memory_input_stream&lt;bytes_ostream::fragment_iterator&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="1120.2" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1123.20" y="463.5" ></text>
</g>
<g >
<title>seastar::internal::lw_shared_ptr_accessors_esft&lt;partition_snapshot&gt;::dispose (2 samples, 0.04%; 0.00%)</title><rect x="608.7" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="611.67" y="495.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::clear (1 samples, 0.02%; +0.02%)</title><rect x="1043.5" y="485" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1046.50" y="495.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="301.9" y="437" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="304.89" y="447.5" ></text>
</g>
<g >
<title>std::_Optional_base&lt;interval_bound&lt;dht::ring_position&gt;, false, false&gt;::_Optional_base (1 samples, 0.02%; -0.02%)</title><rect x="954.6" y="581" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="957.58" y="591.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::contains&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (7 samples, 0.13%; -0.02%)</title><rect x="847.0" y="549" width="1.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="849.98" y="559.5" ></text>
</g>
<g >
<title>managed_bytes::~managed_bytes (1 samples, 0.02%; +0.02%)</title><rect x="922.3" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="925.34" y="559.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cql3::expr::expression::impl, cql3::expr::untyped_constant&gt; (3 samples, 0.06%; +0.02%)</title><rect x="59.1" y="485" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="62.13" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::handle_exception&lt;cql3::query_processor::execute_prepared (1 samples, 0.02%; -0.02%)</title><rect x="778.3" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="781.29" y="623.5" ></text>
</g>
<g >
<title>cql3::restrictions::(anonymous namespace)::range_from_bytes (84 samples, 1.58%; -0.02%)</title><rect x="928.6" y="613" width="18.6" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="931.57" y="623.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;dht::ring_position&gt; &gt;::_M_reset (1 samples, 0.02%; -0.02%)</title><rect x="1117.3" y="629" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1120.31" y="639.5" ></text>
</g>
<g >
<title>flush_reader::fill_buffer (4 samples, 0.08%; 0.00%)</title><rect x="79.6" y="677" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="687.5" ></text>
</g>
<g >
<title>bplus::searcher&lt;dht::ring_position, long, dht::raw_token_less_comparator, 16ul,  (2 samples, 0.04%; 0.00%)</title><rect x="571.1" y="485" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="574.10" y="495.5" ></text>
</g>
<g >
<title>cql3::expr::expression::expression&lt;cql3::expr::untyped_constant&gt; (3 samples, 0.06%; 0.00%)</title><rect x="59.1" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="62.13" y="511.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.15%; 0.00%)</title><rect x="994.6" y="501" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="997.59" y="511.5" ></text>
</g>
<g >
<title>write_fragmented&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="884.6" y="517" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="887.55" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_transfer (2 samples, 0.04%; -0.09%)</title><rect x="193.0" y="453" width="0.4" height="15.0" fill="rgb(157,157,255)" rx="2" ry="2" />
<text  x="195.96" y="463.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::cql_statement&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="1137.8" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1140.76" y="719.5" ></text>
</g>
<g >
<title>reader_permit::~reader_permit (1 samples, 0.02%; +0.02%)</title><rect x="564.7" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="567.65" y="543.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="553.3" y="421" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="556.32" y="431.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::_M_deallocate_map (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="431.5" ></text>
</g>
<g >
<title>_ZN7seastar6futureINS_10shared_ptrIN13cql_transport8messages14result_messageEEEE9then_implIZNS6_14discard_resultEvEUlDpOT_E_NS0_IvEEEET0_OT_ (24 samples, 0.45%; 0.00%)</title><rect x="742.7" y="677" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="745.72" y="687.5" ></text>
</g>
<g >
<title>partition_entry::partition_entry (1 samples, 0.02%; 0.00%)</title><rect x="10.4" y="725" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="13.44" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (1 samples, 0.02%; +0.02%)</title><rect x="565.5" y="533" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="568.54" y="543.5" ></text>
</g>
<g >
<title>cql3::query_processor::prepare_one&lt;cql_transport::messages::result_message::prepared::cql, cql3::prepared_cache_key_type  (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="373" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="383.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (3 samples, 0.06%; +0.04%)</title><rect x="704.0" y="645" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="707.04" y="655.5" ></text>
</g>
<g >
<title>service::digest_read_resolver::digests_match (1 samples, 0.02%; 0.00%)</title><rect x="732.0" y="629" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="735.05" y="639.5" ></text>
</g>
<g >
<title>reader_permit::consume (2 samples, 0.04%; +0.04%)</title><rect x="552.2" y="373" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="555.20" y="383.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (28 samples, 0.53%; 0.00%)</title><rect x="1128.2" y="645" width="6.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1131.20" y="655.5" ></text>
</g>
<g >
<title>partition_key::legacy_tri_compare (33 samples, 0.62%; +0.11%)</title><rect x="522.0" y="469" width="7.3" height="15.0" fill="rgb(255,147,147)" rx="2" ry="2" />
<text  x="524.97" y="479.5" ></text>
</g>
<g >
<title>managed_bytes::free_chain (1 samples, 0.02%; +0.02%)</title><rect x="887.2" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="890.22" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;bytes_ostream::chunk, std::default_delete&lt;bytes_ostream::chunk&gt; &gt;::~unique_ptr (2 samples, 0.04%; +0.02%)</title><rect x="139.8" y="661" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="142.83" y="671.5" ></text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (7 samples, 0.13%; +0.06%)</title><rect x="412.2" y="373" width="1.5" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="415.15" y="383.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::set_callback (1 samples, 0.02%; +0.02%)</title><rect x="739.6" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="742.61" y="719.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (1 samples, 0.02%; 0.00%)</title><rect x="82.2" y="613" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="85.25" y="623.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::expr::expression::impl*, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="52.5" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="55.46" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::deallocate (1 samples, 0.02%; 0.00%)</title><rect x="23.8" y="389" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="26.78" y="399.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt;::set&lt;std::tuple&lt;seastar::lw_shared_ptr&lt;query::result&gt;, cache_temperature&gt; &gt; (2 samples, 0.04%; +0.04%)</title><rect x="103.1" y="677" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="106.15" y="687.5" ></text>
</g>
<g >
<title>utils::tuple_hash::operator (4 samples, 0.08%; -0.04%)</title><rect x="777.2" y="517" width="0.9" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="780.18" y="527.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::CommonToken (1 samples, 0.02%; +0.02%)</title><rect x="19.6" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="22.56" y="543.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (13 samples, 0.24%; +0.06%)</title><rect x="550.4" y="421" width="2.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="553.43" y="431.5" ></text>
</g>
<g >
<title>seastar::net::inet_address::operator== (2 samples, 0.04%; +0.04%)</title><rect x="1086.2" y="517" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1089.18" y="527.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (2 samples, 0.04%; -0.02%)</title><rect x="853.7" y="565" width="0.4" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="856.65" y="575.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; 0.00%)</title><rect x="1008.2" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1011.15" y="511.5" ></text>
</g>
<g >
<title>absl::hash_internal::AbslHashValue&lt;absl::hash_internal::HashState&gt; (1 samples, 0.02%; +0.02%)</title><rect x="864.8" y="565" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="867.77" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;dht::ring_position&gt;, std::allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt; &gt;::_M_range_initialize&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*&gt; (16 samples, 0.30%; +0.02%)</title><rect x="952.8" y="597" width="3.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="955.80" y="607.5" ></text>
</g>
<g >
<title>table::views (1 samples, 0.02%; +0.02%)</title><rect x="1127.5" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1130.53" y="559.5" ></text>
</g>
<g >
<title>antlr3::TokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::_LT (1 samples, 0.02%; 0.00%)</title><rect x="38.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="41.90" y="511.5" ></text>
</g>
<g >
<title>seastar::hrtimer_aio_completion::complete_with (1 samples, 0.02%; 0.00%)</title><rect x="1136.0" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1138.98" y="703.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::get (1 samples, 0.02%; 0.00%)</title><rect x="45.3" y="453" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="48.35" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::partition_snapshot_flat_reader&lt;memtable&amp;&gt; (47 samples, 0.89%; +0.04%)</title><rect x="546.4" y="469" width="10.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="549.42" y="479.5" ></text>
</g>
<g >
<title>service::storage_proxy::get_live_sorted_endpoints (88 samples, 1.66%; 0.00%)</title><rect x="1069.7" y="549" width="19.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1072.73" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::allocate_aligned (10 samples, 0.19%; -0.13%)</title><rect x="247.2" y="245" width="2.2" height="15.0" fill="rgb(136,136,255)" rx="2" ry="2" />
<text  x="250.20" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;nonwrapping_interval&lt;dht::ring_position&gt; &gt;::allocate (1 samples, 0.02%; +0.02%)</title><rect x="952.6" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="955.58" y="607.5" ></text>
</g>
<g >
<title>flat_mutation_reader::~flat_mutation_reader (2 samples, 0.04%; +0.02%)</title><rect x="479.7" y="549" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="482.73" y="559.5" ></text>
</g>
<g >
<title>seastar::memory::cpu_pages::try_foreign_free (1 samples, 0.02%; +0.02%)</title><rect x="702.7" y="661" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="705.71" y="671.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, cql3::statements::create_keyspace_statement*, std::default_delete&lt;cql3::statements::create_keyspace_statement&gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="62.0" y="549" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="65.02" y="559.5" ></text>
</g>
<g >
<title>std::hash&lt;gms::inet_address&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="737.6" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="591.5" ></text>
</g>
<g >
<title>intrusive_b::tree&lt;rows_entry, &amp;rows_entry::_link, rows_entry::tri_compare, 12ul, 20ul,  (1 samples, 0.02%; +0.02%)</title><rect x="268.8" y="309" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="271.76" y="319.5" ></text>
</g>
<g >
<title>seastar::shared_ptr_count_for&lt;cql3::statements::update_statement&gt;::shared_ptr_count_for&lt;cql3::statements::statement_type const&amp;, unsigned long, seastar::lw_shared_ptr&lt;schema const&gt;&amp;, std::unique_ptr&lt;cql3::attributes, std::default_delete&lt;cql3::attributes&gt; &gt;, cql3::cql_stats&amp;&gt; (1 samples, 0.02%; -0.02%)</title><rect x="72.5" y="613" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="75.47" y="623.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, auth::resource&gt;::_Tuple_impl&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const&amp;, auth::resource, void&gt; (1 samples, 0.02%; +0.02%)</title><rect x="75.4" y="629" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="78.36" y="639.5" ></text>
</g>
<g >
<title>std::visit&lt;overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; +0.02%)</title><rect x="683.1" y="629" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="686.14" y="639.5" ></text>
</g>
<g >
<title>_Unwind_Find_FDE (2 samples, 0.04%; 0.00%)</title><rect x="11.6" y="821" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="14.56" y="831.5" ></text>
</g>
<g >
<title>cql3::statements::update_statement::execute_operations_for_key (8 samples, 0.15%; 0.00%)</title><rect x="885.7" y="549" width="1.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="888.66" y="559.5" ></text>
</g>
<g >
<title>table::make_reader (2 samples, 0.04%; +0.04%)</title><rect x="578.4" y="581" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="581.44" y="591.5" ></text>
</g>
<g >
<title>cql3::restrictions::statement_restrictions::statement_restrictions (6 samples, 0.11%; 0.00%)</title><rect x="69.6" y="613" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="72.58" y="623.5" ></text>
</g>
<g >
<title>seastar::fair_queue::dispatch_requests (1 samples, 0.02%; +0.02%)</title><rect x="1167.3" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1170.32" y="703.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;*, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="48.5" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="51.46" y="463.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="24.2" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="27.23" y="463.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;flat_mutation_reader::impl::consume&lt;stable_flattened_mutations_consumer&lt;compact_for_query&lt; (11 samples, 0.21%; -0.04%)</title><rect x="345.5" y="501" width="2.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="348.46" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.02%; -0.02%)</title><rect x="1094.6" y="549" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1097.63" y="559.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::emplace_mutation_fragment (5 samples, 0.09%; +0.02%)</title><rect x="204.1" y="453" width="1.1" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="207.07" y="463.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;position_in_partition&gt;::_M_reset (2 samples, 0.04%; +0.04%)</title><rect x="610.4" y="517" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="613.45" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;sstables::large_data_type, std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt;, std::allocator&lt;std::pair&lt;sstables::large_data_type const, sstables::large_data_stats_entry&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;sstables::large_data_type&gt;, std::hash&lt;sstables::large_data_type&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::at (1 samples, 0.02%; 0.00%)</title><rect x="80.9" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.92" y="511.5" ></text>
</g>
<g >
<title>skip_empty_fragments&lt;managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="944.8" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="947.80" y="559.5" ></text>
</g>
<g >
<title>seastar::noncopyable_function&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;  (1,019 samples, 19.20%; +0.15%)</title><rect x="893.2" y="661" width="226.6" height="15.0" fill="rgb(255,126,126)" rx="2" ry="2" />
<text  x="896.22" y="671.5" >seastar::noncopyable_function..</text>
</g>
<g >
<title>service::digest_read_resolver::response_count (1 samples, 0.02%; +0.02%)</title><rect x="732.0" y="613" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="735.05" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.04%; -0.08%)</title><rect x="1056.6" y="501" width="0.5" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1059.62" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="511.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="58.7" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="61.69" y="527.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.02%; +0.02%)</title><rect x="747.2" y="645" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="750.17" y="655.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (2 samples, 0.04%; -0.04%)</title><rect x="97.6" y="629" width="0.4" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="100.59" y="639.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (2 samples, 0.04%; +0.04%)</title><rect x="1105.5" y="549" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1108.52" y="559.5" ></text>
</g>
<g >
<title>seastar::schedule (1 samples, 0.02%; -0.02%)</title><rect x="1137.1" y="709" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1140.09" y="719.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.09%; 0.00%)</title><rect x="464.6" y="549" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="467.62" y="559.5" ></text>
</g>
<g >
<title>mutation_reader_merger::mutation_reader_merger (50 samples, 0.94%; +0.08%)</title><rect x="484.0" y="517" width="11.1" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="486.96" y="527.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::close (1 samples, 0.02%; +0.02%)</title><rect x="611.1" y="549" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="614.12" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;1ul, fragmented_temporary_buffer::view, managed_bytes_basic_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="916.3" y="469" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="919.34" y="479.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::~partition_snapshot_flat_reader (1 samples, 0.02%; 0.00%)</title><rect x="1166.2" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1169.21" y="591.5" ></text>
</g>
<g >
<title>nonwrapping_interval&lt;dht::ring_position&gt;::make_singular (2 samples, 0.04%; 0.00%)</title><rect x="884.1" y="549" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="887.11" y="559.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cql3::expr::expression::impl, std::default_delete&lt;cql3::expr::expression::impl&gt; &gt;::operator= (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;mutation_querier&gt;::_M_reset (1 samples, 0.02%; 0.00%)</title><rect x="468.6" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="471.62" y="607.5" ></text>
</g>
<g >
<title>seastar::memory::allocate (10 samples, 0.19%; -0.08%)</title><rect x="1024.8" y="437" width="2.2" height="15.0" fill="rgb(168,168,255)" rx="2" ry="2" />
<text  x="1027.83" y="447.5" ></text>
</g>
<g >
<title>seastar::sharded&lt;database&gt;::get_local_service (2 samples, 0.04%; +0.04%)</title><rect x="1044.4" y="485" width="0.4" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1047.39" y="495.5" ></text>
</g>
<g >
<title>reader_permit::impl::signal (8 samples, 0.15%; 0.00%)</title><rect x="439.3" y="437" width="1.8" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="442.27" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;&amp;, antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;*&gt;::operator[] (1 samples, 0.02%; +0.02%)</title><rect x="58.0" y="373" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="61.02" y="383.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (11 samples, 0.21%; +0.02%)</title><rect x="863.4" y="581" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="866.43" y="591.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;reader_permit::impl&gt;::~shared_ptr (1 samples, 0.02%; -0.04%)</title><rect x="574.9" y="437" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="577.88" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.02%; +0.02%)</title><rect x="22.0" y="405" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="25.00" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;nonwrapping_interval&lt;clustering_key_prefix&gt;, std::allocator&lt;nonwrapping_interval&lt;clustering_key_prefix&gt; &gt; &gt;::~vector (6 samples, 0.11%; +0.06%)</title><rect x="558.7" y="517" width="1.3" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="561.65" y="527.5" ></text>
</g>
<g >
<title>boost::intrusive::bstree_algorithms&lt;boost::intrusive::rbtree_node_traits&lt;void*, false&gt; &gt;::clear_and_dispose&lt;boost::intrusive::detail::node_disposer&lt;current_deleter&lt;range_tombstone_entry&gt; (1 samples, 0.02%; +0.02%)</title><rect x="609.6" y="469" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="612.56" y="479.5" ></text>
</g>
<g >
<title>std::__detail::__variant::_Copy_ctor_base&lt;false, cql3::expr::conjunction, cql3::expr::binary_operator, cql3::expr::column_value, cql3::expr::token, cql3::expr::unresolved_identifier, cql3::expr::column_mutation_attribute, cql3::expr::function_call, cql3::expr::cast, cql3::expr::field_selection, cql3::expr::null, cql3::expr::bind_variable, cql3::expr::untyped_constant, cql3::expr::constant, cql3::expr::tuple_constructor, cql3::expr::collection_constructor, cql3::expr::usertype_constructor&gt;::_Copy_ctor_base (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="485" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.68" y="495.5" ></text>
</g>
<g >
<title>fmt::v7::detail::int_writer&lt;fmt::v7::detail::buffer_appender&lt;char&gt;, char, unsigned long&gt;::on_dec (1 samples, 0.02%; +0.02%)</title><rect x="79.1" y="821" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="82.14" y="831.5" ></text>
</g>
<g >
<title>bound_view::from_range_start&lt;nonwrapping_interval&gt; (3 samples, 0.06%; +0.02%)</title><rect x="270.1" y="325" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="273.10" y="335.5" ></text>
</g>
<g >
<title>managed_bytes_basic_view&lt; (4 samples, 0.08%; +0.08%)</title><rect x="408.1" y="357" width="0.9" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="411.15" y="367.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::at&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt; &gt; (24 samples, 0.45%; 0.00%)</title><rect x="786.7" y="581" width="5.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="789.74" y="591.5" ></text>
</g>
<g >
<title>service::abstract_write_response_handler::delay&lt;service::abstract_write_response_handler::signal (2 samples, 0.04%; 0.00%)</title><rect x="737.6" y="645" width="0.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="740.61" y="655.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::rpc::tuple&lt;seastar::foreign_ptr&lt;seastar::lw_shared_ptr&lt;query::result&gt; &gt;, cache_temperature&gt; &gt;::then_wrapped_common&lt;true, void, service::abstract_read_executor::make_data_requests (1 samples, 0.02%; +0.02%)</title><rect x="1002.6" y="533" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1005.60" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_header::_List_node_header (2 samples, 0.04%; +0.04%)</title><rect x="500.6" y="485" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="503.63" y="495.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::do_fill_buffer (387 samples, 7.29%; -0.06%)</title><rect x="200.3" y="469" width="86.0" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="203.29" y="479.5" >partition_..</text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, keyspace&gt;, sstring_hash, sstring_eq, std::allocator&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; const, keyspace&gt; &gt; &gt;::find&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (1 samples, 0.02%; 0.00%)</title><rect x="73.1" y="581" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="76.13" y="591.5" ></text>
</g>
<g >
<title>cql3_parser::CqlParser::cident (15 samples, 0.28%; +0.04%)</title><rect x="39.6" y="549" width="3.3" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="42.57" y="559.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.02%; 0.00%)</title><rect x="54.7" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="57.68" y="463.5" ></text>
</g>
<g >
<title>logalloc::allocating_section::guard::~guard (1 samples, 0.02%; 0.00%)</title><rect x="544.2" y="469" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="547.20" y="479.5" ></text>
</g>
<g >
<title>basic_atomic_cell_view&lt; (1 samples, 0.02%; +0.02%)</title><rect x="376.1" y="389" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="379.14" y="399.5" ></text>
</g>
<g >
<title>seastar::lw_shared_ptr&lt;utils::loading_shared_values&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt;, utils::timestamped_val&lt;enum_set&lt;super_enum&lt;auth::permission,  (1 samples, 0.02%; 0.00%)</title><rect x="827.6" y="405" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="830.64" y="415.5" ></text>
</g>
<g >
<title>dht::tri_compare (2 samples, 0.04%; -0.02%)</title><rect x="529.3" y="485" width="0.5" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="532.31" y="495.5" ></text>
</g>
<g >
<title>service::client_state::ensure_has_permission (152 samples, 2.86%; -0.06%)</title><rect x="801.9" y="565" width="33.7" height="15.0" fill="rgb(178,178,255)" rx="2" ry="2" />
<text  x="804.85" y="575.5" >se..</text>
</g>
<g >
<title>ser::writer_of_std__optional__qr_cell&lt;bytes_ostream&gt;::write (1 samples, 0.02%; -0.04%)</title><rect x="383.0" y="389" width="0.3" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="386.03" y="399.5" ></text>
</g>
<g >
<title>auth::data_resource_view::table (1 samples, 0.02%; -0.02%)</title><rect x="826.3" y="325" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="829.31" y="335.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (1 samples, 0.02%; +0.02%)</title><rect x="337.9" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="340.90" y="623.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;range_tombstone, std::allocator&lt;range_tombstone&gt; &gt;::_M_initialize_map (20 samples, 0.38%; +0.08%)</title><rect x="584.9" y="581" width="4.4" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="587.88" y="591.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="40.2" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="43.23" y="495.5" ></text>
</g>
<g >
<title>mutation_partition::lower_bound (1 samples, 0.02%; -0.04%)</title><rect x="290.6" y="421" width="0.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="293.55" y="431.5" ></text>
</g>
<g >
<title>std::__equal&lt;true&gt;::equal&lt;signed char&gt; (1 samples, 0.02%; 0.00%)</title><rect x="756.5" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="759.50" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;, antlr3::DefaultAllocPolicy::AllocatorType&lt;antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt; &gt; &gt;::at (3 samples, 0.06%; 0.00%)</title><rect x="44.7" y="421" width="0.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="47.68" y="431.5" ></text>
</g>
<g >
<title>single_node_cql_env::local_qp (2 samples, 0.04%; +0.04%)</title><rect x="866.3" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="869.32" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;auth::resource_kind, std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;auth::resource_kind const, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;auth::resource_kind&gt;, std::hash&lt;auth::resource_kind&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1 samples, 0.02%; +0.02%)</title><rect x="75.6" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="78.58" y="623.5" ></text>
</g>
<g >
<title>seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;::finally&lt;single_node_cql_env::execute_prepared_with_qo (2 samples, 0.04%; +0.04%)</title><rect x="750.9" y="661" width="0.5" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="753.95" y="671.5" ></text>
</g>
<g >
<title>partition_version_ref::partition_version_ref (1 samples, 0.02%; +0.02%)</title><rect x="1121.1" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1124.09" y="351.5" ></text>
</g>
<g >
<title>seastar::metrics::impl::metric_groups_impl::add_metric (1 samples, 0.02%; 0.00%)</title><rect x="17.3" y="501" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="20.34" y="511.5" ></text>
</g>
<g >
<title>read_page&lt;(anonymous namespace)::mutation_query_result_builder&gt; (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="517" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (1 samples, 0.02%; 0.00%)</title><rect x="1160.9" y="693" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1163.88" y="703.5" ></text>
</g>
<g >
<title>auth::resource::resource (4 samples, 0.08%; 0.00%)</title><rect x="797.2" y="581" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="800.19" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;seastar::shared_ptr&lt;cql3::column_identifier_raw&gt;, std::unique_ptr&lt;cql3::operation::raw_update, std::default_delete&lt;cql3::operation::raw_update&gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="47.6" y="501" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="50.57" y="511.5" ></text>
</g>
<g >
<title>mutation_fragment_merger&lt;mutation_reader_merger&gt;::fetch (5 samples, 0.09%; 0.00%)</title><rect x="880.1" y="677" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="883.11" y="687.5" ></text>
</g>
<g >
<title>flat_mutation_reader::consume_in_thread&lt;sstables::sstable_writer, flat_mutation_reader::no_filter&gt; (12 samples, 0.23%; 0.00%)</title><rect x="79.6" y="725" width="2.6" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="82.58" y="735.5" ></text>
</g>
<g >
<title>service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="517" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;utils::UUID, std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt;, std::allocator&lt;std::pair&lt;utils::UUID const, seastar::lw_shared_ptr&lt;table&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;utils::UUID&gt;, std::hash&lt;utils::UUID&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (3 samples, 0.06%; -0.02%)</title><rect x="785.8" y="549" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="788.85" y="559.5" ></text>
</g>
<g >
<title>query::consume_page&lt; (578 samples, 10.89%; +0.08%)</title><rect x="339.9" y="597" width="128.5" height="15.0" fill="rgb(255,168,168)" rx="2" ry="2" />
<text  x="342.90" y="607.5" >query::consume_p..</text>
</g>
<g >
<title>std::construct_at&lt;mutation_fragment, schema const&amp;, reader_permit&amp;, partition_start&gt; (18 samples, 0.34%; 0.00%)</title><rect x="550.0" y="437" width="4.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="552.98" y="447.5" ></text>
</g>
<g >
<title>std::__find_if&lt;gms::inet_address*, __gnu_cxx::__ops::_Iter_pred&lt;std::unary_negate&lt;std::binder1st&lt;std::_Mem_fn&lt;bool  (3 samples, 0.06%; 0.00%)</title><rect x="1084.8" y="501" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1087.85" y="511.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::getToken (1 samples, 0.02%; 0.00%)</title><rect x="53.6" y="405" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="56.57" y="415.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take (1 samples, 0.02%; +0.02%)</title><rect x="778.5" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="781.51" y="623.5" ></text>
</g>
<g >
<title>antlr3::CommonToken&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::set_type (1 samples, 0.02%; 0.00%)</title><rect x="28.0" y="453" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="31.01" y="463.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::add_more_objects (4 samples, 0.08%; +0.06%)</title><rect x="995.5" y="469" width="0.9" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="998.48" y="479.5" ></text>
</g>
<g >
<title>antlr3::CommonTokenStream&lt;antlr3::Traits&lt;cql3_parser::CqlLexer, cql3_parser::CqlParser, antlr3::CustomTraitsBase, antlr3::Empty&gt; &gt;::skipOffTokenChannels (1 samples, 0.02%; -0.02%)</title><rect x="53.8" y="421" width="0.2" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="56.79" y="431.5" ></text>
</g>
<g >
<title>mutation_partition::append_clustered_row (1 samples, 0.02%; 0.00%)</title><rect x="1124.4" y="421" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1127.42" y="431.5" ></text>
</g>
<g >
<title>dht::murmur3_partitioner::get_token (2 samples, 0.04%; 0.00%)</title><rect x="1130.2" y="373" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1133.20" y="383.5" ></text>
</g>
<g >
<title>cql3::statements::modification_statement::execute_without_condition (30 samples, 0.57%; -0.04%)</title><rect x="881.7" y="629" width="6.6" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="884.66" y="639.5" ></text>
</g>
<g >
<title>query::partition_slice::~partition_slice (1 samples, 0.02%; 0.00%)</title><rect x="1112.9" y="597" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1115.86" y="607.5" ></text>
</g>
<g >
<title>scanning_reader::fill_buffer_from_delegate (1 samples, 0.02%; 0.00%)</title><rect x="106.0" y="197" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="109.04" y="207.5" ></text>
</g>
<g >
<title>row::compact_and_expire (81 samples, 1.53%; -0.02%)</title><rect x="417.5" y="421" width="18.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="420.49" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%; -0.02%)</title><rect x="487.5" y="485" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="490.51" y="495.5" ></text>
</g>
<g >
<title>seastar::reactor::add_task (1 samples, 0.02%; +0.02%)</title><rect x="781.8" y="549" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="784.85" y="559.5" ></text>
</g>
<g >
<title>operator delete (7 samples, 0.13%; 0.00%)</title><rect x="625.6" y="613" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="628.57" y="623.5" ></text>
</g>
<g >
<title>utils::phased_barrier::operation::~operation (3 samples, 0.06%; 0.00%)</title><rect x="104.7" y="693" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="107.70" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;std::default_delete&lt;cql3::operation::raw_update&gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="48.0" y="341" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="51.01" y="351.5" ></text>
</g>
<g >
<title>service::storage_proxy::query_partition_key_range_concurrent (1 samples, 0.02%; 0.00%)</title><rect x="977.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="980.03" y="495.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::clear (4 samples, 0.08%; +0.02%)</title><rect x="377.9" y="373" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="380.92" y="383.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;partition_key&gt;::_Optional_payload_base (5 samples, 0.09%; 0.00%)</title><rect x="955.2" y="549" width="1.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="958.24" y="559.5" ></text>
</g>
<g >
<title>cql3::column_identifier_raw::prepare (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="245" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="255.5" ></text>
</g>
<g >
<title>seastar::internal::promise_base::promise_base (1 samples, 0.02%; +0.02%)</title><rect x="1129.8" y="453" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="1132.76" y="463.5" ></text>
</g>
<g >
<title>partition_snapshot_flat_reader&lt;false, partition_snapshot_read_accounter&gt;::lsa_partition_reader::reset_state (69 samples, 1.30%; +0.06%)</title><rect x="287.2" y="453" width="15.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="290.22" y="463.5" ></text>
</g>
<g >
<title>seastar::reactor::do_run (4,877 samples, 91.88%; -0.04%)</title><rect x="84.5" y="741" width="1084.2" height="15.0" fill="rgb(189,189,255)" rx="2" ry="2" />
<text  x="87.47" y="751.5" >seastar::reactor::do_run</text>
</g>
<g >
<title>syscall-0 (1 samples, 0.02%; 0.00%)</title><rect x="1189.8" y="853" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1192.78" y="863.5" ></text>
</g>
<g >
<title>compact_radix_tree::tree&lt;cell_and_hash, unsigned int&gt;::leaf_node::free (10 samples, 0.19%; +0.02%)</title><rect x="447.9" y="421" width="2.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="450.94" y="431.5" ></text>
</g>
<g >
<title>query::querier_base::close (1 samples, 0.02%; 0.00%)</title><rect x="120.0" y="661" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="123.04" y="671.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (1 samples, 0.02%; +0.02%)</title><rect x="42.2" y="309" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="45.23" y="319.5" ></text>
</g>
<g >
<title>seastar::basic_semaphore&lt;seastar::semaphore_default_exception_factory, std::chrono::_V2::steady_clock&gt;::signal (1 samples, 0.02%; 0.00%)</title><rect x="1167.8" y="677" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1170.77" y="687.5" ></text>
</g>
<g >
<title>seastar::futurize&lt;seastar::future&lt;utils::small_vector&lt;service::storage_proxy::unique_response_handler, 1ul&gt; &gt; &gt;::invoke&lt;service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;, service::storage_proxy::mutate_prepare&lt;boost::iterator_range&lt;__gnu_cxx::__normal_iterator&lt;mutation*, std::vector&lt;mutation, std::allocator&lt;mutation&gt; &gt; &gt; &gt;&amp;&gt; (13 samples, 0.24%; 0.00%)</title><rect x="1131.5" y="485" width="2.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1134.53" y="495.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::then_impl&lt;service::abstract_read_executor::execute (2 samples, 0.04%; 0.00%)</title><rect x="719.2" y="661" width="0.4" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="722.16" y="671.5" ></text>
</g>
<g >
<title>tracking_allocator&lt;mutation_fragment&gt;::deallocate (8 samples, 0.15%; -0.02%)</title><rect x="331.9" y="517" width="1.8" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="334.90" y="527.5" ></text>
</g>
<g >
<title>cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="959.5" y="565" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.47" y="575.5" ></text>
</g>
<g >
<title>seastar::shared_ptr&lt;cql3::metadata const&gt;::~shared_ptr (1 samples, 0.02%; +0.02%)</title><rect x="94.0" y="693" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="97.03" y="703.5" ></text>
</g>
<g >
<title>boost::intrusive::circular_list_algorithms&lt;boost::intrusive::list_node_traits&lt;void*&gt; &gt;::swap_nodes (3 samples, 0.06%; -0.02%)</title><rect x="752.7" y="597" width="0.7" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="755.72" y="607.5" ></text>
</g>
<g >
<title>sstables::mc::writer::write_row_body (3 samples, 0.06%; 0.00%)</title><rect x="80.7" y="597" width="0.7" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="83.69" y="607.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;seastar::internal::monostate&gt;::take_value (1 samples, 0.02%; +0.02%)</title><rect x="77.6" y="709" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="80.58" y="719.5" ></text>
</g>
<g >
<title>seastar::basic_sstring&lt;signed char, unsigned int, 31u, false&gt;::basic_sstring (1 samples, 0.02%; 0.00%)</title><rect x="68.5" y="533" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="71.47" y="543.5" ></text>
</g>
<g >
<title>flat_mutation_reader::close (65 samples, 1.22%; +0.06%)</title><rect x="596.7" y="549" width="14.4" height="15.0" fill="rgb(255,178,178)" rx="2" ry="2" />
<text  x="599.67" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;seastar::shared_ptr&lt;cql3::operation&gt;, std::allocator&lt;seastar::shared_ptr&lt;cql3::operation&gt; &gt; &gt;::~vector (2 samples, 0.04%; +0.02%)</title><rect x="677.6" y="661" width="0.4" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="680.58" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;nonwrapping_interval&lt;dht::token&gt;, std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;nonwrapping_interval&lt;dht::token&gt; const, std::vector&lt;utils::UUID, std::allocator&lt;utils::UUID&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::hash&lt;nonwrapping_interval&lt;dht::token&gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (3 samples, 0.06%; +0.04%)</title><rect x="1094.2" y="565" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="1097.19" y="575.5" ></text>
</g>
<g >
<title>mutation_fragment::mutation_fragment (3 samples, 0.06%; +0.04%)</title><rect x="548.2" y="437" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="551.20" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;nonwrapping_interval&lt;dht::ring_position&gt; const*, nonwrapping_interval&lt;dht::ring_position&gt;*&gt; (7 samples, 0.13%; +0.02%)</title><rect x="954.8" y="581" width="1.6" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="957.80" y="591.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::noncopyable_function&lt;seastar::future&lt;void&gt;  (36 samples, 0.68%; -0.02%)</title><rect x="1120.0" y="661" width="8.0" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="1122.97" y="671.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;cql3::attributes::raw, std::default_delete&lt;cql3::attributes::raw&gt; &gt;::__uniq_ptr_impl (1 samples, 0.02%; 0.00%)</title><rect x="60.9" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="63.91" y="527.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;cql3::expr::binary_operator const*, overloaded_functor&lt;cql3::expr::find_atom&lt;cql3::expr::has_token (1 samples, 0.02%; 0.00%)</title><rect x="959.5" y="581" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="962.47" y="591.5" ></text>
</g>
<g >
<title>std::optional&lt;reader_concurrency_semaphore::entry&gt;::optional&lt;reader_concurrency_semaphore::entry, true&gt; (6 samples, 0.11%; 0.00%)</title><rect x="1032.4" y="357" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1035.39" y="367.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;seastar::future&lt;void&gt;, seastar::sharded&lt;cql3::query_processor&gt;::invoke_on_all (1 samples, 0.02%; 0.00%)</title><rect x="78.9" y="613" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="81.91" y="623.5" ></text>
</g>
<g >
<title>seastar::expiring_fifo&lt;reader_concurrency_semaphore::entry, reader_concurrency_semaphore::expiry_handler, seastar::lowres_clock&gt;::drop_expired_front (4 samples, 0.08%; +0.02%)</title><rect x="132.3" y="629" width="0.9" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="135.27" y="639.5" ></text>
</g>
<g >
<title>cql3::expr::expression::operator= (1 samples, 0.02%; 0.00%)</title><rect x="47.1" y="517" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="50.13" y="527.5" ></text>
</g>
<g >
<title>seastar::promise&lt;void&gt;::promise (5 samples, 0.09%; 0.00%)</title><rect x="131.2" y="597" width="1.1" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="134.16" y="607.5" ></text>
</g>
<g >
<title>cdc::do_update_streams_description (1 samples, 0.02%; 0.00%)</title><rect x="100.7" y="709" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="103.70" y="719.5" ></text>
</g>
<g >
<title>remove_or_mark_as_unique_owner (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="437" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="447.5" ></text>
</g>
<g >
<title>cql3::statements::prepared_statement::checked_weak_from_this (6 samples, 0.11%; 0.00%)</title><rect x="752.5" y="629" width="1.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="755.50" y="639.5" ></text>
</g>
<g >
<title>boost::intrusive::hashtable_impl&lt;boost::intrusive::bhtraits&lt;utils::loading_shared_values&lt;cql3::authorized_prepared_statements_cache_key, utils::timestamped_val&lt;seastar::checked_ptr&lt;seastar::weak_ptr&lt;cql3::statements::prepared_statement&gt;, seastar::default_null_deref_action&gt;, cql3::authorized_prepared_statements_cache_key, cql3::authorized_prepared_statements_cache_size, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater&gt;, std::hash&lt;cql3::authorized_prepared_statements_cache_key&gt;, std::equal_to&lt;cql3::authorized_prepared_statements_cache_key&gt;, cql3::authorized_prepared_statements_cache::authorized_prepared_statements_cache_stats_updater, 256ul&gt;::entry, boost::intrusive::unordered_node_traits&lt;void*, true, false&gt;,  (19 samples, 0.36%; +0.02%)</title><rect x="773.8" y="565" width="4.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="776.84" y="575.5" ></text>
</g>
<g >
<title>managed_bytes::managed_bytes (1 samples, 0.02%; 0.00%)</title><rect x="926.8" y="501" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="929.79" y="511.5" ></text>
</g>
<g >
<title>std::_Optional_base_impl&lt;query::querier&lt; (7 samples, 0.13%; 0.00%)</title><rect x="656.5" y="629" width="1.5" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="659.47" y="639.5" ></text>
</g>
<g >
<title>allocation_strategy::construct&lt;partition_version, mutation_partition&gt; (1 samples, 0.02%; 0.00%)</title><rect x="16.2" y="725" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="19.22" y="735.5" ></text>
</g>
<g >
<title>operator new (4 samples, 0.08%; -0.02%)</title><rect x="925.9" y="533" width="0.9" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="928.90" y="543.5" ></text>
</g>
<g >
<title>__tls_init (2 samples, 0.04%; +0.02%)</title><rect x="504.6" y="533" width="0.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="507.63" y="543.5" ></text>
</g>
<g >
<title>seastar::future&lt;void&gt;::get_promise (1 samples, 0.02%; +0.02%)</title><rect x="747.8" y="661" width="0.3" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="750.83" y="671.5" ></text>
</g>
<g >
<title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt;, utils::UUID&gt;, utils::tuple_hash, string_pair_eq, std::allocator&lt;std::pair&lt;std::pair&lt;seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt;, seastar::basic_sstring&lt;char, unsigned int, 15u, true&gt; &gt; const, utils::UUID&gt; &gt; &gt;::find&lt;std::pair&lt;std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, std::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.02%; +0.02%)</title><rect x="73.8" y="597" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="76.80" y="607.5" ></text>
</g>
<g >
<title>std::_Optional_payload_base&lt;interval_bound&lt;clustering_key_prefix&gt; &gt;::_Optional_payload_base (3 samples, 0.06%; +0.04%)</title><rect x="161.4" y="597" width="0.7" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="164.39" y="607.5" ></text>
</g>
<g >
<title>seastar::inheriting_concrete_execution_stage&lt;seastar::future&lt;seastar::shared_ptr&lt;cql_transport::messages::result_message&gt; &gt;, cql3::statements::modification_statement const*, service::storage_proxy&amp;, service::query_state&amp;, cql3::query_options const&amp;&gt;::operator (1 samples, 0.02%; 0.00%)</title><rect x="18.9" y="645" width="0.2" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="21.89" y="655.5" ></text>
</g>
<g >
<title>atomic_cell_type::make_live&lt;ser::buffer_view&lt;bytes_ostream::fragment_iterator&gt; &gt; (4 samples, 0.08%; 0.00%)</title><rect x="1123.1" y="421" width="0.9" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="1126.09" y="431.5" ></text>
</g>
<g >
<title>list_reader_selector::create_new_readers (3 samples, 0.06%; +0.02%)</title><rect x="485.7" y="501" width="0.7" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="488.73" y="511.5" ></text>
</g>
<g >
<title>_ZSt5applyIZN7seastar8internal12do_with_implISt4pairIN4auth17role_or_anonymousENS4_8resourceEEZNS4_17permissions_cache3getERKS5_RKS6_E3$_0JEEEDaOT_OT0_DpOT1_EUlDpOT_E_St5tupleIJOS7_EEEDcSF_SH_ (11 samples, 0.21%; +0.02%)</title><rect x="810.7" y="469" width="2.5" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="813.75" y="479.5" ></text>
</g>
<g >
<title>seastar::future_state&lt;boost::iterator_range&lt;mutation_fragment*&gt; &gt;::take_value (1 samples, 0.02%; -0.02%)</title><rect x="315.4" y="517" width="0.3" height="15.0" fill="rgb(199,199,255)" rx="2" ry="2" />
<text  x="318.45" y="527.5" ></text>
</g>
<g >
<title>bplus::tree&lt;long, intrusive_array&lt;cache_entry&gt;, dht::raw_token_less_comparator, 16ul,  (4 samples, 0.08%; +0.04%)</title><rect x="570.7" y="501" width="0.8" height="15.0" fill="rgb(255,189,189)" rx="2" ry="2" />
<text  x="573.66" y="511.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;seastar::internal::do_with_state&lt;std::tuple&lt;std::pair&lt;auth::role_or_anonymous, auth::resource&gt; &gt;, seastar::future&lt;enum_set&lt;super_enum&lt;auth::permission,  (9 samples, 0.17%; 0.00%)</title><rect x="829.2" y="469" width="2.0" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="832.20" y="479.5" ></text>
</g>
<g >
<title>seastar::thread_context::main (1 samples, 0.02%; 0.00%)</title><rect x="714.0" y="485" width="0.3" height="15.0" fill="rgb(255,255,255)" rx="2" ry="2" />
<text  x="717.04" y="495.5" ></text>
</g>
<g >
<title>auth::resource::resource (1 samples, 0.02%; +0.02%)</title><rect x="785.0" y="613" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="787.96" y="623.5" ></text>
</g>
<g >
<title>seastar::memory::small_pool::trim_free_list (1 samples, 0.02%; +0.02%)</title><rect x="666.9" y="693" width="0.2" height="15.0" fill="rgb(255,199,199)" rx="2" ry="2" />
<text  x="669.91" y="703.5" ></text>
</g>
</g>
</svg>
